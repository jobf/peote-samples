(function ($hx_exports, $global) { "use strict"; var $hx_script = (function (exports, global) { (function ($hx_exports, $global) { "use strict";
$hx_exports["lime"] = $hx_exports["lime"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = "lime.app.IModule";
lime_app_IModule.__isInterface__ = true;
var lime_app_Module = function() {
	this.onExit = new lime_app__$Event_$Int_$Void();
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = "lime.app.Module";
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	__class__: lime_app_Module
};
var lime__$internal_backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_media_AudioManager.init();
	this.accelerometer = lime_system_Sensor.registerSensor(lime_system_SensorType.ACCELEROMETER,0);
};
$hxClasses["lime._internal.backend.html5.HTML5Application"] = lime__$internal_backend_html5_HTML5Application;
lime__$internal_backend_html5_HTML5Application.__name__ = "lime._internal.backend.html5.HTML5Application";
lime__$internal_backend_html5_HTML5Application.prototype = {
	convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) {
			return keyCode + 32;
		}
		switch(keyCode) {
		case 12:
			return 1073741980;
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 19:
			return 1073741896;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 41:
			return 1073741943;
		case 43:
			return 1073741940;
		case 44:
			return 1073741894;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 91:
			return 1073742051;
		case 92:
			return 1073742055;
		case 93:
			return 1073742055;
		case 95:
			return 1073742106;
		case 96:
			return 1073741922;
		case 97:
			return 1073741913;
		case 98:
			return 1073741914;
		case 99:
			return 1073741915;
		case 100:
			return 1073741916;
		case 101:
			return 1073741917;
		case 102:
			return 1073741918;
		case 103:
			return 1073741919;
		case 104:
			return 1073741920;
		case 105:
			return 1073741921;
		case 106:
			return 1073741909;
		case 107:
			return 1073741911;
		case 108:
			return 1073741923;
		case 109:
			return 1073741910;
		case 110:
			return 1073741923;
		case 111:
			return 1073741908;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 127:
			return 1073741931;
		case 128:
			return 1073741932;
		case 129:
			return 1073741933;
		case 130:
			return 1073741934;
		case 131:
			return 1073741935;
		case 132:
			return 1073741936;
		case 133:
			return 1073741937;
		case 134:
			return 1073741938;
		case 135:
			return 1073741939;
		case 144:
			return 1073741907;
		case 145:
			return 1073741895;
		case 160:
			return 94;
		case 161:
			return 33;
		case 163:
			return 35;
		case 164:
			return 36;
		case 166:
			return 1073742094;
		case 167:
			return 1073742095;
		case 168:
			return 1073742097;
		case 169:
			return 41;
		case 170:
			return 42;
		case 171:
			return 96;
		case 172:
			return 1073741898;
		case 173:
			return 45;
		case 174:
			return 1073741953;
		case 175:
			return 1073741952;
		case 176:
			return 1073742082;
		case 177:
			return 1073742083;
		case 178:
			return 1073742084;
		case 179:
			return 1073742085;
		case 180:
			return 1073742089;
		case 181:
			return 1073742086;
		case 182:
			return 1073741953;
		case 183:
			return 1073741952;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 193:
			return 63;
		case 194:
			return 1073741923;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		case 223:
			return 96;
		case 224:
			return 1073742051;
		case 226:
			return 92;
		}
		return keyCode;
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		var o = window;
		if(Object.prototype.hasOwnProperty.call(o,"Accelerometer")) {
			window.addEventListener("devicemotion",$bind(this,this.handleSensorEvent),false);
		}
		
			if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
				CanvasRenderingContext2D.prototype.isPointInStroke = function (path, x, y) {
					return false;
				};
			}
			if (!CanvasRenderingContext2D.prototype.isPointInPath) {
				CanvasRenderingContext2D.prototype.isPointInPath = function (path, x, y) {
					return false;
				};
			}

			if ('performance' in window == false) {
				window.performance = {};
			}

			if ('now' in window.performance == false) {
				var offset = Date.now();
				if (performance.timing && performance.timing.navigationStart) {
					offset = performance.timing.navigationStart
				}
				window.performance.now = function now() {
					return Date.now() - offset;
				}
			}

			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}

			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); },
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};

			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};

			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,handleApplicationEvent: function(__) {
		var _g = 0;
		var _g1 = this.parent.__windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.__backend.updateSize();
		}
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			var _g = 0;
			var _g1 = this.parent.__windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				this.parent.onUpdate.dispatch(this.deltaTime | 0);
				if($window.context != null) {
					$window.onRender.dispatch($window.context);
				}
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
			} else {
				this.nextUpdate = this.currentUpdate - this.currentUpdate % this.framePeriod + this.framePeriod;
			}
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.__window != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null ? event.keyCode : event.which);
			var modifier = (event.shiftKey ? 3 : 0) | (event.ctrlKey ? 192 : 0) | (event.altKey ? 768 : 0) | (event.metaKey ? 3072 : 0);
			if(event.type == "keydown") {
				this.parent.__window.onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyDown.canceled && event.cancelable) {
					event.preventDefault();
				}
			} else {
				this.parent.__window.onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyUp.canceled && event.cancelable) {
					event.preventDefault();
				}
			}
		}
	}
	,handleSensorEvent: function(event) {
		this.accelerometer.onUpdate.dispatch(event.accelerationIncludingGravity.x,event.accelerationIncludingGravity.y,event.accelerationIncludingGravity.z);
	}
	,handleWindowEvent: function(event) {
		if(this.parent.__window != null) {
			switch(event.type) {
			case "beforeunload":
				break;
			case "blur":
				if(!this.hidden) {
					this.parent.__window.onFocusOut.dispatch();
					this.parent.__window.onDeactivate.dispatch();
					this.hidden = true;
				}
				break;
			case "focus":
				if(this.hidden) {
					this.parent.__window.onFocusIn.dispatch();
					this.parent.__window.onActivate.dispatch();
					this.hidden = false;
				}
				break;
			case "resize":
				this.parent.__window.__backend.handleResizeEvent(event);
				break;
			case "visibilitychange":
				if(window.document.hidden) {
					if(!this.hidden) {
						this.parent.__window.onFocusOut.dispatch();
						this.parent.__window.onDeactivate.dispatch();
						this.hidden = true;
					}
				} else if(this.hidden) {
					this.parent.__window.onFocusIn.dispatch();
					this.parent.__window.onActivate.dispatch();
					this.hidden = false;
				}
				break;
			}
		}
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) {
			return;
		}
		var id;
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g = 0;
		var _g1 = devices.length;
		while(_g < _g1) {
			var i = _g++;
			id = i;
			data = devices[id];
			if(data == null) {
				continue;
			}
			if(!this.gameDeviceCache.h.hasOwnProperty(id)) {
				cache = new lime__$internal_backend_html5_GameDeviceData();
				cache.id = id;
				cache.connected = data.connected;
				var _g2 = 0;
				var _g3 = data.buttons.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					cache.buttons.push(data.buttons[i1].value);
				}
				var _g4 = 0;
				var _g5 = data.axes.length;
				while(_g4 < _g5) {
					var i2 = _g4++;
					cache.axes.push(data.axes[i2]);
				}
				if(data.mapping == "standard") {
					cache.isGamepad = true;
				}
				this.gameDeviceCache.h[id] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(id);
					if(cache.isGamepad) {
						lime_ui_Gamepad.__connect(id);
					}
				}
			}
			cache = this.gameDeviceCache.h[id];
			joystick = lime_ui_Joystick.devices.h[id];
			gamepad = lime_ui_Gamepad.devices.h[id];
			if(data.connected) {
				var button;
				var value;
				var _g6 = 0;
				var _g7 = data.buttons.length;
				while(_g6 < _g7) {
					var i3 = _g6++;
					value = data.buttons[i3].value;
					if(value != cache.buttons[i3]) {
						if(i3 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(4,value);
							}
						} else if(i3 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(5,value);
							}
						} else {
							if(value > 0) {
								joystick.onButtonDown.dispatch(i3);
							} else {
								joystick.onButtonUp.dispatch(i3);
							}
							if(gamepad != null) {
								switch(i3) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) {
									gamepad.onButtonDown.dispatch(button);
								} else {
									gamepad.onButtonUp.dispatch(button);
								}
							}
						}
						cache.buttons[i3] = value;
					}
				}
				var _g8 = 0;
				var _g9 = data.axes.length;
				while(_g8 < _g9) {
					var i4 = _g8++;
					if(data.axes[i4] != cache.axes[i4]) {
						joystick.onAxisMove.dispatch(i4,data.axes[i4]);
						if(gamepad != null) {
							gamepad.onAxisMove.dispatch(i4,data.axes[i4]);
						}
						cache.axes[i4] = data.axes[i4];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(id);
				lime_ui_Gamepad.__disconnect(id);
			}
		}
	}
	,__class__: lime__$internal_backend_html5_HTML5Application
};
var lime_app_Application = function() {
	this.onCreateWindow = new lime_app__$Event_$lime_$ui_$Window_$Void();
	this.onUpdate = new lime_app__$Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) {
		lime_app_Application.current = this;
	}
	this.meta = new haxe_ds_StringMap();
	this.modules = [];
	this.__windowByID = new haxe_ds_IntMap();
	this.__windows = [];
	this.__backend = new lime__$internal_backend_html5_HTML5Application(this);
	this.__registerLimeModule(this);
	this.__preloader = new lime_utils_Preloader();
	this.__preloader.onProgress.add($bind(this,this.onPreloadProgress));
	this.__preloader.onComplete.add($bind(this,this.onPreloadComplete));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = "lime.app.Application";
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	createWindow: function(attributes) {
		var $window = this.__createWindow(attributes);
		this.__addWindow($window);
		return $window;
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.__backend.exec();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,x,y) {
	}
	,onKeyDown: function(keyCode,modifier) {
	}
	,onKeyUp: function(keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(x,y,button) {
	}
	,onMouseMove: function(x,y) {
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
	}
	,onMouseWheel: function(deltaX,deltaY,deltaMode) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTextEdit: function(text,start,length) {
	}
	,onTextInput: function(text) {
	}
	,onTouchCancel: function(touch) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function() {
	}
	,onWindowClose: function() {
	}
	,onWindowCreate: function() {
	}
	,onWindowDeactivate: function() {
	}
	,onWindowDropFile: function(file) {
	}
	,onWindowEnter: function() {
	}
	,onWindowExpose: function() {
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowLeave: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowMinimize: function() {
	}
	,onWindowResize: function(width,height) {
	}
	,onWindowRestore: function() {
	}
	,render: function(context) {
	}
	,update: function(deltaTime) {
	}
	,__addWindow: function($window) {
		if($window != null) {
			this.__windows.push($window);
			this.__windowByID.h[$window.id] = $window;
			var _g = $bind(this,this.__onWindowClose);
			var window1 = $window;
			var tmp = function() {
				_g(window1);
			};
			$window.onClose.add(tmp,false,-10000);
			if(this.__window == null) {
				this.__window = $window;
				$window.onActivate.add($bind(this,this.onWindowActivate));
				$window.onRenderContextLost.add($bind(this,this.onRenderContextLost));
				$window.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
				$window.onDeactivate.add($bind(this,this.onWindowDeactivate));
				$window.onDropFile.add($bind(this,this.onWindowDropFile));
				$window.onEnter.add($bind(this,this.onWindowEnter));
				$window.onExpose.add($bind(this,this.onWindowExpose));
				$window.onFocusIn.add($bind(this,this.onWindowFocusIn));
				$window.onFocusOut.add($bind(this,this.onWindowFocusOut));
				$window.onFullscreen.add($bind(this,this.onWindowFullscreen));
				$window.onKeyDown.add($bind(this,this.onKeyDown));
				$window.onKeyUp.add($bind(this,this.onKeyUp));
				$window.onLeave.add($bind(this,this.onWindowLeave));
				$window.onMinimize.add($bind(this,this.onWindowMinimize));
				$window.onMouseDown.add($bind(this,this.onMouseDown));
				$window.onMouseMove.add($bind(this,this.onMouseMove));
				$window.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
				$window.onMouseUp.add($bind(this,this.onMouseUp));
				$window.onMouseWheel.add($bind(this,this.onMouseWheel));
				$window.onMove.add($bind(this,this.onWindowMove));
				$window.onRender.add($bind(this,this.render));
				$window.onResize.add($bind(this,this.onWindowResize));
				$window.onRestore.add($bind(this,this.onWindowRestore));
				$window.onTextEdit.add($bind(this,this.onTextEdit));
				$window.onTextInput.add($bind(this,this.onTextInput));
				this.onWindowCreate();
			}
			this.onCreateWindow.dispatch($window);
		}
	}
	,__createWindow: function(attributes) {
		var $window = new lime_ui_Window(this,attributes);
		if($window.id == -1) {
			return null;
		}
		return $window;
	}
	,__registerLimeModule: function(application) {
		application.onUpdate.add($bind(this,this.update));
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onExit.add($bind(this,this.__onModuleExit),false,0);
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onGamepadConnect(gamepad1);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		var joystick = lime_ui_Joystick.devices.iterator();
		while(joystick.hasNext()) {
			var joystick1 = joystick.next();
			this.__onJoystickConnect(joystick1);
		}
		lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.add($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,__removeWindow: function($window) {
		if($window != null && this.__windowByID.h.hasOwnProperty($window.id)) {
			if(this.__window == $window) {
				this.__window = null;
			}
			HxOverrides.remove(this.__windows,$window);
			this.__windowByID.remove($window.id);
			$window.close();
			if(this.__windows.length == 0) {
				lime_system_System.exit(0);
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var _g = $bind(this,this.onGamepadAxisMove);
		var gamepad1 = gamepad;
		var tmp = function(axis,value) {
			_g(gamepad1,axis,value);
		};
		gamepad.onAxisMove.add(tmp);
		var _g1 = $bind(this,this.onGamepadButtonDown);
		var gamepad2 = gamepad;
		var tmp = function(button) {
			_g1(gamepad2,button);
		};
		gamepad.onButtonDown.add(tmp);
		var _g2 = $bind(this,this.onGamepadButtonUp);
		var gamepad3 = gamepad;
		var tmp = function(button) {
			_g2(gamepad3,button);
		};
		gamepad.onButtonUp.add(tmp);
		var _g3 = $bind(this,this.onGamepadDisconnect);
		var gamepad4 = gamepad;
		var tmp = function() {
			_g3(gamepad4);
		};
		gamepad.onDisconnect.add(tmp);
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		var _g = $bind(this,this.onJoystickAxisMove);
		var joystick1 = joystick;
		var tmp = function(axis,value) {
			_g(joystick1,axis,value);
		};
		joystick.onAxisMove.add(tmp);
		var _g1 = $bind(this,this.onJoystickButtonDown);
		var joystick2 = joystick;
		var tmp = function(button) {
			_g1(joystick2,button);
		};
		joystick.onButtonDown.add(tmp);
		var _g2 = $bind(this,this.onJoystickButtonUp);
		var joystick3 = joystick;
		var tmp = function(button) {
			_g2(joystick3,button);
		};
		joystick.onButtonUp.add(tmp);
		var _g3 = $bind(this,this.onJoystickDisconnect);
		var joystick4 = joystick;
		var tmp = function() {
			_g3(joystick4);
		};
		joystick.onDisconnect.add(tmp);
		var _g4 = $bind(this,this.onJoystickHatMove);
		var joystick5 = joystick;
		var tmp = function(hat,position) {
			_g4(joystick5,hat,position);
		};
		joystick.onHatMove.add(tmp);
		var _g5 = $bind(this,this.onJoystickTrackballMove);
		var joystick6 = joystick;
		var tmp = function(trackball,x,y) {
			_g5(joystick6,trackball,x,y);
		};
		joystick.onTrackballMove.add(tmp);
	}
	,__onModuleExit: function(code) {
		this.__backend.exit();
	}
	,__onWindowClose: function($window) {
		if(this.__window == $window) {
			this.onWindowClose();
		}
		this.__removeWindow($window);
	}
	,__class__: lime_app_Application
});
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = "ApplicationMain";
ApplicationMain.main = function() {
	lime_system_System.__registerEntryPoint("Main",ApplicationMain.create);
};
ApplicationMain.create = function(config) {
	ManifestResources.init(config);
	var app = new Main();
	app.meta.h["build"] = "1";
	app.meta.h["company"] = "Sylvio Sell - maitag";
	app.meta.h["file"] = "Main";
	app.meta.h["name"] = "PeoteUi";
	app.meta.h["packageName"] = "peote.ui";
	app.meta.h["version"] = "0.8.0";
	var attributes = { allowHighDPI : false, alwaysOnTop : false, borderless : false, element : null, frameRate : 61, height : 0, hidden : false, maximized : false, minimized : false, parameters : { }, resizable : true, title : "PeoteUi", width : 0, x : null, y : null};
	attributes.context = { antialiasing : 0, background : 16777215, colorDepth : 32, depth : true, hardware : true, stencil : true, type : null, vsync : false};
	if(app.__window == null) {
		if(config != null) {
			var _g = 0;
			var _g1 = Reflect.fields(config);
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(attributes,field)) {
					attributes[field] = Reflect.field(config,field);
				} else if(Object.prototype.hasOwnProperty.call(attributes.context,field)) {
					attributes.context[field] = Reflect.field(config,field);
				}
			}
		}
	}
	app.createWindow(attributes);
	var _g = 0;
	var _g1 = ManifestResources.preloadLibraries;
	while(_g < _g1.length) {
		var library = _g1[_g];
		++_g;
		app.__preloader.addLibrary(library);
	}
	var _g = 0;
	var _g1 = ManifestResources.preloadLibraryNames;
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		app.__preloader.addLibraryName(name);
	}
	app.__preloader.load();
	ApplicationMain.start(app);
};
ApplicationMain.start = function(app) {
	var result = app.exec();
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var json2object_reader_BaseParser = function(errors,putils,errorType) {
	this.errors = errors;
	this.putils = putils;
	this.errorType = errorType;
};
$hxClasses["json2object.reader.BaseParser"] = json2object_reader_BaseParser;
json2object_reader_BaseParser.__name__ = "json2object.reader.BaseParser";
json2object_reader_BaseParser.prototype = {
	fromJson: function(jsonString,filename) {
		if(filename == null) {
			filename = "";
		}
		this.putils = new json2object_PositionUtils(jsonString);
		this.errors = [];
		try {
			var json = new hxjsonast_Parser(jsonString,filename).doParse();
			this.loadJson(json);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof hxjsonast_Error)) {
				var e = _g1;
				this.errors.push(json2object_Error.ParserError(e.message,this.putils.convertPosition(e.pos)));
			} else {
				throw _g;
			}
		}
		return this.value;
	}
	,loadJson: function(json,variable) {
		if(variable == null) {
			variable = "";
		}
		var pos = this.putils.convertPosition(json.pos);
		var _g = json.value;
		switch(_g._hx_index) {
		case 0:
			var s = _g.s;
			this.loadJsonString(s,pos,variable);
			break;
		case 1:
			var n = _g.s;
			this.loadJsonNumber(n,pos,variable);
			break;
		case 2:
			var o = _g.fields;
			this.loadJsonObject(o,pos,variable);
			break;
		case 3:
			var a = _g.values;
			this.loadJsonArray(a,pos,variable);
			break;
		case 4:
			var b = _g.b;
			this.loadJsonBool(b,pos,variable);
			break;
		case 5:
			this.loadJsonNull(pos,variable);
			break;
		}
		return this.value;
	}
	,loadJsonNull: function(pos,variable) {
		this.onIncorrectType(pos,variable);
	}
	,loadJsonString: function(s,pos,variable) {
		this.onIncorrectType(pos,variable);
	}
	,loadJsonNumber: function(f,pos,variable) {
		this.onIncorrectType(pos,variable);
	}
	,loadJsonUInt: function(f,pos,variable,value) {
		var uint = 0;
		f = StringTools.trim(f);
		var neg = f.charAt(0) == "-";
		if(neg) {
			f = HxOverrides.substr(f,1,null);
		}
		var hex = StringTools.startsWith(f,"0x");
		if(hex) {
			f = HxOverrides.substr(f,2,null);
		}
		var base = hex ? 16 : 10;
		var pow = 1;
		var i = f.length - 1;
		while(i >= 0) {
			var cur = hex ? Std.parseInt("0x" + f.charAt(i)) : Std.parseInt(f.charAt(i));
			if(cur == null) {
				this.onIncorrectType(pos,variable);
				return value;
			}
			uint = uint + pow * cur;
			pow *= base;
			--i;
		}
		return uint;
	}
	,loadJsonInt: function(f,pos,variable,value) {
		if(Std.parseInt(f) != null && Std.parseInt(f) == parseFloat(f)) {
			return Std.parseInt(f);
		}
		this.onIncorrectType(pos,variable);
		return value;
	}
	,loadJsonFloat: function(f,pos,variable,value) {
		if(Std.parseInt(f) != null) {
			return parseFloat(f);
		}
		this.onIncorrectType(pos,variable);
		return value;
	}
	,loadJsonBool: function(b,pos,variable) {
		this.onIncorrectType(pos,variable);
	}
	,loadJsonArray: function(a,pos,variable) {
		this.onIncorrectType(pos,variable);
	}
	,loadJsonArrayValue: function(a,loadJsonFn,variable) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < a.length) {
			var j = a[_g1];
			++_g1;
			var tmp;
			try {
				tmp = loadJsonFn(j,variable);
			} catch( _g2 ) {
				haxe_NativeStackTrace.lastError = _g2;
				var _g3 = haxe_Exception.caught(_g2).unwrap();
				if(js_Boot.__instanceof(_g3,json2object_InternalError)) {
					var e = _g3;
					if(e != json2object_InternalError.ParsingThrow) {
						throw haxe_Exception.thrown(e);
					}
					continue;
				} else {
					throw _g2;
				}
			}
			_g.push(tmp);
		}
		return _g;
	}
	,loadJsonObject: function(o,pos,variable) {
		this.onIncorrectType(pos,variable);
	}
	,loadObjectField: function(loadJsonFn,field,name,assigned,defaultValue,pos) {
		try {
			var ret = loadJsonFn(field.value,field.name);
			this.mapSet(assigned,name,true);
			return ret;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(js_Boot.__instanceof(_g1,json2object_InternalError)) {
				var e = _g1;
				if(e != json2object_InternalError.ParsingThrow) {
					throw haxe_Exception.thrown(e);
				}
			} else {
				var e = _g1;
				this.errors.push(json2object_Error.CustomFunctionException(e,pos));
			}
		}
		return defaultValue;
	}
	,objectSetupAssign: function(assigned,keys,values) {
		var _g = 0;
		var _g1 = keys.length;
		while(_g < _g1) {
			var i = _g++;
			this.mapSet(assigned,keys[i],values[i]);
		}
	}
	,objectErrors: function(assigned,pos) {
		var lastPos = this.putils.convertPosition(new hxjsonast_Position(pos.file,pos.max - 1,pos.max - 1));
		var h = assigned.h;
		var s_h = h;
		var s_keys = Object.keys(h);
		var s_length = s_keys.length;
		var s_current = 0;
		while(s_current < s_length) {
			var s = s_keys[s_current++];
			if(!assigned.h[s]) {
				this.errors.push(json2object_Error.UninitializedVariable(s,lastPos));
			}
		}
	}
	,onIncorrectType: function(pos,variable) {
		this.parsingThrow();
	}
	,parsingThrow: function() {
		if(this.errorType != 0) {
			throw haxe_Exception.thrown(json2object_InternalError.ParsingThrow);
		}
	}
	,mapSet: function(map,key,value) {
		map.h[key] = value;
	}
	,__class__: json2object_reader_BaseParser
};
var JsonParser_$1 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_1"] = JsonParser_$1;
JsonParser_$1.__name__ = "JsonParser_1";
JsonParser_$1.__super__ = json2object_reader_BaseParser;
JsonParser_$1.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"String",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonString: function(s,pos,variable) {
		this.value = s;
	}
	,__class__: JsonParser_$1
});
var JsonParser_$10 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_10"] = JsonParser_$10;
JsonParser_$10.__name__ = "JsonParser_10";
JsonParser_$10.__super__ = json2object_reader_BaseParser;
JsonParser_$10.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ height : Float, base : Float }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["base","height"],[false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "base":
				this.value.base = this.loadObjectField(($_=new JsonParser_$8(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"base",assigned,this.value.base,pos);
				break;
			case "height":
				this.value.height = this.loadObjectField(($_=new JsonParser_$8(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"height",assigned,this.value.height,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { base : new JsonParser_$8([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), height : new JsonParser_$8([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$10
});
var JsonParser_$11 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_11"] = JsonParser_$11;
JsonParser_$11.__name__ = "JsonParser_11";
JsonParser_$11.__super__ = json2object_reader_BaseParser;
JsonParser_$11.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ y : Int, x : Int }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["x","y"],[false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "x":
				this.value.x = this.loadObjectField(($_=new JsonParser_$12(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"x",assigned,this.value.x,pos);
				break;
			case "y":
				this.value.y = this.loadObjectField(($_=new JsonParser_$12(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"y",assigned,this.value.y,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { x : new JsonParser_$12([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), y : new JsonParser_$12([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$11
});
var JsonParser_$12 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
	this.value = 0;
};
$hxClasses["JsonParser_12"] = JsonParser_$12;
JsonParser_$12.__name__ = "JsonParser_12";
JsonParser_$12.__super__ = json2object_reader_BaseParser;
JsonParser_$12.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Int",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNumber: function(f,pos,variable) {
		this.value = this.loadJsonInt(f,pos,variable,this.value);
	}
	,__class__: JsonParser_$12
});
var JsonParser_$13 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
	this.value = 0;
};
$hxClasses["JsonParser_13"] = JsonParser_$13;
JsonParser_$13.__name__ = "JsonParser_13";
JsonParser_$13.__super__ = json2object_reader_BaseParser;
JsonParser_$13.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"UInt",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNumber: function(f,pos,variable) {
		this.value = this.loadJsonUInt(f,pos,variable,this.value);
	}
	,__class__: JsonParser_$13
});
var JsonParser_$14 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_14"] = JsonParser_$14;
JsonParser_$14.__name__ = "JsonParser_14";
JsonParser_$14.__super__ = json2object_reader_BaseParser;
JsonParser_$14.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ ?tiles : Null<{ y : Int, x : Int }>, slot : { width : Int, height : Int }, range : peote.text.Range, ?line : Null<{ height : Float, base : Float }>, image : String, ?data : Null<String> }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["data","image","line","range","slot","tiles"],[true,false,true,false,false,true]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "data":
				this.value.data = this.loadObjectField(($_=new JsonParser_$16(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"data",assigned,this.value.data,pos);
				break;
			case "image":
				this.value.image = this.loadObjectField(($_=new JsonParser_$1(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"image",assigned,this.value.image,pos);
				break;
			case "line":
				this.value.line = this.loadObjectField(($_=new JsonParser_$18(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"line",assigned,this.value.line,pos);
				break;
			case "range":
				this.value.range = this.loadObjectField(($_=new JsonParser_$19(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"range",assigned,this.value.range,pos);
				break;
			case "slot":
				this.value.slot = this.loadObjectField(($_=new JsonParser_$20(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"slot",assigned,this.value.slot,pos);
				break;
			case "tiles":
				this.value.tiles = this.loadObjectField(($_=new JsonParser_$22(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"tiles",assigned,this.value.tiles,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { data : new JsonParser_$16([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), image : new JsonParser_$1([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), line : new JsonParser_$18([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), range : new JsonParser_$19([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), slot : new JsonParser_$20([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), tiles : new JsonParser_$22([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$14
});
var JsonParser_$16 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_16"] = JsonParser_$16;
JsonParser_$16.__name__ = "JsonParser_16";
JsonParser_$16.__super__ = json2object_reader_BaseParser;
JsonParser_$16.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"String",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonString: function(s,pos,variable) {
		this.value = s;
	}
	,__class__: JsonParser_$16
});
var JsonParser_$18 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_18"] = JsonParser_$18;
JsonParser_$18.__name__ = "JsonParser_18";
JsonParser_$18.__super__ = json2object_reader_BaseParser;
JsonParser_$18.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ height : Float, base : Float }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["base","height"],[false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "base":
				this.value.base = this.loadObjectField(($_=new JsonParser_$8(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"base",assigned,this.value.base,pos);
				break;
			case "height":
				this.value.height = this.loadObjectField(($_=new JsonParser_$8(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"height",assigned,this.value.height,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { base : new JsonParser_$8([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), height : new JsonParser_$8([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$18
});
var JsonParser_$19 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_19"] = JsonParser_$19;
JsonParser_$19.__name__ = "JsonParser_19";
JsonParser_$19.__super__ = json2object_reader_BaseParser;
JsonParser_$19.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"peote.text.Range",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["min","max"],[false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "max":
				this.value.max = this.loadObjectField(($_=new JsonParser_$12(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"max",assigned,this.value.max,pos);
				break;
			case "min":
				this.value.min = this.loadObjectField(($_=new JsonParser_$12(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"min",assigned,this.value.min,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		var value = Object.create(peote_text_Range.prototype);
		value.min = new JsonParser_$12([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
		value.max = new JsonParser_$12([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
		return value;
	}
	,__class__: JsonParser_$19
});
var JsonParser_$20 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_20"] = JsonParser_$20;
JsonParser_$20.__name__ = "JsonParser_20";
JsonParser_$20.__super__ = json2object_reader_BaseParser;
JsonParser_$20.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ width : Int, height : Int }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["height","width"],[false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "height":
				this.value.height = this.loadObjectField(($_=new JsonParser_$12(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"height",assigned,this.value.height,pos);
				break;
			case "width":
				this.value.width = this.loadObjectField(($_=new JsonParser_$12(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"width",assigned,this.value.width,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { height : new JsonParser_$12([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), width : new JsonParser_$12([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$20
});
var JsonParser_$22 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_22"] = JsonParser_$22;
JsonParser_$22.__name__ = "JsonParser_22";
JsonParser_$22.__super__ = json2object_reader_BaseParser;
JsonParser_$22.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"{ y : Int, x : Int }",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["x","y"],[false,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "x":
				this.value.x = this.loadObjectField(($_=new JsonParser_$12(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"x",assigned,this.value.x,pos);
				break;
			case "y":
				this.value.y = this.loadObjectField(($_=new JsonParser_$12(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"y",assigned,this.value.y,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		return { x : new JsonParser_$12([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1))), y : new JsonParser_$12([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)))};
	}
	,__class__: JsonParser_$22
});
var JsonParser_$4 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_4"] = JsonParser_$4;
JsonParser_$4.__name__ = "JsonParser_4";
JsonParser_$4.__super__ = json2object_reader_BaseParser;
JsonParser_$4.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Bool",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonBool: function(b,pos,variable) {
		this.value = b;
	}
	,__class__: JsonParser_$4
});
var JsonParser_$5 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_5"] = JsonParser_$5;
JsonParser_$5.__name__ = "JsonParser_5";
JsonParser_$5.__super__ = json2object_reader_BaseParser;
JsonParser_$5.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"peote.text.FontConfig",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonObject: function(o,pos,variable) {
		var assigned = new haxe_ds_StringMap();
		this.objectSetupAssign(assigned,["packed","distancefield","kerning","width","height","color","bgColor","line","tiles","rangeSplitSize","ranges"],[true,true,true,true,true,true,true,true,true,true,false]);
		this.value = this.getAuto();
		var _g = 0;
		while(_g < o.length) {
			var field = o[_g];
			++_g;
			switch(field.name) {
			case "bgColor":
				this.value.bgColor = this.loadObjectField(($_=new JsonParser_$9(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"bgColor",assigned,this.value.bgColor,pos);
				break;
			case "color":
				this.value.color = this.loadObjectField(($_=new JsonParser_$9(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"color",assigned,this.value.color,pos);
				break;
			case "distancefield":
				this.value.distancefield = this.loadObjectField(($_=new JsonParser_$7(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"distancefield",assigned,this.value.distancefield,pos);
				break;
			case "height":
				this.value.height = this.loadObjectField(($_=new JsonParser_$8(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"height",assigned,this.value.height,pos);
				break;
			case "kerning":
				this.value.kerning = this.loadObjectField(($_=new JsonParser_$4(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"kerning",assigned,this.value.kerning,pos);
				break;
			case "line":
				this.value.line = this.loadObjectField(($_=new JsonParser_$10(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"line",assigned,this.value.line,pos);
				break;
			case "packed":
				this.value.packed = this.loadObjectField(($_=new JsonParser_$7(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"packed",assigned,this.value.packed,pos);
				break;
			case "rangeSplitSize":
				this.value.rangeSplitSize = this.loadObjectField(($_=new JsonParser_$12(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"rangeSplitSize",assigned,this.value.rangeSplitSize,pos);
				break;
			case "ranges":
				this.value.ranges = this.loadObjectField(($_=new JsonParser_$6(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"ranges",assigned,this.value.ranges,pos);
				break;
			case "tiles":
				this.value.tiles = this.loadObjectField(($_=new JsonParser_$11(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"tiles",assigned,this.value.tiles,pos);
				break;
			case "width":
				this.value.width = this.loadObjectField(($_=new JsonParser_$8(this.errors,this.putils,1),$bind($_,$_.loadJson)),field,"width",assigned,this.value.width,pos);
				break;
			default:
				this.errors.push(json2object_Error.UnknownVariable(field.name,this.putils.convertPosition(field.namePos)));
			}
		}
		this.objectErrors(assigned,pos);
	}
	,getAuto: function() {
		var value = Object.create(peote_text_FontConfig.prototype);
		value.packed = false;
		value.distancefield = false;
		value.kerning = null;
		value.width = 16;
		value.height = 16;
		value.color = -1;
		value.bgColor = 0;
		value.line = null;
		value.tiles = null;
		value.rangeSplitSize = 4096;
		value.ranges = new JsonParser_$6([],this.putils,0).loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position("",0,1)));
		return value;
	}
	,__class__: JsonParser_$5
});
var JsonParser_$6 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_6"] = JsonParser_$6;
JsonParser_$6.__name__ = "JsonParser_6";
JsonParser_$6.__super__ = json2object_reader_BaseParser;
JsonParser_$6.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Array<{ ?tiles : Null<{ y : Int, x : Int }>, slot : { width : Int, height : Int }, range : peote.text.Range, ?line : Null<{ height : Float, base : Float }>, image : String, ?data : Null<String> }>",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNull: function(pos,variable) {
		this.value = null;
	}
	,loadJsonArray: function(a,pos,variable) {
		this.value = this.loadJsonArrayValue(a,($_=new JsonParser_$14(this.errors,this.putils,2),$bind($_,$_.loadJson)),variable);
	}
	,__class__: JsonParser_$6
});
var JsonParser_$7 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
	this.value = false;
};
$hxClasses["JsonParser_7"] = JsonParser_$7;
JsonParser_$7.__name__ = "JsonParser_7";
JsonParser_$7.__super__ = json2object_reader_BaseParser;
JsonParser_$7.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Bool",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonBool: function(b,pos,variable) {
		this.value = b;
	}
	,__class__: JsonParser_$7
});
var JsonParser_$8 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
	this.value = 0;
};
$hxClasses["JsonParser_8"] = JsonParser_$8;
JsonParser_$8.__name__ = "JsonParser_8";
JsonParser_$8.__super__ = json2object_reader_BaseParser;
JsonParser_$8.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"Float",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNumber: function(f,pos,variable) {
		this.value = this.loadJsonFloat(f,pos,variable,this.value);
	}
	,__class__: JsonParser_$8
});
var JsonParser_$9 = function(errors,putils,errorType) {
	if(errorType == null) {
		errorType = 0;
	}
	json2object_reader_BaseParser.call(this,errors,putils,errorType);
};
$hxClasses["JsonParser_9"] = JsonParser_$9;
JsonParser_$9.__name__ = "JsonParser_9";
JsonParser_$9.__super__ = json2object_reader_BaseParser;
JsonParser_$9.prototype = $extend(json2object_reader_BaseParser.prototype,{
	onIncorrectType: function(pos,variable) {
		this.errors.push(json2object_Error.IncorrectType(variable,"peote.view.Color",pos));
		json2object_reader_BaseParser.prototype.onIncorrectType.call(this,pos,variable);
	}
	,loadJsonNumber: function(f,pos,variable) {
		var tmp = new JsonParser_$13(this.errors,this.putils,0);
		var _this = this.putils;
		this.value = tmp.loadJson(new hxjsonast_Json(hxjsonast_JsonValue.JNumber(f),new hxjsonast_Position(pos.file,pos.min - 1,pos.max - 1)),variable);
	}
	,__class__: JsonParser_$9
});
var peote_ui_style_interfaces_StyleID = function() { };
$hxClasses["peote.ui.style.interfaces.StyleID"] = peote_ui_style_interfaces_StyleID;
peote_ui_style_interfaces_StyleID.__name__ = "peote.ui.style.interfaces.StyleID";
peote_ui_style_interfaces_StyleID.__isInterface__ = true;
peote_ui_style_interfaces_StyleID.prototype = {
	__class__: peote_ui_style_interfaces_StyleID
};
var peote_ui_style_interfaces_FontStyle = function() { };
$hxClasses["peote.ui.style.interfaces.FontStyle"] = peote_ui_style_interfaces_FontStyle;
peote_ui_style_interfaces_FontStyle.__name__ = "peote.ui.style.interfaces.FontStyle";
peote_ui_style_interfaces_FontStyle.__isInterface__ = true;
peote_ui_style_interfaces_FontStyle.__interfaces__ = [peote_ui_style_interfaces_StyleID];
var MyFontStyle = function(color,width,height,weight) {
	this.id = 0;
	this.weight = 0.5;
	this.height = 20;
	this.width = 18;
	this.color = 16711935;
	if(color != null) {
		this.color = color;
	}
	if(width != null) {
		this.width = width;
	}
	if(height != null) {
		this.height = height;
	}
	if(weight != null) {
		this.weight = weight;
	}
};
$hxClasses["MyFontStyle"] = MyFontStyle;
MyFontStyle.__name__ = "MyFontStyle";
MyFontStyle.__interfaces__ = [peote_ui_style_interfaces_FontStyle];
MyFontStyle.prototype = {
	getUUID: function() {
		return MyFontStyle.ID | this.id;
	}
	,isFontStyle: function() {
		return MyFontStyle.ID >= 2097152;
	}
	,__class__: MyFontStyle
};
var Main = function() {
	lime_app_Application.call(this);
};
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.__super__ = lime_app_Application;
Main.prototype = $extend(lime_app_Application.prototype,{
	onWindowCreate: function() {
		switch(this.__window.context.type) {
		case "opengl":case "opengles":case "webgl":
			try {
				this.startSample(this.__window);
			} catch( _g ) {
				var _ = haxe_Exception.caught(_g);
				haxe_Log.trace(haxe_CallStack.toString(haxe_CallStack.exceptionStack()),{ fileName : "src/Main.hx", lineNumber : 53, className : "Main", methodName : "onWindowCreate", customParams : [_]});
			}
			break;
		default:
			throw haxe_Exception.thrown("Sorry, only works with OpenGL.");
		}
	}
	,startSample: function($window) {
		new peote_text_Font_$_$Main_$MyFontStyle("assets/fonts/packed/hack/config.json").load($bind(this,this.onFontLoaded));
	}
	,onFontLoaded: function(font) {
		this.peoteView = new peote_view_PeoteView(this.__window);
		this.uiDisplay = new peote_ui_PeoteUIDisplay(20,20,1768,1200,255 + 167969024);
		this.peoteView.addDisplay(this.uiDisplay);
		var fontStyle = new MyFontStyle();
		var fontStyleInput = new MyFontStyle();
		fontStyleInput.color = -1431655681;
		var boxStyle = new peote_ui_style_BoxStyle(255);
		var color = 16711935;
		var borderColor = null;
		var borderSize = null;
		var borderRadius = null;
		var roundBorderStyle_color = 1717987071;
		var roundBorderStyle_borderColor = -2004317953;
		var roundBorderStyle_borderSize = 1.0;
		var roundBorderStyle_borderRadius = 6.0;
		var roundBorderStyle_id = 0;
		if(color != null) {
			roundBorderStyle_color = color;
		}
		if(borderColor != null) {
			roundBorderStyle_borderColor = borderColor;
		}
		if(borderSize != null) {
			roundBorderStyle_borderSize = borderSize;
		}
		if(borderRadius != null) {
			roundBorderStyle_borderRadius = borderRadius;
		}
		var textStyle = new peote_ui_style_TextStyleImpl(boxStyle,peote_ui_style_BoxStyle.createById(1,null,1717987071),peote_ui_style_BoxStyle.createById(2,null,-16776961));
		var button = new peote_ui_interactive_UITextLine_$_$Main_$MyFontStyle(0,300,{ width : 200},null,"generate",font,fontStyleInput,textStyle);
		this.uiDisplay.add(button);
		var input = new peote_ui_interactive_UITextPage_$_$Main_$MyFontStyle(0,325,null,null,"<EllipseShape \n\ttop=\"100\" \n\twidth=\"200\" \n\theight=\"50\" \n\tstrokeColor=\"0xFF0000\" strokeWidth=\"1\" \n\tfill=\"0xFF00FF00\">\n</EllipseShape>",font,fontStyle,textStyle);
		var f = function(t,e) {
			peote_ui_interactive_input2action_InputTextPage.focusElement = t;
			if(t.uiDisplay != null) {
				var _this = t.uiDisplay;
				if(_this.inputFocusElement != t) {
					peote_ui_PeoteUIDisplay.inputFocusUIDisplay = _this;
					if(_this.inputFocusElement != null) {
						_this.inputFocusElement.removeInputFocus();
					}
					_this.inputFocusElement = t;
				}
			}
			if(t.page != null && t.cursorStyle != null) {
				if(!t.cursorIsVisible) {
					if(t.cursorElement == null) {
						var addUpdate = t.isVisible;
						var _x = t.x + t.leftSpace;
						var _y = t.y + t.topSpace;
						var _width = t.width - t.leftSpace - t.rightSpace;
						var _height = t.height - t.topSpace - t.bottomSpace;
						if(t.masked) {
							if(t.maskX > t.leftSpace) {
								_x = t.x + t.maskX;
							}
							if(t.maskY > t.topSpace) {
								_y = t.y + t.maskY;
							}
							if(t.x + t.maskX + t.maskWidth < _x + _width) {
								_width = t.maskX + t.maskWidth + t.x - _x;
							}
							if(t.y + t.maskY + t.maskHeight < _y + _height) {
								_height = t.maskY + t.maskHeight + t.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = t.yOffset;
						var y_offset;
						if((t.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(t.vAlign) {
							case 4:
								y_offset = (t.height - t.topSpace - t.bottomSpace - t.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = t.height - t.topSpace - t.bottomSpace - t.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + t.topSpace;
						_width1 += 3;
						var page = t.page;
						var cx = Math.round(t.fontProgram.pageLineGetPositionAtChar(t.pageLine,page.x,page.xOffset,t.cursor));
						var cw = 2;
						var cy = Math.round(t.pageLine.y);
						var ch = Math.round(t.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						var z = t.z;
						var stylePos = t.uiDisplay.usedStyleID.indexOf(t.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(t.uiDisplay.autoAddStyles) {
								var _this = t.uiDisplay;
								var program = t.cursorProgram = t.cursorStyle.createStyleProgram();
								var styleId = t.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(t.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(t.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							t.cursorProgram = t.uiDisplay.usedStyleProgram[stylePos];
							if(t.cursorProgram == null) {
								var _this = t.uiDisplay;
								var program = t.cursorProgram = t.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						t.cursorElement = t.cursorProgram.createElementAt(t,cx,cy,cw,ch,mx,my,mw,mh,z,t.cursorStyle);
						if(addUpdate) {
							t.cursorProgram.addElement(t.cursorElement);
						}
					} else if(t.isVisible) {
						t.cursorProgram.addElement(t.cursorElement);
					}
				}
			}
			t.cursorIsVisible = true;
			t.startSelection(e);
		};
		if(f != null) {
			var _g = f;
			var a1 = input;
			input.pointerDown = function(a2) {
				_g(a1,a2);
			};
			if(input.hasClickEvent == 0) {
				input.addPickableClick();
			}
			input.hasClickEvent |= 1;
		} else if((input.hasMoveEvent & 1) > 0) {
			input.hasClickEvent &= -2;
			if(input.hasClickEvent == 0) {
				input.removePickableClick();
			}
			input.pointerDown = peote_ui_interactive_Interactive.noOperation;
		}
		var f = function(t,e) {
			t.stopSelection(e);
		};
		if(f != null) {
			var _g1 = f;
			var a11 = input;
			input.pointerUp = function(a2) {
				_g1(a11,a2);
			};
			if(input.hasClickEvent == 0) {
				input.addPickableClick();
			}
			input.hasClickEvent |= 2;
		} else if((input.hasMoveEvent & 2) > 0) {
			input.hasClickEvent &= -3;
			if(input.hasClickEvent == 0) {
				input.removePickableClick();
			}
			input.pointerUp = peote_ui_interactive_Interactive.noOperation;
		}
		this.uiDisplay.add(input);
		peote_ui_PeoteUIDisplay.registerEvents(this.__window);
	}
	,__class__: Main
});
var ManifestResources = function() { };
$hxClasses["ManifestResources"] = ManifestResources;
ManifestResources.__name__ = "ManifestResources";
ManifestResources.init = function(config) {
	ManifestResources.preloadLibraries = [];
	ManifestResources.preloadLibraryNames = [];
	ManifestResources.rootPath = null;
	if(config != null && Object.prototype.hasOwnProperty.call(config,"rootPath")) {
		ManifestResources.rootPath = Reflect.field(config,"rootPath");
		if(!StringTools.endsWith(ManifestResources.rootPath,"/")) {
			ManifestResources.rootPath += "/";
		}
	}
	if(ManifestResources.rootPath == null) {
		ManifestResources.rootPath = "./";
	}
	var bundle;
	var data = "{\"name\":null,\"assets\":\"aoy4:pathy44:assets%2Ffonts%2Fpacked%2Fhack%2Fgenerate.shy4:sizei1676y4:typey4:TEXTy2:idR1goR0y44:assets%2Ffonts%2Fpacked%2Fhack%2Fconfig.jsonR2i599R3R4R5R6goR0y43:assets%2Ffonts%2Fpacked%2Fhack%2Freadme.txtR2i191R3R4R5R7goR0y41:assets%2Ffonts%2Fpacked%2Fhack%2Fhack.pngR2i875346R3y5:IMAGER5R8goR0y41:assets%2Ffonts%2Fpacked%2Fhack%2Fhack.datR2i60984R3y6:BINARYR5R10gh\",\"rootPath\":null,\"version\":2,\"libraryArgs\":[],\"libraryType\":null}";
	var manifest = lime_utils_AssetManifest.parse(data,ManifestResources.rootPath);
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	lime_utils_Assets.registerLibrary("default",library);
	library = lime_utils_Assets.getLibrary("default");
	if(library != null) {
		ManifestResources.preloadLibraries.push(library);
	} else {
		ManifestResources.preloadLibraryNames.push("default");
	}
};
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var _$String_String_$Impl_$ = function() { };
$hxClasses["_String.String_Impl_"] = _$String_String_$Impl_$;
_$String_String_$Impl_$.__name__ = "_String.String_Impl_";
_$String_String_$Impl_$.fromCharCode = function(code) {
	return String.fromCodePoint(code);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__:true,__constructs__:null
	,CFunction: {_hx_name:"CFunction",_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Module",$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="FilePos",$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Method",$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="LocalFunction",$_.__params__ = ["v"],$_)
};
haxe_StackItem.__constructs__ = [haxe_StackItem.CFunction,haxe_StackItem.Module,haxe_StackItem.FilePos,haxe_StackItem.Method,haxe_StackItem.LocalFunction];
var haxe_CallStack = {};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
haxe_CallStack.exceptionStack = function(fullStack) {
	if(fullStack == null) {
		fullStack = false;
	}
	var eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
	return fullStack ? eStack : haxe_CallStack.subtract(eStack,haxe_CallStack.callStack());
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	var _g1 = stack;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.subtract = function(this1,stack) {
	var startIndex = -1;
	var i = -1;
	while(++i < this1.length) {
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var j = _g++;
			if(haxe_CallStack.equalItems(this1[i],stack[j])) {
				if(startIndex < 0) {
					startIndex = i;
				}
				++i;
				if(i >= this1.length) {
					break;
				}
			} else {
				startIndex = -1;
			}
		}
		if(startIndex >= 0) {
			break;
		}
	}
	if(startIndex >= 0) {
		return this1.slice(0,startIndex);
	} else {
		return this1;
	}
};
haxe_CallStack.equalItems = function(item1,item2) {
	if(item1 == null) {
		if(item2 == null) {
			return true;
		} else {
			return false;
		}
	} else {
		switch(item1._hx_index) {
		case 0:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 0) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 1) {
				var m2 = item2.m;
				var m1 = item1.m;
				return m1 == m2;
			} else {
				return false;
			}
			break;
		case 2:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 2) {
				var item21 = item2.s;
				var file2 = item2.file;
				var line2 = item2.line;
				var col2 = item2.column;
				var col1 = item1.column;
				var line1 = item1.line;
				var file1 = item1.file;
				var item11 = item1.s;
				if(file1 == file2 && line1 == line2 && col1 == col2) {
					return haxe_CallStack.equalItems(item11,item21);
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 3:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 3) {
				var class2 = item2.classname;
				var method2 = item2.method;
				var method1 = item1.method;
				var class1 = item1.classname;
				if(class1 == class2) {
					return method1 == method2;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 4) {
				var v2 = item2.v;
				var v1 = item1.v;
				return v1 == v2;
			} else {
				return false;
			}
			break;
		}
	}
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var s1 = s.s;
		var file = s.file;
		var line = s.line;
		var col = s.column;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var cname = s.classname;
		var meth = s.method;
		b.b += Std.string(cname == null ? "<unknown>" : cname);
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
	this.__skipStack = 0;
	var old = Error.prepareStackTrace;
	Error.prepareStackTrace = function(e) { return e.stack; }
	if(((native) instanceof Error)) {
		this.stack = native.stack;
	} else {
		var e = null;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,haxe_Exception);
			e = this;
		} else {
			e = new Error();
			if(typeof(e.stack) == "undefined") {
				try { throw e; } catch(_) {}
				this.__skipStack++;
			}
		}
		this.stack = e.stack;
	}
	Error.prepareStackTrace = old;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		e.__skipStack++;
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,__shiftStack: function() {
		this.__skipStack++;
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,get_stack: function() {
		var _g = this.__exceptionStack;
		if(_g == null) {
			var value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			var s = _g;
			return s;
		}
	}
	,setProperty: function(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	,__class__: haxe_Exception
	,__properties__: {get_native:"get_native",get_stack:"get_stack",get_message:"get_message"}
});
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_NativeStackTrace = function() { };
$hxClasses["haxe.NativeStackTrace"] = haxe_NativeStackTrace;
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.saveStack = function(e) {
	haxe_NativeStackTrace.lastError = e;
};
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.exceptionStack = function() {
	return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = this.buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw haxe_Exception.thrown("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw haxe_Exception.thrown("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw haxe_Exception.thrown("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			return cl;
		case 66:
			var name = this.unserialize();
			var e = this.resolver.resolveEnum(name);
			if(e == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			return e;
		case 67:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw haxe_Exception.thrown("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw haxe_Exception.thrown("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				h.h[s] = value;
			}
			this.pos++;
			return h;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			this.pos++;
			var index = this.readDigits();
			var _this = edecl.__constructs__;
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = _this[i]._hx_name;
			}
			var tag = result[index];
			if(tag == null) {
				throw haxe_Exception.thrown("Unknown enum index " + name + "@" + index);
			}
			var e = this.unserializeEnum(edecl,tag);
			this.cache.push(e);
			return e;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 112:
			return Infinity;
		case 113:
			var h = new haxe_ds_IntMap();
			this.cache.push(h);
			var buf = this.buf;
			var c = this.buf.charCodeAt(this.pos++);
			while(c == 58) {
				var i = this.readDigits();
				var value = this.unserialize();
				h.h[i] = value;
				c = this.buf.charCodeAt(this.pos++);
			}
			if(c != 104) {
				throw haxe_Exception.thrown("Invalid IntMap format");
			}
			return h;
		case 114:
			var n = this.readDigits();
			if(n < 0 || n >= this.cache.length) {
				throw haxe_Exception.thrown("Invalid reference");
			}
			return this.cache[n];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i < max) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c1 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c1 << 2 | c2 >> 4) & 255;
				if(rest == 3) {
					var c3 = codes[buf.charCodeAt(i++)];
					bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 120:
			throw haxe_Exception.thrown(this.unserialize());
		case 121:
			var len = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid string length");
			}
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
	this.__skipStack++;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = _$String_String_$Impl_$.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(+key);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += i1 == null ? "null" : "" + i1;
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,toString: function() {
		var s_b = "";
		var first = true;
		var l = this.h;
		s_b += "{";
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += ", ";
			}
			s_b += Std.string(Std.string(l.item));
			l = l.next;
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += Std.string(Std.string(i1));
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1.__id__]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.stringify = function(h) {
	var s = "{";
	var first = true;
	for (var key in h) {
		if (first) first = false; else s += ',';
		s += key + ' => ' + Std.string(h[key]);
	}
	return s + "}";
};
haxe_ds_StringMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,remove: function(key) {
		if(Object.prototype.hasOwnProperty.call(this.h,key)) {
			delete(this.h[key]);
			return true;
		} else {
			return false;
		}
	}
	,toString: function() {
		return haxe_ds_StringMap.stringify(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_exceptions_PosException = function(message,previous,pos) {
	haxe_Exception.call(this,message,previous);
	if(pos == null) {
		this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
	} else {
		this.posInfos = pos;
	}
	this.__skipStack++;
};
$hxClasses["haxe.exceptions.PosException"] = haxe_exceptions_PosException;
haxe_exceptions_PosException.__name__ = "haxe.exceptions.PosException";
haxe_exceptions_PosException.__super__ = haxe_Exception;
haxe_exceptions_PosException.prototype = $extend(haxe_Exception.prototype,{
	toString: function() {
		return "" + haxe_Exception.prototype.toString.call(this) + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
	,__class__: haxe_exceptions_PosException
});
var haxe_exceptions_NotImplementedException = function(message,previous,pos) {
	if(message == null) {
		message = "Not implemented";
	}
	haxe_exceptions_PosException.call(this,message,previous,pos);
	this.__skipStack++;
};
$hxClasses["haxe.exceptions.NotImplementedException"] = haxe_exceptions_NotImplementedException;
haxe_exceptions_NotImplementedException.__name__ = "haxe.exceptions.NotImplementedException";
haxe_exceptions_NotImplementedException.__super__ = haxe_exceptions_PosException;
haxe_exceptions_NotImplementedException.prototype = $extend(haxe_exceptions_PosException.prototype,{
	__class__: haxe_exceptions_NotImplementedException
});
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	readByte: function() {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Input.hx", lineNumber : 53, className : "haxe.io.Input", methodName : "readByte"});
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		if(this.len == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.prototype = {
	__class__: haxe_io_Path
};
var haxe_io_UInt8Array = {};
haxe_io_UInt8Array.fromBytes = function(bytes,bytePos,length) {
	if(bytePos == null) {
		bytePos = 0;
	}
	if(length == null) {
		length = bytes.length - bytePos;
	}
	return new Uint8Array(bytes.b.bufferValue,bytePos,length);
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_zip_ExtraField = $hxEnums["haxe.zip.ExtraField"] = { __ename__:true,__constructs__:null
	,FUnknown: ($_=function(tag,bytes) { return {_hx_index:0,tag:tag,bytes:bytes,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_._hx_name="FUnknown",$_.__params__ = ["tag","bytes"],$_)
	,FInfoZipUnicodePath: ($_=function(name,crc) { return {_hx_index:1,name:name,crc:crc,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_._hx_name="FInfoZipUnicodePath",$_.__params__ = ["name","crc"],$_)
	,FUtf8: {_hx_name:"FUtf8",_hx_index:2,__enum__:"haxe.zip.ExtraField",toString:$estr}
};
haxe_zip_ExtraField.__constructs__ = [haxe_zip_ExtraField.FUnknown,haxe_zip_ExtraField.FInfoZipUnicodePath,haxe_zip_ExtraField.FUtf8];
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__:true,__constructs__:null
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="Found",$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="NeedBit",$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="NeedBits",$_.__params__ = ["n","table"],$_)
};
haxe_zip_Huffman.__constructs__ = [haxe_zip_Huffman.Found,haxe_zip_Huffman.NeedBit,haxe_zip_Huffman.NeedBits];
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = "haxe.zip.HuffTools";
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			var _g = t.i;
			return 0;
		case 1:
			var a = t.left;
			var b = t.right;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			var _g = t.n;
			var _g = t.table;
			throw haxe_Exception.thrown("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var a = t.left;
				var b = t.right;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var a = t.left;
			var b = t.right;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var p = lengths[i + pos];
			if(p >= maxbits) {
				throw haxe_Exception.thrown("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g = 1;
		var _g1 = maxbits - 1;
		while(_g < _g1) {
			var i = _g++;
			code = code + counts[i] << 1;
			tmp[i] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var l = lengths[i + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = "haxe.zip._InflateImpl.Window";
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__:true,__constructs__:null
	,Head: {_hx_name:"Head",_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_name:"Block",_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_name:"CData",_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_name:"Flat",_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_name:"Crc",_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_name:"Dist",_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_name:"DistOne",_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_name:"Done",_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
haxe_zip__$InflateImpl_State.__constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = "haxe.zip.InflateImpl";
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var a = h.left;
			var b = h.right;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var n = h.n;
			var tbl = h.table;
			return this.applyHuffman(tbl[this.getBits(n)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw haxe_Exception.thrown("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw haxe_Exception.thrown("Invalid data");
			}
			if(fdict) {
				throw haxe_Exception.thrown("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g = hclen;
				var _g1 = 19;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g = 0;
				var _g1 = hlit + hdist;
				while(_g < _g1) {
					var i = _g++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw haxe_Exception.thrown("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen);
				this.len -= rlen;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen);
			this.len -= rlen;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Reader = function(i) {
	this.i = i;
};
$hxClasses["haxe.zip.Reader"] = haxe_zip_Reader;
haxe_zip_Reader.__name__ = "haxe.zip.Reader";
haxe_zip_Reader.readZip = function(i) {
	var r = new haxe_zip_Reader(i);
	return r.read();
};
haxe_zip_Reader.prototype = {
	readZipDate: function() {
		var t = this.i.readUInt16();
		var hour = t >> 11 & 31;
		var min = t >> 5 & 63;
		var sec = t & 31;
		var d = this.i.readUInt16();
		var year = d >> 9;
		var month = d >> 5 & 15;
		var day = d & 31;
		return new Date(year + 1980,month - 1,day,hour,min,sec << 1);
	}
	,readExtraFields: function(length) {
		var fields = new haxe_ds_List();
		while(length > 0) {
			if(length < 4) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			var tag = this.i.readUInt16();
			var len = this.i.readUInt16();
			if(length < len) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			if(tag == 28789) {
				var version = this.i.readByte();
				if(version != 1) {
					var data = new haxe_io_BytesBuffer();
					data.addByte(version);
					data.add(this.i.read(len - 1));
					fields.add(haxe_zip_ExtraField.FUnknown(tag,data.getBytes()));
				} else {
					var crc = this.i.readInt32();
					var name = this.i.read(len - 5).toString();
					fields.add(haxe_zip_ExtraField.FInfoZipUnicodePath(name,crc));
				}
			} else {
				fields.add(haxe_zip_ExtraField.FUnknown(tag,this.i.read(len)));
			}
			length -= 4 + len;
		}
		return fields;
	}
	,readEntryHeader: function() {
		var i = this.i;
		var h = i.readInt32();
		if(h == 33639248 || h == 101010256) {
			return null;
		}
		if(h != 67324752) {
			throw haxe_Exception.thrown("Invalid Zip Data");
		}
		var version = i.readUInt16();
		var flags = i.readUInt16();
		var utf8 = (flags & 2048) != 0;
		if((flags & 63473) != 0) {
			throw haxe_Exception.thrown("Unsupported flags " + flags);
		}
		var compression = i.readUInt16();
		var compressed = compression != 0;
		if(compressed && compression != 8) {
			throw haxe_Exception.thrown("Unsupported compression " + compression);
		}
		var mtime = this.readZipDate();
		var crc32 = i.readInt32();
		var csize = i.readInt32();
		var usize = i.readInt32();
		var fnamelen = i.readInt16();
		var elen = i.readInt16();
		var fname = i.readString(fnamelen);
		var fields = this.readExtraFields(elen);
		if(utf8) {
			fields.push(haxe_zip_ExtraField.FUtf8);
		}
		var data = null;
		if((flags & 8) != 0) {
			crc32 = null;
		}
		return { fileName : fname, fileSize : usize, fileTime : mtime, compressed : compressed, dataSize : csize, data : data, crc32 : crc32, extraFields : fields};
	}
	,read: function() {
		var l = new haxe_ds_List();
		var buf = null;
		var tmp = null;
		while(true) {
			var e = this.readEntryHeader();
			if(e == null) {
				break;
			}
			if(e.crc32 == null) {
				if(e.compressed) {
					var bufSize = 65536;
					if(tmp == null) {
						tmp = new haxe_io_Bytes(new ArrayBuffer(bufSize));
					}
					var out = new haxe_io_BytesBuffer();
					var z = new haxe_zip_InflateImpl(this.i,false,false);
					while(true) {
						var n = z.readBytes(tmp,0,bufSize);
						out.addBytes(tmp,0,n);
						if(n < bufSize) {
							break;
						}
					}
					e.data = out.getBytes();
				} else {
					e.data = this.i.read(e.dataSize);
				}
				e.crc32 = this.i.readInt32();
				if(e.crc32 == 134695760) {
					e.crc32 = this.i.readInt32();
				}
				e.dataSize = this.i.readInt32();
				e.fileSize = this.i.readInt32();
				e.dataSize = e.fileSize;
				e.compressed = false;
			} else {
				e.data = this.i.read(e.dataSize);
			}
			l.add(e);
		}
		return l;
	}
	,__class__: haxe_zip_Reader
};
var hxjsonast_Error = function(message,pos) {
	this.message = message;
	this.pos = pos;
};
$hxClasses["hxjsonast.Error"] = hxjsonast_Error;
hxjsonast_Error.__name__ = "hxjsonast.Error";
hxjsonast_Error.prototype = {
	__class__: hxjsonast_Error
};
var hxjsonast_Json = function(value,pos) {
	this.value = value;
	this.pos = pos;
};
$hxClasses["hxjsonast.Json"] = hxjsonast_Json;
hxjsonast_Json.__name__ = "hxjsonast.Json";
hxjsonast_Json.prototype = {
	__class__: hxjsonast_Json
};
var hxjsonast_JsonValue = $hxEnums["hxjsonast.JsonValue"] = { __ename__:true,__constructs__:null
	,JString: ($_=function(s) { return {_hx_index:0,s:s,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_._hx_name="JString",$_.__params__ = ["s"],$_)
	,JNumber: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_._hx_name="JNumber",$_.__params__ = ["s"],$_)
	,JObject: ($_=function(fields) { return {_hx_index:2,fields:fields,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_._hx_name="JObject",$_.__params__ = ["fields"],$_)
	,JArray: ($_=function(values) { return {_hx_index:3,values:values,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_._hx_name="JArray",$_.__params__ = ["values"],$_)
	,JBool: ($_=function(b) { return {_hx_index:4,b:b,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_._hx_name="JBool",$_.__params__ = ["b"],$_)
	,JNull: {_hx_name:"JNull",_hx_index:5,__enum__:"hxjsonast.JsonValue",toString:$estr}
};
hxjsonast_JsonValue.__constructs__ = [hxjsonast_JsonValue.JString,hxjsonast_JsonValue.JNumber,hxjsonast_JsonValue.JObject,hxjsonast_JsonValue.JArray,hxjsonast_JsonValue.JBool,hxjsonast_JsonValue.JNull];
var hxjsonast_JObjectField = function(name,namePos,value) {
	this.name = name;
	this.namePos = namePos;
	this.value = value;
};
$hxClasses["hxjsonast.JObjectField"] = hxjsonast_JObjectField;
hxjsonast_JObjectField.__name__ = "hxjsonast.JObjectField";
hxjsonast_JObjectField.prototype = {
	__class__: hxjsonast_JObjectField
};
var hxjsonast_Parser = function(source,filename) {
	this.source = source;
	this.filename = filename;
	this.pos = 0;
};
$hxClasses["hxjsonast.Parser"] = hxjsonast_Parser;
hxjsonast_Parser.__name__ = "hxjsonast.Parser";
hxjsonast_Parser.prototype = {
	doParse: function() {
		var result = this.parseRec();
		var c;
		while(true) {
			c = this.source.charCodeAt(this.pos++);
			var c1 = c;
			if(!(c1 == c1)) {
				break;
			}
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				this.invalidChar();
			}
		}
		return result;
	}
	,parseRec: function() {
		while(true) {
			var c = this.source.charCodeAt(this.pos++);
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			case 34:
				var save = this.pos;
				var s = this.parseString();
				return new hxjsonast_Json(hxjsonast_JsonValue.JString(s),new hxjsonast_Position(this.filename,save - 1,this.pos));
			case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				var start = this.pos - 1;
				var minus = c == 45;
				var digit = !minus;
				var zero = c == 48;
				var point = false;
				var e = false;
				var pm = false;
				var end = false;
				while(true) {
					switch(this.source.charCodeAt(this.pos++)) {
					case 43:case 45:
						if(!e || pm) {
							this.invalidNumber(start);
						}
						digit = false;
						pm = true;
						break;
					case 46:
						if(minus || point || e) {
							this.invalidNumber(start);
						}
						digit = false;
						point = true;
						break;
					case 48:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
							zero = true;
						}
						digit = true;
						break;
					case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
						}
						digit = true;
						zero = false;
						break;
					case 69:case 101:
						if(minus || zero || e) {
							this.invalidNumber(start);
						}
						digit = false;
						e = true;
						break;
					default:
						if(!digit) {
							this.invalidNumber(start);
						}
						this.pos--;
						end = true;
					}
					if(end) {
						break;
					}
				}
				var s1 = HxOverrides.substr(this.source,start,this.pos - start);
				return new hxjsonast_Json(hxjsonast_JsonValue.JNumber(s1),new hxjsonast_Position(this.filename,start,this.pos));
			case 91:
				var values = [];
				var comma = null;
				var startPos = this.pos - 1;
				while(true) switch(this.source.charCodeAt(this.pos++)) {
				case 9:case 10:case 13:case 32:
					break;
				case 44:
					if(comma) {
						comma = false;
					} else {
						this.invalidChar();
					}
					break;
				case 93:
					if(comma == false) {
						this.invalidChar();
					}
					return new hxjsonast_Json(hxjsonast_JsonValue.JArray(values),new hxjsonast_Position(this.filename,startPos,this.pos));
				default:
					if(comma) {
						this.invalidChar();
					}
					this.pos--;
					values.push(this.parseRec());
					comma = true;
				}
				break;
			case 102:
				var save1 = this.pos;
				if(this.source.charCodeAt(this.pos++) != 97 || this.source.charCodeAt(this.pos++) != 108 || this.source.charCodeAt(this.pos++) != 115 || this.source.charCodeAt(this.pos++) != 101) {
					this.pos = save1;
					this.invalidChar();
				}
				return new hxjsonast_Json(hxjsonast_JsonValue.JBool(false),new hxjsonast_Position(this.filename,save1 - 1,this.pos));
			case 110:
				var save2 = this.pos;
				if(this.source.charCodeAt(this.pos++) != 117 || this.source.charCodeAt(this.pos++) != 108 || this.source.charCodeAt(this.pos++) != 108) {
					this.pos = save2;
					this.invalidChar();
				}
				return new hxjsonast_Json(hxjsonast_JsonValue.JNull,new hxjsonast_Position(this.filename,save2 - 1,this.pos));
			case 116:
				var save3 = this.pos;
				if(this.source.charCodeAt(this.pos++) != 114 || this.source.charCodeAt(this.pos++) != 117 || this.source.charCodeAt(this.pos++) != 101) {
					this.pos = save3;
					this.invalidChar();
				}
				return new hxjsonast_Json(hxjsonast_JsonValue.JBool(true),new hxjsonast_Position(this.filename,save3 - 1,this.pos));
			case 123:
				var fields = [];
				var names_h = Object.create(null);
				var field = null;
				var fieldPos = null;
				var comma1 = null;
				var startPos1 = this.pos - 1;
				while(true) switch(this.source.charCodeAt(this.pos++)) {
				case 9:case 10:case 13:case 32:
					break;
				case 34:
					if(field != null || comma1) {
						this.invalidChar();
					}
					var fieldStartPos = this.pos - 1;
					field = this.parseString();
					fieldPos = new hxjsonast_Position(this.filename,fieldStartPos,this.pos);
					if(Object.prototype.hasOwnProperty.call(names_h,field)) {
						throw haxe_Exception.thrown(new hxjsonast_Error("Duplicate field name \"" + field + "\"",fieldPos));
					} else {
						names_h[field] = true;
					}
					break;
				case 44:
					if(comma1) {
						comma1 = false;
					} else {
						this.invalidChar();
					}
					break;
				case 58:
					if(field == null) {
						this.invalidChar();
					}
					fields.push(new hxjsonast_JObjectField(field,fieldPos,this.parseRec()));
					field = null;
					fieldPos = null;
					comma1 = true;
					break;
				case 125:
					if(field != null || comma1 == false) {
						this.invalidChar();
					}
					return new hxjsonast_Json(hxjsonast_JsonValue.JObject(fields),new hxjsonast_Position(this.filename,startPos1,this.pos));
				default:
					this.invalidChar();
				}
				break;
			default:
				this.invalidChar();
			}
		}
	}
	,parseString: function() {
		var start = this.pos;
		var buf = null;
		while(true) {
			var c = this.source.charCodeAt(this.pos++);
			if(c == 34) {
				break;
			}
			if(c == 92) {
				if(buf == null) {
					buf = new StringBuf();
				}
				var s = this.source;
				var len = this.pos - start - 1;
				buf.b += len == null ? HxOverrides.substr(s,start,null) : HxOverrides.substr(s,start,len);
				c = this.source.charCodeAt(this.pos++);
				switch(c) {
				case 34:case 47:case 92:
					buf.b += String.fromCodePoint(c);
					break;
				case 98:
					buf.b += String.fromCodePoint(8);
					break;
				case 102:
					buf.b += String.fromCodePoint(12);
					break;
				case 110:
					buf.b += String.fromCodePoint(10);
					break;
				case 114:
					buf.b += String.fromCodePoint(13);
					break;
				case 116:
					buf.b += String.fromCodePoint(9);
					break;
				case 117:
					var uc = Std.parseInt("0x" + HxOverrides.substr(this.source,this.pos,4));
					this.pos += 4;
					buf.b += String.fromCodePoint(uc);
					break;
				default:
					throw haxe_Exception.thrown(new hxjsonast_Error("Invalid escape sequence \\" + String.fromCodePoint(c),new hxjsonast_Position(this.filename,this.pos - 2,this.pos)));
				}
				start = this.pos;
			} else if(c != c) {
				this.pos--;
				throw haxe_Exception.thrown(new hxjsonast_Error("Unclosed string",new hxjsonast_Position(this.filename,start - 1,this.pos)));
			}
		}
		if(buf == null) {
			return HxOverrides.substr(this.source,start,this.pos - start - 1);
		} else {
			var s = this.source;
			var len = this.pos - start - 1;
			buf.b += len == null ? HxOverrides.substr(s,start,null) : HxOverrides.substr(s,start,len);
			return buf.b;
		}
	}
	,invalidChar: function() {
		this.pos--;
		throw haxe_Exception.thrown(new hxjsonast_Error("Invalid character: " + this.source.charAt(this.pos),new hxjsonast_Position(this.filename,this.pos,this.pos + 1)));
	}
	,invalidNumber: function(start) {
		throw haxe_Exception.thrown(new hxjsonast_Error("Invalid number: " + this.source.substring(start,this.pos),new hxjsonast_Position(this.filename,start,this.pos)));
	}
	,__class__: hxjsonast_Parser
};
var hxjsonast_Position = function(file,min,max) {
	this.file = file;
	this.min = min;
	this.max = max;
};
$hxClasses["hxjsonast.Position"] = hxjsonast_Position;
hxjsonast_Position.__name__ = "hxjsonast.Position";
hxjsonast_Position.prototype = {
	__class__: hxjsonast_Position
};
var input2action_ActionConfigItem = function(action,single,keyboard,gamepad,joystick) {
	this.joystick = null;
	this.gamepad = null;
	this.keyboard = null;
	this.single = false;
	this.action = action;
	if(single != null) {
		this.single = single;
	}
	if(keyboard != null) {
		this.keyboard = keyboard;
	}
	if(gamepad != null) {
		this.gamepad = gamepad;
	}
	if(joystick != null) {
		this.joystick = joystick;
	}
};
$hxClasses["input2action.ActionConfigItem"] = input2action_ActionConfigItem;
input2action_ActionConfigItem.__name__ = "input2action.ActionConfigItem";
input2action_ActionConfigItem.prototype = {
	__class__: input2action_ActionConfigItem
};
var input2action_Input2Action = function(actionConfig,actionMap) {
	var this1 = new Array(8);
	this.actionStatePlayers = this1;
	this.actionMap = actionMap;
	this.actionConfigDefault = actionConfig;
};
$hxClasses["input2action.Input2Action"] = input2action_Input2Action;
input2action_Input2Action.__name__ = "input2action.Input2Action";
input2action_Input2Action.prototype = {
	getOrCreateActionState: function(actionMapItem,actionConfigItem,player) {
		var actionStatePlayer = this.actionStatePlayers[player];
		if(actionStatePlayer == null) {
			actionStatePlayer = new haxe_ds_StringMap();
			this.actionStatePlayers[player] = actionStatePlayer;
		}
		var actionState = actionStatePlayer.h[actionConfigItem.action];
		if(actionState == null) {
			actionState = new input2action_ActionState(actionMapItem.up,actionMapItem.each,actionMapItem.repeatKeyboardDefault,actionMapItem.repeatDelay,actionMapItem.repeatRate,actionConfigItem.single,actionMapItem.action,player);
			actionStatePlayer.h[actionConfigItem.action] = actionState;
		}
		return actionState;
	}
	,setKeyboard: function(player,actionConfig) {
		if(player == null) {
			player = 0;
		}
		if(actionConfig == null) {
			actionConfig = this.actionConfigDefault;
		}
		var actionMapItem;
		var key;
		var modkey;
		if(this.keyboardState == null) {
			var this1 = new Array(354);
			var this2 = this1;
			this.keyboardState = this2;
		}
		var _g = 0;
		var _g1 = actionConfig;
		while(_g < _g1.length) {
			var actionConfigItem = _g1[_g];
			++_g;
			if(actionConfigItem.keyboard != null && actionConfigItem.keyboard.length != 0) {
				actionMapItem = this.actionMap.h[actionConfigItem.action];
				if(actionMapItem != null && actionMapItem.action != null) {
					var actionState = this.getOrCreateActionState(actionMapItem,actionConfigItem,player);
					var _g2 = 0;
					var _g3 = actionConfigItem.keyboard;
					while(_g2 < _g3.length) {
						var keys = _g3[_g2];
						++_g2;
						switch(keys.length) {
						case 1:
							var k = keys[0];
							key = k < 1073741881 ? k : k - 1073741881 + (127 + 1);
							modkey = -1;
							break;
						case 2:
							var k1 = keys[1];
							key = k1 < 1073741881 ? k1 : k1 - 1073741881 + (127 + 1);
							var k2 = keys[0];
							modkey = k2 < 1073741881 ? k2 : k2 - 1073741881 + (127 + 1);
							break;
						default:
							throw new haxe_Exception("Only one modifier per key-combination is allowed for.");
						}
						var this1 = this.keyboardState;
						var modKey = modkey;
						if(modKey == null) {
							modKey = -1;
						}
						var keyState = this1[key];
						if(keyState == null) {
							keyState = new input2action__$InputState_KeyState();
							this1[key] = keyState;
						}
						if(keyState.keyCombo == null) {
							keyState.keyCombo = [];
						} else {
							var _g4 = 0;
							var _g5 = keyState.keyCombo;
							while(_g4 < _g5.length) {
								var ma = _g5[_g4];
								++_g4;
								if(ma.keyCode == modKey) {
									var modKeyCodeName = modKey > -1 ? "" + input2action_InputState.keyCodeName(this1,modKey) + " + " + input2action_InputState.keyCodeName(this1,key) : input2action_InputState.keyCodeName(this1,key);
									var actionStateAlready = ma.actionState;
									throw new haxe_Exception("" + modKeyCodeName + " is already defined for an action");
								}
							}
						}
						if(modKey > -1 && this1[modKey] == null) {
							this1[modKey] = new input2action__$InputState_KeyState();
						}
						if(modKey > -1) {
							var insertPos = 0;
							var _g6 = 0;
							var _g7 = keyState.keyCombo;
							while(_g6 < _g7.length) {
								var ma1 = _g7[_g6];
								++_g6;
								if(!actionState.single && ma1.actionState.single || ma1.keyCode == -1 && (ma1.actionState.single || actionState.single)) {
									break;
								}
								++insertPos;
							}
							var _this = keyState.keyCombo;
							var x = new input2action__$InputState_KeyCombo(modKey,actionState);
							_this.splice(insertPos,0,x);
						} else {
							keyState.keyCombo.push(new input2action__$InputState_KeyCombo(modKey,actionState));
						}
					}
				}
			}
		}
	}
	,__class__: input2action_Input2Action
};
var input2action_InputState = {};
input2action_InputState.callUpActions = function(this1,key,isKeyboard) {
	var keyState = this1[key];
	if(keyState != null && keyState.isDown) {
		keyState.isDown = false;
		if(keyState.keyCombo != null) {
			var actionState;
			var _g = 0;
			var _g1 = keyState.keyCombo;
			while(_g < _g1.length) {
				var keyCombo = _g1[_g];
				++_g;
				if(keyCombo.downBy) {
					keyCombo.downBy = false;
					actionState = keyCombo.actionState;
					actionState.pressed--;
					if(actionState.pressed == 0 && actionState.repeatRate != 0 && actionState.timer != null) {
						actionState.timer.stop();
						actionState.timer = null;
					}
					if(actionState.up && (actionState.each || actionState.pressed == 0)) {
						actionState.action(false,actionState.player);
					}
				}
			}
		}
	}
};
input2action_InputState.keyCodeName = function(this1,key) {
	if(354 == this1.length) {
		return input2action_Input2Action.keyCodeName.h[key < 127 + 1 ? key : key + 1073741881 - (127 + 1)];
	} else {
		return input2action_Input2Action.gamepadButtonName.h[key];
	}
};
var input2action__$InputState_KeyState = function() {
	this.keyCombo = null;
	this.isDown = false;
};
$hxClasses["input2action._InputState.KeyState"] = input2action__$InputState_KeyState;
input2action__$InputState_KeyState.__name__ = "input2action._InputState.KeyState";
input2action__$InputState_KeyState.prototype = {
	__class__: input2action__$InputState_KeyState
};
var input2action__$InputState_KeyCombo = function(keyCode,actionState,deviceID) {
	if(deviceID == null) {
		deviceID = 0;
	}
	this.downBy = false;
	this.keyCode = keyCode;
	this.actionState = actionState;
	this.deviceID = deviceID;
};
$hxClasses["input2action._InputState.KeyCombo"] = input2action__$InputState_KeyCombo;
input2action__$InputState_KeyCombo.__name__ = "input2action._InputState.KeyCombo";
input2action__$InputState_KeyCombo.prototype = {
	__class__: input2action__$InputState_KeyCombo
};
var input2action_ActionState = function(up,each,repeatKeyboardDefault,repeatDelay,repeatRate,single,action,player) {
	this.action = null;
	this.pressed = 0;
	this.timer = null;
	this.repeatRate = 0;
	this.repeatDelay = 0;
	this.repeatKeyboardDefault = false;
	this.each = false;
	this.up = false;
	if(up != null) {
		this.up = up;
	}
	if(each != null) {
		this.each = each;
	}
	if(repeatKeyboardDefault != null) {
		this.repeatKeyboardDefault = repeatKeyboardDefault;
	}
	if(repeatDelay != null) {
		this.repeatDelay = repeatDelay;
	}
	if(repeatRate != null) {
		this.repeatRate = repeatRate;
	}
	this.single = single;
	this.action = action;
	this.player = player;
};
$hxClasses["input2action.ActionState"] = input2action_ActionState;
input2action_ActionState.__name__ = "input2action.ActionState";
input2action_ActionState.prototype = {
	callDownAction: function() {
		this.action(true,this.player);
	}
	,__class__: input2action_ActionState
};
var input2action_util_NestedArrayItem = {};
input2action_util_NestedArrayItem.fromOther = function(a) {
	return [a];
};
var input2action_util_NestedArray = {};
input2action_util_NestedArray.fromNestedArrayItem = function(v) {
	return [input2action_util_NestedArrayItem.fromOther(v)];
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var json2object_Error = $hxEnums["json2object.Error"] = { __ename__:true,__constructs__:null
	,IncorrectType: ($_=function(variable,expected,pos) { return {_hx_index:0,variable:variable,expected:expected,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_._hx_name="IncorrectType",$_.__params__ = ["variable","expected","pos"],$_)
	,IncorrectEnumValue: ($_=function(value,expected,pos) { return {_hx_index:1,value:value,expected:expected,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_._hx_name="IncorrectEnumValue",$_.__params__ = ["value","expected","pos"],$_)
	,InvalidEnumConstructor: ($_=function(value,expected,pos) { return {_hx_index:2,value:value,expected:expected,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_._hx_name="InvalidEnumConstructor",$_.__params__ = ["value","expected","pos"],$_)
	,UninitializedVariable: ($_=function(variable,pos) { return {_hx_index:3,variable:variable,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_._hx_name="UninitializedVariable",$_.__params__ = ["variable","pos"],$_)
	,UnknownVariable: ($_=function(variable,pos) { return {_hx_index:4,variable:variable,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_._hx_name="UnknownVariable",$_.__params__ = ["variable","pos"],$_)
	,ParserError: ($_=function(message,pos) { return {_hx_index:5,message:message,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_._hx_name="ParserError",$_.__params__ = ["message","pos"],$_)
	,CustomFunctionException: ($_=function(e,pos) { return {_hx_index:6,e:e,pos:pos,__enum__:"json2object.Error",toString:$estr}; },$_._hx_name="CustomFunctionException",$_.__params__ = ["e","pos"],$_)
};
json2object_Error.__constructs__ = [json2object_Error.IncorrectType,json2object_Error.IncorrectEnumValue,json2object_Error.InvalidEnumConstructor,json2object_Error.UninitializedVariable,json2object_Error.UnknownVariable,json2object_Error.ParserError,json2object_Error.CustomFunctionException];
var json2object_InternalError = $hxEnums["json2object.InternalError"] = { __ename__:true,__constructs__:null
	,AbstractNoJsonRepresentation: ($_=function(name) { return {_hx_index:0,name:name,__enum__:"json2object.InternalError",toString:$estr}; },$_._hx_name="AbstractNoJsonRepresentation",$_.__params__ = ["name"],$_)
	,CannotGenerateSchema: ($_=function(name) { return {_hx_index:1,name:name,__enum__:"json2object.InternalError",toString:$estr}; },$_._hx_name="CannotGenerateSchema",$_.__params__ = ["name"],$_)
	,HandleExpr: {_hx_name:"HandleExpr",_hx_index:2,__enum__:"json2object.InternalError",toString:$estr}
	,ParsingThrow: {_hx_name:"ParsingThrow",_hx_index:3,__enum__:"json2object.InternalError",toString:$estr}
	,UnsupportedAbstractEnumType: ($_=function(name) { return {_hx_index:4,name:name,__enum__:"json2object.InternalError",toString:$estr}; },$_._hx_name="UnsupportedAbstractEnumType",$_.__params__ = ["name"],$_)
	,UnsupportedEnumAbstractValue: ($_=function(name) { return {_hx_index:5,name:name,__enum__:"json2object.InternalError",toString:$estr}; },$_._hx_name="UnsupportedEnumAbstractValue",$_.__params__ = ["name"],$_)
	,UnsupportedMapKeyType: ($_=function(name) { return {_hx_index:6,name:name,__enum__:"json2object.InternalError",toString:$estr}; },$_._hx_name="UnsupportedMapKeyType",$_.__params__ = ["name"],$_)
	,UnsupportedSchemaObjectType: ($_=function(name) { return {_hx_index:7,name:name,__enum__:"json2object.InternalError",toString:$estr}; },$_._hx_name="UnsupportedSchemaObjectType",$_.__params__ = ["name"],$_)
	,UnsupportedSchemaType: ($_=function(type) { return {_hx_index:8,type:type,__enum__:"json2object.InternalError",toString:$estr}; },$_._hx_name="UnsupportedSchemaType",$_.__params__ = ["type"],$_)
};
json2object_InternalError.__constructs__ = [json2object_InternalError.AbstractNoJsonRepresentation,json2object_InternalError.CannotGenerateSchema,json2object_InternalError.HandleExpr,json2object_InternalError.ParsingThrow,json2object_InternalError.UnsupportedAbstractEnumType,json2object_InternalError.UnsupportedEnumAbstractValue,json2object_InternalError.UnsupportedMapKeyType,json2object_InternalError.UnsupportedSchemaObjectType,json2object_InternalError.UnsupportedSchemaType];
var json2object_ErrorUtils = function() { };
$hxClasses["json2object.ErrorUtils"] = json2object_ErrorUtils;
json2object_ErrorUtils.__name__ = "json2object.ErrorUtils";
json2object_ErrorUtils.convertError = function(e) {
	var pos;
	switch(e._hx_index) {
	case 0:
		var _g = e.variable;
		var _g = e.expected;
		var pos1 = e.pos;
		pos = pos1;
		break;
	case 1:
		var _g = e.value;
		var _g = e.expected;
		var pos1 = e.pos;
		pos = pos1;
		break;
	case 2:
		var _g = e.value;
		var _g = e.expected;
		var pos1 = e.pos;
		pos = pos1;
		break;
	case 3:
		var _g = e.variable;
		var pos1 = e.pos;
		pos = pos1;
		break;
	case 4:
		var _g = e.variable;
		var pos1 = e.pos;
		pos = pos1;
		break;
	case 5:
		var _g = e.message;
		var pos1 = e.pos;
		pos = pos1;
		break;
	case 6:
		var _g = e.e;
		var pos1 = e.pos;
		pos = pos1;
		break;
	}
	var header = "";
	if(pos != null) {
		var file = pos.file == "" ? "line" : "" + pos.file + ":";
		if(pos.lines.length == 1) {
			header = "" + file + pos.lines[0].number + ": characters " + pos.lines[0].start + "-" + pos.lines[0].end + " : ";
		} else if(pos.lines.length > 1) {
			header = "" + file + pos.lines[0].number + ": lines " + pos.lines[0].number + "-" + pos.lines[pos.lines.length - 1].number + " : ";
		}
	}
	switch(e._hx_index) {
	case 0:
		var _g = e.pos;
		var variable = e.variable;
		var expected = e.expected;
		return header + ("Variable '" + variable + "' should be of type '" + expected + "'");
	case 1:
		var _g = e.pos;
		var variable = e.value;
		var expected = e.expected;
		return header + ("Identifier '" + variable + "' isn't part of '" + expected + "'");
	case 2:
		var _g = e.pos;
		var variable = e.value;
		var expected = e.expected;
		return header + ("Enum argument '" + variable + "' should be of type '" + expected + "'");
	case 3:
		var _g = e.pos;
		var variable = e.variable;
		return header + ("Variable '" + variable + "' should be in the json");
	case 4:
		var _g = e.pos;
		var variable = e.variable;
		return header + ("Variable '" + variable + "' isn't part of the schema");
	case 5:
		var _g = e.pos;
		var message = e.message;
		return header + ("Parser error: " + message);
	case 6:
		var _g = e.pos;
		var e1 = e.e;
		return header + ("Custom function exception: " + (e1 == null ? "null" : Std.string(e1)));
	}
};
var json2object_PositionUtils = function(content) {
	this.linesInfo = [];
	var s = 0;
	var e = 0;
	var i = 0;
	var lineCount = 0;
	while(i < content.length) switch(content.charAt(i)) {
	case "\n":
		e = i;
		this.linesInfo.push({ number : lineCount, start : s, end : e});
		++lineCount;
		++i;
		s = i;
		break;
	case "\r":
		e = i;
		if(content.charAt(i + 1) == "\n") {
			++e;
		}
		this.linesInfo.push({ number : lineCount, start : s, end : e});
		++lineCount;
		i = e + 1;
		s = i;
		break;
	default:
		++i;
	}
	this.linesInfo.push({ number : lineCount, start : s, end : i});
};
$hxClasses["json2object.PositionUtils"] = json2object_PositionUtils;
json2object_PositionUtils.__name__ = "json2object.PositionUtils";
json2object_PositionUtils.prototype = {
	convertPosition: function(position) {
		var file = position.file;
		var min = position.min;
		var max = position.max;
		var pos = { file : file, min : min + 1, max : max + 1, lines : []};
		var lastLine = this.linesInfo.length - 1;
		var bounds_min = 0;
		var bounds_max = lastLine;
		if(min > this.linesInfo[0].end) {
			while(bounds_max > bounds_min) {
				var i = (bounds_min + bounds_max) / 2 | 0;
				var line = this.linesInfo[i];
				if(line.start == min) {
					bounds_min = i;
					bounds_max = i;
				}
				if(line.end < min) {
					bounds_min = i + 1;
				}
				if(line.start > min || line.end >= min && line.start < min) {
					bounds_max = i;
				}
			}
		}
		var _g = bounds_min;
		var _g1 = this.linesInfo.length;
		while(_g < _g1) {
			var i = _g++;
			var line = this.linesInfo[i];
			if(line.start <= min && line.end >= max) {
				pos.lines.push({ number : line.number + 1, start : min - line.start + 1, end : max - line.start + 1});
				break;
			}
			if(line.start <= min && min <= line.end) {
				pos.lines.push({ number : line.number + 1, start : min - line.start + 1, end : line.end + 1});
			}
			if(line.start <= max && max <= line.end) {
				pos.lines.push({ number : line.number + 1, start : line.start + 1, end : max - line.start + 1});
			}
			if(line.start >= max || line.end >= max) {
				break;
			}
		}
		return pos;
	}
	,__class__: json2object_PositionUtils
};
var lime__$internal_backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._internal.backend.html5.GameDeviceData"] = lime__$internal_backend_html5_GameDeviceData;
lime__$internal_backend_html5_GameDeviceData.__name__ = "lime._internal.backend.html5.GameDeviceData";
lime__$internal_backend_html5_GameDeviceData.prototype = {
	__class__: lime__$internal_backend_html5_GameDeviceData
};
var lime__$internal_backend_html5_HTML5HTTPRequest = function() {
	this.validStatus0 = new EReg("Tizen","gi").match(window.navigator.userAgent);
};
$hxClasses["lime._internal.backend.html5.HTML5HTTPRequest"] = lime__$internal_backend_html5_HTML5HTTPRequest;
lime__$internal_backend_html5_HTML5HTTPRequest.__name__ = "lime._internal.backend.html5.HTML5HTTPRequest";
lime__$internal_backend_html5_HTML5HTTPRequest.loadImage = function(uri) {
	var promise = new lime_app_Promise();
	if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
		lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
		lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(uri,promise,0);
	} else {
		lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE", options : 0});
	}
	return promise.future;
};
lime__$internal_backend_html5_HTML5HTTPRequest.loadImageFromBytes = function(bytes,type) {
	var uri = URL.createObjectURL(new Blob([bytes.b.bufferValue],{ type : type}));
	if(uri != null) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(uri,promise,1);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE", options : 1});
		}
		return promise.future;
	} else {
		return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage("data:" + type + ";base64," + lime__$internal_format_Base64.encode(bytes));
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.processQueue = function() {
	if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit && lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.length > 0) {
		lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
		var queueItem = lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.pop();
		switch(queueItem.type) {
		case "BINARY":
			queueItem.instance.__loadData(queueItem.uri,queueItem.promise);
			break;
		case "IMAGE":
			lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(queueItem.uri,queueItem.promise,queueItem.options);
			break;
		case "TEXT":
			queueItem.instance.__loadText(queueItem.uri,queueItem.promise);
			break;
		default:
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
		}
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname = function(hostname) {
	if(hostname == null) {
		return "";
	} else {
		return hostname;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort = function(port,protocol) {
	if(port == null || port == "") {
		switch(protocol) {
		case "ftp:":
			return "21";
		case "gopher:":
			return "70";
		case "http:":
			return "80";
		case "https:":
			return "443";
		case "ws:":
			return "80";
		case "wss:":
			return "443";
		default:
			return "";
		}
	}
	return port;
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol = function(protocol) {
	if(protocol == null || protocol == "") {
		return "http:";
	} else {
		return protocol;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI = function(uri) {
	if(!StringTools.startsWith(uri,"data:")) {
		return StringTools.startsWith(uri,"blob:");
	} else {
		return true;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin = function(path) {
	if(path == null || path == "") {
		return true;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI(path)) {
		return true;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.originElement == null) {
		lime__$internal_backend_html5_HTML5HTTPRequest.originElement = window.document.createElement("a");
		lime__$internal_backend_html5_HTML5HTTPRequest.originHostname = lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname($global.location.hostname);
		lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol = lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol($global.location.protocol);
		lime__$internal_backend_html5_HTML5HTTPRequest.originPort = lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort($global.location.port,lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol);
	}
	var a = lime__$internal_backend_html5_HTML5HTTPRequest.originElement;
	a.href = path;
	if(a.hostname == "") {
		a.href = a.href;
	}
	var hostname = lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname(a.hostname);
	var protocol = lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol(a.protocol);
	var port = lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort(a.port,protocol);
	var sameHost = hostname == "" || hostname == lime__$internal_backend_html5_HTML5HTTPRequest.originHostname;
	var samePort = port == "" || port == lime__$internal_backend_html5_HTML5HTTPRequest.originPort;
	if(protocol != "file:" && sameHost) {
		return samePort;
	} else {
		return false;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage = function(uri,promise,options) {
	var image = new Image();
	if(!lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin(uri)) {
		image.crossOrigin = "Anonymous";
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress == null) {
		lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress = 'onprogress' in image;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress || lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI(uri)) {
		image.addEventListener("load",function(event) {
			lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI(uri,options);
			var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			buffer.__srcImage = image;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			promise.complete(new lime_graphics_Image(buffer));
		},false);
		image.addEventListener("progress",function(event) {
			promise.progress(event.loaded,event.total);
		},false);
		image.addEventListener("error",function(event) {
			lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI(uri,options);
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			promise.error(event.detail);
		},false);
		image.src = uri;
	} else {
		var request = new XMLHttpRequest();
		request.onload = function(_) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			var img = new lime_graphics_Image();
			img.__fromBytes(haxe_io_Bytes.ofData(request.response),function(img) {
				promise.complete(img);
			});
		};
		request.onerror = function(event) {
			promise.error(event.message);
		};
		request.onprogress = function(event) {
			if(event.lengthComputable) {
				promise.progress(event.loaded,event.total);
			}
		};
		request.open("GET",uri,true);
		request.responseType = "arraybuffer";
		request.overrideMimeType("text/plain; charset=x-user-defined");
		request.send(null);
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI = function(uri,options) {
	if((options & 1) != 0) {
		URL.revokeObjectURL(uri);
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.prototype = {
	init: function(parent) {
		this.parent = parent;
	}
	,load: function(uri,progress,readyStateChange) {
		this.request = new XMLHttpRequest();
		if(this.parent.method == "POST") {
			this.request.upload.addEventListener("progress",progress,false);
		} else {
			this.request.addEventListener("progress",progress,false);
		}
		this.request.onreadystatechange = readyStateChange;
		var query = "";
		if(this.parent.data == null) {
			var h = this.parent.formData.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				if(query.length > 0) {
					query += "&";
				}
				var value = this.parent.formData.h[key];
				if(key.indexOf("[]") > -1 && ((value) instanceof Array)) {
					var _g = [];
					var x = $getIterator(value);
					while(x.hasNext()) {
						var x1 = x.next();
						_g.push(encodeURIComponent(x1));
					}
					var arrayValue = _g.join("&amp;" + key + "=");
					query += encodeURIComponent(key) + "=" + arrayValue;
				} else {
					var query1 = encodeURIComponent(key) + "=";
					var s = Std.string(value);
					query += query1 + encodeURIComponent(s);
				}
			}
			if(this.parent.method == "GET" && query != "") {
				if(uri.indexOf("?") > -1) {
					uri += "&" + query;
				} else {
					uri += "?" + query;
				}
				query = "";
			}
		}
		this.request.open(Std.string(this.parent.method),uri,true);
		if(this.parent.timeout > 0) {
			this.request.timeout = this.parent.timeout;
		}
		if(this.binary) {
			this.request.responseType = "arraybuffer";
		}
		var contentType = null;
		var _g = 0;
		var _g1 = this.parent.headers;
		while(_g < _g1.length) {
			var header = _g1[_g];
			++_g;
			if(header.name == "Content-Type") {
				contentType = header.value;
			} else {
				this.request.setRequestHeader(header.name,header.value);
			}
		}
		if(this.parent.contentType != null) {
			contentType = this.parent.contentType;
		}
		if(contentType == null) {
			if(this.parent.data != null) {
				contentType = "application/octet-stream";
			} else if(query != "") {
				contentType = "application/x-www-form-urlencoded";
			}
		}
		if(contentType != null) {
			this.request.setRequestHeader("Content-Type",contentType);
		}
		if(this.parent.withCredentials) {
			this.request.withCredentials = true;
		}
		if(this.parent.data != null) {
			this.request.send(this.parent.data.b.bufferValue);
		} else {
			this.request.send(query);
		}
	}
	,loadData: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadData(uri,promise);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "BINARY", options : 0});
		}
		return promise.future;
	}
	,loadText: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadText(uri,promise);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "TEXT", options : 0});
		}
		return promise.future;
	}
	,processResponse: function() {
		if(this.parent.enableResponseHeaders) {
			this.parent.responseHeaders = [];
			var name;
			var value;
			var _g = 0;
			var _g1 = this.request.getAllResponseHeaders().split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				name = StringTools.trim(HxOverrides.substr(line,0,line.indexOf(":")));
				value = StringTools.trim(HxOverrides.substr(line,line.indexOf(":") + 1,null));
				if(name != "") {
					this.parent.responseHeaders.push(new lime_net_HTTPRequestHeader(name,value));
				}
			}
		}
		this.parent.responseStatus = this.request.status;
	}
	,__loadData: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status < 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				var bytes = null;
				if(_gthis.request.responseType == "") {
					if(_gthis.request.responseText != null) {
						bytes = haxe_io_Bytes.ofString(_gthis.request.responseText);
					}
				} else if(_gthis.request.response != null) {
					bytes = haxe_io_Bytes.ofData(_gthis.request.response);
				}
				_gthis.processResponse();
				promise.complete(bytes);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = true;
		this.load(uri,progress,readyStateChange);
	}
	,__loadText: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status <= 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				_gthis.processResponse();
				promise.complete(_gthis.request.responseText);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = false;
		this.load(uri,progress,readyStateChange);
	}
	,__class__: lime__$internal_backend_html5_HTML5HTTPRequest
};
var lime__$internal_backend_html5_HTML5Window = function(parent) {
	this.inputing = false;
	this.unusedTouchesPool = new haxe_ds_List();
	this.scale = 1.0;
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	this.cursor = lime_ui_MouseCursor.DEFAULT;
	this.cacheMouseX = 0;
	this.cacheMouseY = 0;
	var attributes = parent.__attributes;
	if(!Object.prototype.hasOwnProperty.call(attributes,"context")) {
		attributes.context = { };
	}
	this.renderType = attributes.context.type;
	if(Object.prototype.hasOwnProperty.call(attributes,"element")) {
		parent.element = attributes.element;
	}
	var element = parent.element;
	if(Object.prototype.hasOwnProperty.call(attributes,"allowHighDPI") && attributes.allowHighDPI && this.renderType != "dom") {
		this.scale = window.devicePixelRatio;
	}
	parent.__scale = this.scale;
	this.setWidth = Object.prototype.hasOwnProperty.call(attributes,"width") ? attributes.width : 0;
	this.setHeight = Object.prototype.hasOwnProperty.call(attributes,"height") ? attributes.height : 0;
	parent.__width = this.setWidth;
	parent.__height = this.setHeight;
	parent.id = lime__$internal_backend_html5_HTML5Window.windowID++;
	if(((element) instanceof HTMLCanvasElement)) {
		this.canvas = element;
	} else if(this.renderType == "dom") {
		this.div = window.document.createElement("div");
	} else {
		this.canvas = window.document.createElement("canvas");
	}
	if(this.canvas != null) {
		var style = this.canvas.style;
		style.setProperty("-webkit-transform","translateZ(0)",null);
		style.setProperty("transform","translateZ(0)",null);
	} else if(this.div != null) {
		var style = this.div.style;
		style.setProperty("-webkit-transform","translate3D(0,0,0)",null);
		style.setProperty("transform","translate3D(0,0,0)",null);
		style.position = "relative";
		style.overflow = "hidden";
		style.setProperty("-webkit-user-select","none",null);
		style.setProperty("-moz-user-select","none",null);
		style.setProperty("-ms-user-select","none",null);
		style.setProperty("-o-user-select","none",null);
	}
	if(parent.__width == 0 && parent.__height == 0) {
		if(element != null) {
			parent.__width = element.clientWidth;
			parent.__height = element.clientHeight;
		} else {
			parent.__width = window.innerWidth;
			parent.__height = window.innerHeight;
		}
		this.cacheElementWidth = parent.__width;
		this.cacheElementHeight = parent.__height;
		this.resizeElement = true;
	}
	if(this.canvas != null) {
		this.canvas.width = Math.round(parent.__width * this.scale);
		this.canvas.height = Math.round(parent.__height * this.scale);
		this.canvas.style.width = parent.__width + "px";
		this.canvas.style.height = parent.__height + "px";
	} else {
		this.div.style.width = parent.__width + "px";
		this.div.style.height = parent.__height + "px";
	}
	if(Object.prototype.hasOwnProperty.call(attributes,"resizable") && attributes.resizable || !Object.prototype.hasOwnProperty.call(attributes,"width") && this.setWidth == 0 && this.setHeight == 0) {
		parent.__resizable = true;
	}
	this.updateSize();
	if(element != null) {
		if(this.canvas != null) {
			if(element != this.canvas) {
				element.appendChild(this.canvas);
			}
		} else {
			element.appendChild(this.div);
		}
		var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
		var _g = 0;
		while(_g < events.length) {
			var event = events[_g];
			++_g;
			element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
		}
		element.addEventListener("contextmenu",$bind(this,this.handleContextMenuEvent),true);
		element.addEventListener("dragstart",$bind(this,this.handleDragEvent),true);
		element.addEventListener("dragover",$bind(this,this.handleDragEvent),true);
		element.addEventListener("drop",$bind(this,this.handleDragEvent),true);
		element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchcancel",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
		element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
	}
	this.createContext();
	if(parent.context.type == "webgl") {
		this.canvas.addEventListener("webglcontextlost",$bind(this,this.handleContextEvent),false);
		this.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleContextEvent),false);
	}
};
$hxClasses["lime._internal.backend.html5.HTML5Window"] = lime__$internal_backend_html5_HTML5Window;
lime__$internal_backend_html5_HTML5Window.__name__ = "lime._internal.backend.html5.HTML5Window";
lime__$internal_backend_html5_HTML5Window.prototype = {
	close: function() {
		this.parent.application.__removeWindow(this.parent);
	}
	,createContext: function() {
		var context = new lime_graphics_RenderContext();
		var contextAttributes = this.parent.__attributes.context;
		context.window = this.parent;
		context.attributes = contextAttributes;
		if(this.div != null) {
			context.dom = this.div;
			context.type = "dom";
			context.version = "";
		} else if(this.canvas != null) {
			var webgl = null;
			var forceCanvas = this.renderType == "canvas";
			var forceWebGL = this.renderType == "opengl" || this.renderType == "opengles" || this.renderType == "webgl";
			var allowWebGL2 = !Object.prototype.hasOwnProperty.call(contextAttributes,"version") || contextAttributes.version != "1";
			var isWebGL2 = false;
			if(forceWebGL || !forceCanvas && (!Object.prototype.hasOwnProperty.call(contextAttributes,"hardware") || contextAttributes.hardware)) {
				var transparentBackground = Object.prototype.hasOwnProperty.call(contextAttributes,"background") && contextAttributes.background == null;
				var colorDepth = Object.prototype.hasOwnProperty.call(contextAttributes,"colorDepth") ? contextAttributes.colorDepth : 16;
				var options = Object.prototype.hasOwnProperty.call(contextAttributes,"antialiasing") && contextAttributes.antialiasing > 0;
				var options1 = Object.prototype.hasOwnProperty.call(contextAttributes,"depth") ? contextAttributes.depth : true;
				var options2 = Object.prototype.hasOwnProperty.call(contextAttributes,"stencil") && contextAttributes.stencil;
				var options3 = { alpha : transparentBackground || colorDepth > 16, antialias : options, depth : options1, premultipliedAlpha : true, stencil : options2, preserveDrawingBuffer : false, failIfMajorPerformanceCaveat : false};
				var glContextType = ["webgl","experimental-webgl"];
				if(allowWebGL2) {
					glContextType.unshift("webgl2");
				}
				var _g = 0;
				while(_g < glContextType.length) {
					var name = glContextType[_g];
					++_g;
					webgl = this.canvas.getContext(name,options3);
					if(webgl != null && name == "webgl2") {
						isWebGL2 = true;
					}
					if(webgl != null) {
						break;
					}
				}
			}
			if(webgl == null) {
				context.canvas2D = this.canvas.getContext("2d");
				context.type = "canvas";
				context.version = "";
			} else {
				context.webgl = lime_graphics_WebGLRenderContext.fromWebGL2RenderContext(webgl);
				if(isWebGL2) {
					context.webgl2 = webgl;
				}
				if(lime_graphics_opengl_GL.context == null) {
					lime_graphics_opengl_GL.context = webgl;
					lime_graphics_opengl_GL.type = "webgl";
					lime_graphics_opengl_GL.version = isWebGL2 ? 2 : 1;
				}
				context.type = "webgl";
				context.version = isWebGL2 ? "2" : "1";
			}
		}
		this.parent.context = context;
	}
	,handleContextEvent: function(event) {
		switch(event.type) {
		case "webglcontextlost":
			if(event.cancelable) {
				event.preventDefault();
			}
			var tmp = lime_graphics_opengl_GL.context != null;
			this.parent.context = null;
			this.parent.onRenderContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onRenderContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,handleContextMenuEvent: function(event) {
		if((this.parent.onMouseUp.canceled || this.parent.onMouseDown.canceled) && event.cancelable) {
			event.preventDefault();
		}
	}
	,handleCutOrCopyEvent: function(event) {
		if(event.cancelable) {
			event.preventDefault();
		}
	}
	,handleDragEvent: function(event) {
		switch(event.type) {
		case "dragover":
			event.preventDefault();
			return false;
		case "dragstart":
			if((js_Boot.__cast(event.target , HTMLElement)).nodeName.toLowerCase() == "img" && event.cancelable) {
				event.preventDefault();
				return false;
			}
			break;
		case "drop":
			if(event.dataTransfer != null && event.dataTransfer.files.length > 0) {
				this.parent.onDropFile.dispatch(event.dataTransfer.files);
				event.preventDefault();
				return false;
			}
			break;
		}
		return true;
	}
	,handleFocusEvent: function(event) {
		var _gthis = this;
		if(this.textInputEnabled) {
			if(event.relatedTarget == null || this.isDescendent(event.relatedTarget)) {
				haxe_Timer.delay(function() {
					if(_gthis.textInputEnabled) {
						lime__$internal_backend_html5_HTML5Window.textInput.focus();
					}
				},20);
			}
		}
	}
	,handleGamepadEvent: function(event) {
		switch(event.type) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") {
				lime_ui_Gamepad.__connect(event.gamepad.index);
			}
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleInputEvent: function(event) {
		if(this.inputing) {
			return;
		}
		if(lime__$internal_backend_html5_HTML5Window.textInput.value != lime__$internal_backend_html5_HTML5Window.dummyCharacter) {
			var value = StringTools.replace(lime__$internal_backend_html5_HTML5Window.textInput.value,lime__$internal_backend_html5_HTML5Window.dummyCharacter,"");
			if(value.length > 0) {
				this.parent.onTextInput.dispatch(value);
			}
			lime__$internal_backend_html5_HTML5Window.textInput.value = lime__$internal_backend_html5_HTML5Window.dummyCharacter;
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.parent.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect = this.div.getBoundingClientRect();
					x = event.clientX - rect.left;
					y = event.clientY - rect.top;
				} else {
					var rect = this.parent.element.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			switch(event.type) {
			case "mousedown":
				if(event.currentTarget == this.parent.element) {
					window.addEventListener("mouseup",$bind(this,this.handleMouseEvent));
				}
				this.parent.onMouseDown.dispatch(x,y,event.button);
				if(this.parent.onMouseDown.canceled && event.cancelable) {
					event.preventDefault();
				}
				break;
			case "mouseenter":
				if(event.target == this.parent.element) {
					this.parent.onEnter.dispatch();
					if(this.parent.onEnter.canceled && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mouseleave":
				if(event.target == this.parent.element) {
					this.parent.onLeave.dispatch();
					if(this.parent.onLeave.canceled && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mousemove":
				if(x != this.cacheMouseX || y != this.cacheMouseY) {
					this.parent.onMouseMove.dispatch(x,y);
					this.parent.onMouseMoveRelative.dispatch(x - this.cacheMouseX,y - this.cacheMouseY);
					if((this.parent.onMouseMove.canceled || this.parent.onMouseMoveRelative.canceled) && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mouseup":
				window.removeEventListener("mouseup",$bind(this,this.handleMouseEvent));
				if(event.currentTarget == this.parent.element) {
					event.stopPropagation();
				}
				this.parent.onMouseUp.dispatch(x,y,event.button);
				if(this.parent.onMouseUp.canceled && event.cancelable) {
					event.preventDefault();
				}
				break;
			default:
			}
			this.cacheMouseX = x;
			this.cacheMouseY = y;
		} else {
			var deltaMode;
			switch(event.deltaMode) {
			case 0:
				deltaMode = lime_ui_MouseWheelMode.PIXELS;
				break;
			case 1:
				deltaMode = lime_ui_MouseWheelMode.LINES;
				break;
			case 2:
				deltaMode = lime_ui_MouseWheelMode.PAGES;
				break;
			default:
				deltaMode = lime_ui_MouseWheelMode.UNKNOWN;
			}
			this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY,deltaMode);
			if(this.parent.onMouseWheel.canceled && event.cancelable) {
				event.preventDefault();
			}
		}
	}
	,handlePasteEvent: function(event) {
		if(event.clipboardData.types.indexOf("text/plain") > -1) {
			var text = event.clipboardData.getData("text/plain");
			lime_system_Clipboard.set_text(text);
			if(this.textInputEnabled) {
				this.parent.onTextInput.dispatch(text);
			}
			if(event.cancelable) {
				event.preventDefault();
			}
		}
	}
	,handleResizeEvent: function(event) {
		this.primaryTouch = null;
		this.updateSize();
	}
	,handleTouchEvent: function(event) {
		if(event.cancelable) {
			event.preventDefault();
		}
		var rect = null;
		if(this.parent.element != null) {
			if(this.canvas != null) {
				rect = this.canvas.getBoundingClientRect();
			} else if(this.div != null) {
				rect = this.div.getBoundingClientRect();
			} else {
				rect = this.parent.element.getBoundingClientRect();
			}
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var touch;
		var x;
		var y;
		var cacheX;
		var cacheY;
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			x = 0.0;
			y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			if(event.type == "touchstart") {
				touch = this.unusedTouchesPool.pop();
				if(touch == null) {
					touch = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id);
				} else {
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.id = data.identifier;
					touch.dx = 0;
					touch.dy = 0;
					touch.pressure = data.force;
					touch.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch;
				lime_ui_Touch.onStart.dispatch(touch);
				if(this.primaryTouch == null) {
					this.primaryTouch = touch;
				}
				if(touch == this.primaryTouch) {
					this.parent.onMouseDown.dispatch(x,y,0);
				}
			} else {
				touch = this.currentTouches.h[data.identifier];
				if(touch != null) {
					cacheX = touch.x;
					cacheY = touch.y;
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.dx = touch.x - cacheX;
					touch.dy = touch.y - cacheY;
					touch.pressure = data.force;
					switch(event.type) {
					case "touchcancel":
						lime_ui_Touch.onCancel.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.primaryTouch = null;
						}
						break;
					case "touchend":
						lime_ui_Touch.onEnd.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseUp.dispatch(x,y,0);
							this.primaryTouch = null;
						}
						break;
					case "touchmove":
						lime_ui_Touch.onMove.dispatch(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseMove.dispatch(x,y);
						}
						break;
					default:
					}
				}
			}
		}
	}
	,isDescendent: function(node) {
		if(node == this.parent.element) {
			return true;
		}
		while(node != null) {
			if(node.parentNode == this.parent.element) {
				return true;
			}
			node = node.parentNode;
		}
		return false;
	}
	,setClipboard: function(value) {
		if(lime__$internal_backend_html5_HTML5Window.textArea == null) {
			lime__$internal_backend_html5_HTML5Window.textArea = window.document.createElement("textarea");
			lime__$internal_backend_html5_HTML5Window.textArea.style.height = "0px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.left = "-100px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.opacity = "0";
			lime__$internal_backend_html5_HTML5Window.textArea.style.position = "fixed";
			lime__$internal_backend_html5_HTML5Window.textArea.style.top = "-100px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.width = "0px";
			window.document.body.appendChild(lime__$internal_backend_html5_HTML5Window.textArea);
		}
		var cacheElement = window.document.activeElement;
		lime__$internal_backend_html5_HTML5Window.textArea.value = value;
		lime__$internal_backend_html5_HTML5Window.textArea.focus();
		lime__$internal_backend_html5_HTML5Window.textArea.select();
		if(window.document.queryCommandEnabled("copy")) {
			window.document.execCommand("copy");
		}
		if(cacheElement != null && cacheElement != lime__$internal_backend_html5_HTML5Window.textArea) {
			cacheElement.focus();
		}
	}
	,setTextInputEnabled: function(value) {
		if(value) {
			if(lime__$internal_backend_html5_HTML5Window.textInput == null) {
				lime__$internal_backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$internal_backend_html5_HTML5Window.textInput.type = "text";
				lime__$internal_backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$internal_backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$internal_backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$internal_backend_html5_HTML5Window.textInput.value = lime__$internal_backend_html5_HTML5Window.dummyCharacter;
				lime__$internal_backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$internal_backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$internal_backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$internal_backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$internal_backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$internal_backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
			}
			if(lime__$internal_backend_html5_HTML5Window.textInput.parentNode == null) {
				this.parent.element.appendChild(lime__$internal_backend_html5_HTML5Window.textInput);
			}
			if(!this.textInputEnabled) {
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("paste",$bind(this,this.handlePasteEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("compositionstart",$bind(this,this.handleCompositionstartEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("compositionend",$bind(this,this.handleCompositionendEvent),true);
			}
			lime__$internal_backend_html5_HTML5Window.textInput.focus();
			lime__$internal_backend_html5_HTML5Window.textInput.select();
		} else if(lime__$internal_backend_html5_HTML5Window.textInput != null) {
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("paste",$bind(this,this.handlePasteEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("compositionstart",$bind(this,this.handleCompositionstartEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("compositionend",$bind(this,this.handleCompositionendEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.blur();
		}
		return this.textInputEnabled = value;
	}
	,handleCompositionstartEvent: function(e) {
		this.inputing = true;
	}
	,handleCompositionendEvent: function(e) {
		this.inputing = false;
		this.handleInputEvent(e);
	}
	,updateSize: function() {
		if(!this.parent.__resizable) {
			return;
		}
		var elementWidth;
		var elementHeight;
		if(this.parent.element != null) {
			elementWidth = this.parent.element.clientWidth;
			elementHeight = this.parent.element.clientHeight;
		} else {
			elementWidth = window.innerWidth;
			elementHeight = window.innerHeight;
		}
		if(elementWidth != this.cacheElementWidth || elementHeight != this.cacheElementHeight) {
			this.cacheElementWidth = elementWidth;
			this.cacheElementHeight = elementHeight;
			var stretch = this.resizeElement || this.setWidth == 0 && this.setHeight == 0;
			if(this.parent.element != null && (this.div == null || this.div != null && stretch)) {
				if(stretch) {
					if(this.parent.__width != elementWidth || this.parent.__height != elementHeight) {
						this.parent.__width = elementWidth;
						this.parent.__height = elementHeight;
						if(this.canvas != null) {
							if(this.parent.element != this.canvas) {
								this.canvas.width = Math.round(elementWidth * this.scale);
								this.canvas.height = Math.round(elementHeight * this.scale);
								this.canvas.style.width = elementWidth + "px";
								this.canvas.style.height = elementHeight + "px";
							}
						} else {
							this.div.style.width = elementWidth + "px";
							this.div.style.height = elementHeight + "px";
						}
						this.parent.onResize.dispatch(elementWidth,elementHeight);
					}
				} else {
					var scaleX = this.setWidth != 0 ? elementWidth / this.setWidth : 1;
					var scaleY = this.setHeight != 0 ? elementHeight / this.setHeight : 1;
					var targetWidth = elementWidth;
					var targetHeight = elementHeight;
					var marginLeft = 0;
					var marginTop = 0;
					if(scaleX < scaleY) {
						targetHeight = Math.floor(this.setHeight * scaleX);
						marginTop = Math.floor((elementHeight - targetHeight) / 2);
					} else {
						targetWidth = Math.floor(this.setWidth * scaleY);
						marginLeft = Math.floor((elementWidth - targetWidth) / 2);
					}
					if(this.canvas != null) {
						if(this.parent.element != this.canvas) {
							this.canvas.style.width = targetWidth + "px";
							this.canvas.style.height = targetHeight + "px";
							this.canvas.style.marginLeft = marginLeft + "px";
							this.canvas.style.marginTop = marginTop + "px";
						}
					} else {
						this.div.style.width = targetWidth + "px";
						this.div.style.height = targetHeight + "px";
						this.div.style.marginLeft = marginLeft + "px";
						this.div.style.marginTop = marginTop + "px";
					}
				}
			}
		}
	}
	,__class__: lime__$internal_backend_html5_HTML5Window
};
var lime__$internal_format_Base64 = function() { };
$hxClasses["lime._internal.format.Base64"] = lime__$internal_format_Base64;
lime__$internal_format_Base64.__name__ = "lime._internal.format.Base64";
lime__$internal_format_Base64.encode = function(source) {
	var result = [];
	var dictionary = lime__$internal_format_Base64.DICTIONARY;
	var extendedDictionary = lime__$internal_format_Base64.EXTENDED_DICTIONARY;
	var numBytes = source.length;
	var numInputTriplets = Math.floor(numBytes / 3);
	var numChunksToWrite = numInputTriplets * 2;
	result.length = Math.ceil(numBytes / 3) * 2;
	var numBytesRead = 0;
	var numChunksWritten = 0;
	var inputTriplet;
	while(numChunksWritten < numChunksToWrite) {
		inputTriplet = source.b[numBytesRead] << 16 | source.b[numBytesRead + 1] << 8 | source.b[numBytesRead + 2];
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = extendedDictionary[inputTriplet & 4095];
		numBytesRead += 3;
		numChunksWritten += 2;
	}
	switch(numBytes - numInputTriplets * 3) {
	case 1:
		inputTriplet = source.b[numBytesRead] << 16;
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = "==";
		break;
	case 2:
		inputTriplet = source.b[numBytesRead] << 16 | source.b[numBytesRead + 1] << 8;
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = dictionary[inputTriplet >> 6 & 63] + "=";
		break;
	default:
	}
	return result.join("");
};
var lime__$internal_format_Deflate = function() { };
$hxClasses["lime._internal.format.Deflate"] = lime__$internal_format_Deflate;
lime__$internal_format_Deflate.__name__ = "lime._internal.format.Deflate";
lime__$internal_format_Deflate.decompress = function(bytes) {
	var data = pako.inflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_format_GZip = function() { };
$hxClasses["lime._internal.format.GZip"] = lime__$internal_format_GZip;
lime__$internal_format_GZip.__name__ = "lime._internal.format.GZip";
lime__$internal_format_GZip.decompress = function(bytes) {
	var data = pako.ungzip(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_format_LZMA = function() { };
$hxClasses["lime._internal.format.LZMA"] = lime__$internal_format_LZMA;
lime__$internal_format_LZMA.__name__ = "lime._internal.format.LZMA";
lime__$internal_format_LZMA.decompress = function(bytes) {
	return null;
};
var lime__$internal_format_Zlib = function() { };
$hxClasses["lime._internal.format.Zlib"] = lime__$internal_format_Zlib;
lime__$internal_format_Zlib.__name__ = "lime._internal.format.Zlib";
lime__$internal_format_Zlib.decompress = function(bytes) {
	var data = pako.inflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_graphics_ImageCanvasUtil = function() { };
$hxClasses["lime._internal.graphics.ImageCanvasUtil"] = lime__$internal_graphics_ImageCanvasUtil;
lime__$internal_graphics_ImageCanvasUtil.__name__ = "lime._internal.graphics.ImageCanvasUtil";
lime__$internal_graphics_ImageCanvasUtil.convertToCanvas = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.__srcCanvas == null && buffer.data != null) {
		image.set_transparent(true);
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
	} else if(image.type == lime_graphics_ImageType.DATA && buffer.__srcImageData != null && image.dirty) {
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
		image.dirty = false;
	}
	if(clear) {
		buffer.data = null;
		buffer.__srcImageData = null;
	} else if(buffer.data == null && buffer.__srcImageData != null) {
		buffer.data = buffer.__srcImageData.data;
	}
	image.type = lime_graphics_ImageType.CANVAS;
};
lime__$internal_graphics_ImageCanvasUtil.convertToData = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	}
	if(buffer.__srcCanvas != null && buffer.data == null) {
		lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		if(image.type == lime_graphics_ImageType.CANVAS) {
			image.dirty = false;
		}
	} else if(image.type == lime_graphics_ImageType.CANVAS && buffer.__srcCanvas != null && image.dirty) {
		if(buffer.__srcImageData == null) {
			lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		} else {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
			var elements = buffer.__srcImageData.data.buffer;
			var array = null;
			var view = null;
			var buffer1 = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer1,0);
				} else {
					this1 = new Uint8Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			buffer.data = this1;
		}
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
	image.type = lime_graphics_ImageType.DATA;
};
lime__$internal_graphics_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) {
				buffer.__srcCanvas.setAttribute("moz-opaque","true");
			}
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else {
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		}
	}
};
lime__$internal_graphics_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		} else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var array = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Uint8Array(buffer1,0);
			} else {
				this1 = new Uint8Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		buffer.data = this1;
	}
};
lime__$internal_graphics_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		a = image.get_transparent() ? color >> 24 & 255 : 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		a = image.get_transparent() ? color & 255 : 255;
	}
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && a == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	if(a < 255) {
		image.buffer.__srcContext.clearRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	if(a > 0) {
		image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
		image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	image.dirty = true;
	image.version++;
};
var lime__$internal_graphics_ImageDataUtil = function() { };
$hxClasses["lime._internal.graphics.ImageDataUtil"] = lime__$internal_graphics_ImageDataUtil;
lime__$internal_graphics_ImageDataUtil.__name__ = "lime._internal.graphics.ImageDataUtil";
lime__$internal_graphics_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		fillColor = rgba;
		break;
	case 2:
		var bgra = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		fillColor = rgba;
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g3 = dataView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var offset = row + x * 4;
			var format1 = format;
			var premultiplied = false;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			if(premultiplied) {
				if((fillColor & 255) == 0) {
					if(fillColor != 0) {
						fillColor = 0;
					}
				} else if((fillColor & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[fillColor & 255];
					fillColor = ((fillColor >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
				}
			}
			switch(format1) {
			case 0:
				data[offset] = fillColor >>> 24 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >>> 24 & 255;
				data[offset + 2] = fillColor >>> 16 & 255;
				data[offset + 3] = fillColor >>> 8 & 255;
				break;
			case 2:
				data[offset] = fillColor >>> 8 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
var lime__$internal_graphics__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) {
		this.rect = image.get_rect();
	} else {
		if(rect.x < 0) {
			rect.x = 0;
		}
		if(rect.y < 0) {
			rect.y = 0;
		}
		if(rect.x + rect.width > image.width) {
			rect.width = image.width - rect.x;
		}
		if(rect.y + rect.height > image.height) {
			rect.height = image.height - rect.y;
		}
		if(rect.width < 0) {
			rect.width = 0;
		}
		if(rect.height < 0) {
			rect.height = 0;
		}
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.__update();
};
$hxClasses["lime._internal.graphics._ImageDataUtil.ImageDataView"] = lime__$internal_graphics__$ImageDataUtil_ImageDataView;
lime__$internal_graphics__$ImageDataUtil_ImageDataView.__name__ = "lime._internal.graphics._ImageDataUtil.ImageDataView";
lime__$internal_graphics__$ImageDataUtil_ImageDataView.prototype = {
	__update: function() {
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.byteOffset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,__class__: lime__$internal_graphics__$ImageDataUtil_ImageDataView
};
var lime_app_Future = function(work,async) {
	if(async == null) {
		async = false;
	}
	if(work != null) {
		if(async) {
			var promise = new lime_app_Promise();
			promise.future = this;
			lime_app__$Future_FutureWork.queue({ promise : promise, work : work});
		} else {
			try {
				this.value = work();
				this.isComplete = true;
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				this.error = e;
				this.isError = true;
			}
		}
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = "lime.app.Future";
lime_app_Future.withValue = function(value) {
	var future = new lime_app_Future();
	future.isComplete = true;
	future.value = value;
	return future;
};
lime_app_Future.prototype = {
	onComplete: function(listener) {
		if(listener != null) {
			if(this.isComplete) {
				listener(this.value);
			} else if(!this.isError) {
				if(this.__completeListeners == null) {
					this.__completeListeners = [];
				}
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.isError) {
				listener(this.error);
			} else if(!this.isComplete) {
				if(this.__errorListeners == null) {
					this.__errorListeners = [];
				}
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) {
				this.__progressListeners = [];
			}
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,then: function(next) {
		if(this.isComplete) {
			return next(this.value);
		} else if(this.isError) {
			var future = new lime_app_Future();
			future.isError = true;
			future.error = this.error;
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future = next(val);
				future.onError($bind(promise,promise.error));
				future.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,__class__: lime_app_Future
};
var lime_app__$Future_FutureWork = function() { };
$hxClasses["lime.app._Future.FutureWork"] = lime_app__$Future_FutureWork;
lime_app__$Future_FutureWork.__name__ = "lime.app._Future.FutureWork";
lime_app__$Future_FutureWork.queue = function(state) {
	if(lime_app__$Future_FutureWork.threadPool == null) {
		lime_app__$Future_FutureWork.threadPool = new lime_system_ThreadPool();
		lime_app__$Future_FutureWork.threadPool.doWork.add(lime_app__$Future_FutureWork.threadPool_doWork);
		lime_app__$Future_FutureWork.threadPool.onComplete.add(lime_app__$Future_FutureWork.threadPool_onComplete);
		lime_app__$Future_FutureWork.threadPool.onError.add(lime_app__$Future_FutureWork.threadPool_onError);
	}
	lime_app__$Future_FutureWork.threadPool.queue(state);
};
lime_app__$Future_FutureWork.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app__$Future_FutureWork.threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		lime_app__$Future_FutureWork.threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app__$Future_FutureWork.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app__$Future_FutureWork.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = "lime.app.Promise";
lime_app_Promise.prototype = {
	complete: function(data) {
		if(!this.future.isError) {
			this.future.isComplete = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.isComplete) {
			this.future.isError = true;
			this.future.error = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress,total) {
		if(!this.future.isError && !this.future.isComplete) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress,total);
				}
			}
		}
		return this;
	}
	,__class__: lime_app_Promise
};
var lime_app__$Event_$Dynamic_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Dynamic_Void"] = lime_app__$Event_$Dynamic_$Void;
lime_app__$Event_$Dynamic_$Void.__name__ = "lime.app._Event_Dynamic_Void";
lime_app__$Event_$Dynamic_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Dynamic_$Void
};
var lime_app__$Event_$Float_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Float_$Void.__name__ = "lime.app._Event_Float_Float_Float_Void";
lime_app__$Event_$Float_$Float_$Float_$Void.prototype = {
	remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Int_Void"] = lime_app__$Event_$Float_$Float_$Int_$Void;
lime_app__$Event_$Float_$Float_$Int_$Void.__name__ = "lime.app._Event_Float_Float_Int_Void";
lime_app__$Event_$Float_$Float_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Int_$Void
};
var lime_app__$Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Void.__name__ = "lime.app._Event_Float_Float_Void";
lime_app__$Event_$Float_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_lime_ui_MouseButton_Void"] = lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void.__name__ = "lime.app._Event_Float_Float_lime_ui_MouseButton_Void";
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void
};
var lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void"] = lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void.__name__ = "lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void";
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void
};
var lime_app__$Event_$Int_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Float_Void"] = lime_app__$Event_$Int_$Float_$Float_$Void;
lime_app__$Event_$Int_$Float_$Float_$Void.__name__ = "lime.app._Event_Int_Float_Float_Void";
lime_app__$Event_$Int_$Float_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,__class__: lime_app__$Event_$Int_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Void"] = lime_app__$Event_$Int_$Float_$Void;
lime_app__$Event_$Int_$Float_$Void.__name__ = "lime.app._Event_Int_Float_Void";
lime_app__$Event_$Int_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Void
};
var lime_app__$Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Int_Void"] = lime_app__$Event_$Int_$Int_$Void;
lime_app__$Event_$Int_$Int_$Void.__name__ = "lime.app._Event_Int_Int_Void";
lime_app__$Event_$Int_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Int_$Void
};
var lime_app__$Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Void"] = lime_app__$Event_$Int_$Void;
lime_app__$Event_$Int_$Void.__name__ = "lime.app._Event_Int_Void";
lime_app__$Event_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Void
};
var lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = "lime.app._Event_Int_lime_ui_JoystickHatPosition_Void";
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,__class__: lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app__$Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Int_Int_Void"] = lime_app__$Event_$String_$Int_$Int_$Void;
lime_app__$Event_$String_$Int_$Int_$Void.__name__ = "lime.app._Event_String_Int_Int_Void";
lime_app__$Event_$String_$Int_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,__class__: lime_app__$Event_$String_$Int_$Int_$Void
};
var lime_app__$Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Void"] = lime_app__$Event_$String_$Void;
lime_app__$Event_$String_$Void.__name__ = "lime.app._Event_String_Void";
lime_app__$Event_$String_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Void
};
var lime_app__$Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Void_Void"] = lime_app__$Event_$Void_$Void;
lime_app__$Event_$Void_$Void.__name__ = "lime.app._Event_Void_Void";
lime_app__$Event_$Void_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Void_$Void
};
var lime_app__$Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_graphics_RenderContext_Void"] = lime_app__$Event_$lime_$graphics_$RenderContext_$Void;
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.__name__ = "lime.app._Event_lime_graphics_RenderContext_Void";
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] = lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = "lime.app._Event_lime_ui_GamepadAxis_Float_Void";
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadButton_Void"] = lime_app__$Event_$lime_$ui_$GamepadButton_$Void;
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.__name__ = "lime.app._Event_lime_ui_GamepadButton_Void";
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app__$Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Gamepad_Void"] = lime_app__$Event_$lime_$ui_$Gamepad_$Void;
lime_app__$Event_$lime_$ui_$Gamepad_$Void.__name__ = "lime.app._Event_lime_ui_Gamepad_Void";
lime_app__$Event_$lime_$ui_$Gamepad_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Gamepad_$Void
};
var lime_app__$Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Joystick_Void"] = lime_app__$Event_$lime_$ui_$Joystick_$Void;
lime_app__$Event_$lime_$ui_$Joystick_$Void.__name__ = "lime.app._Event_lime_ui_Joystick_Void";
lime_app__$Event_$lime_$ui_$Joystick_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Joystick_$Void
};
var lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = "lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void";
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app__$Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Touch_Void"] = lime_app__$Event_$lime_$ui_$Touch_$Void;
lime_app__$Event_$lime_$ui_$Touch_$Void.__name__ = "lime.app._Event_lime_ui_Touch_Void";
lime_app__$Event_$lime_$ui_$Touch_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Touch_$Void
};
var lime_app__$Event_$lime_$ui_$Window_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Window_Void"] = lime_app__$Event_$lime_$ui_$Window_$Void;
lime_app__$Event_$lime_$ui_$Window_$Void.__name__ = "lime.app._Event_lime_ui_Window_Void";
lime_app__$Event_$lime_$ui_$Window_$Void.prototype = {
	remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Window_$Void
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(offsetY == null) {
		offsetY = 0;
	}
	if(offsetX == null) {
		offsetX = 0;
	}
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	this.version = 0;
	if(type == null) {
		type = lime_graphics_ImageType.CANVAS;
	}
	this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			switch(this.type._hx_index) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime__$internal_graphics_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 1:
				var elements = width * height * 4;
				var array = null;
				var view = null;
				var buffer1 = null;
				var len = null;
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer1 != null) {
					if(len == null) {
						this1 = new Uint8Array(buffer1,0);
					} else {
						this1 = new Uint8Array(buffer1,0,len);
					}
				} else {
					this1 = null;
				}
				this.buffer = new lime_graphics_ImageBuffer(this1,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 2:
				break;
			default:
			}
		}
	} else {
		this.__fromImageBuffer(buffer);
	}
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = "lime.graphics.Image";
lime_graphics_Image.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	if(image.__fromFile(path)) {
		return image;
	} else {
		return null;
	}
};
lime_graphics_Image.loadFromBytes = function(bytes) {
	if(bytes == null) {
		return lime_app_Future.withValue(null);
	}
	var type = "";
	if(lime_graphics_Image.__isPNG(bytes)) {
		type = "image/png";
	} else if(lime_graphics_Image.__isJPG(bytes)) {
		type = "image/jpeg";
	} else if(lime_graphics_Image.__isGIF(bytes)) {
		type = "image/gif";
	} else if(lime_graphics_Image.__isWebP(bytes)) {
		type = "image/webp";
	} else {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImageFromBytes(bytes,type);
};
lime_graphics_Image.loadFromFile = function(path) {
	if(path == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage(path);
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes == null || bytes.length < 6) {
		return false;
	}
	var header = bytes.getString(0,6);
	if(header != "GIF87a") {
		return header == "GIF89a";
	} else {
		return true;
	}
};
lime_graphics_Image.__isJPG = function(bytes) {
	if(bytes == null || bytes.length < 4) {
		return false;
	}
	if(bytes.b[0] == 255 && bytes.b[1] == 216 && bytes.b[bytes.length - 2] == 255) {
		return bytes.b[bytes.length - 1] == 217;
	} else {
		return false;
	}
};
lime_graphics_Image.__isPNG = function(bytes) {
	if(bytes == null || bytes.length < 8) {
		return false;
	}
	if(bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26) {
		return bytes.b[7] == 10;
	} else {
		return false;
	}
};
lime_graphics_Image.__isWebP = function(bytes) {
	if(bytes == null || bytes.length < 16) {
		return false;
	}
	if(bytes.getString(0,4) == "RIFF") {
		return bytes.getString(8,4) == "WEBP";
	} else {
		return false;
	}
};
lime_graphics_Image.prototype = {
	fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) {
				return;
			}
			lime__$internal_graphics_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb1;
					break;
				default:
					var rgba = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					argb = argb1;
				}
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,__clipRect: function(r) {
		if(r == null) {
			return null;
		}
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) {
				return null;
			}
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) {
				return null;
			}
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) {
				return null;
			}
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) {
				return null;
			}
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _gthis = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.width = _gthis.buffer.width;
			_gthis.height = _gthis.buffer.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) {
			type = "image/png";
		} else if(lime_graphics_Image.__isJPG(bytes)) {
			type = "image/jpeg";
		} else if(lime_graphics_Image.__isGIF(bytes)) {
			type = "image/gif";
		} else {
			return false;
		}
		this.__fromBase64(lime__$internal_format_Base64.encode(bytes),type,onload);
		return true;
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		var image = new Image();
		if(!lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin(path)) {
			image.crossOrigin = "Anonymous";
		}
		image.onload = function(_) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.width = image.width;
			_gthis.height = image.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.onerror = function(_) {
			if(onerror != null) {
				onerror();
			}
		};
		image.src = path;
		var image1 = image.complete;
		return true;
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) {
				this.width = buffer.width;
			}
			if(this.height == -1) {
				this.height = buffer.height;
			}
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
		}
		return this.buffer.data;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_transparent: function() {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",get_rect:"get_rect",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) {
		bitsPerPixel = 32;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	this.format = format == null ? 0 : format;
	this.premultiplied = false;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = "lime.graphics.ImageBuffer";
lime_graphics_ImageBuffer.prototype = {
	get_stride: function() {
		return this.width * (this.bitsPerPixel / 8 | 0);
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride"}
};
var lime_graphics_ImageType = $hxEnums["lime.graphics.ImageType"] = { __ename__:true,__constructs__:null
	,CANVAS: {_hx_name:"CANVAS",_hx_index:0,__enum__:"lime.graphics.ImageType",toString:$estr}
	,DATA: {_hx_name:"DATA",_hx_index:1,__enum__:"lime.graphics.ImageType",toString:$estr}
	,FLASH: {_hx_name:"FLASH",_hx_index:2,__enum__:"lime.graphics.ImageType",toString:$estr}
	,CUSTOM: {_hx_name:"CUSTOM",_hx_index:3,__enum__:"lime.graphics.ImageType",toString:$estr}
};
lime_graphics_ImageType.__constructs__ = [lime_graphics_ImageType.CANVAS,lime_graphics_ImageType.DATA,lime_graphics_ImageType.FLASH,lime_graphics_ImageType.CUSTOM];
var lime_graphics_RenderContext = function() {
};
$hxClasses["lime.graphics.RenderContext"] = lime_graphics_RenderContext;
lime_graphics_RenderContext.__name__ = "lime.graphics.RenderContext";
lime_graphics_RenderContext.prototype = {
	__class__: lime_graphics_RenderContext
};
var lime_graphics_WebGLRenderContext = {};
lime_graphics_WebGLRenderContext.fromWebGL2RenderContext = function(gl) {
	return gl;
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = "lime.graphics.opengl.GL";
var lime_math_RGBA = {};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = "lime.math.Rectangle";
lime_math_Rectangle.prototype = {
	offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,__class__: lime_math_Rectangle
};
var lime_media_AudioBuffer = function() {
};
$hxClasses["lime.media.AudioBuffer"] = lime_media_AudioBuffer;
lime_media_AudioBuffer.__name__ = "lime.media.AudioBuffer";
lime_media_AudioBuffer.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : ["data:" + lime_media_AudioBuffer.__getCodec(bytes) + ";base64," + lime__$internal_format_Base64.encode(bytes)], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : [path], preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromFiles = function(paths) {
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : paths, preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.loadFromFile = function(path) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFile(path);
	if(audioBuffer != null) {
		if(audioBuffer != null) {
			audioBuffer.__srcHowl.on("load",function() {
				promise.complete(audioBuffer);
			});
			audioBuffer.__srcHowl.on("loaderror",function(id,msg) {
				promise.error(msg);
			});
			audioBuffer.__srcHowl.load();
		}
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.loadFromFiles = function(paths) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFiles(paths);
	if(audioBuffer != null) {
		audioBuffer.__srcHowl.on("load",function() {
			promise.complete(audioBuffer);
		});
		audioBuffer.__srcHowl.on("loaderror",function() {
			promise.error(null);
		});
		audioBuffer.__srcHowl.load();
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.__getCodec = function(bytes) {
	var signature = bytes.getString(0,4);
	switch(signature) {
	case "OggS":
		return "audio/ogg";
	case "RIFF":
		if(bytes.getString(8,4) == "WAVE") {
			return "audio/wav";
		} else {
			var _g = bytes.b[1];
			var _g1 = bytes.b[2];
			switch(bytes.b[0]) {
			case 73:
				if(_g == 68) {
					if(_g1 == 51) {
						return "audio/mp3";
					}
				}
				break;
			case 255:
				switch(_g) {
				case 243:case 250:case 251:
					return "audio/mp3";
				default:
				}
				break;
			default:
			}
		}
		break;
	case "fLaC":
		return "audio/flac";
	default:
		var _g = bytes.b[1];
		var _g1 = bytes.b[2];
		switch(bytes.b[0]) {
		case 73:
			if(_g == 68) {
				if(_g1 == 51) {
					return "audio/mp3";
				}
			}
			break;
		case 255:
			switch(_g) {
			case 243:case 250:case 251:
				return "audio/mp3";
			default:
			}
			break;
		default:
		}
	}
	lime_utils_Log.error("Unsupported sound format",{ fileName : "lime/media/AudioBuffer.hx", lineNumber : 362, className : "lime.media.AudioBuffer", methodName : "__getCodec"});
	return null;
};
lime_media_AudioBuffer.prototype = {
	set_src: function(value) {
		return this.__srcHowl = value;
	}
	,__class__: lime_media_AudioBuffer
	,__properties__: {set_src:"set_src"}
};
var lime_media_AudioContext = function(type) {
	if(type != "custom") {
		if(type == null || type == "web") {
			try {
				window.AudioContext = window.AudioContext || window.webkitAudioContext;
				this.web = new window.AudioContext ();
				this.type = "web";
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
			}
		}
		if(this.web == null && type != "web") {
			this.html5 = new lime_media_HTML5AudioContext();
			this.type = "html5";
		}
	} else {
		this.type = "custom";
	}
};
$hxClasses["lime.media.AudioContext"] = lime_media_AudioContext;
lime_media_AudioContext.__name__ = "lime.media.AudioContext";
lime_media_AudioContext.prototype = {
	__class__: lime_media_AudioContext
};
var lime_media_AudioManager = function() { };
$hxClasses["lime.media.AudioManager"] = lime_media_AudioManager;
lime_media_AudioManager.__name__ = "lime.media.AudioManager";
lime_media_AudioManager.init = function(context) {
	if(lime_media_AudioManager.context == null) {
		if(context == null) {
			lime_media_AudioManager.context = new lime_media_AudioContext();
			context = lime_media_AudioManager.context;
			if(context.type == "openal") {
				var alc = context.openal;
				var device = alc.openDevice();
				var ctx = alc.createContext(device);
				alc.makeContextCurrent(ctx);
				alc.processContext(ctx);
			}
		}
		lime_media_AudioManager.context = context;
	}
};
var lime_media_HTML5AudioContext = function() {
};
$hxClasses["lime.media.HTML5AudioContext"] = lime_media_HTML5AudioContext;
lime_media_HTML5AudioContext.__name__ = "lime.media.HTML5AudioContext";
lime_media_HTML5AudioContext.prototype = {
	__class__: lime_media_HTML5AudioContext
};
var lime_media_OpenALAudioContext = function() {
};
$hxClasses["lime.media.OpenALAudioContext"] = lime_media_OpenALAudioContext;
lime_media_OpenALAudioContext.__name__ = "lime.media.OpenALAudioContext";
lime_media_OpenALAudioContext.prototype = {
	createContext: function(device,attrlist) {
		return lime_media_openal_ALC.createContext(device,attrlist);
	}
	,makeContextCurrent: function(context) {
		return lime_media_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_media_openal_ALC.openDevice(deviceName);
	}
	,processContext: function(context) {
		lime_media_openal_ALC.processContext(context);
	}
	,__class__: lime_media_OpenALAudioContext
};
var lime_media_openal_ALC = function() { };
$hxClasses["lime.media.openal.ALC"] = lime_media_openal_ALC;
lime_media_openal_ALC.__name__ = "lime.media.openal.ALC";
lime_media_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_media_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_media_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_media_openal_ALC.processContext = function(context) {
};
var lime_net__$IHTTPRequest = function() { };
$hxClasses["lime.net._IHTTPRequest"] = lime_net__$IHTTPRequest;
lime_net__$IHTTPRequest.__name__ = "lime.net._IHTTPRequest";
lime_net__$IHTTPRequest.__isInterface__ = true;
lime_net__$IHTTPRequest.prototype = {
	__class__: lime_net__$IHTTPRequest
};
var lime_net__$HTTPRequest_AbstractHTTPRequest = function(uri) {
	this.uri = uri;
	this.contentType = "application/x-www-form-urlencoded";
	this.followRedirects = true;
	this.enableResponseHeaders = false;
	this.formData = new haxe_ds_StringMap();
	this.headers = [];
	this.method = "GET";
	this.timeout = 30000;
	this.withCredentials = false;
	this.manageCookies = true;
	this.__backend = new lime__$internal_backend_html5_HTML5HTTPRequest();
	this.__backend.init(this);
};
$hxClasses["lime.net._HTTPRequest.AbstractHTTPRequest"] = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_AbstractHTTPRequest.__name__ = "lime.net._HTTPRequest.AbstractHTTPRequest";
lime_net__$HTTPRequest_AbstractHTTPRequest.__interfaces__ = [lime_net__$IHTTPRequest];
lime_net__$HTTPRequest_AbstractHTTPRequest.prototype = {
	__class__: lime_net__$HTTPRequest_AbstractHTTPRequest
};
var lime_net__$HTTPRequest_$Bytes = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_Bytes"] = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$Bytes.__name__ = "lime.net._HTTPRequest_Bytes";
lime_net__$HTTPRequest_$Bytes.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$Bytes.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	fromBytes: function(bytes) {
		return bytes;
	}
	,load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.__backend.loadData(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(bytes) {
			_gthis.responseData = _gthis.fromBytes(bytes);
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$Bytes
});
var lime_net__$HTTPRequest_$String = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_String"] = lime_net__$HTTPRequest_$String;
lime_net__$HTTPRequest_$String.__name__ = "lime.net._HTTPRequest_String";
lime_net__$HTTPRequest_$String.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$String.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.__backend.loadText(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(text) {
			_gthis.responseData = text;
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$String
});
var lime_net_HTTPRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.HTTPRequestHeader"] = lime_net_HTTPRequestHeader;
lime_net_HTTPRequestHeader.__name__ = "lime.net.HTTPRequestHeader";
lime_net_HTTPRequestHeader.prototype = {
	__class__: lime_net_HTTPRequestHeader
};
var lime_net__$HTTPRequest_$lime_$utils_$Bytes = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_utils_Bytes"] = lime_net__$HTTPRequest_$lime_$utils_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__name__ = "lime.net._HTTPRequest_lime_utils_Bytes";
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_utils_Bytes.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$utils_$Bytes
});
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = "lime.system.Clipboard";
lime_system_Clipboard.__properties__ = {set_text:"set_text"};
lime_system_Clipboard.set_text = function(value) {
	var cacheText = lime_system_Clipboard._text;
	lime_system_Clipboard._text = value;
	var $window = lime_app_Application.current.__window;
	if($window != null) {
		$window.__backend.setClipboard(value);
	}
	if(lime_system_Clipboard._text != cacheText) {
		lime_system_Clipboard.onUpdate.dispatch();
	}
	return value;
};
var lime_system_Sensor = function(type,id) {
	this.onUpdate = new lime_app__$Event_$Float_$Float_$Float_$Void();
	this.type = type;
	this.id = id;
};
$hxClasses["lime.system.Sensor"] = lime_system_Sensor;
lime_system_Sensor.__name__ = "lime.system.Sensor";
lime_system_Sensor.registerSensor = function(type,id) {
	var sensor = new lime_system_Sensor(type,id);
	lime_system_Sensor.sensors.push(sensor);
	lime_system_Sensor.sensorByID.h[id] = sensor;
	return sensor;
};
lime_system_Sensor.prototype = {
	__class__: lime_system_Sensor
};
var lime_system_SensorType = $hxEnums["lime.system.SensorType"] = { __ename__:true,__constructs__:null
	,ACCELEROMETER: {_hx_name:"ACCELEROMETER",_hx_index:0,__enum__:"lime.system.SensorType",toString:$estr}
};
lime_system_SensorType.__constructs__ = [lime_system_SensorType.ACCELEROMETER];
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = "lime.system.System";
lime_system_System.embed = $hx_exports["lime"]["embed"] = function(projectName,element,width,height,config) {
	if(lime_system_System.__applicationEntryPoint == null) {
		return;
	}
	if(Object.prototype.hasOwnProperty.call(lime_system_System.__applicationEntryPoint.h,projectName)) {
		var htmlElement = null;
		if(typeof(element) == "string") {
			htmlElement = window.document.getElementById(element);
		} else if(element == null) {
			htmlElement = window.document.createElement("div");
		} else {
			htmlElement = element;
		}
		if(htmlElement == null) {
			window.console.log("[lime.embed] ERROR: Cannot find target element: " + Std.string(element));
			return;
		}
		if(width == null) {
			width = 0;
		}
		if(height == null) {
			height = 0;
		}
		if(config == null) {
			config = { };
		}
		if(Object.prototype.hasOwnProperty.call(config,"background") && typeof(config.background) == "string") {
			var background = StringTools.replace(Std.string(config.background),"#","");
			if(background.indexOf("0x") > -1) {
				config.background = Std.parseInt(background);
			} else {
				config.background = Std.parseInt("0x" + background);
			}
		}
		config.element = htmlElement;
		config.width = width;
		config.height = height;
		lime_system_System.__applicationEntryPoint.h[projectName](config);
	}
};
lime_system_System.exit = function(code) {
};
lime_system_System.__registerEntryPoint = function(projectName,entryPoint) {
	if(lime_system_System.__applicationEntryPoint == null) {
		lime_system_System.__applicationEntryPoint = new haxe_ds_StringMap();
	}
	lime_system_System.__applicationEntryPoint.h[projectName] = entryPoint;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) {
		maxThreads = 1;
	}
	if(minThreads == null) {
		minThreads = 0;
	}
	this.onRun = new lime_app__$Event_$Dynamic_$Void();
	this.onError = new lime_app__$Event_$Dynamic_$Void();
	this.onComplete = new lime_app__$Event_$Dynamic_$Void();
	this.doWork = new lime_app__$Event_$Dynamic_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = "lime.system.ThreadPool";
lime_system_ThreadPool.prototype = {
	queue: function(state) {
		this.runWork(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,runWork: function(state) {
		this.onRun.dispatch(state);
		this.doWork.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_text_Font = function(name) {
	if(name != null) {
		this.name = name;
	}
	if(!this.__init) {
		if(this.ascender == undefined) {
			this.ascender = 0;
		}
		if(this.descender == undefined) {
			this.descender = 0;
		}
		if(this.height == undefined) {
			this.height = 0;
		}
		if(this.numGlyphs == undefined) {
			this.numGlyphs = 0;
		}
		if(this.underlinePosition == undefined) {
			this.underlinePosition = 0;
		}
		if(this.underlineThickness == undefined) {
			this.underlineThickness = 0;
		}
		if(this.unitsPerEM == undefined) {
			this.unitsPerEM = 0;
		}
		if(this.__fontID != null) {
			if(lime_utils_Assets.isLocal(this.__fontID)) {
				this.__fromBytes(lime_utils_Assets.getBytes(this.__fontID));
			}
		} else if(this.__fontPath != null) {
			this.__fromFile(this.__fontPath);
		}
	}
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = "lime.text.Font";
lime_text_Font.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.loadFromName = function(path) {
	var font = new lime_text_Font();
	return font.__loadFromName(path);
};
lime_text_Font.__measureFontNode = function(fontFamily) {
	var node = window.document.createElement("span");
	node.setAttribute("aria-hidden","true");
	var text = window.document.createTextNode("BESbswy");
	node.appendChild(text);
	var style = node.style;
	style.display = "block";
	style.position = "absolute";
	style.top = "-9999px";
	style.left = "-9999px";
	style.fontSize = "300px";
	style.width = "auto";
	style.height = "auto";
	style.lineHeight = "normal";
	style.margin = "0";
	style.padding = "0";
	style.fontVariant = "normal";
	style.whiteSpace = "nowrap";
	style.fontFamily = fontFamily;
	window.document.body.appendChild(node);
	return node;
};
lime_text_Font.prototype = {
	__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__loadFromName: function(name) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		this.name = name;
		var userAgent = $global.navigator.userAgent.toLowerCase();
		var isSafari = userAgent.indexOf(" safari/") >= 0 && userAgent.indexOf(" chrome/") < 0;
		var isUIWebView = new EReg("(iPhone|iPod|iPad).*AppleWebKit(?!.*Version)","i").match(userAgent);
		if(!isSafari && !isUIWebView && (window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load)))) {
			window.document.fonts.load("1em '" + name + "'").then(function(_) {
				promise.complete(_gthis);
			},function(_) {
				lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "lime/text/Font.hx", lineNumber : 513, className : "lime.text.Font", methodName : "__loadFromName"});
				promise.complete(_gthis);
			});
		} else {
			var node1 = lime_text_Font.__measureFontNode("'" + name + "', sans-serif");
			var node2 = lime_text_Font.__measureFontNode("'" + name + "', serif");
			var width1 = node1.offsetWidth;
			var width2 = node2.offsetWidth;
			var interval = -1;
			var timeout = 3000;
			var intervalLength = 50;
			var intervalCount = 0;
			var loaded;
			var timeExpired;
			var checkFont = function() {
				intervalCount += 1;
				loaded = node1.offsetWidth != width1 || node2.offsetWidth != width2;
				timeExpired = intervalCount * intervalLength >= timeout;
				if(loaded || timeExpired) {
					window.clearInterval(interval);
					node1.parentNode.removeChild(node1);
					node2.parentNode.removeChild(node2);
					node1 = null;
					node2 = null;
					if(timeExpired) {
						lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "lime/text/Font.hx", lineNumber : 548, className : "lime.text.Font", methodName : "__loadFromName"});
					}
					promise.complete(_gthis);
				}
			};
			interval = window.setInterval(checkFont,intervalLength);
		}
		return promise.future;
	}
	,__class__: lime_text_Font
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = "lime.ui.Gamepad";
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.h[id] = gamepad;
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.h[id];
	if(gamepad != null) {
		gamepad.connected = false;
	}
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) {
		gamepad.onDisconnect.dispatch();
	}
};
lime_ui_Gamepad.prototype = {
	__class__: lime_ui_Gamepad
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app__$Event_$Int_$Float_$Float_$Void();
	this.onHatMove = new lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$Int_$Void();
	this.onButtonDown = new lime_app__$Event_$Int_$Void();
	this.onAxisMove = new lime_app__$Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = "lime.ui.Joystick";
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.h[id] = joystick;
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.h[id];
	if(joystick != null) {
		joystick.connected = false;
	}
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) {
		joystick.onDisconnect.dispatch();
	}
};
lime_ui_Joystick.__getDeviceData = function() {
	if(navigator.getGamepads) {
		return navigator.getGamepads();
	} else if(navigator.webkitGetGamepads) {
		return navigator.webkitGetGamepads();
	} else {
		return null;
	}
};
lime_ui_Joystick.prototype = {
	__class__: lime_ui_Joystick
};
var lime_ui_KeyModifier = {};
lime_ui_KeyModifier.__properties__ = {get_ctrlKey:"get_ctrlKey",get_altKey:"get_altKey"};
lime_ui_KeyModifier.get_altKey = function(this1) {
	if((this1 & 256) <= 0) {
		return (this1 & 512) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.get_ctrlKey = function(this1) {
	if((this1 & 64) <= 0) {
		return (this1 & 128) > 0;
	} else {
		return true;
	}
};
var lime_ui_MouseCursor = $hxEnums["lime.ui.MouseCursor"] = { __ename__:true,__constructs__:null
	,ARROW: {_hx_name:"ARROW",_hx_index:0,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,CROSSHAIR: {_hx_name:"CROSSHAIR",_hx_index:1,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,DEFAULT: {_hx_name:"DEFAULT",_hx_index:2,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,MOVE: {_hx_name:"MOVE",_hx_index:3,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,POINTER: {_hx_name:"POINTER",_hx_index:4,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_NESW: {_hx_name:"RESIZE_NESW",_hx_index:5,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_NS: {_hx_name:"RESIZE_NS",_hx_index:6,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_NWSE: {_hx_name:"RESIZE_NWSE",_hx_index:7,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_WE: {_hx_name:"RESIZE_WE",_hx_index:8,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,TEXT: {_hx_name:"TEXT",_hx_index:9,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,WAIT: {_hx_name:"WAIT",_hx_index:10,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,WAIT_ARROW: {_hx_name:"WAIT_ARROW",_hx_index:11,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,CUSTOM: {_hx_name:"CUSTOM",_hx_index:12,__enum__:"lime.ui.MouseCursor",toString:$estr}
};
lime_ui_MouseCursor.__constructs__ = [lime_ui_MouseCursor.ARROW,lime_ui_MouseCursor.CROSSHAIR,lime_ui_MouseCursor.DEFAULT,lime_ui_MouseCursor.MOVE,lime_ui_MouseCursor.POINTER,lime_ui_MouseCursor.RESIZE_NESW,lime_ui_MouseCursor.RESIZE_NS,lime_ui_MouseCursor.RESIZE_NWSE,lime_ui_MouseCursor.RESIZE_WE,lime_ui_MouseCursor.TEXT,lime_ui_MouseCursor.WAIT,lime_ui_MouseCursor.WAIT_ARROW,lime_ui_MouseCursor.CUSTOM];
var lime_ui_MouseWheelMode = $hxEnums["lime.ui.MouseWheelMode"] = { __ename__:true,__constructs__:null
	,PIXELS: {_hx_name:"PIXELS",_hx_index:0,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
	,LINES: {_hx_name:"LINES",_hx_index:1,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
	,PAGES: {_hx_name:"PAGES",_hx_index:2,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
	,UNKNOWN: {_hx_name:"UNKNOWN",_hx_index:3,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
};
lime_ui_MouseWheelMode.__constructs__ = [lime_ui_MouseWheelMode.PIXELS,lime_ui_MouseWheelMode.LINES,lime_ui_MouseWheelMode.PAGES,lime_ui_MouseWheelMode.UNKNOWN];
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = "lime.ui.Touch";
lime_ui_Touch.prototype = {
	__class__: lime_ui_Touch
};
var lime_ui_Window = function(application,attributes) {
	this.onTextInput = new lime_app__$Event_$String_$Void();
	this.onTextEdit = new lime_app__$Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app__$Event_$Void_$Void();
	this.onResize = new lime_app__$Event_$Int_$Int_$Void();
	this.onRenderContextRestored = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onRenderContextLost = new lime_app__$Event_$Void_$Void();
	this.onRender = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void();
	this.onMouseUp = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void();
	this.onMinimize = new lime_app__$Event_$Void_$Void();
	this.onLeave = new lime_app__$Event_$Void_$Void();
	this.onKeyUp = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app__$Event_$Void_$Void();
	this.onFocusOut = new lime_app__$Event_$Void_$Void();
	this.onFocusIn = new lime_app__$Event_$Void_$Void();
	this.onExpose = new lime_app__$Event_$Void_$Void();
	this.onEnter = new lime_app__$Event_$Void_$Void();
	this.onDropFile = new lime_app__$Event_$String_$Void();
	this.onDeactivate = new lime_app__$Event_$Void_$Void();
	this.onClose = new lime_app__$Event_$Void_$Void();
	this.onActivate = new lime_app__$Event_$Void_$Void();
	this.application = application;
	this.__attributes = attributes != null ? attributes : { };
	if(Object.prototype.hasOwnProperty.call(this.__attributes,"parameters")) {
		this.parameters = this.__attributes.parameters;
	}
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	this.__backend = new lime__$internal_backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = "lime.ui.Window";
lime_ui_Window.prototype = {
	close: function() {
		this.__backend.close();
	}
	,__class__: lime_ui_Window
};
var lime_utils_AssetBundle = function() {
	this.data = new haxe_ds_StringMap();
	this.paths = [];
};
$hxClasses["lime.utils.AssetBundle"] = lime_utils_AssetBundle;
lime_utils_AssetBundle.__name__ = "lime.utils.AssetBundle";
lime_utils_AssetBundle.fromBytes = function(bytes) {
	var input = new haxe_io_BytesInput(bytes);
	return lime_utils_AssetBundle.__extractBundle(input);
};
lime_utils_AssetBundle.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_utils_AssetBundle.fromBytes(bytes));
};
lime_utils_AssetBundle.loadFromFile = function(path) {
	return lime_utils_Bytes.loadFromFile(path).then(lime_utils_AssetBundle.loadFromBytes);
};
lime_utils_AssetBundle.__extractBundle = function(input) {
	var entries = haxe_zip_Reader.readZip(input);
	var bundle = new lime_utils_AssetBundle();
	var _g_head = entries.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var entry = val;
		if(entry.compressed) {
			var bytes = entry.data;
			var this1 = bundle.data;
			var key = entry.fileName;
			var value = lime_utils_Bytes.decompress(bytes,lime_utils_CompressionAlgorithm.DEFLATE);
			this1.h[key] = value;
		} else {
			bundle.data.h[entry.fileName] = entry.data;
		}
		bundle.paths.push(entry.fileName);
	}
	return bundle;
};
lime_utils_AssetBundle.prototype = {
	__class__: lime_utils_AssetBundle
};
var lime_utils_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = 975865;
};
$hxClasses["lime.utils.AssetCache"] = lime_utils_AssetCache;
lime_utils_AssetCache.__name__ = "lime.utils.AssetCache";
lime_utils_AssetCache.prototype = {
	exists: function(id,type) {
		if(type == "IMAGE" || type == null) {
			if(Object.prototype.hasOwnProperty.call(this.image.h,id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			if(Object.prototype.hasOwnProperty.call(this.font.h,id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(Object.prototype.hasOwnProperty.call(this.audio.h,id)) {
				return true;
			}
		}
		return false;
	}
	,set: function(id,type,asset) {
		switch(type) {
		case "FONT":
			this.font.h[id] = asset;
			break;
		case "IMAGE":
			if(!((asset) instanceof lime_graphics_Image)) {
				throw haxe_Exception.thrown("Cannot cache non-Image asset: " + Std.string(asset) + " as Image");
			}
			this.image.h[id] = asset;
			break;
		case "MUSIC":case "SOUND":
			if(!((asset) instanceof lime_media_AudioBuffer)) {
				throw haxe_Exception.thrown("Cannot cache non-AudioBuffer asset: " + Std.string(asset) + " as AudioBuffer");
			}
			this.audio.h[id] = asset;
			break;
		default:
			throw haxe_Exception.thrown(type + " assets are not cachable");
		}
	}
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var h = this.audio.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				if(StringTools.startsWith(key,prefix)) {
					var _this = this.audio;
					if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
						delete(_this.h[key]);
					}
				}
			}
			var h = this.font.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				if(StringTools.startsWith(key,prefix)) {
					var _this = this.font;
					if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
						delete(_this.h[key]);
					}
				}
			}
			var h = this.image.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				if(StringTools.startsWith(key,prefix)) {
					var _this = this.image;
					if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
						delete(_this.h[key]);
					}
				}
			}
		}
	}
	,__class__: lime_utils_AssetCache
};
var lime_utils_AssetLibrary = function() {
	this.types = new haxe_ds_StringMap();
	this.sizes = new haxe_ds_StringMap();
	this.preload = new haxe_ds_StringMap();
	this.paths = new haxe_ds_StringMap();
	this.pathGroups = new haxe_ds_StringMap();
	this.classTypes = new haxe_ds_StringMap();
	this.cachedText = new haxe_ds_StringMap();
	this.cachedImages = new haxe_ds_StringMap();
	this.cachedFonts = new haxe_ds_StringMap();
	this.cachedBytes = new haxe_ds_StringMap();
	this.cachedAudioBuffers = new haxe_ds_StringMap();
	this.onChange = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
};
$hxClasses["lime.utils.AssetLibrary"] = lime_utils_AssetLibrary;
lime_utils_AssetLibrary.__name__ = "lime.utils.AssetLibrary";
lime_utils_AssetLibrary.fromBundle = function(bundle) {
	if(Object.prototype.hasOwnProperty.call(bundle.data.h,"library.json")) {
		var manifest = lime_utils_AssetManifest.fromBytes(bundle.data.h["library.json"]);
		if(manifest != null) {
			var library = null;
			if(manifest.libraryType == null) {
				library = new lime_utils_AssetLibrary();
			} else {
				var name = manifest.libraryType;
				var libraryClass = $hxClasses[name];
				if(libraryClass != null) {
					library = Type.createInstance(libraryClass,manifest.libraryArgs);
				} else {
					lime_utils_Log.warn("Could not find library type: " + manifest.libraryType,{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 122, className : "lime.utils.AssetLibrary", methodName : "fromBundle"});
					return null;
				}
			}
			library.__fromBundle(bundle,manifest);
			return library;
		}
	} else {
		var library = new lime_utils_AssetLibrary();
		library.__fromBundle(bundle);
		return library;
	}
	return null;
};
lime_utils_AssetLibrary.fromManifest = function(manifest) {
	if(manifest == null) {
		return null;
	}
	var library = null;
	if(manifest.libraryType == null) {
		library = new lime_utils_AssetLibrary();
	} else {
		var name = manifest.libraryType;
		var libraryClass = $hxClasses[name];
		if(libraryClass != null) {
			library = Type.createInstance(libraryClass,manifest.libraryArgs);
		} else {
			lime_utils_Log.warn("Could not find library type: " + manifest.libraryType,{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 160, className : "lime.utils.AssetLibrary", methodName : "fromManifest"});
			return null;
		}
	}
	library.__fromManifest(manifest);
	return library;
};
lime_utils_AssetLibrary.prototype = {
	exists: function(id,type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var assetType = this.types.h[id];
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) {
				return true;
			}
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") {
				return true;
			}
		}
		return false;
	}
	,getAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.getBytes(id);
		case "FONT":
			return this.getFont(id);
		case "IMAGE":
			return this.getImage(id);
		case "MUSIC":case "SOUND":
			return this.getAudioBuffer(id);
		case "TEMPLATE":
			throw haxe_Exception.thrown("Not sure how to get template: " + id);
		case "TEXT":
			return this.getText(id);
		default:
			throw haxe_Exception.thrown("Unknown asset type: " + type);
		}
	}
	,getAudioBuffer: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedAudioBuffers.h,id)) {
			return this.cachedAudioBuffers.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return lime_media_AudioBuffer.fromBytes(js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , haxe_io_Bytes));
		} else {
			return lime_media_AudioBuffer.fromFile(this.paths.h[id]);
		}
	}
	,getBytes: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
			return this.cachedBytes.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.cachedText.h,id)) {
			var bytes = lime_utils_Bytes.ofString(this.cachedText.h[id]);
			this.cachedBytes.h[id] = bytes;
			return bytes;
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , haxe_io_Bytes);
		} else {
			return lime_utils_Bytes.fromFile(this.paths.h[id]);
		}
	}
	,getFont: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedFonts.h,id)) {
			return this.cachedFonts.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , lime_text_Font);
		} else {
			return lime_text_Font.fromFile(this.paths.h[id]);
		}
	}
	,getImage: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedImages.h,id)) {
			return this.cachedImages.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , lime_graphics_Image);
		} else {
			return lime_graphics_Image.fromFile(this.paths.h[id]);
		}
	}
	,getText: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedText.h,id)) {
			return this.cachedText.h[id];
		} else {
			var bytes = this.getBytes(id);
			if(bytes == null) {
				return null;
			} else {
				return bytes.getString(0,bytes.length);
			}
		}
	}
	,isLocal: function(id,type) {
		if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return true;
		}
		var _g = js_Boot.__cast(type , String);
		if(_g == null) {
			if(!(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id) || Object.prototype.hasOwnProperty.call(this.cachedText.h,id) || Object.prototype.hasOwnProperty.call(this.cachedImages.h,id) || Object.prototype.hasOwnProperty.call(this.cachedAudioBuffers.h,id))) {
				return Object.prototype.hasOwnProperty.call(this.cachedFonts.h,id);
			} else {
				return true;
			}
		} else {
			switch(_g) {
			case "FONT":
				return Object.prototype.hasOwnProperty.call(this.cachedFonts.h,id);
			case "IMAGE":
				return Object.prototype.hasOwnProperty.call(this.cachedImages.h,id);
			case "MUSIC":case "SOUND":
				return Object.prototype.hasOwnProperty.call(this.cachedAudioBuffers.h,id);
			default:
				if(!Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
					return Object.prototype.hasOwnProperty.call(this.cachedText.h,id);
				} else {
					return true;
				}
			}
		}
	}
	,load: function() {
		if(this.loaded) {
			return lime_app_Future.withValue(this);
		}
		if(this.promise == null) {
			this.promise = new lime_app_Promise();
			this.bytesLoadedCache = new haxe_ds_StringMap();
			this.assetsLoaded = 0;
			this.assetsTotal = 1;
			var h = this.preload.h;
			var id_h = h;
			var id_keys = Object.keys(h);
			var id_length = id_keys.length;
			var id_current = 0;
			while(id_current < id_length) {
				var id = id_keys[id_current++];
				if(!this.preload.h[id]) {
					continue;
				}
				lime_utils_Log.verbose("Preloading asset: " + id + " [" + this.types.h[id] + "]",{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 408, className : "lime.utils.AssetLibrary", methodName : "load"});
				var _g = this.types.h[id];
				if(_g != null) {
					switch(_g) {
					case "BINARY":
						this.assetsTotal++;
						var future = this.loadBytes(id);
						future.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id],[$bind(this,this.load_onProgress)]));
						future.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id],[$bind(this,this.load_onError)]));
						future.onComplete((function(id,_g) {
							return function(bytes) {
								_g[0](id[0],bytes);
							};
						})([id],[$bind(this,this.loadBytes_onComplete)]));
						break;
					case "FONT":
						this.assetsTotal++;
						var future1 = this.loadFont(id);
						future1.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id],[$bind(this,this.load_onProgress)]));
						future1.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id],[$bind(this,this.load_onError)]));
						future1.onComplete((function(id,_g) {
							return function(font) {
								_g[0](id[0],font);
							};
						})([id],[$bind(this,this.loadFont_onComplete)]));
						break;
					case "IMAGE":
						this.assetsTotal++;
						var future2 = this.loadImage(id);
						future2.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id],[$bind(this,this.load_onProgress)]));
						future2.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id],[$bind(this,this.load_onError)]));
						future2.onComplete((function(id,_g) {
							return function(image) {
								_g[0](id[0],image);
							};
						})([id],[$bind(this,this.loadImage_onComplete)]));
						break;
					case "MUSIC":case "SOUND":
						this.assetsTotal++;
						var future3 = this.loadAudioBuffer(id);
						future3.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id],[$bind(this,this.load_onProgress)]));
						future3.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id],[$bind(this,this.loadAudioBuffer_onError)]));
						future3.onComplete((function(id,_g) {
							return function(audioBuffer) {
								_g[0](id[0],audioBuffer);
							};
						})([id],[$bind(this,this.loadAudioBuffer_onComplete)]));
						break;
					case "TEXT":
						this.assetsTotal++;
						var future4 = this.loadText(id);
						future4.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id],[$bind(this,this.load_onProgress)]));
						future4.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id],[$bind(this,this.load_onError)]));
						future4.onComplete((function(id,_g) {
							return function(text) {
								_g[0](id[0],text);
							};
						})([id],[$bind(this,this.loadText_onComplete)]));
						break;
					default:
					}
				}
			}
			this.__assetLoaded(null);
		}
		return this.promise.future;
	}
	,loadAudioBuffer: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedAudioBuffers.h,id)) {
			return lime_app_Future.withValue(this.cachedAudioBuffers.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return lime_app_Future.withValue(lime_media_AudioBuffer.fromBytes(js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , haxe_io_Bytes)));
		} else if(Object.prototype.hasOwnProperty.call(this.pathGroups.h,id)) {
			return lime_media_AudioBuffer.loadFromFiles(this.pathGroups.h[id]);
		} else {
			return lime_media_AudioBuffer.loadFromFile(this.paths.h[id]);
		}
	}
	,loadBytes: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
			return lime_app_Future.withValue(this.cachedBytes.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return lime_app_Future.withValue(Type.createInstance(this.classTypes.h[id],[]));
		} else {
			return lime_utils_Bytes.loadFromFile(this.paths.h[id]);
		}
	}
	,loadFont: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedFonts.h,id)) {
			return lime_app_Future.withValue(this.cachedFonts.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			var font = Type.createInstance(this.classTypes.h[id],[]);
			return font.__loadFromName(font.name);
		} else {
			return lime_text_Font.loadFromName(this.paths.h[id]);
		}
	}
	,loadImage: function(id) {
		var _gthis = this;
		if(Object.prototype.hasOwnProperty.call(this.cachedImages.h,id)) {
			return lime_app_Future.withValue(this.cachedImages.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return lime_app_Future.withValue(Type.createInstance(this.classTypes.h[id],[]));
		} else if(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
			return lime_graphics_Image.loadFromBytes(this.cachedBytes.h[id]).then(function(image) {
				var _this = _gthis.cachedBytes;
				if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
					delete(_this.h[id]);
				}
				_gthis.cachedImages.h[id] = image;
				return lime_app_Future.withValue(image);
			});
		} else {
			return lime_graphics_Image.loadFromFile(this.paths.h[id]);
		}
	}
	,loadText: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedText.h,id)) {
			return lime_app_Future.withValue(this.cachedText.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id) || Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			var bytes = this.getBytes(id);
			if(bytes == null) {
				return lime_app_Future.withValue(null);
			} else {
				var text = bytes.getString(0,bytes.length);
				this.cachedText.h[id] = text;
				return lime_app_Future.withValue(text);
			}
		} else {
			var request = new lime_net__$HTTPRequest_$String();
			return request.load(this.paths.h[id]);
		}
	}
	,unload: function() {
	}
	,__assetLoaded: function(id) {
		this.assetsLoaded++;
		if(id != null) {
			lime_utils_Log.verbose("Loaded asset: " + id + " [" + this.types.h[id] + "] (" + (this.assetsLoaded - 1) + "/" + (this.assetsTotal - 1) + ")",{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 622, className : "lime.utils.AssetLibrary", methodName : "__assetLoaded"});
		}
		if(id != null) {
			var size = Object.prototype.hasOwnProperty.call(this.sizes.h,id) ? this.sizes.h[id] : 0;
			if(!Object.prototype.hasOwnProperty.call(this.bytesLoadedCache.h,id)) {
				this.bytesLoaded += size;
			} else {
				var cache = this.bytesLoadedCache.h[id];
				if(cache < size) {
					this.bytesLoaded += size - cache;
				}
			}
			this.bytesLoadedCache.h[id] = size;
		}
		if(this.assetsLoaded < this.assetsTotal) {
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		} else {
			this.loaded = true;
			this.promise.progress(this.bytesTotal,this.bytesTotal);
			this.promise.complete(this);
		}
	}
	,__cacheBreak: function(path) {
		return lime_utils_Assets.__cacheBreak(path);
	}
	,__fromBundle: function(bundle,manifest) {
		if(manifest != null) {
			var id;
			var data;
			var type;
			var _g = 0;
			var _g1 = manifest.assets;
			while(_g < _g1.length) {
				var asset = _g1[_g];
				++_g;
				id = Object.prototype.hasOwnProperty.call(asset,"id") ? asset.id : asset.path;
				data = bundle.data.h[asset.path];
				if(Object.prototype.hasOwnProperty.call(asset,"type")) {
					type = asset.type;
					if(type == "TEXT") {
						this.cachedText.h[id] = data != null ? Std.string(data) : null;
					} else {
						this.cachedBytes.h[id] = data;
					}
					this.types.h[id] = asset.type;
				} else {
					this.cachedBytes.h[id] = data;
					this.types.h[id] = "BINARY";
				}
			}
		} else {
			var _g = 0;
			var _g1 = bundle.paths;
			while(_g < _g1.length) {
				var path = _g1[_g];
				++_g;
				this.cachedBytes.h[path] = bundle.data.h[path];
				this.types.h[path] = "BINARY";
			}
		}
	}
	,__fromManifest: function(manifest) {
		var hasSize = manifest.version >= 2;
		var size;
		var id;
		var pathGroup;
		var classRef;
		var basePath = manifest.rootPath;
		if(basePath == null) {
			basePath = "";
		}
		if(basePath != "") {
			basePath += "/";
		}
		var _g = 0;
		var _g1 = manifest.assets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			size = hasSize && Object.prototype.hasOwnProperty.call(asset,"size") ? asset.size : 100;
			id = Object.prototype.hasOwnProperty.call(asset,"id") ? asset.id : asset.path;
			if(Object.prototype.hasOwnProperty.call(asset,"path")) {
				var this1 = this.paths;
				var value = this.__cacheBreak(this.__resolvePath(basePath + Std.string(Reflect.field(asset,"path"))));
				this1.h[id] = value;
			}
			if(Object.prototype.hasOwnProperty.call(asset,"pathGroup")) {
				pathGroup = Reflect.field(asset,"pathGroup");
				var _g2 = 0;
				var _g3 = pathGroup.length;
				while(_g2 < _g3) {
					var i = _g2++;
					pathGroup[i] = this.__cacheBreak(this.__resolvePath(basePath + pathGroup[i]));
				}
				this.pathGroups.h[id] = pathGroup;
			}
			this.sizes.h[id] = size;
			this.types.h[id] = asset.type;
			if(Object.prototype.hasOwnProperty.call(asset,"preload")) {
				this.preload.h[id] = Reflect.field(asset,"preload");
			}
			if(Object.prototype.hasOwnProperty.call(asset,"className")) {
				var name = Reflect.field(asset,"className");
				classRef = $hxClasses[name];
				this.classTypes.h[id] = classRef;
			}
		}
		this.bytesTotal = 0;
		var _g = 0;
		var _g1 = manifest.assets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			id = Object.prototype.hasOwnProperty.call(asset,"id") ? asset.id : asset.path;
			if(Object.prototype.hasOwnProperty.call(this.preload.h,id) && this.preload.h[id] && Object.prototype.hasOwnProperty.call(this.sizes.h,id)) {
				this.bytesTotal += this.sizes.h[id];
			}
		}
	}
	,__resolvePath: function(path) {
		path = StringTools.replace(path,"\\","/");
		var colonIdx = path.indexOf(":");
		if(StringTools.startsWith(path,"http") && colonIdx > 0) {
			var lastSlashIdx = colonIdx + 3;
			var httpSection = HxOverrides.substr(path,0,lastSlashIdx);
			path = httpSection + StringTools.replace(HxOverrides.substr(path,lastSlashIdx,null),"//","/");
		} else {
			path = StringTools.replace(path,"//","/");
		}
		if(path.indexOf("./") > -1) {
			var split = path.split("/");
			var newPath = [];
			var _g = 0;
			var _g1 = split.length;
			while(_g < _g1) {
				var i = _g++;
				if(split[i] == "..") {
					if(i == 0 || newPath[i - 1] == "..") {
						newPath.push("..");
					} else {
						newPath.pop();
					}
				} else if(split[i] == ".") {
					if(i == 0) {
						newPath.push(".");
					}
				} else {
					newPath.push(split[i]);
				}
			}
			path = newPath.join("/");
		}
		return path;
	}
	,loadAudioBuffer_onComplete: function(id,audioBuffer) {
		this.cachedAudioBuffers.h[id] = audioBuffer;
		if(Object.prototype.hasOwnProperty.call(this.pathGroups.h,id)) {
			var pathGroup = this.pathGroups.h[id];
			var h = this.pathGroups.h;
			var otherID_h = h;
			var otherID_keys = Object.keys(h);
			var otherID_length = otherID_keys.length;
			var otherID_current = 0;
			while(otherID_current < otherID_length) {
				var otherID = otherID_keys[otherID_current++];
				if(otherID == id) {
					continue;
				}
				var _g = 0;
				while(_g < pathGroup.length) {
					var path = pathGroup[_g];
					++_g;
					if(this.pathGroups.h[otherID].indexOf(path) > -1) {
						this.cachedAudioBuffers.h[otherID] = audioBuffer;
						break;
					}
				}
			}
		}
		this.__assetLoaded(id);
	}
	,loadAudioBuffer_onError: function(id,message) {
		if(message != null && message != "") {
			lime_utils_Log.warn("Could not load \"" + id + "\": " + Std.string(message),{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 868, className : "lime.utils.AssetLibrary", methodName : "loadAudioBuffer_onError"});
		} else {
			lime_utils_Log.warn("Could not load \"" + id + "\"",{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 872, className : "lime.utils.AssetLibrary", methodName : "loadAudioBuffer_onError"});
		}
		this.loadAudioBuffer_onComplete(id,new lime_media_AudioBuffer());
	}
	,loadBytes_onComplete: function(id,bytes) {
		this.cachedBytes.h[id] = bytes;
		this.__assetLoaded(id);
	}
	,loadFont_onComplete: function(id,font) {
		this.cachedFonts.h[id] = font;
		this.__assetLoaded(id);
	}
	,loadImage_onComplete: function(id,image) {
		this.cachedImages.h[id] = image;
		this.__assetLoaded(id);
	}
	,loadText_onComplete: function(id,text) {
		this.cachedText.h[id] = text;
		this.__assetLoaded(id);
	}
	,load_onError: function(id,message) {
		if(message != null && message != "") {
			this.promise.error("Error loading asset \"" + id + "\": " + Std.string(message));
		} else {
			this.promise.error("Error loading asset \"" + id + "\"");
		}
	}
	,load_onProgress: function(id,bytesLoaded,bytesTotal) {
		if(bytesLoaded > 0) {
			var size = this.sizes.h[id];
			var percent;
			if(bytesTotal > 0) {
				percent = bytesLoaded / bytesTotal;
				if(percent > 1) {
					percent = 1;
				}
				bytesLoaded = Math.floor(percent * size);
			} else if(bytesLoaded > size) {
				bytesLoaded = size;
			}
			if(Object.prototype.hasOwnProperty.call(this.bytesLoadedCache.h,id)) {
				var cache = this.bytesLoadedCache.h[id];
				if(bytesLoaded != cache) {
					this.bytesLoaded += bytesLoaded - cache;
				}
			} else {
				this.bytesLoaded += bytesLoaded;
			}
			this.bytesLoadedCache.h[id] = bytesLoaded;
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		}
	}
	,__class__: lime_utils_AssetLibrary
};
var lime_utils_AssetManifest = function() {
	this.assets = [];
	this.libraryArgs = [];
	this.version = 2;
};
$hxClasses["lime.utils.AssetManifest"] = lime_utils_AssetManifest;
lime_utils_AssetManifest.__name__ = "lime.utils.AssetManifest";
lime_utils_AssetManifest.fromBytes = function(bytes,rootPath) {
	if(bytes != null) {
		return lime_utils_AssetManifest.parse(bytes.getString(0,bytes.length),rootPath);
	} else {
		return null;
	}
};
lime_utils_AssetManifest.loadFromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils_Bytes.loadFromFile(path).then(function(bytes) {
		return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
	});
};
lime_utils_AssetManifest.parse = function(data,rootPath) {
	if(data == null || data == "") {
		return null;
	}
	var manifestData = JSON.parse(data);
	var manifest = new lime_utils_AssetManifest();
	if(Object.prototype.hasOwnProperty.call(manifestData,"name")) {
		manifest.name = manifestData.name;
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"libraryType")) {
		manifest.libraryType = manifestData.libraryType;
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"libraryArgs")) {
		manifest.libraryArgs = manifestData.libraryArgs;
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"assets")) {
		var assets = manifestData.assets;
		if(Object.prototype.hasOwnProperty.call(manifestData,"version") && manifestData.version <= 2) {
			manifest.assets = haxe_Unserializer.run(assets);
		} else {
			manifest.assets = assets;
		}
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"rootPath")) {
		manifest.rootPath = manifestData.rootPath;
	}
	if(rootPath != null && rootPath != "") {
		if(manifest.rootPath == null || manifest.rootPath == "") {
			manifest.rootPath = rootPath;
		} else {
			manifest.rootPath = rootPath + "/" + manifest.rootPath;
		}
	}
	return manifest;
};
lime_utils_AssetManifest.__resolvePath = function(path) {
	if(path == null) {
		return null;
	}
	var queryIndex = path.indexOf("?");
	var basePath;
	if(queryIndex > -1) {
		basePath = HxOverrides.substr(path,0,queryIndex);
	} else {
		basePath = path;
	}
	basePath = StringTools.replace(basePath,"\\","/");
	while(StringTools.endsWith(basePath,"/")) basePath = HxOverrides.substr(basePath,0,basePath.length - 1);
	if(StringTools.endsWith(basePath,".bundle")) {
		if(queryIndex > -1) {
			return basePath + "/library.json" + HxOverrides.substr(path,queryIndex,null);
		} else {
			return basePath + "/library.json";
		}
	} else {
		return path;
	}
};
lime_utils_AssetManifest.__resolveRootPath = function(rootPath,path) {
	if(rootPath != null) {
		return rootPath;
	}
	var queryIndex = path.indexOf("?");
	if(queryIndex > -1) {
		rootPath = HxOverrides.substr(path,0,queryIndex);
	} else {
		rootPath = path;
	}
	rootPath = StringTools.replace(rootPath,"\\","/");
	while(StringTools.endsWith(rootPath,"/")) {
		if(rootPath == "/") {
			return rootPath;
		}
		rootPath = HxOverrides.substr(rootPath,0,rootPath.length - 1);
	}
	if(StringTools.endsWith(rootPath,".bundle")) {
		return rootPath;
	} else {
		return haxe_io_Path.directory(rootPath);
	}
};
lime_utils_AssetManifest.prototype = {
	__class__: lime_utils_AssetManifest
};
var lime_utils_Assets = function() { };
$hxClasses["lime.utils.Assets"] = lime_utils_Assets;
lime_utils_Assets.__name__ = "lime.utils.Assets";
lime_utils_Assets.getAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var font = lime_utils_Assets.cache.font.h[id];
			if(font != null) {
				return font;
			}
			break;
		case "IMAGE":
			var image = lime_utils_Assets.cache.image.h[id];
			if(lime_utils_Assets.isValidImage(image)) {
				return image;
			}
			break;
		case "MUSIC":case "SOUND":
			var audio = lime_utils_Assets.cache.audio.h[id];
			if(lime_utils_Assets.isValidAudio(audio)) {
				return audio;
			}
			break;
		case "TEMPLATE":
			throw haxe_Exception.thrown("Not sure how to get template: " + id);
		default:
			return null;
		}
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			if(symbol_library.isLocal(symbol_symbolName,type)) {
				var asset = symbol_library.getAsset(symbol_symbolName,type);
				if(useCache && lime_utils_Assets.cache.enabled) {
					lime_utils_Assets.cache.set(id,type,asset);
				}
				return asset;
			} else {
				lime_utils_Log.error(type + " asset \"" + id + "\" exists, but only asynchronously",{ fileName : "lime/utils/Assets.hx", lineNumber : 133, className : "lime.utils.Assets", methodName : "getAsset"});
			}
		} else {
			lime_utils_Log.error("There is no " + type + " asset with an ID of \"" + id + "\"",{ fileName : "lime/utils/Assets.hx", lineNumber : 138, className : "lime.utils.Assets", methodName : "getAsset"});
		}
	} else {
		lime_utils_Log.error(lime_utils_Assets.__libraryNotFound(symbol_libraryName),{ fileName : "lime/utils/Assets.hx", lineNumber : 143, className : "lime.utils.Assets", methodName : "getAsset"});
	}
	return null;
};
lime_utils_Assets.getBytes = function(id) {
	return lime_utils_Assets.getAsset(id,"BINARY",false);
};
lime_utils_Assets.getLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	return lime_utils_Assets.libraries.h[name];
};
lime_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && lime_utils_Assets.cache.enabled) {
		if(lime_utils_Assets.cache.exists(id,type)) {
			return true;
		}
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.isLocal(symbol_symbolName,type);
	} else {
		return false;
	}
};
lime_utils_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_utils_Assets.isValidImage = function(image) {
	if(image != null) {
		return image.buffer != null;
	} else {
		return false;
	}
};
lime_utils_Assets.loadLibrary = function(id) {
	var promise = new lime_app_Promise();
	var library = lime_utils_Assets.getLibrary(id);
	if(library != null) {
		return library.load();
	}
	var path = id;
	var rootPath = null;
	if(Object.prototype.hasOwnProperty.call(lime_utils_Assets.bundlePaths.h,id)) {
		lime_utils_AssetBundle.loadFromFile(lime_utils_Assets.bundlePaths.h[id]).onComplete(function(bundle) {
			if(bundle == null) {
				promise.error("Cannot load bundle for library \"" + id + "\"");
				return;
			}
			var library = lime_utils_AssetLibrary.fromBundle(bundle);
			if(library == null) {
				promise.error("Cannot open library \"" + id + "\"");
			} else {
				lime_utils_Assets.libraries.h[id] = library;
				library.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
				promise.completeWith(library.load());
			}
		}).onError(function(_) {
			promise.error("There is no asset library with an ID of \"" + id + "\"");
		});
	} else {
		if(Object.prototype.hasOwnProperty.call(lime_utils_Assets.libraryPaths.h,id)) {
			path = lime_utils_Assets.libraryPaths.h[id];
			rootPath = haxe_io_Path.directory(path);
		} else {
			if(StringTools.endsWith(path,".bundle")) {
				rootPath = path;
				path += "/library.json";
			} else {
				rootPath = haxe_io_Path.directory(path);
			}
			path = lime_utils_Assets.__cacheBreak(path);
		}
		lime_utils_AssetManifest.loadFromFile(path,rootPath).onComplete(function(manifest) {
			if(manifest == null) {
				promise.error("Cannot parse asset manifest for library \"" + id + "\"");
				return;
			}
			var library = lime_utils_AssetLibrary.fromManifest(manifest);
			if(library == null) {
				promise.error("Cannot open library \"" + id + "\"");
			} else {
				lime_utils_Assets.libraries.h[id] = library;
				library.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
				promise.completeWith(library.load());
			}
		}).onError(function(_) {
			promise.error("There is no asset library with an ID of \"" + id + "\"");
		});
	}
	return promise.future;
};
lime_utils_Assets.registerLibrary = function(name,library) {
	if(Object.prototype.hasOwnProperty.call(lime_utils_Assets.libraries.h,name)) {
		if(lime_utils_Assets.libraries.h[name] == library) {
			return;
		} else {
			lime_utils_Assets.unloadLibrary(name);
		}
	}
	if(library != null) {
		library.onChange.add(lime_utils_Assets.library_onChange);
	}
	lime_utils_Assets.libraries.h[name] = library;
};
lime_utils_Assets.unloadLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	var library = lime_utils_Assets.libraries.h[name];
	if(library != null) {
		lime_utils_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_utils_Assets.library_onChange);
		library.unload();
	}
	var _this = lime_utils_Assets.libraries;
	if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
		delete(_this.h[name]);
	}
};
lime_utils_Assets.__cacheBreak = function(path) {
	if(lime_utils_Assets.cache.version > 0) {
		if(path.indexOf("?") > -1) {
			path += "&" + lime_utils_Assets.cache.version;
		} else {
			path += "?" + lime_utils_Assets.cache.version;
		}
	}
	return path;
};
lime_utils_Assets.__libraryNotFound = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	if(lime_app_Application.current != null && lime_app_Application.current.__preloader != null && !lime_app_Application.current.__preloader.complete) {
		return "There is no asset library named \"" + name + "\", or it is not yet preloaded";
	} else {
		return "There is no asset library named \"" + name + "\"";
	}
};
lime_utils_Assets.library_onChange = function() {
	lime_utils_Assets.cache.clear();
	lime_utils_Assets.onChange.dispatch();
};
var lime_utils_Bytes = {};
lime_utils_Bytes._new = function(length,bytesData) {
	var this1 = new haxe_io_Bytes(bytesData);
	return this1;
};
lime_utils_Bytes.decompress = function(this1,algorithm) {
	switch(algorithm._hx_index) {
	case 0:
		return lime__$internal_format_Deflate.decompress(this1);
	case 1:
		return lime__$internal_format_GZip.decompress(this1);
	case 2:
		return lime__$internal_format_LZMA.decompress(this1);
	case 3:
		return lime__$internal_format_Zlib.decompress(this1);
	}
};
lime_utils_Bytes.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	return lime_utils_Bytes._new(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.fromFile = function(path) {
	return null;
};
lime_utils_Bytes.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$utils_$Bytes();
	return request.load(path);
};
lime_utils_Bytes.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return lime_utils_Bytes._new(bytes.length,bytes.b.bufferValue);
};
var lime_utils_CompressionAlgorithm = $hxEnums["lime.utils.CompressionAlgorithm"] = { __ename__:true,__constructs__:null
	,DEFLATE: {_hx_name:"DEFLATE",_hx_index:0,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
	,GZIP: {_hx_name:"GZIP",_hx_index:1,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
	,LZMA: {_hx_name:"LZMA",_hx_index:2,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
	,ZLIB: {_hx_name:"ZLIB",_hx_index:3,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
};
lime_utils_CompressionAlgorithm.__constructs__ = [lime_utils_CompressionAlgorithm.DEFLATE,lime_utils_CompressionAlgorithm.GZIP,lime_utils_CompressionAlgorithm.LZMA,lime_utils_CompressionAlgorithm.ZLIB];
var lime_utils_Log = function() { };
$hxClasses["lime.utils.Log"] = lime_utils_Log;
lime_utils_Log.__name__ = "lime.utils.Log";
lime_utils_Log.error = function(message,info) {
	if(lime_utils_Log.level >= 1) {
		var message1 = "[" + info.className + "] ERROR: " + Std.string(message);
		if(lime_utils_Log.throwErrors) {
			throw haxe_Exception.thrown(message1);
		} else {
			console.error(message1);
		}
	}
};
lime_utils_Log.verbose = function(message,info) {
	if(lime_utils_Log.level >= 5) {
		var message1 = "[" + info.className + "] " + Std.string(message);
		console.log(message1);
	}
};
lime_utils_Log.warn = function(message,info) {
	if(lime_utils_Log.level >= 2) {
		console.warn("[" + info.className + "] WARNING: " + Std.string(message));
	}
};
var lime_utils_Preloader = function() {
	this.bytesTotalCache = new haxe_ds_StringMap();
	this.bytesLoadedCache2 = new haxe_ds_StringMap();
	this.bytesLoadedCache = new haxe_ds_ObjectMap();
	this.onProgress = new lime_app__$Event_$Int_$Int_$Void();
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.libraries = [];
	this.libraryNames = [];
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.utils.Preloader"] = lime_utils_Preloader;
lime_utils_Preloader.__name__ = "lime.utils.Preloader";
lime_utils_Preloader.prototype = {
	addLibrary: function(library) {
		this.libraries.push(library);
	}
	,addLibraryName: function(name) {
		if(this.libraryNames.indexOf(name) == -1) {
			this.libraryNames.push(name);
		}
	}
	,load: function() {
		var _gthis = this;
		var _g = 0;
		var _g1 = this.libraries;
		while(_g < _g1.length) {
			var library = _g1[_g];
			++_g;
			this.bytesTotal += library.bytesTotal;
		}
		this.loadedLibraries = -1;
		this.preloadStarted = false;
		var _g = 0;
		var _g1 = this.libraries;
		while(_g < _g1.length) {
			var library = [_g1[_g]];
			++_g;
			lime_utils_Log.verbose("Preloading asset library",{ fileName : "lime/utils/Preloader.hx", lineNumber : 134, className : "lime.utils.Preloader", methodName : "load"});
			library[0].load().onProgress((function(library) {
				return function(loaded,total) {
					if(_gthis.bytesLoadedCache.h.__keys__[library[0].__id__] == null) {
						_gthis.bytesLoaded += loaded;
					} else {
						_gthis.bytesLoaded += loaded - _gthis.bytesLoadedCache.h[library[0].__id__];
					}
					_gthis.bytesLoadedCache.set(library[0],loaded);
					if(!_gthis.simulateProgress) {
						_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
					}
				};
			})(library)).onComplete((function(library) {
				return function(_) {
					if(_gthis.bytesLoadedCache.h.__keys__[library[0].__id__] == null) {
						_gthis.bytesLoaded += library[0].bytesTotal;
					} else {
						_gthis.bytesLoaded += (library[0].bytesTotal | 0) - _gthis.bytesLoadedCache.h[library[0].__id__];
					}
					_gthis.loadedAssetLibrary();
				};
			})(library)).onError((function() {
				return function(e) {
					lime_utils_Log.error(e,{ fileName : "lime/utils/Preloader.hx", lineNumber : 170, className : "lime.utils.Preloader", methodName : "load"});
				};
			})());
		}
		var _g = 0;
		var _g1 = this.libraryNames;
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			this.bytesTotal += 200;
		}
		this.loadedLibraries++;
		this.preloadStarted = true;
		this.updateProgress();
	}
	,loadedAssetLibrary: function(name) {
		this.loadedLibraries++;
		var current = this.loadedLibraries;
		if(!this.preloadStarted) {
			++current;
		}
		var totalLibraries = this.libraries.length + this.libraryNames.length;
		if(name != null) {
			lime_utils_Log.verbose("Loaded asset library: " + name + " [" + current + "/" + totalLibraries + "]",{ fileName : "lime/utils/Preloader.hx", lineNumber : 197, className : "lime.utils.Preloader", methodName : "loadedAssetLibrary"});
		} else {
			lime_utils_Log.verbose("Loaded asset library [" + current + "/" + totalLibraries + "]",{ fileName : "lime/utils/Preloader.hx", lineNumber : 201, className : "lime.utils.Preloader", methodName : "loadedAssetLibrary"});
		}
		this.updateProgress();
	}
	,start: function() {
		if(this.complete || this.simulateProgress || !this.preloadComplete) {
			return;
		}
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,updateProgress: function() {
		var _gthis = this;
		if(!this.simulateProgress) {
			this.onProgress.dispatch(this.bytesLoaded,this.bytesTotal);
		}
		if(this.loadedLibraries == this.libraries.length && !this.initLibraryNames) {
			this.initLibraryNames = true;
			var _g = 0;
			var _g1 = this.libraryNames;
			while(_g < _g1.length) {
				var name = [_g1[_g]];
				++_g;
				lime_utils_Log.verbose("Preloading asset library: " + name[0],{ fileName : "lime/utils/Preloader.hx", lineNumber : 239, className : "lime.utils.Preloader", methodName : "updateProgress"});
				lime_utils_Assets.loadLibrary(name[0]).onProgress((function(name) {
					return function(loaded,total) {
						if(total > 0) {
							if(!Object.prototype.hasOwnProperty.call(_gthis.bytesTotalCache.h,name[0])) {
								_gthis.bytesTotalCache.h[name[0]] = total;
								_gthis.bytesTotal += total - 200;
							}
							if(loaded > total) {
								loaded = total;
							}
							if(!Object.prototype.hasOwnProperty.call(_gthis.bytesLoadedCache2.h,name[0])) {
								_gthis.bytesLoaded += loaded;
							} else {
								_gthis.bytesLoaded += loaded - _gthis.bytesLoadedCache2.h[name[0]];
							}
							_gthis.bytesLoadedCache2.h[name[0]] = loaded;
							if(!_gthis.simulateProgress) {
								_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
							}
						}
					};
				})(name)).onComplete((function(name) {
					return function(library) {
						var total = 200;
						if(Object.prototype.hasOwnProperty.call(_gthis.bytesTotalCache.h,name[0])) {
							total = _gthis.bytesTotalCache.h[name[0]];
						}
						if(!Object.prototype.hasOwnProperty.call(_gthis.bytesLoadedCache2.h,name[0])) {
							_gthis.bytesLoaded += total;
						} else {
							_gthis.bytesLoaded += total - _gthis.bytesLoadedCache2.h[name[0]];
						}
						_gthis.loadedAssetLibrary(name[0]);
					};
				})(name)).onError((function() {
					return function(e) {
						lime_utils_Log.error(e,{ fileName : "lime/utils/Preloader.hx", lineNumber : 293, className : "lime.utils.Preloader", methodName : "updateProgress"});
					};
				})());
			}
		}
		if(!this.simulateProgress && this.loadedLibraries == this.libraries.length + this.libraryNames.length) {
			if(!this.preloadComplete) {
				this.preloadComplete = true;
				lime_utils_Log.verbose("Preload complete",{ fileName : "lime/utils/Preloader.hx", lineNumber : 306, className : "lime.utils.Preloader", methodName : "updateProgress"});
			}
			this.start();
		}
	}
	,__class__: lime_utils_Preloader
};
var peote_text_FontConfig = function() {
};
$hxClasses["peote.text.FontConfig"] = peote_text_FontConfig;
peote_text_FontConfig.__name__ = "peote.text.FontConfig";
peote_text_FontConfig.prototype = {
	__class__: peote_text_FontConfig
};
var peote_view_Program = function(buffer) {
	this.uniformFloats = [];
	this.uniformFloatsFragment = null;
	this.uniformFloatsVertex = null;
	this.ready = false;
	this.hasFragmentInjection = false;
	this.fragmentFloatPrecision = null;
	this.formulaHasChanged = false;
	this.formula = new haxe_ds_StringMap();
	this.colorFormula = "";
	this.usedID_by_ColorFormula = 0;
	this.used_by_ColorFormula = 0;
	this.textureID_Defaults = [];
	this.customTextureIdentifiers = [];
	this.activeUnits = [];
	this.activeTextures = [];
	this.textureLayers = new haxe_ds_IntMap();
	this.textureListPicking = new peote_view_utils_RenderList_$peote_$view_$ActiveTexture(new haxe_ds_ObjectMap());
	this.textureList = new peote_view_utils_RenderList_$peote_$view_$ActiveTexture(new haxe_ds_ObjectMap());
	this.glShaderConfig = { isPICKING : false, isES3 : false, isINSTANCED : false, isUBO : false, IN : "attribute", VARIN : "varying", VAROUT : "varying", hasTEXTURES : false, hasTEXTURE_FUNCTIONS : false, hasFRAGMENT_INJECTION : false, FRAGMENT_PROGRAM_UNIFORMS : "", FRAGMENT_CALC_LAYER : "", TEXTURES : [], TEXTURE_DEFAULTS : [], isDISCARD : true, DISCARD : "0.0", isPIXELSNAPPING : false, PIXELDIVISOR : "1.0", VERTEX_FLOAT_PRECISION : null, VERTEX_INT_PRECISION : null, VERTEX_SAMPLER_PRECISION : null, FRAGMENT_FLOAT_PRECISION : null, FRAGMENT_INT_PRECISION : null, FRAGMENT_SAMPLER_PRECISION : null, VERTEX_INJECTION : "", FRAGMENT_INJECTION : "", SIZE_FORMULA : null, POS_FORMULA : null, ROTZ_FORMULA : null, PIVOT_FORMULA : null, FORMULA_VARYINGS : { }, FORMULA_CONSTANTS : { }, FRAGMENT_EXTENSIONS : []};
	this.glFragmentShaderPicking = null;
	this.glVertexShaderPicking = null;
	this.glFragmentShader = null;
	this.glVertexShader = null;
	this.glProgramPicking = null;
	this.glProgram = null;
	this.gl = null;
	this.displays = [];
	this.isVisible = true;
	this.autoUpdateTextures = true;
	this.clearMask = false;
	this.mask = 0;
	this.colorEnabled = true;
	this.buffer = buffer;
	this.alphaEnabled = buffer.hasAlpha();
	this.zIndexEnabled = buffer.hasZindex();
	this.colorIdentifiers = buffer.getColorIdentifiers();
	this.customIdentifiers = buffer.getCustomIdentifiers();
	this.customVaryings = buffer.getCustomVaryings();
	this.textureIdentifiers = buffer.getTextureIdentifiers();
	this.defaultColorFormula = buffer.getDefaultColorFormula();
	this.defaultFormulaVars = buffer.getDefaultFormulaVars();
	var h = buffer.getFormulas().h;
	var k_h = h;
	var k_keys = Object.keys(h);
	var k_length = k_keys.length;
	var k_current = 0;
	while(k_current < k_length) {
		var k = k_keys[k_current++];
		var _this = this.formula;
		var value = buffer.getFormulas().h[k];
		_this.h[k] = value;
	}
	try {
		peote_view_utils_Util.resolveFormulaCyclic(buffer.getFormulas());
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		throw haxe_Exception.thrown("Error: cyclic reference of \"" + Std.string(e.errVar) + "\" inside @formula \"" + Std.string(e.formula) + "\" for \"" + Std.string(e.errKey) + "\"");
	}
	peote_view_utils_Util.resolveFormulaVars(buffer.getFormulas(),buffer.getAttributes());
	this.parseColorFormula();
};
$hxClasses["peote.view.Program"] = peote_view_Program;
peote_view_Program.__name__ = "peote.view.Program";
peote_view_Program.prototype = {
	addToDisplay: function(display,atProgram,addBefore) {
		if(addBefore == null) {
			addBefore = false;
		}
		if(this.displays.indexOf(display) < 0) {
			this.displays.push(display);
			var newGl = display.gl;
			if(newGl != null && newGl != this.gl) {
				var _g = 0;
				var _g1 = this.displays;
				while(_g < _g1.length) {
					var d = _g1[_g];
					++_g;
					if(d.gl != null && d.gl != newGl) {
						throw haxe_Exception.thrown("Error, program can not used inside different gl-contexts");
					}
				}
				if(this.gl != null) {
					this.gl.deleteShader(this.glVertexShader);
					this.gl.deleteShader(this.glFragmentShader);
					this.gl.deleteProgram(this.glProgram);
					if(this.buffer.hasPicking()) {
						this.gl.deleteShader(this.glVertexShaderPicking);
						this.gl.deleteShader(this.glFragmentShaderPicking);
						this.gl.deleteProgram(this.glProgramPicking);
					}
				}
				this.gl = newGl;
				if(peote_view_Version.isES3) {
					this.glShaderConfig.isES3 = true;
					this.glShaderConfig.IN = "in";
					this.glShaderConfig.VARIN = "in";
					this.glShaderConfig.VAROUT = "out";
				}
				if(peote_view_Version.isUBO) {
					this.glShaderConfig.isUBO = true;
				}
				if(peote_view_Version.isINSTANCED) {
					this.glShaderConfig.isINSTANCED = true;
				}
				this.glShaderConfig.FRAGMENT_EXTENSIONS = [];
				if(this.gl.getExtension("OES_standard_derivatives") != null) {
					this.glShaderConfig.FRAGMENT_EXTENSIONS.push({ EXTENSION : "GL_OES_standard_derivatives"});
				}
				if(this.gl.getExtension("EXT_color_buffer_float") != null) {
					this.glShaderConfig.FRAGMENT_EXTENSIONS.push({ EXTENSION : "EXT_color_buffer_float"});
				} else if(this.gl.getExtension("OES_texture_float") != null) {
					this.glShaderConfig.FRAGMENT_EXTENSIONS.push({ EXTENSION : "OES_texture_float"});
				}
				this.buffer.setNewGLContext(this.gl);
				this.createProg();
				if(this.buffer.hasPicking()) {
					this.createProg(true);
				}
				var _g = 0;
				var _g1 = this.activeTextures;
				while(_g < _g1.length) {
					var t = _g1[_g];
					++_g;
					var newGl = this.gl;
					if(newGl != null && newGl != t.gl) {
						var _g2 = 0;
						var _g3 = t.programs;
						while(_g2 < _g3.length) {
							var p = _g3[_g2];
							++_g2;
							if(p.gl != null && p.gl != newGl) {
								throw haxe_Exception.thrown("Error, texture can not used inside different gl-contexts");
							}
						}
						var _g4 = 0;
						var _g5 = t.displays;
						while(_g4 < _g5.length) {
							var d = _g5[_g4];
							++_g4;
							if(d.gl != null && d.gl != newGl) {
								throw haxe_Exception.thrown("Error, texture can not used inside different gl-contexts");
							}
						}
						if(t.gl != null) {
							t.gl.deleteTexture(t.glTexture);
							t.glTexture = null;
							if(t.displays.length == 0 && t.framebuffer != null) {
								t.gl.deleteFramebuffer(t.framebuffer);
								t.framebuffer = null;
								if(t.glDepthBuffer != null) {
									t.gl.deleteRenderbuffer(t.glDepthBuffer);
								}
								t.glDepthBuffer = null;
							}
						}
						t.gl = newGl;
						if(t.width > t.gl.getParameter(t.gl.MAX_TEXTURE_SIZE) || t.height > t.gl.getParameter(t.gl.MAX_TEXTURE_SIZE)) {
							throw haxe_Exception.thrown("Error, texture size is greater then gl.MAX_TEXTURE_SIZE");
						}
						t.glTexture = peote_view_utils_TexUtils.createEmptyTexture(t.gl,t.width,t.height,t.colorChannels,t.createMipmaps,t.magFilter,t.minFilter,t.useFloat);
						if(t.displays.length > 0 && t.framebuffer == null) {
							t.glDepthBuffer = t.gl.createRenderbuffer();
							var gl = t.gl;
							var texture = t.glTexture;
							var depthBuffer = t.glDepthBuffer;
							var width = t.width;
							var height = t.height;
							var framebuffer = gl.createFramebuffer();
							gl.bindRenderbuffer(gl.RENDERBUFFER,depthBuffer);
							peote_view_utils_GLTool.clearGlErrorQueue(gl);
							gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT24,width,height);
							if(peote_view_utils_GLTool.getLastGlError(gl) == gl.INVALID_ENUM) {
								haxe_Log.trace("switching to DEPTH_COMPONENT16 for framebuffer",{ fileName : "peote/view/utils/GLTool.hx", lineNumber : 41, className : "peote.view.utils.GLTool", methodName : "createFramebuffer"});
								gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT16,width,height);
							}
							gl.bindFramebuffer(gl.FRAMEBUFFER,framebuffer);
							gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,depthBuffer);
							gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,texture,0);
							if(gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
								throw haxe_Exception.thrown("Error: Framebuffer not complete!");
							}
							gl.bindFramebuffer(gl.FRAMEBUFFER,null);
							gl.bindRenderbuffer(gl.RENDERBUFFER,null);
							t.framebuffer = framebuffer;
							t.updated = true;
						}
						var image = t.images.keys();
						while(image.hasNext()) {
							var image1 = image.next();
							t.bufferImage(image1,t.images.h[image1.__id__]);
						}
					}
				}
			}
		}
		display.programList.add(this,atProgram,addBefore);
	}
	,createProg: function(isPicking) {
		if(isPicking == null) {
			isPicking = false;
		}
		this.glShaderConfig.isPICKING = isPicking;
		if(this.fragmentFloatPrecision != null) {
			this.glShaderConfig.FRAGMENT_FLOAT_PRECISION = this.fragmentFloatPrecision;
		} else if(this.buffer.needFragmentPrecision() && peote_view_Precision.FragmentFloat.medium < 23) {
			var t = peote_view_Precision.FragmentFloat;
			this.glShaderConfig.FRAGMENT_FLOAT_PRECISION = t.high > 0 ? "highp" : t.medium > 0 ? "mediump" : t.low > 0 ? "lowp" : null;
		} else {
			var t = peote_view_Precision.FragmentFloat;
			this.glShaderConfig.FRAGMENT_FLOAT_PRECISION = t.high > 0 && false ? "highp" : t.medium > 0 ? "mediump" : t.low > 0 ? "lowp" : null;
		}
		this.parseAndResolveFormulas();
		var gl = this.gl;
		var type = this.gl.VERTEX_SHADER;
		var shader = this.buffer.getVertexShader();
		var conf = this.glShaderConfig;
		var template = new utils_MultipassTemplate(shader);
		var _this = peote_view_utils_GLTool.rStartspaces;
		var _this1 = peote_view_utils_GLTool.rEmptylines;
		var shaderSrc = template.execute(conf).replace(_this1.r,"\n").replace(_this.r,"");
		var glShader = gl.createShader(type);
		gl.shaderSource(glShader,shaderSrc);
		gl.compileShader(glShader);
		var glVShader;
		if(gl.getShaderParameter(glShader,gl.COMPILE_STATUS) == 0) {
			throw haxe_Exception.thrown("ERROR compiling " + (type == gl.VERTEX_SHADER ? "vertex" : "fragment") + " shader\n" + Std.string(gl.getShaderInfoLog(glShader)));
		} else {
			glVShader = glShader;
		}
		var gl = this.gl;
		var type = this.gl.FRAGMENT_SHADER;
		var shader = this.buffer.getFragmentShader();
		var conf = this.glShaderConfig;
		var template = new utils_MultipassTemplate(shader);
		var _this = peote_view_utils_GLTool.rStartspaces;
		var _this1 = peote_view_utils_GLTool.rEmptylines;
		var shaderSrc = template.execute(conf).replace(_this1.r,"\n").replace(_this.r,"");
		var glShader = gl.createShader(type);
		gl.shaderSource(glShader,shaderSrc);
		gl.compileShader(glShader);
		var glFShader;
		if(gl.getShaderParameter(glShader,gl.COMPILE_STATUS) == 0) {
			throw haxe_Exception.thrown("ERROR compiling " + (type == gl.VERTEX_SHADER ? "vertex" : "fragment") + " shader\n" + Std.string(gl.getShaderInfoLog(glShader)));
		} else {
			glFShader = glShader;
		}
		var glProg = this.gl.createProgram();
		this.gl.attachShader(glProg,glVShader);
		this.gl.attachShader(glProg,glFShader);
		this.buffer.bindAttribLocations(this.gl,glProg);
		var gl = this.gl;
		gl.linkProgram(glProg);
		if(gl.getProgramParameter(glProg,gl.LINK_STATUS) == 0) {
			throw haxe_Exception.thrown(Std.string(gl.getProgramInfoLog(glProg)) + "VALIDATE_STATUS: " + Std.string(gl.getProgramParameter(glProg,gl.VALIDATE_STATUS)) + "ERROR: " + Std.string(gl.getError()));
		}
		if(!isPicking && peote_view_Version.isUBO) {
			var index = this.gl.getUniformBlockIndex(glProg,"uboView");
			if(index != this.gl.INVALID_INDEX) {
				this.gl.uniformBlockBinding(glProg,index,0);
			}
			index = this.gl.getUniformBlockIndex(glProg,"uboDisplay");
			if(index != this.gl.INVALID_INDEX) {
				this.gl.uniformBlockBinding(glProg,index,1);
			}
		} else if(!isPicking) {
			this.uRESOLUTION = this.gl.getUniformLocation(glProg,"uResolution");
			this.uZOOM = this.gl.getUniformLocation(glProg,"uZoom");
			this.uOFFSET = this.gl.getUniformLocation(glProg,"uOffset");
		} else {
			this.uRESOLUTION_PICK = this.gl.getUniformLocation(glProg,"uResolution");
			this.uZOOM_PICK = this.gl.getUniformLocation(glProg,"uZoom");
			this.uOFFSET_PICK = this.gl.getUniformLocation(glProg,"uOffset");
		}
		if(!isPicking) {
			this.uTIME = this.gl.getUniformLocation(glProg,"uTime");
			this.uniformFloatLocations = [];
			var _g = 0;
			var _g1 = this.uniformFloats;
			while(_g < _g1.length) {
				var u = _g1[_g];
				++_g;
				this.uniformFloatLocations.push(this.gl.getUniformLocation(glProg,u.name));
			}
		} else {
			this.uTIME_PICK = this.gl.getUniformLocation(glProg,"uTime");
			this.uniformFloatPickLocations = [];
			var _g = 0;
			var _g1 = this.uniformFloats;
			while(_g < _g1.length) {
				var u = _g1[_g];
				++_g;
				this.uniformFloatPickLocations.push(this.gl.getUniformLocation(glProg,u.name));
			}
		}
		if(!isPicking) {
			this.textureList.clear();
			var _g = 0;
			var _g1 = this.activeTextures.length;
			while(_g < _g1) {
				var i = _g++;
				this.textureList.add(new peote_view_ActiveTexture(this.activeUnits[i],this.activeTextures[i],this.gl.getUniformLocation(glProg,"uTexture" + i)),null,false);
			}
			this.glProgram = glProg;
			this.glVertexShader = glVShader;
			this.glFragmentShader = glFShader;
		} else {
			this.textureListPicking.clear();
			var _g = 0;
			var _g1 = this.activeTextures.length;
			while(_g < _g1) {
				var i = _g++;
				this.textureListPicking.add(new peote_view_ActiveTexture(this.activeUnits[i],this.activeTextures[i],this.gl.getUniformLocation(glProg,"uTexture" + i)),null,false);
			}
			this.glProgramPicking = glProg;
			this.glVertexShaderPicking = glVShader;
			this.glFragmentShaderPicking = glFShader;
		}
		this.ready = true;
	}
	,parseColorFormula: function() {
		var formula = "";
		if(this.colorFormula != "") {
			formula = this.colorFormula;
		} else if(this.defaultColorFormula != "") {
			formula = this.defaultColorFormula;
		} else {
			var col = this.colorIdentifiers.slice();
			var tex = [];
			var _g = 0;
			var _g1 = this.textureIdentifiers.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.textureLayers.h.hasOwnProperty(i)) {
					tex.push(this.textureIdentifiers[i]);
				}
			}
			var _g = 0;
			var _g1 = this.customTextureIdentifiers.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.textureLayers.h.hasOwnProperty(this.textureIdentifiers.length + i)) {
					tex.push(this.customTextureIdentifiers[i]);
				}
			}
			if(col.length + tex.length == 0) {
				var this1 = -16776961;
				var s = "" + Std.string((this1 >> 24 & 255) / 255);
				var s1 = "" + Std.string((this1 >> 16 & 255) / 255);
				var s2 = "" + Std.string((this1 >> 8 & 255) / 255);
				var s3 = "" + Std.string((this1 & 255) / 255);
				formula = "vec4(" + (s.indexOf(".") != -1 || s.indexOf("e-") != -1 ? s : s + ".0") + ", " + (s1.indexOf(".") != -1 || s1.indexOf("e-") != -1 ? s1 : s1 + ".0") + "," + (" " + (s2.indexOf(".") != -1 || s2.indexOf("e-") != -1 ? s2 : s2 + ".0") + ", " + (s3.indexOf(".") != -1 || s3.indexOf("e-") != -1 ? s3 : s3 + ".0") + ")");
			} else {
				if(tex.length > 0) {
					formula = tex.shift();
					if(col.length > 0) {
						formula = "" + col.shift() + " * " + formula;
					}
				}
				var _g = 0;
				while(_g < tex.length) {
					var t = tex[_g];
					++_g;
					if(col.length > 0) {
						t = "" + col.shift() + " * " + t + " ";
					}
					formula = "mix( " + formula + ", " + t + ", (" + t + ").a )";
				}
				while(col.length > 0) {
					formula += (formula != "" ? "*" : "") + col.shift();
					if(col.length > 0) {
						formula = "(" + formula + " + " + col.shift() + ")";
					}
				}
			}
		}
		var _g = 0;
		var _g1 = this.colorIdentifiers.length;
		while(_g < _g1) {
			var i = _g++;
			var regexp = new EReg("(^|.*?[^\\w.])" + this.colorIdentifiers[i] + "\\b.*?","g");
			if(regexp.match(formula)) {
				formula = formula.replace(regexp.r,"$1" + "c" + i);
			}
		}
		var _g = 0;
		var _g1 = this.customIdentifiers.length;
		while(_g < _g1) {
			var i = _g++;
			var regexp = new EReg("(^|.*?[^\\w.])" + this.customIdentifiers[i] + "\\b.*?","g");
			if(regexp.match(formula)) {
				if(this.customVaryings[i] != null) {
					formula = formula.replace(regexp.r,"$1" + this.customVaryings[i]);
				} else {
					throw haxe_Exception.thrown("Error while parsing ColorFormula: custom identifier " + this.customIdentifiers[i] + " need @varying to access in fragmentshader");
				}
			}
		}
		this.textureID_Defaults = [];
		this.used_by_ColorFormula = 0;
		this.usedID_by_ColorFormula = 0;
		var _g = 0;
		var _g1 = this.textureIdentifiers.length;
		while(_g < _g1) {
			var i = _g++;
			var regexp = new EReg("(^|.*?[^\\w.])" + this.textureIdentifiers[i] + "\\b.*?","g");
			if(regexp.match(formula)) {
				if(this.textureLayers.h.hasOwnProperty(i)) {
					formula = formula.replace(regexp.r,"$1" + "t" + i);
				}
				this.used_by_ColorFormula |= 1 << i;
			}
			regexp = new EReg("(^|.*?[^\\w.])" + (this.textureIdentifiers[i] + "_ID") + "\\b.*?","g");
			if(regexp.match(formula)) {
				formula = formula.replace(regexp.r,"$1" + i);
				this.usedID_by_ColorFormula |= 1 << i;
				if(!this.textureLayers.h.hasOwnProperty(i)) {
					var this1 = this.defaultFormulaVars.h[this.textureIdentifiers[i]];
					var s = "" + Std.string((this1 >> 24 & 255) / 255);
					var s1 = "" + Std.string((this1 >> 16 & 255) / 255);
					var s2 = "" + Std.string((this1 >> 8 & 255) / 255);
					var s3 = "" + Std.string((this1 & 255) / 255);
					this.textureID_Defaults.push({ layer : i, value : "vec4(" + (s.indexOf(".") != -1 || s.indexOf("e-") != -1 ? s : s + ".0") + ", " + (s1.indexOf(".") != -1 || s1.indexOf("e-") != -1 ? s1 : s1 + ".0") + "," + (" " + (s2.indexOf(".") != -1 || s2.indexOf("e-") != -1 ? s2 : s2 + ".0") + ", " + (s3.indexOf(".") != -1 || s3.indexOf("e-") != -1 ? s3 : s3 + ".0") + ")")});
				}
			}
		}
		var _g = 0;
		var _g1 = this.customTextureIdentifiers.length;
		while(_g < _g1) {
			var i = _g++;
			var regexp = new EReg("(^|.*?[^\\w.])" + this.customTextureIdentifiers[i] + "\\b.*?","g");
			if(regexp.match(formula)) {
				if(this.textureLayers.h.hasOwnProperty(this.textureIdentifiers.length + i)) {
					formula = formula.replace(regexp.r,"$1" + "t" + (this.textureIdentifiers.length + i));
				}
				this.used_by_ColorFormula |= 1 << this.textureIdentifiers.length + i;
			}
			regexp = new EReg("(^|.*?[^\\w.])" + (this.customTextureIdentifiers[i] + "_ID") + "\\b.*?","g");
			if(regexp.match(formula)) {
				formula = formula.replace(regexp.r,"$1" + (this.textureIdentifiers.length + i));
				this.usedID_by_ColorFormula |= 1 << this.textureIdentifiers.length + i;
				if(!this.textureLayers.h.hasOwnProperty(this.textureIdentifiers.length + i)) {
					var this1 = this.defaultFormulaVars.h[this.textureIdentifiers[this.textureIdentifiers.length + i]];
					var s = "" + Std.string((this1 >> 24 & 255) / 255);
					var s1 = "" + Std.string((this1 >> 16 & 255) / 255);
					var s2 = "" + Std.string((this1 >> 8 & 255) / 255);
					var s3 = "" + Std.string((this1 & 255) / 255);
					this.textureID_Defaults.push({ layer : this.textureIdentifiers.length + i, value : "vec4(" + (s.indexOf(".") != -1 || s.indexOf("e-") != -1 ? s : s + ".0") + ", " + (s1.indexOf(".") != -1 || s1.indexOf("e-") != -1 ? s1 : s1 + ".0") + "," + (" " + (s2.indexOf(".") != -1 || s2.indexOf("e-") != -1 ? s2 : s2 + ".0") + ", " + (s3.indexOf(".") != -1 || s3.indexOf("e-") != -1 ? s3 : s3 + ".0") + ")")});
				}
			}
		}
		var h = this.defaultFormulaVars.h;
		var name_h = h;
		var name_keys = Object.keys(h);
		var name_length = name_keys.length;
		var name_current = 0;
		while(name_current < name_length) {
			var name = name_keys[name_current++];
			var regexp = new EReg("(^|.*?[^\\w.])" + name + "\\b.*?","g");
			if(regexp.match(formula)) {
				var this1 = this.defaultFormulaVars.h[name];
				var s = "" + Std.string((this1 >> 24 & 255) / 255);
				var s1 = "" + Std.string((this1 >> 16 & 255) / 255);
				var s2 = "" + Std.string((this1 >> 8 & 255) / 255);
				var s3 = "" + Std.string((this1 & 255) / 255);
				formula = formula.replace(regexp.r,"$1" + ("vec4(" + (s.indexOf(".") != -1 || s.indexOf("e-") != -1 ? s : s + ".0") + ", " + (s1.indexOf(".") != -1 || s1.indexOf("e-") != -1 ? s1 : s1 + ".0") + "," + (" " + (s2.indexOf(".") != -1 || s2.indexOf("e-") != -1 ? s2 : s2 + ".0") + ", " + (s3.indexOf(".") != -1 || s3.indexOf("e-") != -1 ? s3 : s3 + ".0") + ")")));
			}
		}
		this.glShaderConfig.FRAGMENT_CALC_LAYER = formula;
	}
	,setColorFormula: function(formula,varDefaults,autoUpdateTextures) {
		if(formula == null) {
			formula = "";
		}
		this.colorFormula = formula;
		if(varDefaults != null) {
			var h = varDefaults.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var name = _g_keys[_g_current++];
				var regexp = new EReg("^([a-zA-z_]+\\d*)+$","g");
				if(!regexp.match(name)) {
					throw haxe_Exception.thrown("Error: \"" + name + "\" is not an identifier, please use only letters/numbers or \"_\" (starting with a letter)");
				}
				this.defaultFormulaVars.h[name] = varDefaults.h[name];
			}
		}
		if(autoUpdateTextures != null) {
			if(autoUpdateTextures) {
				this.updateTextures();
			}
		} else if(this.autoUpdateTextures) {
			this.updateTextures();
		}
	}
	,injectIntoFragmentShader: function(glslCode,uTimeUniformEnabled,uniformFloats,autoUpdateTextures) {
		if(uTimeUniformEnabled == null) {
			uTimeUniformEnabled = false;
		}
		if(glslCode == null) {
			glslCode = "";
		}
		this.hasFragmentInjection = glslCode == "" ? false : true;
		this.uniformFloatsFragment = uniformFloats;
		var tmp = (uTimeUniformEnabled ? "uniform float uTime;" : "") + this.generateUniformFloatsGLSL(uniformFloats);
		this.glShaderConfig.FRAGMENT_INJECTION = tmp + glslCode;
		this.accumulateUniformsFloat();
		if(autoUpdateTextures != null) {
			if(autoUpdateTextures) {
				this.updateTextures();
			}
		} else if(this.autoUpdateTextures) {
			this.updateTextures();
		}
	}
	,generateUniformFloatsGLSL: function(uniformFloats) {
		var out = "";
		if(uniformFloats != null) {
			var _g = 0;
			while(_g < uniformFloats.length) {
				var u = uniformFloats[_g];
				++_g;
				out += "uniform float " + u.name + ";";
			}
		}
		return out;
	}
	,accumulateUniformsFloat: function() {
		if(this.uniformFloatsVertex == null) {
			if(this.uniformFloatsFragment != null) {
				this.uniformFloats = this.uniformFloatsFragment;
			}
		} else if(this.uniformFloatsFragment == null) {
			this.uniformFloats = this.uniformFloatsVertex;
		} else {
			this.uniformFloats = this.uniformFloatsVertex;
			var _g = 0;
			var _g1 = this.uniformFloatsFragment;
			while(_g < _g1.length) {
				var u = _g1[_g];
				++_g;
				if(this.uniformFloats.indexOf(u) < 0) {
					this.uniformFloats.push(u);
				}
			}
		}
	}
	,setFormula: function(name,newFormula,autoUpdateTextures) {
		var formulaName = this.buffer.getFormulaNames().h[name];
		if(formulaName != null) {
			haxe_Log.trace("  set formula: " + formulaName + " = " + newFormula,{ fileName : "peote/view/Program.hx", lineNumber : 514, className : "peote.view.Program", methodName : "setFormula"});
			this.formula.h[formulaName] = newFormula;
		} else {
			var _g = [];
			var h = this.buffer.getFormulaNames().h;
			var k_h = h;
			var k_keys = Object.keys(h);
			var k_length = k_keys.length;
			var k_current = 0;
			while(k_current < k_length) {
				var k = k_keys[k_current++];
				_g.push(this.buffer.getFormulaNames().h[k]);
			}
			if(_g.indexOf(name) >= 0) {
				this.formula.h[name] = newFormula;
			} else if(this.buffer.getFormulaVaryings().indexOf(name) >= 0) {
				haxe_Log.trace("  set formula for varying: " + name + " = " + newFormula,{ fileName : "peote/view/Program.hx", lineNumber : 522, className : "peote.view.Program", methodName : "setFormula"});
				this.formula.h[name] = newFormula;
			} else if(this.buffer.getFormulaConstants().indexOf(name) >= 0) {
				haxe_Log.trace("  set formula for constant: " + name + " = " + newFormula,{ fileName : "peote/view/Program.hx", lineNumber : 526, className : "peote.view.Program", methodName : "setFormula"});
				this.formula.h[name] = newFormula;
			} else if(this.buffer.getFormulaCustoms().indexOf(name) >= 0) {
				haxe_Log.trace("  set formula for custom: " + name + " = " + newFormula,{ fileName : "peote/view/Program.hx", lineNumber : 530, className : "peote.view.Program", methodName : "setFormula"});
				this.formula.h[name] = newFormula;
			} else {
				throw haxe_Exception.thrown("Error: can not set Formula for " + name + " if there is no property defined for @" + name + " inside Element");
			}
		}
		this.formulaHasChanged = true;
		if(autoUpdateTextures != null) {
			if(autoUpdateTextures) {
				this.updateTextures();
			}
		} else if(this.autoUpdateTextures) {
			this.updateTextures();
		}
	}
	,parseAndResolveFormulas: function() {
		var _gthis = this;
		if(this.formulaHasChanged) {
			var _g = new haxe_ds_StringMap();
			var h = this.formula.h;
			var k_h = h;
			var k_keys = Object.keys(h);
			var k_length = k_keys.length;
			var k_current = 0;
			while(k_current < k_length) {
				var k = k_keys[k_current++];
				_g.h[k] = this.formula.h[k];
			}
			var formulaResolved = _g;
			try {
				peote_view_utils_Util.resolveFormulaCyclic(formulaResolved);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				throw haxe_Exception.thrown("Error: cyclic reference of \"" + Std.string(e.errVar) + "\" inside formula \"" + Std.string(e.formula) + "\" for \"" + Std.string(e.errKey) + "\"");
			}
			peote_view_utils_Util.resolveFormulaVars(formulaResolved,this.buffer.getAttributes());
			var formulaTemplateValue = function(x,y,dx,dy) {
				var nx = _gthis.buffer.getFormulaNames().h[x];
				if(nx == null) {
					nx = "";
				}
				var ny = _gthis.buffer.getFormulaNames().h[y];
				if(ny == null) {
					ny = "";
				}
				var fx = formulaResolved.h[nx];
				var fy = formulaResolved.h[ny];
				if(fx != _gthis.buffer.getFormulas().h[nx] || fy != _gthis.buffer.getFormulas().h[ny]) {
					if(fx == null) {
						fx = _gthis.buffer.getAttributes().h[nx];
					}
					if(fx == null) {
						fx = dx;
					}
					if(fy == null) {
						fy = _gthis.buffer.getAttributes().h[ny];
					}
					if(fy == null) {
						fy = dy;
					}
					if(x == "rotation" && fx != "0.0") {
						fx = "(" + fx + ")/180.0*" + Math.PI;
					}
					if(y == "zIndex" && fy != "0.0") {
						var s = "" + Std.string(_gthis.buffer.getMaxZindex());
						fy = "clamp( " + fy + "/" + (s.indexOf(".") != -1 || s.indexOf("e-") != -1 ? s : s + ".0") + ", -1.0, 1.0)";
					}
					return "vec2(" + fx + ", " + fy + ")";
				} else {
					return null;
				}
			};
			this.glShaderConfig.SIZE_FORMULA = formulaTemplateValue("sizeX","sizeY","100.0","100.0");
			this.glShaderConfig.POS_FORMULA = formulaTemplateValue("posX","posY","0.0","0.0");
			this.glShaderConfig.ROTZ_FORMULA = formulaTemplateValue("rotation","zIndex","0.0","0.0");
			this.glShaderConfig.PIVOT_FORMULA = formulaTemplateValue("pivotX","pivotY","0.0","0.0");
			var _g = 0;
			var _g1 = this.buffer.getFormulaVaryings();
			while(_g < _g1.length) {
				var n = _g1[_g];
				++_g;
				var f = formulaResolved.h[n];
				if(f != this.buffer.getFormulas().h[n]) {
					if(f == null) {
						f = this.buffer.getAttributes().h[n];
					}
					this.glShaderConfig.FORMULA_VARYINGS[n] = f;
					haxe_Log.trace(" -- replacing Formula " + n + " => " + f,{ fileName : "peote/view/Program.hx", lineNumber : 591, className : "peote.view.Program", methodName : "parseAndResolveFormulas"});
				} else {
					this.glShaderConfig.FORMULA_VARYINGS[n] = null;
				}
			}
			var _g = 0;
			var _g1 = this.buffer.getFormulaConstants();
			while(_g < _g1.length) {
				var n = _g1[_g];
				++_g;
				var f = formulaResolved.h[n];
				if(f != null && f != this.buffer.getAttributes().h[n]) {
					this.glShaderConfig.FORMULA_CONSTANTS[n] = f;
					haxe_Log.trace(" -- replacing Formula " + n + " => " + f,{ fileName : "peote/view/Program.hx", lineNumber : 601, className : "peote.view.Program", methodName : "parseAndResolveFormulas"});
				} else {
					this.glShaderConfig.FORMULA_CONSTANTS[n] = null;
				}
			}
		}
	}
	,getTextureIndexByIdentifier: function(identifier,addNew) {
		if(addNew == null) {
			addNew = true;
		}
		var layer = this.textureIdentifiers.indexOf(identifier);
		if(layer < 0) {
			layer = this.customTextureIdentifiers.indexOf(identifier);
			if(layer < 0) {
				if(addNew) {
					var regexp = new EReg("^([a-zA-z_]+\\d*)+$","g");
					if(!regexp.match(identifier)) {
						throw haxe_Exception.thrown("Error: \"" + identifier + "\" is not an identifier, please use only letters/numbers or \"_\" (starting with a letter)");
					}
					layer = this.textureIdentifiers.length + this.customTextureIdentifiers.length;
					this.customTextureIdentifiers.push(identifier);
				}
			}
		}
		return layer;
	}
	,discardAtAlpha: function(atAlphaValue,autoUpdateTextures) {
		if(atAlphaValue == null) {
			this.glShaderConfig.isDISCARD = false;
		} else {
			this.glShaderConfig.isDISCARD = true;
			var s = "" + Std.string(atAlphaValue);
			this.glShaderConfig.DISCARD = s.indexOf(".") != -1 || s.indexOf("e-") != -1 ? s : s + ".0";
		}
		if(autoUpdateTextures != null) {
			if(autoUpdateTextures) {
				this.updateTextures();
			}
		} else if(this.autoUpdateTextures) {
			this.updateTextures();
		}
	}
	,setTexture: function(texture,identifier,autoUpdateTextures) {
		var layer = this.getTextureIndexByIdentifier(identifier);
		this.textureLayers.h[layer] = [texture];
		if(autoUpdateTextures != null) {
			if(autoUpdateTextures) {
				this.updateTextures();
			}
		} else if(this.autoUpdateTextures) {
			this.updateTextures();
		}
	}
	,updateTextures: function() {
		var newTextures = [];
		var layer = this.textureLayers.keys();
		while(layer.hasNext()) {
			var layer1 = layer.next();
			var _g = 0;
			var _g1 = this.textureLayers.h[layer1];
			while(_g < _g1.length) {
				var t = _g1[_g];
				++_g;
				if(newTextures.indexOf(t) < 0) {
					newTextures.push(t);
				}
			}
		}
		var i = this.activeTextures.length;
		while(i-- > 0) if(newTextures.indexOf(this.activeTextures[i]) < 0) {
			if(!HxOverrides.remove(this.activeTextures[i].programs,this)) {
				throw haxe_Exception.thrown("Error, this texture is not used by program anymore");
			}
			this.activeTextures.splice(i,1);
			this.activeUnits.splice(i,1);
		}
		var _g = 0;
		while(_g < newTextures.length) {
			var t = newTextures[_g];
			++_g;
			if(this.activeTextures.indexOf(t) < 0) {
				this.activeTextures.push(t);
				var unit = 0;
				while(this.activeUnits.indexOf(unit) >= 0) ++unit;
				this.activeUnits.push(unit);
				if(t.programs.indexOf(this) >= 0) {
					throw haxe_Exception.thrown("Error, texture is already used by program");
				}
				var newGl = this.gl;
				if(newGl != null && newGl != t.gl) {
					var _g1 = 0;
					var _g2 = t.programs;
					while(_g1 < _g2.length) {
						var p = _g2[_g1];
						++_g1;
						if(p.gl != null && p.gl != newGl) {
							throw haxe_Exception.thrown("Error, texture can not used inside different gl-contexts");
						}
					}
					var _g3 = 0;
					var _g4 = t.displays;
					while(_g3 < _g4.length) {
						var d = _g4[_g3];
						++_g3;
						if(d.gl != null && d.gl != newGl) {
							throw haxe_Exception.thrown("Error, texture can not used inside different gl-contexts");
						}
					}
					if(t.gl != null) {
						t.gl.deleteTexture(t.glTexture);
						t.glTexture = null;
						if(t.displays.length == 0 && t.framebuffer != null) {
							t.gl.deleteFramebuffer(t.framebuffer);
							t.framebuffer = null;
							if(t.glDepthBuffer != null) {
								t.gl.deleteRenderbuffer(t.glDepthBuffer);
							}
							t.glDepthBuffer = null;
						}
					}
					t.gl = newGl;
					if(t.width > t.gl.getParameter(t.gl.MAX_TEXTURE_SIZE) || t.height > t.gl.getParameter(t.gl.MAX_TEXTURE_SIZE)) {
						throw haxe_Exception.thrown("Error, texture size is greater then gl.MAX_TEXTURE_SIZE");
					}
					t.glTexture = peote_view_utils_TexUtils.createEmptyTexture(t.gl,t.width,t.height,t.colorChannels,t.createMipmaps,t.magFilter,t.minFilter,t.useFloat);
					if(t.displays.length > 0 && t.framebuffer == null) {
						t.glDepthBuffer = t.gl.createRenderbuffer();
						var gl = t.gl;
						var texture = t.glTexture;
						var depthBuffer = t.glDepthBuffer;
						var width = t.width;
						var height = t.height;
						var framebuffer = gl.createFramebuffer();
						gl.bindRenderbuffer(gl.RENDERBUFFER,depthBuffer);
						peote_view_utils_GLTool.clearGlErrorQueue(gl);
						gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT24,width,height);
						if(peote_view_utils_GLTool.getLastGlError(gl) == gl.INVALID_ENUM) {
							haxe_Log.trace("switching to DEPTH_COMPONENT16 for framebuffer",{ fileName : "peote/view/utils/GLTool.hx", lineNumber : 41, className : "peote.view.utils.GLTool", methodName : "createFramebuffer"});
							gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT16,width,height);
						}
						gl.bindFramebuffer(gl.FRAMEBUFFER,framebuffer);
						gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,depthBuffer);
						gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,texture,0);
						if(gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
							throw haxe_Exception.thrown("Error: Framebuffer not complete!");
						}
						gl.bindFramebuffer(gl.FRAMEBUFFER,null);
						gl.bindRenderbuffer(gl.RENDERBUFFER,null);
						t.framebuffer = framebuffer;
						t.updated = true;
					}
					var image = t.images.keys();
					while(image.hasNext()) {
						var image1 = image.next();
						t.bufferImage(image1,t.images.h[image1.__id__]);
					}
				}
				t.programs.push(this);
			}
		}
		this.parseColorFormula();
		this.glShaderConfig.hasFRAGMENT_INJECTION = this.hasFragmentInjection;
		this.glShaderConfig.FRAGMENT_PROGRAM_UNIFORMS = "";
		this.glShaderConfig.TEXTURES = [];
		if(this.activeTextures.length == 0) {
			this.glShaderConfig.hasTEXTURES = false;
		} else {
			this.glShaderConfig.hasTEXTURES = true;
			var _g = 0;
			var _g1 = this.activeTextures.length;
			while(_g < _g1) {
				var i = _g++;
				this.glShaderConfig.FRAGMENT_PROGRAM_UNIFORMS += "uniform sampler2D uTexture" + i + ";";
			}
			var layer = this.textureLayers.keys();
			while(layer.hasNext()) {
				var layer1 = layer.next();
				var units = [];
				var textures = this.textureLayers.h[layer1];
				var _g = 0;
				var _g1 = textures.length;
				while(_g < _g1) {
					var i = _g++;
					var s = "" + Std.string(textures[i].slotWidth / textures[i].width);
					var s1 = "" + Std.string(textures[i].slotHeight / textures[i].height);
					var s2 = "" + Std.string(textures[i].slotsX * textures[i].slotWidth / textures[i].width);
					var s3 = "" + Std.string(textures[i].slotsY * textures[i].slotHeight / textures[i].height);
					units.push({ UNIT_VALUE : i + 1 + ".0", TEXTURE : "uTexture" + this.activeTextures.indexOf(textures[i]), SLOTS_X : textures[i].slotsX + ".0", SLOTS_Y : textures[i].slotsY + ".0", SLOT_WIDTH : s.indexOf(".") != -1 || s.indexOf("e-") != -1 ? s : s + ".0", SLOT_HEIGHT : s1.indexOf(".") != -1 || s1.indexOf("e-") != -1 ? s1 : s1 + ".0", SLOTS_WIDTH : s2.indexOf(".") != -1 || s2.indexOf("e-") != -1 ? s2 : s2 + ".0", SLOTS_HEIGHT : s3.indexOf(".") != -1 || s3.indexOf("e-") != -1 ? s3 : s3 + ".0", TILES_X : textures[i].tilesX + ".0", TILES_Y : textures[i].tilesY + ".0", TEXTURE_WIDTH : textures[i].width + ".0", TEXTURE_HEIGHT : textures[i].height + ".0", FIRST : i == 0, LAST : i == textures.length - 1});
				}
				var used = (this.used_by_ColorFormula & 1 << layer1) > 0;
				var usedID = (this.usedID_by_ColorFormula & 1 << layer1) > 0;
				this.glShaderConfig.TEXTURES.push({ LAYER : layer1, UNITS : units, USED : used, USED_ID : usedID});
			}
		}
		this.glShaderConfig.TEXTURE_DEFAULTS = [];
		var _g = 0;
		var _g1 = this.textureID_Defaults;
		while(_g < _g1.length) {
			var defaults = _g1[_g];
			++_g;
			this.glShaderConfig.TEXTURE_DEFAULTS.push({ LAYER : defaults.layer, DEFAULT_VALUE : defaults.value});
		}
		this.glShaderConfig.hasTEXTURE_FUNCTIONS = this.usedID_by_ColorFormula == 0 && this.textureID_Defaults.length == 0 ? false : true;
		if(this.gl != null) {
			this.ready = false;
			this.gl.deleteShader(this.glVertexShader);
			this.gl.deleteShader(this.glFragmentShader);
			this.gl.deleteProgram(this.glProgram);
			if(this.buffer.hasPicking()) {
				this.gl.deleteShader(this.glVertexShaderPicking);
				this.gl.deleteShader(this.glFragmentShaderPicking);
				this.gl.deleteProgram(this.glProgramPicking);
			}
			this.createProg();
			if(this.buffer.hasPicking()) {
				this.createProg(true);
			}
		}
	}
	,__class__: peote_view_Program
};
var peote_text_FontProgram_$_$Main_$MyFontStyle = function(font,fontStyle,isMasked,bufferMinSize,bufferGrowSize,bufferAutoShrink) {
	if(bufferAutoShrink == null) {
		bufferAutoShrink = true;
	}
	if(bufferGrowSize == null) {
		bufferGrowSize = 1024;
	}
	if(bufferMinSize == null) {
		bufferMinSize = 1024;
	}
	if(isMasked == null) {
		isMasked = false;
	}
	this.skinPrograms = null;
	this.isMasked = false;
	this._buffer = new peote_view_Buffer_$Glyph_$_$Main_$MyFontStyle(bufferMinSize,bufferGrowSize,bufferAutoShrink);
	peote_view_Program.call(this,this._buffer);
	if(isMasked) {
		this.isMasked = true;
		this.maskBuffer = new peote_view_Buffer_$MaskElement(16,16,true);
		this.maskProgram = new peote_view_Program(this.maskBuffer);
		this.maskProgram.mask = 2;
		this.maskProgram.colorEnabled = false;
		this.mask = 1;
		if(this.skinPrograms != null) {
			var _g = 0;
			var _g1 = this.skinPrograms;
			while(_g < _g1.length) {
				var skinProgram = _g1[_g];
				++_g;
				if(skinProgram.useMaskIfAvail) {
					skinProgram.mask = 1;
				}
			}
		}
	}
	this.font = font;
	this.autoUpdateTextures = false;
	this.setTexture(font.textureCache,"TEX");
	this.fontStyle = fontStyle;
	this.alphaEnabled = true;
	var color = "color";
	var this1 = this.font.config.bgColor;
	var s = "" + Std.string((this1 >> 24 & 255) / 255);
	var s1 = "" + Std.string((this1 >> 16 & 255) / 255);
	var s2 = "" + Std.string((this1 >> 8 & 255) / 255);
	var s3 = "" + Std.string((this1 & 255) / 255);
	var bgColor = Std.string("vec4(" + (s.indexOf(".") != -1 || s.indexOf("e-") != -1 ? s : s + ".0") + ", " + (s1.indexOf(".") != -1 || s1.indexOf("e-") != -1 ? s1 : s1 + ".0") + "," + (" " + (s2.indexOf(".") != -1 || s2.indexOf("e-") != -1 ? s2 : s2 + ".0") + ", " + (s3.indexOf(".") != -1 || s3.indexOf("e-") != -1 ? s3 : s3 + ".0") + ")"));
	if(this.font.config.distancefield) {
		var weight = "0.5";
		var s = "" + Std.string(fontStyle.weight);
		weight = s.indexOf(".") != -1 || s.indexOf("e-") != -1 ? s : s + ".0";
		var s = "" + Std.string(0.5);
		var sharp = s.indexOf(".") != -1 || s.indexOf("e-") != -1 ? s : s + ".0";
		if(this.font.config.bgColor == 0) {
			this.setColorFormula(color + " * smoothstep( " + weight + " - " + sharp + " * fwidth(TEX.r), " + weight + " + " + sharp + " * fwidth(TEX.r), TEX.r)");
		} else {
			this.discardAtAlpha(null);
			this.setColorFormula("mix(" + bgColor + "," + color + "," + "smoothstep( " + weight + " - " + sharp + " * fwidth(TEX.r), " + weight + " + " + sharp + " * fwidth(TEX.r), TEX.r))");
		}
	} else if(this.font.config.bgColor == 0) {
		this.setColorFormula(color + " * TEX.r");
	} else {
		this.discardAtAlpha(null);
		this.setColorFormula("mix(" + bgColor + "," + color + "," + "TEX.r)");
	}
	var tilt = "0.0";
	if(tilt != "0.0") {
		this.setFormula("x","x + (1.0-aPosition.y)*w*" + tilt);
	}
	this.updateTextures();
};
$hxClasses["peote.text.FontProgram__Main_MyFontStyle"] = peote_text_FontProgram_$_$Main_$MyFontStyle;
peote_text_FontProgram_$_$Main_$MyFontStyle.__name__ = "peote.text.FontProgram__Main_MyFontStyle";
peote_text_FontProgram_$_$Main_$MyFontStyle.__super__ = peote_view_Program;
peote_text_FontProgram_$_$Main_$MyFontStyle.prototype = $extend(peote_view_Program.prototype,{
	addToDisplay: function(display,atProgram,addBefore) {
		if(addBefore == null) {
			addBefore = false;
		}
		peote_view_Program.prototype.addToDisplay.call(this,display,atProgram,addBefore);
		if(this.isMasked) {
			this.maskProgram.addToDisplay(display,this,true);
		}
		if(this.skinPrograms != null) {
			var _g = 0;
			var _g1 = this.skinPrograms;
			while(_g < _g1.length) {
				var skinProgram = _g1[_g];
				++_g;
				if(skinProgram.depthIndex < 0) {
					skinProgram.addToDisplay(display,this,true);
				} else {
					skinProgram.addToDisplay(display);
				}
			}
		}
	}
	,pageLineSet: function(pageLine,chars,x,y,size,offset,glyphStyle,defaultFontRange,addRemoveGlyphes,onUnrecognizedChar) {
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		var _gthis = this;
		var line_max = x + size;
		if(y != null) {
			pageLine.y = y;
		} else {
			y = pageLine.y;
		}
		var x_start = x;
		x += offset;
		var glyph;
		var prev_glyph = null;
		var i = 0;
		var charData = null;
		var visibleFrom = 0;
		var visibleTo = 0;
		var old_length = pageLine.glyphes.length;
		var _g_offset = 0;
		var _g_s = chars;
		while(_g_offset < _g_s.length) {
			var charcode = _g_s.charCodeAt(_g_offset++);
			var range = _gthis.font.rangeMapping;
			var charcode1 = charcode == 9 ? 32 : charcode;
			var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
			charData = metric == null ? null : { fontData : range, metric : metric};
			if(charData != null) {
				if(i >= old_length) {
					glyph = new peote_text_Glyph_$_$Main_$MyFontStyle();
					pageLine.glyphes.push(glyph);
					var glyphStyle1 = glyphStyle != null ? glyphStyle : _gthis.fontStyle;
					glyph.set_width(glyphStyle1.width);
					glyph.set_height(glyphStyle1.height);
					glyph.color = glyphStyle1.color;
					glyph.char = charcode;
					glyph.tx = charData.metric.u;
					glyph.ty = charData.metric.v;
					glyph.tw = charData.metric.w;
					glyph.th = charData.metric.h;
					glyph.w = charData.metric.width * glyph.width;
					glyph.h = charData.metric.height * glyph.height;
					var x1;
					if(prev_glyph != null) {
						if(_gthis.font.kerning) {
							var charcode2 = prev_glyph.char;
							var charcode3 = glyph.char;
							x1 = charData.fontData.kerning[charcode2 == 9 ? 32 : charcode2][charcode3 == 9 ? 32 : charcode3] * (glyph.width + prev_glyph.width) / 2;
						} else {
							x1 = 0.0;
						}
					} else {
						x1 = 0.0;
					}
					x += x1;
					glyph.x = x + charData.metric.left * glyph.width;
					glyph.y = y + (charData.fontData.base - charData.metric.top) * glyph.height;
					if(glyph.x + glyph.w >= x_start) {
						if(glyph.x < line_max) {
							if(addRemoveGlyphes) {
								_gthis._buffer.addElement(glyph);
							}
							++visibleTo;
						}
					} else {
						++visibleFrom;
						++visibleTo;
					}
					var width = glyph.width;
					x += charData.metric.advance * (glyph.char == 9 ? width * 3.0 : width);
				} else {
					glyph = pageLine.glyphes[i];
					if(glyphStyle != null) {
						glyph.set_width(glyphStyle.width);
						glyph.set_height(glyphStyle.height);
						glyph.color = glyphStyle.color;
					}
					glyph.char = charcode;
					glyph.tx = charData.metric.u;
					glyph.ty = charData.metric.v;
					glyph.tw = charData.metric.w;
					glyph.th = charData.metric.h;
					glyph.w = charData.metric.width * glyph.width;
					glyph.h = charData.metric.height * glyph.height;
					var x2;
					if(prev_glyph != null) {
						if(_gthis.font.kerning) {
							var charcode4 = prev_glyph.char;
							var charcode5 = glyph.char;
							x2 = charData.fontData.kerning[charcode4 == 9 ? 32 : charcode4][charcode5 == 9 ? 32 : charcode5] * (glyph.width + prev_glyph.width) / 2;
						} else {
							x2 = 0.0;
						}
					} else {
						x2 = 0.0;
					}
					x += x2;
					glyph.x = x + charData.metric.left * glyph.width;
					glyph.y = y + (charData.fontData.base - charData.metric.top) * glyph.height;
					if(glyph.x + glyph.w >= x_start) {
						if(glyph.x < line_max) {
							if(addRemoveGlyphes && (i < pageLine.visibleFrom || i >= pageLine.visibleTo)) {
								_gthis._buffer.addElement(glyph);
							}
							++visibleTo;
						} else if(addRemoveGlyphes && i < pageLine.visibleTo) {
							_gthis._buffer.removeElement(glyph);
						}
					} else {
						if(addRemoveGlyphes && i >= pageLine.visibleFrom) {
							_gthis._buffer.removeElement(glyph);
						}
						++visibleFrom;
						++visibleTo;
					}
					var width1 = glyph.width;
					x += charData.metric.advance * (glyph.char == 9 ? width1 * 3.0 : width1);
				}
				if(i == 0) {
					if(defaultFontRange == null) {
						if(glyph != null) {
							var h = glyph.height;
							pageLine.height = h * charData.fontData.height;
							pageLine.lineHeight = h * charData.fontData.lineHeight;
							pageLine.base = h * charData.fontData.base;
						}
					} else {
						var charCode = _gthis.font.config.ranges[defaultFontRange].range.min;
						var range1 = _gthis.font.rangeMapping;
						var charcode6 = charCode == 9 ? 32 : charCode;
						var metric1 = charcode6 >= range1.rangeMin && charcode6 <= range1.rangeMax ? range1.metrics[charcode6 - range1.rangeMin] : null;
						var charData1 = metric1 == null ? null : { fontData : range1, metric : metric1};
						var glyph1 = new peote_text_Glyph_$_$Main_$MyFontStyle();
						var glyphStyle2 = glyphStyle != null ? glyphStyle : _gthis.fontStyle;
						glyph1.set_width(glyphStyle2.width);
						glyph1.set_height(glyphStyle2.height);
						glyph1.color = glyphStyle2.color;
						glyph1.char = charCode;
						glyph1.tx = charData1.metric.u;
						glyph1.ty = charData1.metric.v;
						glyph1.tw = charData1.metric.w;
						glyph1.th = charData1.metric.h;
						glyph1.w = charData1.metric.width * glyph1.width;
						glyph1.h = charData1.metric.height * glyph1.height;
						if(glyph1 != null) {
							var h1 = glyph1.height;
							pageLine.height = h1 * charData1.fontData.height;
							pageLine.lineHeight = h1 * charData1.fontData.lineHeight;
							pageLine.base = h1 * charData1.fontData.base;
						}
						var y_offset = glyph != null ? pageLine.base - charData.fontData.base * glyph.height : 0;
						glyph.y += y_offset;
						y += y_offset;
					}
				}
				prev_glyph = glyph;
				++i;
			}
		}
		if(i < old_length) {
			this.pageLineDeleteChars(pageLine,x_start,size,offset,i,null,addRemoveGlyphes);
			var _g = Math.max(i,pageLine.visibleFrom) | 0;
			var _g1 = Math.min(pageLine.glyphes.length,pageLine.visibleTo) | 0;
			while(_g < _g1) {
				var j = _g++;
				if(addRemoveGlyphes) {
					this._buffer.removeElement(pageLine.glyphes[j]);
				}
			}
			pageLine.glyphes.splice(i,pageLine.glyphes.length - i);
		}
		if(i == 0) {
			var charCode = this.font.config.ranges[defaultFontRange == null ? 0 : defaultFontRange].range.min;
			var range = this.font.rangeMapping;
			var charcode = charCode == 9 ? 32 : charCode;
			var metric = charcode >= range.rangeMin && charcode <= range.rangeMax ? range.metrics[charcode - range.rangeMin] : null;
			var charData = metric == null ? null : { fontData : range, metric : metric};
			var glyph = new peote_text_Glyph_$_$Main_$MyFontStyle();
			var glyphStyle1 = glyphStyle != null ? glyphStyle : this.fontStyle;
			glyph.set_width(glyphStyle1.width);
			glyph.set_height(glyphStyle1.height);
			glyph.color = glyphStyle1.color;
			glyph.char = charCode;
			glyph.tx = charData.metric.u;
			glyph.ty = charData.metric.v;
			glyph.tw = charData.metric.w;
			glyph.th = charData.metric.h;
			glyph.w = charData.metric.width * glyph.width;
			glyph.h = charData.metric.height * glyph.height;
			if(glyph != null) {
				var h = glyph.height;
				pageLine.height = h * charData.fontData.height;
				pageLine.lineHeight = h * charData.fontData.lineHeight;
				pageLine.base = h * charData.fontData.base;
			}
		}
		pageLine.updateFrom = 0;
		pageLine.updateTo = i;
		pageLine.visibleFrom = visibleFrom;
		pageLine.visibleTo = visibleTo;
		pageLine.textSize = x - x_start - offset;
	}
	,pageLineSetStyle: function(pageLine,x,size,offset,glyphStyle,from,to,addRemoveGlyphes) {
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		if(from == null) {
			from = 0;
		}
		if(to == null || to > pageLine.glyphes.length) {
			to = pageLine.glyphes.length;
		}
		if(to < from) {
			var tmp = to;
			to = from;
			from = tmp;
		} else if(from == to) {
			++to;
		}
		if(from < pageLine.updateFrom) {
			pageLine.updateFrom = from;
		}
		if(to > pageLine.updateTo) {
			pageLine.updateTo = to;
		}
		var prev_glyph = null;
		var line_x = x;
		x += offset;
		var y = pageLine.y;
		if(from > 0) {
			var glyph = pageLine.glyphes[from - 1];
			var charcode = pageLine.glyphes[from - 1].char;
			var range = this.font.rangeMapping;
			var charcode1 = charcode == 9 ? 32 : charcode;
			var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
			var charData = metric == null ? null : { fontData : range, metric : metric};
			var width = glyph.width;
			x = glyph.x + (charData.metric.advance - charData.metric.left) * (glyph.char == 9 ? width * 3.0 : width);
			prev_glyph = pageLine.glyphes[from - 1];
			var glyph = pageLine.glyphes[from];
			var x1;
			if(prev_glyph != null) {
				if(this.font.kerning) {
					var charcode = pageLine.glyphes[from - 1].char;
					var range = this.font.rangeMapping;
					var charcode1 = charcode == 9 ? 32 : charcode;
					var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
					var charcode = prev_glyph.char;
					var charcode1 = glyph.char;
					x1 = (metric == null ? null : { fontData : range, metric : metric}).fontData.kerning[charcode == 9 ? 32 : charcode][charcode1 == 9 ? 32 : charcode1] * (glyph.width + prev_glyph.width) / 2;
				} else {
					x1 = 0.0;
				}
			} else {
				x1 = 0.0;
			}
			x += x1;
		}
		var _this = pageLine.glyphes[from];
		_this.set_width(glyphStyle.width);
		_this.set_height(glyphStyle.height);
		_this.color = glyphStyle.color;
		var charcode = pageLine.glyphes[from].char;
		var range = this.font.rangeMapping;
		var charcode1 = charcode == 9 ? 32 : charcode;
		var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
		var charData = metric == null ? null : { fontData : range, metric : metric};
		var glyph = pageLine.glyphes[from];
		var baseLineOffset = glyph != null ? pageLine.base - charData.fontData.base * glyph.height : 0;
		if(baseLineOffset < 0) {
			if(from > 0) {
				pageLine.updateFrom = 0;
				var _g = 0;
				var _g1 = from;
				while(_g < _g1) {
					var i = _g++;
					pageLine.glyphes[i].y -= baseLineOffset;
				}
			}
			if(to < pageLine.glyphes.length) {
				pageLine.updateTo = pageLine.glyphes.length;
				var _g = to;
				var _g1 = pageLine.glyphes.length;
				while(_g < _g1) {
					var i = _g++;
					pageLine.glyphes[i].y -= baseLineOffset;
				}
			}
			var glyph = pageLine.glyphes[from];
			if(glyph != null) {
				var h = glyph.height;
				pageLine.height = h * charData.fontData.height;
				pageLine.lineHeight = h * charData.fontData.lineHeight;
				pageLine.base = h * charData.fontData.base;
			}
		} else if(baseLineOffset > 0) {
			if(from == 0 && to == pageLine.glyphes.length) {
				var glyph = pageLine.glyphes[from];
				if(glyph != null) {
					var h = glyph.height;
					pageLine.height = h * charData.fontData.height;
					pageLine.lineHeight = h * charData.fontData.lineHeight;
					pageLine.base = h * charData.fontData.base;
				}
			} else {
				y += baseLineOffset;
			}
		}
		var glyph = pageLine.glyphes[from];
		glyph.x = x + charData.metric.left * glyph.width;
		glyph.y = y + (charData.fontData.base - charData.metric.top) * glyph.height;
		var glyph = pageLine.glyphes[from];
		var width = glyph.width;
		x += charData.metric.advance * (glyph.char == 9 ? width * 3.0 : width);
		prev_glyph = pageLine.glyphes[from];
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var _this = pageLine.glyphes[i];
			_this.set_width(glyphStyle.width);
			_this.set_height(glyphStyle.height);
			_this.color = glyphStyle.color;
			var charcode = pageLine.glyphes[i].char;
			var range = this.font.rangeMapping;
			var charcode1 = charcode == 9 ? 32 : charcode;
			var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
			charData = metric == null ? null : { fontData : range, metric : metric};
			var glyph = pageLine.glyphes[i];
			var x1;
			if(prev_glyph != null) {
				if(this.font.kerning) {
					var charcode2 = prev_glyph.char;
					var charcode3 = glyph.char;
					x1 = charData.fontData.kerning[charcode2 == 9 ? 32 : charcode2][charcode3 == 9 ? 32 : charcode3] * (glyph.width + prev_glyph.width) / 2;
				} else {
					x1 = 0.0;
				}
			} else {
				x1 = 0.0;
			}
			x += x1;
			var glyph1 = pageLine.glyphes[i];
			glyph1.x = x + charData.metric.left * glyph1.width;
			glyph1.y = y + (charData.fontData.base - charData.metric.top) * glyph1.height;
			var glyph2 = pageLine.glyphes[i];
			var width = glyph2.width;
			x += charData.metric.advance * (glyph2.char == 9 ? width * 3.0 : width);
			prev_glyph = pageLine.glyphes[i];
		}
		if(to < pageLine.glyphes.length) {
			var glyph = pageLine.glyphes[to];
			var x1;
			if(prev_glyph != null) {
				if(this.font.kerning) {
					var charcode = prev_glyph.char;
					var charcode1 = glyph.char;
					x1 = charData.fontData.kerning[charcode == 9 ? 32 : charcode][charcode1 == 9 ? 32 : charcode1] * (glyph.width + prev_glyph.width) / 2;
				} else {
					x1 = 0.0;
				}
			} else {
				x1 = 0.0;
			}
			x += x1;
			var glyph = pageLine.glyphes[to];
			var charcode = pageLine.glyphes[to].char;
			var range = this.font.rangeMapping;
			var charcode1 = charcode == 9 ? 32 : charcode;
			var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
			var width = glyph.width;
			var _offset = x - (glyph.x - (metric == null ? null : { fontData : range, metric : metric}).metric.left * (glyph.char == 9 ? width * 3.0 : width));
			if(_offset != 0.0) {
				pageLine.updateTo = pageLine.glyphes.length;
				var line_max = line_x + size;
				var visibleFrom = pageLine.visibleFrom;
				var visibleTo = pageLine.visibleTo;
				var _g = from;
				var _g1 = pageLine.glyphes.length;
				while(_g < _g1) {
					var i = _g++;
					if(i >= to) {
						pageLine.glyphes[i].x += _offset;
					}
					if(pageLine.glyphes[i].x + pageLine.glyphes[i].w >= line_x) {
						if(pageLine.glyphes[i].x < line_max) {
							if(i < pageLine.visibleFrom || i >= pageLine.visibleTo) {
								if(addRemoveGlyphes) {
									this._buffer.addElement(pageLine.glyphes[i]);
								}
								if(visibleFrom > i) {
									visibleFrom = i;
								}
								if(visibleTo < i + 1) {
									visibleTo = i + 1;
								}
							}
						} else {
							if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
								this._buffer.removeElement(pageLine.glyphes[i]);
							}
							if(visibleTo > i) {
								visibleTo = i;
							}
						}
					} else {
						if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
							this._buffer.removeElement(pageLine.glyphes[i]);
						}
						visibleFrom = i + 1;
					}
				}
				pageLine.visibleFrom = visibleFrom;
				pageLine.visibleTo = visibleTo;
				pageLine.textSize += _offset;
			} else {
				var line_max = line_x + size;
				var visibleFrom = pageLine.visibleFrom;
				var visibleTo = pageLine.visibleTo;
				var _g = from;
				var _g1 = to;
				while(_g < _g1) {
					var i = _g++;
					if(i >= to) {
						pageLine.glyphes[i].x += _offset;
					}
					if(pageLine.glyphes[i].x + pageLine.glyphes[i].w >= line_x) {
						if(pageLine.glyphes[i].x < line_max) {
							if(i < pageLine.visibleFrom || i >= pageLine.visibleTo) {
								if(addRemoveGlyphes) {
									this._buffer.addElement(pageLine.glyphes[i]);
								}
								if(visibleFrom > i) {
									visibleFrom = i;
								}
								if(visibleTo < i + 1) {
									visibleTo = i + 1;
								}
							}
						} else {
							if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
								this._buffer.removeElement(pageLine.glyphes[i]);
							}
							if(visibleTo > i) {
								visibleTo = i;
							}
						}
					} else {
						if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
							this._buffer.removeElement(pageLine.glyphes[i]);
						}
						visibleFrom = i + 1;
					}
				}
				pageLine.visibleFrom = visibleFrom;
				pageLine.visibleTo = visibleTo;
				pageLine.textSize += _offset;
			}
			return _offset;
		} else {
			var _offset = x - line_x - offset - pageLine.textSize;
			var line_max = line_x + size;
			var visibleFrom = pageLine.visibleFrom;
			var visibleTo = pageLine.visibleTo;
			var _g = from;
			var _g1 = to;
			while(_g < _g1) {
				var i = _g++;
				if(i >= to) {
					pageLine.glyphes[i].x += _offset;
				}
				if(pageLine.glyphes[i].x + pageLine.glyphes[i].w >= line_x) {
					if(pageLine.glyphes[i].x < line_max) {
						if(i < pageLine.visibleFrom || i >= pageLine.visibleTo) {
							if(addRemoveGlyphes) {
								this._buffer.addElement(pageLine.glyphes[i]);
							}
							if(visibleFrom > i) {
								visibleFrom = i;
							}
							if(visibleTo < i + 1) {
								visibleTo = i + 1;
							}
						}
					} else {
						if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
							this._buffer.removeElement(pageLine.glyphes[i]);
						}
						if(visibleTo > i) {
							visibleTo = i;
						}
					}
				} else {
					if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
						this._buffer.removeElement(pageLine.glyphes[i]);
					}
					visibleFrom = i + 1;
				}
			}
			pageLine.visibleFrom = visibleFrom;
			pageLine.visibleTo = visibleTo;
			pageLine.textSize += _offset;
			return _offset;
		}
	}
	,pageLineSetPosition: function(pageLine,x,size,offset,xNew,yNew,offsetNew,addRemoveGlyphes) {
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		pageLine.updateFrom = 0;
		pageLine.updateTo = pageLine.glyphes.length;
		if(offsetNew != null) {
			var deltaX = offsetNew - offset + xNew - x;
			var deltaY = yNew - pageLine.y;
			var line_max = xNew + size;
			var visibleFrom = pageLine.visibleFrom;
			var visibleTo = pageLine.visibleTo;
			var _g = 0;
			var _g1 = pageLine.glyphes.length;
			while(_g < _g1) {
				var i = _g++;
				if(deltaX != null) {
					pageLine.glyphes[i].x += deltaX;
				}
				if(deltaY != null) {
					pageLine.glyphes[i].y += deltaY;
				}
				if(pageLine.glyphes[i].x + pageLine.glyphes[i].w >= xNew) {
					if(pageLine.glyphes[i].x < line_max) {
						if(i < pageLine.visibleFrom || i >= pageLine.visibleTo) {
							if(addRemoveGlyphes) {
								this._buffer.addElement(pageLine.glyphes[i]);
							}
							if(visibleFrom > i) {
								visibleFrom = i;
							}
							if(visibleTo < i + 1) {
								visibleTo = i + 1;
							}
						}
					} else {
						if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
							this._buffer.removeElement(pageLine.glyphes[i]);
						}
						if(visibleTo > i) {
							visibleTo = i;
						}
					}
				} else {
					if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
						this._buffer.removeElement(pageLine.glyphes[i]);
					}
					visibleFrom = i + 1;
				}
			}
			pageLine.visibleFrom = visibleFrom;
			pageLine.visibleTo = visibleTo;
		} else {
			var _g = 0;
			var _g1 = pageLine.glyphes.length;
			while(_g < _g1) {
				var i = _g++;
				pageLine.glyphes[i].x += xNew - x;
				pageLine.glyphes[i].y += yNew - pageLine.y;
			}
		}
		pageLine.y = yNew;
	}
	,pageLineSetYPosition: function(pageLine,x,size,offset,yNew,offsetNew,addRemoveGlyphes) {
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		pageLine.updateFrom = 0;
		pageLine.updateTo = pageLine.glyphes.length;
		if(offsetNew != null) {
			var deltaX = offsetNew - offset;
			var deltaY = yNew - pageLine.y;
			var line_max = x + size;
			var visibleFrom = pageLine.visibleFrom;
			var visibleTo = pageLine.visibleTo;
			var _g = 0;
			var _g1 = pageLine.glyphes.length;
			while(_g < _g1) {
				var i = _g++;
				if(deltaX != null) {
					pageLine.glyphes[i].x += deltaX;
				}
				if(deltaY != null) {
					pageLine.glyphes[i].y += deltaY;
				}
				if(pageLine.glyphes[i].x + pageLine.glyphes[i].w >= x) {
					if(pageLine.glyphes[i].x < line_max) {
						if(i < pageLine.visibleFrom || i >= pageLine.visibleTo) {
							if(addRemoveGlyphes) {
								this._buffer.addElement(pageLine.glyphes[i]);
							}
							if(visibleFrom > i) {
								visibleFrom = i;
							}
							if(visibleTo < i + 1) {
								visibleTo = i + 1;
							}
						}
					} else {
						if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
							this._buffer.removeElement(pageLine.glyphes[i]);
						}
						if(visibleTo > i) {
							visibleTo = i;
						}
					}
				} else {
					if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
						this._buffer.removeElement(pageLine.glyphes[i]);
					}
					visibleFrom = i + 1;
				}
			}
			pageLine.visibleFrom = visibleFrom;
			pageLine.visibleTo = visibleTo;
		} else {
			var _g = 0;
			var _g1 = pageLine.updateTo;
			while(_g < _g1) {
				var i = _g++;
				pageLine.glyphes[i].y += yNew - pageLine.y;
			}
		}
		pageLine.y = yNew;
	}
	,pageLineSetPositionSize: function(pageLine,x,size,offset,xNew,yNew,offsetNew,addRemoveGlyphes) {
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		pageLine.updateFrom = 0;
		pageLine.updateTo = pageLine.glyphes.length;
		if(offsetNew != null) {
			var deltaX = offsetNew - offset + xNew - x;
			var deltaY = yNew - pageLine.y;
			var line_max = xNew + size;
			var visibleFrom = pageLine.visibleFrom;
			var visibleTo = pageLine.visibleTo;
			var _g = 0;
			var _g1 = pageLine.glyphes.length;
			while(_g < _g1) {
				var i = _g++;
				if(deltaX != null) {
					pageLine.glyphes[i].x += deltaX;
				}
				if(deltaY != null) {
					pageLine.glyphes[i].y += deltaY;
				}
				if(pageLine.glyphes[i].x + pageLine.glyphes[i].w >= xNew) {
					if(pageLine.glyphes[i].x < line_max) {
						if(i < pageLine.visibleFrom || i >= pageLine.visibleTo) {
							if(addRemoveGlyphes) {
								this._buffer.addElement(pageLine.glyphes[i]);
							}
							if(visibleFrom > i) {
								visibleFrom = i;
							}
							if(visibleTo < i + 1) {
								visibleTo = i + 1;
							}
						}
					} else {
						if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
							this._buffer.removeElement(pageLine.glyphes[i]);
						}
						if(visibleTo > i) {
							visibleTo = i;
						}
					}
				} else {
					if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
						this._buffer.removeElement(pageLine.glyphes[i]);
					}
					visibleFrom = i + 1;
				}
			}
			pageLine.visibleFrom = visibleFrom;
			pageLine.visibleTo = visibleTo;
		} else {
			var deltaX = xNew - x;
			var deltaY = yNew - pageLine.y;
			var line_max = xNew + size;
			var visibleFrom = pageLine.visibleFrom;
			var visibleTo = pageLine.visibleTo;
			var _g = 0;
			var _g1 = pageLine.glyphes.length;
			while(_g < _g1) {
				var i = _g++;
				if(deltaX != null) {
					pageLine.glyphes[i].x += deltaX;
				}
				if(deltaY != null) {
					pageLine.glyphes[i].y += deltaY;
				}
				if(pageLine.glyphes[i].x + pageLine.glyphes[i].w >= xNew) {
					if(pageLine.glyphes[i].x < line_max) {
						if(i < pageLine.visibleFrom || i >= pageLine.visibleTo) {
							if(addRemoveGlyphes) {
								this._buffer.addElement(pageLine.glyphes[i]);
							}
							if(visibleFrom > i) {
								visibleFrom = i;
							}
							if(visibleTo < i + 1) {
								visibleTo = i + 1;
							}
						}
					} else {
						if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
							this._buffer.removeElement(pageLine.glyphes[i]);
						}
						if(visibleTo > i) {
							visibleTo = i;
						}
					}
				} else {
					if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
						this._buffer.removeElement(pageLine.glyphes[i]);
					}
					visibleFrom = i + 1;
				}
			}
			pageLine.visibleFrom = visibleFrom;
			pageLine.visibleTo = visibleTo;
		}
		pageLine.y = yNew;
	}
	,pageLineSetSize: function(pageLine,x,size,offset,offsetNew,addRemoveGlyphes) {
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		pageLine.updateFrom = 0;
		pageLine.updateTo = pageLine.glyphes.length;
		if(offsetNew != null) {
			var deltaX = offsetNew - offset;
			var deltaY = null;
			var line_max = x + size;
			var visibleFrom = pageLine.visibleFrom;
			var visibleTo = pageLine.visibleTo;
			var _g = 0;
			var _g1 = pageLine.glyphes.length;
			while(_g < _g1) {
				var i = _g++;
				if(deltaX != null) {
					pageLine.glyphes[i].x += deltaX;
				}
				if(deltaY != null) {
					pageLine.glyphes[i].y += deltaY;
				}
				if(pageLine.glyphes[i].x + pageLine.glyphes[i].w >= x) {
					if(pageLine.glyphes[i].x < line_max) {
						if(i < pageLine.visibleFrom || i >= pageLine.visibleTo) {
							if(addRemoveGlyphes) {
								this._buffer.addElement(pageLine.glyphes[i]);
							}
							if(visibleFrom > i) {
								visibleFrom = i;
							}
							if(visibleTo < i + 1) {
								visibleTo = i + 1;
							}
						}
					} else {
						if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
							this._buffer.removeElement(pageLine.glyphes[i]);
						}
						if(visibleTo > i) {
							visibleTo = i;
						}
					}
				} else {
					if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
						this._buffer.removeElement(pageLine.glyphes[i]);
					}
					visibleFrom = i + 1;
				}
			}
			pageLine.visibleFrom = visibleFrom;
			pageLine.visibleTo = visibleTo;
		} else {
			var deltaX = null;
			var deltaY = null;
			var line_max = x + size;
			var visibleFrom = pageLine.visibleFrom;
			var visibleTo = pageLine.visibleTo;
			var _g = 0;
			var _g1 = pageLine.glyphes.length;
			while(_g < _g1) {
				var i = _g++;
				if(deltaX != null) {
					pageLine.glyphes[i].x += deltaX;
				}
				if(deltaY != null) {
					pageLine.glyphes[i].y += deltaY;
				}
				if(pageLine.glyphes[i].x + pageLine.glyphes[i].w >= x) {
					if(pageLine.glyphes[i].x < line_max) {
						if(i < pageLine.visibleFrom || i >= pageLine.visibleTo) {
							if(addRemoveGlyphes) {
								this._buffer.addElement(pageLine.glyphes[i]);
							}
							if(visibleFrom > i) {
								visibleFrom = i;
							}
							if(visibleTo < i + 1) {
								visibleTo = i + 1;
							}
						}
					} else {
						if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
							this._buffer.removeElement(pageLine.glyphes[i]);
						}
						if(visibleTo > i) {
							visibleTo = i;
						}
					}
				} else {
					if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
						this._buffer.removeElement(pageLine.glyphes[i]);
					}
					visibleFrom = i + 1;
				}
			}
			pageLine.visibleFrom = visibleFrom;
			pageLine.visibleTo = visibleTo;
		}
	}
	,pageLineSetOffset: function(pageLine,x,size,offset,offsetNew,addRemoveGlyphes) {
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		pageLine.updateFrom = 0;
		pageLine.updateTo = pageLine.glyphes.length;
		var deltaX = offsetNew - offset;
		var deltaY = null;
		var line_max = x + size;
		var visibleFrom = pageLine.visibleFrom;
		var visibleTo = pageLine.visibleTo;
		var _g = 0;
		var _g1 = pageLine.glyphes.length;
		while(_g < _g1) {
			var i = _g++;
			if(deltaX != null) {
				pageLine.glyphes[i].x += deltaX;
			}
			if(deltaY != null) {
				pageLine.glyphes[i].y += deltaY;
			}
			if(pageLine.glyphes[i].x + pageLine.glyphes[i].w >= x) {
				if(pageLine.glyphes[i].x < line_max) {
					if(i < pageLine.visibleFrom || i >= pageLine.visibleTo) {
						if(addRemoveGlyphes) {
							this._buffer.addElement(pageLine.glyphes[i]);
						}
						if(visibleFrom > i) {
							visibleFrom = i;
						}
						if(visibleTo < i + 1) {
							visibleTo = i + 1;
						}
					}
				} else {
					if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
						this._buffer.removeElement(pageLine.glyphes[i]);
					}
					if(visibleTo > i) {
						visibleTo = i;
					}
				}
			} else {
				if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
					this._buffer.removeElement(pageLine.glyphes[i]);
				}
				visibleFrom = i + 1;
			}
		}
		pageLine.visibleFrom = visibleFrom;
		pageLine.visibleTo = visibleTo;
	}
	,pageLineInsertChars: function(pageLine,x,size,offset,chars,position,glyphStyle,addRemoveGlyphes,onUnrecognizedChar) {
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		if(position == null) {
			position = 0;
		}
		var prev_glyph = null;
		var line_x = x;
		var y = pageLine.y;
		if(position > 0) {
			var glyph = pageLine.glyphes[position - 1];
			var charcode = pageLine.glyphes[position - 1].char;
			var range = this.font.rangeMapping;
			var charcode1 = charcode == 9 ? 32 : charcode;
			var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
			var charData = metric == null ? null : { fontData : range, metric : metric};
			var width = glyph.width;
			x = glyph.x + (charData.metric.advance - charData.metric.left) * (glyph.char == 9 ? width * 3.0 : width);
			prev_glyph = pageLine.glyphes[position - 1];
			offset = 0;
		}
		var rest = pageLine.glyphes.splice(position,pageLine.glyphes.length - position);
		if(rest.length > 0) {
			var oldFrom = pageLine.visibleFrom - pageLine.glyphes.length;
			var oldTo = pageLine.visibleTo - pageLine.glyphes.length;
			if(pageLine.visibleFrom > pageLine.glyphes.length) {
				pageLine.visibleFrom = pageLine.glyphes.length;
			}
			if(pageLine.visibleTo > pageLine.glyphes.length) {
				pageLine.visibleTo = pageLine.glyphes.length;
			}
			var pageLine1 = pageLine;
			var line_x1 = line_x;
			var x1 = x;
			var y1 = y;
			var prev_glyph1 = prev_glyph;
			var glyphStyle1 = glyphStyle;
			var addRemoveGlyphes1 = addRemoveGlyphes;
			var onUnrecognizedChar1 = onUnrecognizedChar;
			var _gthis = this;
			var first = true;
			var glyph = null;
			var charData = null;
			var x_start = x1 += offset;
			var line_max = line_x1 + size;
			var i = pageLine1.glyphes.length - 1;
			var _g_offset = 0;
			var _g_s = chars;
			while(_g_offset < _g_s.length) {
				var charcode = _g_s.charCodeAt(_g_offset++);
				var range = _gthis.font.rangeMapping;
				var charcode1 = charcode == 9 ? 32 : charcode;
				var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
				charData = metric == null ? null : { fontData : range, metric : metric};
				if(charData != null) {
					glyph = new peote_text_Glyph_$_$Main_$MyFontStyle();
					pageLine1.glyphes.push(glyph);
					var glyphStyle2 = glyphStyle1 != null ? glyphStyle1 : _gthis.fontStyle;
					glyph.set_width(glyphStyle2.width);
					glyph.set_height(glyphStyle2.height);
					glyph.color = glyphStyle2.color;
					if(first) {
						first = false;
						y1 += glyph != null ? pageLine1.base - charData.fontData.base * glyph.height : 0;
					}
					glyph.char = charcode;
					glyph.tx = charData.metric.u;
					glyph.ty = charData.metric.v;
					glyph.tw = charData.metric.w;
					glyph.th = charData.metric.h;
					glyph.w = charData.metric.width * glyph.width;
					glyph.h = charData.metric.height * glyph.height;
					var x2;
					if(prev_glyph1 != null) {
						if(_gthis.font.kerning) {
							var charcode2 = prev_glyph1.char;
							var charcode3 = glyph.char;
							x2 = charData.fontData.kerning[charcode2 == 9 ? 32 : charcode2][charcode3 == 9 ? 32 : charcode3] * (glyph.width + prev_glyph1.width) / 2;
						} else {
							x2 = 0.0;
						}
					} else {
						x2 = 0.0;
					}
					x1 += x2;
					glyph.x = x1 + charData.metric.left * glyph.width;
					glyph.y = y1 + (charData.fontData.base - charData.metric.top) * glyph.height;
					if(glyph.x + glyph.w >= line_x1) {
						if(glyph.x < line_max) {
							if(addRemoveGlyphes1) {
								_gthis._buffer.addElement(glyph);
							}
							pageLine1.visibleTo++;
						}
					} else {
						pageLine1.visibleFrom++;
						pageLine1.visibleTo++;
					}
					var width = glyph.width;
					x1 += charData.metric.advance * (glyph.char == 9 ? width * 3.0 : width);
					prev_glyph1 = glyph;
					++i;
				} else if(onUnrecognizedChar1 != null) {
					onUnrecognizedChar1(charcode,i);
				}
			}
			pageLine1.textSize += x1 - x_start;
			var deltaX = x1 - x_start;
			if(position == 0) {
				var prev_glyph1 = pageLine.glyphes[pageLine.glyphes.length - 1];
				var glyph = rest[0];
				var kerningSpace;
				if(prev_glyph1 != null) {
					if(this.font.kerning) {
						var charcode = rest[0].char;
						var range = this.font.rangeMapping;
						var charcode1 = charcode == 9 ? 32 : charcode;
						var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
						var charcode = prev_glyph1.char;
						var charcode1 = glyph.char;
						kerningSpace = (metric == null ? null : { fontData : range, metric : metric}).fontData.kerning[charcode == 9 ? 32 : charcode][charcode1 == 9 ? 32 : charcode1] * (glyph.width + prev_glyph1.width) / 2;
					} else {
						kerningSpace = 0.0;
					}
				} else {
					kerningSpace = 0.0;
				}
				deltaX += kerningSpace;
				pageLine.textSize += kerningSpace;
			}
			if(deltaX != 0.0) {
				if(pageLine.glyphes.length < pageLine.updateFrom) {
					pageLine.updateFrom = pageLine.glyphes.length;
				}
				var line_max = line_x + size;
				var _g = 0;
				var _g1 = rest.length;
				while(_g < _g1) {
					var i = _g++;
					rest[i].x += deltaX;
					if(rest[i].x + rest[i].w >= line_x) {
						if(rest[i].x < line_max) {
							if(addRemoveGlyphes && (i < oldFrom || i >= oldTo)) {
								this._buffer.addElement(rest[i]);
							}
							pageLine.visibleTo++;
						} else if(addRemoveGlyphes && i >= oldFrom && i < oldTo) {
							this._buffer.removeElement(rest[i]);
						}
					} else {
						if(addRemoveGlyphes && i >= oldFrom && i < oldTo) {
							this._buffer.removeElement(rest[i]);
						}
						pageLine.visibleFrom++;
						pageLine.visibleTo++;
					}
				}
				pageLine.glyphes = pageLine.glyphes.concat(rest);
				pageLine.updateTo = pageLine.glyphes.length;
			} else {
				pageLine.visibleFrom = oldFrom + pageLine.glyphes.length;
				pageLine.visibleTo = oldTo + pageLine.glyphes.length;
				pageLine.glyphes = pageLine.glyphes.concat(rest);
			}
			return deltaX;
		} else {
			var pageLine1 = pageLine;
			var line_x1 = line_x;
			var x1 = x;
			var y1 = y;
			var prev_glyph1 = prev_glyph;
			var glyphStyle1 = glyphStyle;
			var addRemoveGlyphes1 = addRemoveGlyphes;
			var onUnrecognizedChar1 = onUnrecognizedChar;
			var _gthis = this;
			var first = true;
			var glyph = null;
			var charData = null;
			var x_start = x1 += offset;
			var line_max = line_x1 + size;
			var i = pageLine1.glyphes.length - 1;
			var _g_offset = 0;
			var _g_s = chars;
			while(_g_offset < _g_s.length) {
				var charcode = _g_s.charCodeAt(_g_offset++);
				var range = _gthis.font.rangeMapping;
				var charcode1 = charcode == 9 ? 32 : charcode;
				var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
				charData = metric == null ? null : { fontData : range, metric : metric};
				if(charData != null) {
					glyph = new peote_text_Glyph_$_$Main_$MyFontStyle();
					pageLine1.glyphes.push(glyph);
					var glyphStyle = glyphStyle1 != null ? glyphStyle1 : _gthis.fontStyle;
					glyph.set_width(glyphStyle.width);
					glyph.set_height(glyphStyle.height);
					glyph.color = glyphStyle.color;
					if(first) {
						first = false;
						y1 += glyph != null ? pageLine1.base - charData.fontData.base * glyph.height : 0;
					}
					glyph.char = charcode;
					glyph.tx = charData.metric.u;
					glyph.ty = charData.metric.v;
					glyph.tw = charData.metric.w;
					glyph.th = charData.metric.h;
					glyph.w = charData.metric.width * glyph.width;
					glyph.h = charData.metric.height * glyph.height;
					var x;
					if(prev_glyph1 != null) {
						if(_gthis.font.kerning) {
							var charcode2 = prev_glyph1.char;
							var charcode3 = glyph.char;
							x = charData.fontData.kerning[charcode2 == 9 ? 32 : charcode2][charcode3 == 9 ? 32 : charcode3] * (glyph.width + prev_glyph1.width) / 2;
						} else {
							x = 0.0;
						}
					} else {
						x = 0.0;
					}
					x1 += x;
					glyph.x = x1 + charData.metric.left * glyph.width;
					glyph.y = y1 + (charData.fontData.base - charData.metric.top) * glyph.height;
					if(glyph.x + glyph.w >= line_x1) {
						if(glyph.x < line_max) {
							if(addRemoveGlyphes1) {
								_gthis._buffer.addElement(glyph);
							}
							pageLine1.visibleTo++;
						}
					} else {
						pageLine1.visibleFrom++;
						pageLine1.visibleTo++;
					}
					var width = glyph.width;
					x1 += charData.metric.advance * (glyph.char == 9 ? width * 3.0 : width);
					prev_glyph1 = glyph;
					++i;
				} else if(onUnrecognizedChar1 != null) {
					onUnrecognizedChar1(charcode,i);
				}
			}
			pageLine1.textSize += x1 - x_start;
			return x1 - x_start;
		}
	}
	,pageLineAppendChars: function(pageLine,x,size,offset,chars,glyphStyle,addRemoveGlyphes,onUnrecognizedChar) {
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		if(pageLine.glyphes.length > 0) {
			var prev_glyph = pageLine.glyphes[pageLine.glyphes.length - 1];
			var charcode = prev_glyph.char;
			var range = this.font.rangeMapping;
			var charcode1 = charcode == 9 ? 32 : charcode;
			var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
			var charData = metric == null ? null : { fontData : range, metric : metric};
			var width = prev_glyph.width;
			var fromX = prev_glyph.x + (charData.metric.advance - charData.metric.left) * (prev_glyph.char == 9 ? width * 3.0 : width);
			var pageLine1 = pageLine;
			var line_x = x;
			var x1 = fromX;
			var y = pageLine.y;
			var prev_glyph1 = prev_glyph;
			var glyphStyle1 = glyphStyle;
			var addRemoveGlyphes1 = addRemoveGlyphes;
			var onUnrecognizedChar1 = onUnrecognizedChar;
			var _gthis = this;
			var first = true;
			var glyph = null;
			var charData = null;
			var x_start = x1 += 0;
			var line_max = line_x + size;
			var i = pageLine1.glyphes.length - 1;
			var _g_offset = 0;
			var _g_s = chars;
			while(_g_offset < _g_s.length) {
				var charcode = _g_s.charCodeAt(_g_offset++);
				var range = _gthis.font.rangeMapping;
				var charcode1 = charcode == 9 ? 32 : charcode;
				var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
				charData = metric == null ? null : { fontData : range, metric : metric};
				if(charData != null) {
					glyph = new peote_text_Glyph_$_$Main_$MyFontStyle();
					pageLine1.glyphes.push(glyph);
					var glyphStyle2 = glyphStyle1 != null ? glyphStyle1 : _gthis.fontStyle;
					glyph.set_width(glyphStyle2.width);
					glyph.set_height(glyphStyle2.height);
					glyph.color = glyphStyle2.color;
					if(first) {
						first = false;
						y += glyph != null ? pageLine1.base - charData.fontData.base * glyph.height : 0;
					}
					glyph.char = charcode;
					glyph.tx = charData.metric.u;
					glyph.ty = charData.metric.v;
					glyph.tw = charData.metric.w;
					glyph.th = charData.metric.h;
					glyph.w = charData.metric.width * glyph.width;
					glyph.h = charData.metric.height * glyph.height;
					var x2;
					if(prev_glyph1 != null) {
						if(_gthis.font.kerning) {
							var charcode2 = prev_glyph1.char;
							var charcode3 = glyph.char;
							x2 = charData.fontData.kerning[charcode2 == 9 ? 32 : charcode2][charcode3 == 9 ? 32 : charcode3] * (glyph.width + prev_glyph1.width) / 2;
						} else {
							x2 = 0.0;
						}
					} else {
						x2 = 0.0;
					}
					x1 += x2;
					glyph.x = x1 + charData.metric.left * glyph.width;
					glyph.y = y + (charData.fontData.base - charData.metric.top) * glyph.height;
					if(glyph.x + glyph.w >= line_x) {
						if(glyph.x < line_max) {
							if(addRemoveGlyphes1) {
								_gthis._buffer.addElement(glyph);
							}
							pageLine1.visibleTo++;
						}
					} else {
						pageLine1.visibleFrom++;
						pageLine1.visibleTo++;
					}
					var width = glyph.width;
					x1 += charData.metric.advance * (glyph.char == 9 ? width * 3.0 : width);
					prev_glyph1 = glyph;
					++i;
				} else if(onUnrecognizedChar1 != null) {
					onUnrecognizedChar1(charcode,i);
				}
			}
			pageLine1.textSize += x1 - x_start;
			return x1 - x_start;
		} else {
			var pageLine1 = pageLine;
			var line_x = x;
			var x1 = x;
			var y = pageLine.y;
			var prev_glyph = null;
			var glyphStyle1 = glyphStyle;
			var addRemoveGlyphes1 = addRemoveGlyphes;
			var onUnrecognizedChar1 = onUnrecognizedChar;
			var _gthis = this;
			var first = true;
			var glyph = null;
			var charData = null;
			var x_start = x1 += offset;
			var line_max = line_x + size;
			var i = pageLine1.glyphes.length - 1;
			var _g_offset = 0;
			var _g_s = chars;
			while(_g_offset < _g_s.length) {
				var charcode = _g_s.charCodeAt(_g_offset++);
				var range = _gthis.font.rangeMapping;
				var charcode1 = charcode == 9 ? 32 : charcode;
				var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
				charData = metric == null ? null : { fontData : range, metric : metric};
				if(charData != null) {
					glyph = new peote_text_Glyph_$_$Main_$MyFontStyle();
					pageLine1.glyphes.push(glyph);
					var glyphStyle = glyphStyle1 != null ? glyphStyle1 : _gthis.fontStyle;
					glyph.set_width(glyphStyle.width);
					glyph.set_height(glyphStyle.height);
					glyph.color = glyphStyle.color;
					if(first) {
						first = false;
						y += glyph != null ? pageLine1.base - charData.fontData.base * glyph.height : 0;
					}
					glyph.char = charcode;
					glyph.tx = charData.metric.u;
					glyph.ty = charData.metric.v;
					glyph.tw = charData.metric.w;
					glyph.th = charData.metric.h;
					glyph.w = charData.metric.width * glyph.width;
					glyph.h = charData.metric.height * glyph.height;
					var x;
					if(prev_glyph != null) {
						if(_gthis.font.kerning) {
							var charcode2 = prev_glyph.char;
							var charcode3 = glyph.char;
							x = charData.fontData.kerning[charcode2 == 9 ? 32 : charcode2][charcode3 == 9 ? 32 : charcode3] * (glyph.width + prev_glyph.width) / 2;
						} else {
							x = 0.0;
						}
					} else {
						x = 0.0;
					}
					x1 += x;
					glyph.x = x1 + charData.metric.left * glyph.width;
					glyph.y = y + (charData.fontData.base - charData.metric.top) * glyph.height;
					if(glyph.x + glyph.w >= line_x) {
						if(glyph.x < line_max) {
							if(addRemoveGlyphes1) {
								_gthis._buffer.addElement(glyph);
							}
							pageLine1.visibleTo++;
						}
					} else {
						pageLine1.visibleFrom++;
						pageLine1.visibleTo++;
					}
					var width = glyph.width;
					x1 += charData.metric.advance * (glyph.char == 9 ? width * 3.0 : width);
					prev_glyph = glyph;
					++i;
				} else if(onUnrecognizedChar1 != null) {
					onUnrecognizedChar1(charcode,i);
				}
			}
			pageLine1.textSize += x1 - x_start;
			return x1 - x_start;
		}
	}
	,pageLineDeleteChar: function(pageLine,x,size,offset,position,addRemoveGlyphes) {
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		if(position == null) {
			position = 0;
		}
		if(addRemoveGlyphes && position >= pageLine.visibleFrom && position < pageLine.visibleTo) {
			this._buffer.removeElement(pageLine.glyphes[position]);
		}
		var to = position + 1;
		var _offset = 0.0;
		if(to < pageLine.glyphes.length) {
			var charcode = pageLine.glyphes[to].char;
			var range = this.font.rangeMapping;
			var charcode1 = charcode == 9 ? 32 : charcode;
			var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
			var charData = metric == null ? null : { fontData : range, metric : metric};
			if(position == 0) {
				var glyph = pageLine.glyphes[to];
				var width = glyph.width;
				_offset = x + offset - (glyph.x - charData.metric.left * (glyph.char == 9 ? width * 3.0 : width));
			} else {
				var glyph = pageLine.glyphes[position - 1];
				var charcode = pageLine.glyphes[position - 1].char;
				var range = this.font.rangeMapping;
				var charcode1 = charcode == 9 ? 32 : charcode;
				var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
				var charData1 = metric == null ? null : { fontData : range, metric : metric};
				var width = glyph.width;
				var glyph1 = pageLine.glyphes[to];
				var width1 = glyph1.width;
				_offset = glyph.x + (charData1.metric.advance - charData1.metric.left) * (glyph.char == 9 ? width * 3.0 : width) - (glyph1.x - charData.metric.left * (glyph1.char == 9 ? width1 * 3.0 : width1));
				var prev_glyph = pageLine.glyphes[position - 1];
				var glyph = pageLine.glyphes[to];
				var _offset1;
				if(prev_glyph != null) {
					if(this.font.kerning) {
						var charcode = prev_glyph.char;
						var charcode1 = glyph.char;
						_offset1 = charData.fontData.kerning[charcode == 9 ? 32 : charcode][charcode1 == 9 ? 32 : charcode1] * (glyph.width + prev_glyph.width) / 2;
					} else {
						_offset1 = 0.0;
					}
				} else {
					_offset1 = 0.0;
				}
				_offset += _offset1;
			}
			if(pageLine.updateFrom > position) {
				pageLine.updateFrom = position;
			}
			pageLine.updateTo = pageLine.glyphes.length - to + position;
			var line_max = x + size;
			var visibleFrom = pageLine.visibleFrom;
			var visibleTo = pageLine.visibleTo;
			var _g = to;
			var _g1 = pageLine.glyphes.length;
			while(_g < _g1) {
				var i = _g++;
				if(i >= to) {
					pageLine.glyphes[i].x += _offset;
				}
				if(pageLine.glyphes[i].x + pageLine.glyphes[i].w >= x) {
					if(pageLine.glyphes[i].x < line_max) {
						if(i < pageLine.visibleFrom || i >= pageLine.visibleTo) {
							if(addRemoveGlyphes) {
								this._buffer.addElement(pageLine.glyphes[i]);
							}
							if(visibleFrom > i) {
								visibleFrom = i;
							}
							if(visibleTo < i + 1) {
								visibleTo = i + 1;
							}
						}
					} else {
						if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
							this._buffer.removeElement(pageLine.glyphes[i]);
						}
						if(visibleTo > i) {
							visibleTo = i;
						}
					}
				} else {
					if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
						this._buffer.removeElement(pageLine.glyphes[i]);
					}
					visibleFrom = i + 1;
				}
			}
			pageLine.visibleFrom = visibleFrom;
			pageLine.visibleTo = visibleTo;
			pageLine.textSize += _offset;
		} else {
			if(pageLine.updateFrom >= pageLine.glyphes.length - to + position) {
				pageLine.updateFrom = 16777216;
				pageLine.updateTo = 0;
			} else if(pageLine.updateTo > pageLine.glyphes.length - to + position) {
				pageLine.updateTo = pageLine.glyphes.length - to + position;
			}
			if(position != 0) {
				var glyph = pageLine.glyphes[position - 1];
				var charcode = pageLine.glyphes[position - 1].char;
				var range = this.font.rangeMapping;
				var charcode1 = charcode == 9 ? 32 : charcode;
				var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
				var charData = metric == null ? null : { fontData : range, metric : metric};
				var width = glyph.width;
				_offset = glyph.x + (charData.metric.advance - charData.metric.left) * (glyph.char == 9 ? width * 3.0 : width) - (x + offset + pageLine.textSize);
			} else {
				_offset = -pageLine.textSize;
			}
			pageLine.textSize += _offset;
		}
		var _offset1 = _offset;
		if(position < pageLine.visibleFrom) {
			pageLine.visibleFrom--;
			pageLine.visibleTo--;
		} else if(position < pageLine.visibleTo) {
			pageLine.visibleTo--;
		}
		pageLine.glyphes.splice(position,1);
		return _offset1;
	}
	,pageLineDeleteChars: function(pageLine,x,size,offset,from,to,addRemoveGlyphes) {
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		if(from == null) {
			from = 0;
		}
		if(to == null) {
			to = pageLine.glyphes.length;
		}
		var _g = from < pageLine.visibleFrom ? pageLine.visibleFrom : from;
		var _g1 = to < pageLine.visibleTo ? to : pageLine.visibleTo;
		while(_g < _g1) {
			var i = _g++;
			if(addRemoveGlyphes) {
				this._buffer.removeElement(pageLine.glyphes[i]);
			}
		}
		var _offset = 0.0;
		if(to < pageLine.glyphes.length) {
			var charcode = pageLine.glyphes[to].char;
			var range = this.font.rangeMapping;
			var charcode1 = charcode == 9 ? 32 : charcode;
			var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
			var charData = metric == null ? null : { fontData : range, metric : metric};
			if(from == 0) {
				var glyph = pageLine.glyphes[to];
				var width = glyph.width;
				_offset = x + offset - (glyph.x - charData.metric.left * (glyph.char == 9 ? width * 3.0 : width));
			} else {
				var glyph = pageLine.glyphes[from - 1];
				var charcode = pageLine.glyphes[from - 1].char;
				var range = this.font.rangeMapping;
				var charcode1 = charcode == 9 ? 32 : charcode;
				var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
				var charData1 = metric == null ? null : { fontData : range, metric : metric};
				var width = glyph.width;
				var glyph1 = pageLine.glyphes[to];
				var width1 = glyph1.width;
				_offset = glyph.x + (charData1.metric.advance - charData1.metric.left) * (glyph.char == 9 ? width * 3.0 : width) - (glyph1.x - charData.metric.left * (glyph1.char == 9 ? width1 * 3.0 : width1));
				var prev_glyph = pageLine.glyphes[from - 1];
				var glyph = pageLine.glyphes[to];
				var _offset1;
				if(prev_glyph != null) {
					if(this.font.kerning) {
						var charcode = prev_glyph.char;
						var charcode1 = glyph.char;
						_offset1 = charData.fontData.kerning[charcode == 9 ? 32 : charcode][charcode1 == 9 ? 32 : charcode1] * (glyph.width + prev_glyph.width) / 2;
					} else {
						_offset1 = 0.0;
					}
				} else {
					_offset1 = 0.0;
				}
				_offset += _offset1;
			}
			if(pageLine.updateFrom > from) {
				pageLine.updateFrom = from;
			}
			pageLine.updateTo = pageLine.glyphes.length - to + from;
			var line_max = x + size;
			var visibleFrom = pageLine.visibleFrom;
			var visibleTo = pageLine.visibleTo;
			var _g = to;
			var _g1 = pageLine.glyphes.length;
			while(_g < _g1) {
				var i = _g++;
				if(i >= to) {
					pageLine.glyphes[i].x += _offset;
				}
				if(pageLine.glyphes[i].x + pageLine.glyphes[i].w >= x) {
					if(pageLine.glyphes[i].x < line_max) {
						if(i < pageLine.visibleFrom || i >= pageLine.visibleTo) {
							if(addRemoveGlyphes) {
								this._buffer.addElement(pageLine.glyphes[i]);
							}
							if(visibleFrom > i) {
								visibleFrom = i;
							}
							if(visibleTo < i + 1) {
								visibleTo = i + 1;
							}
						}
					} else {
						if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
							this._buffer.removeElement(pageLine.glyphes[i]);
						}
						if(visibleTo > i) {
							visibleTo = i;
						}
					}
				} else {
					if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
						this._buffer.removeElement(pageLine.glyphes[i]);
					}
					visibleFrom = i + 1;
				}
			}
			pageLine.visibleFrom = visibleFrom;
			pageLine.visibleTo = visibleTo;
			pageLine.textSize += _offset;
		} else {
			if(pageLine.updateFrom >= pageLine.glyphes.length - to + from) {
				pageLine.updateFrom = 16777216;
				pageLine.updateTo = 0;
			} else if(pageLine.updateTo > pageLine.glyphes.length - to + from) {
				pageLine.updateTo = pageLine.glyphes.length - to + from;
			}
			if(from != 0) {
				var glyph = pageLine.glyphes[from - 1];
				var charcode = pageLine.glyphes[from - 1].char;
				var range = this.font.rangeMapping;
				var charcode1 = charcode == 9 ? 32 : charcode;
				var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
				var charData = metric == null ? null : { fontData : range, metric : metric};
				var width = glyph.width;
				_offset = glyph.x + (charData.metric.advance - charData.metric.left) * (glyph.char == 9 ? width * 3.0 : width) - (x + offset + pageLine.textSize);
			} else {
				_offset = -pageLine.textSize;
			}
			pageLine.textSize += _offset;
		}
		var _offset1 = _offset;
		if(from < pageLine.visibleFrom) {
			pageLine.visibleFrom = to < pageLine.visibleFrom ? pageLine.visibleFrom - to + from : from;
			pageLine.visibleTo = to < pageLine.visibleTo ? pageLine.visibleTo - to + from : from;
		} else if(from < pageLine.visibleTo) {
			pageLine.visibleTo = to < pageLine.visibleTo ? pageLine.visibleTo - to + from : from;
		}
		pageLine.glyphes.splice(from,to - from);
		return _offset1;
	}
	,pageLineCutChars: function(pageLine,x,size,offset,from,to,addRemoveGlyphes) {
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		if(from == null) {
			from = 0;
		}
		if(to == null) {
			to = pageLine.glyphes.length;
		}
		var cut = "";
		var _g = from;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var code = pageLine.glyphes[i].char;
			cut += String.fromCodePoint(code);
			if(i >= pageLine.visibleFrom && i < pageLine.visibleTo && addRemoveGlyphes) {
				this._buffer.removeElement(pageLine.glyphes[i]);
			}
		}
		var _offset = 0.0;
		if(to < pageLine.glyphes.length) {
			var charcode = pageLine.glyphes[to].char;
			var range = this.font.rangeMapping;
			var charcode1 = charcode == 9 ? 32 : charcode;
			var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
			var charData = metric == null ? null : { fontData : range, metric : metric};
			if(from == 0) {
				var glyph = pageLine.glyphes[to];
				var width = glyph.width;
				_offset = x + offset - (glyph.x - charData.metric.left * (glyph.char == 9 ? width * 3.0 : width));
			} else {
				var glyph = pageLine.glyphes[from - 1];
				var charcode = pageLine.glyphes[from - 1].char;
				var range = this.font.rangeMapping;
				var charcode1 = charcode == 9 ? 32 : charcode;
				var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
				var charData1 = metric == null ? null : { fontData : range, metric : metric};
				var width = glyph.width;
				var glyph1 = pageLine.glyphes[to];
				var width1 = glyph1.width;
				_offset = glyph.x + (charData1.metric.advance - charData1.metric.left) * (glyph.char == 9 ? width * 3.0 : width) - (glyph1.x - charData.metric.left * (glyph1.char == 9 ? width1 * 3.0 : width1));
				var prev_glyph = pageLine.glyphes[from - 1];
				var glyph = pageLine.glyphes[to];
				var _offset1;
				if(prev_glyph != null) {
					if(this.font.kerning) {
						var charcode = prev_glyph.char;
						var charcode1 = glyph.char;
						_offset1 = charData.fontData.kerning[charcode == 9 ? 32 : charcode][charcode1 == 9 ? 32 : charcode1] * (glyph.width + prev_glyph.width) / 2;
					} else {
						_offset1 = 0.0;
					}
				} else {
					_offset1 = 0.0;
				}
				_offset += _offset1;
			}
			if(pageLine.updateFrom > from) {
				pageLine.updateFrom = from;
			}
			pageLine.updateTo = pageLine.glyphes.length - to + from;
			var line_max = x + size;
			var visibleFrom = pageLine.visibleFrom;
			var visibleTo = pageLine.visibleTo;
			var _g = to;
			var _g1 = pageLine.glyphes.length;
			while(_g < _g1) {
				var i = _g++;
				if(i >= to) {
					pageLine.glyphes[i].x += _offset;
				}
				if(pageLine.glyphes[i].x + pageLine.glyphes[i].w >= x) {
					if(pageLine.glyphes[i].x < line_max) {
						if(i < pageLine.visibleFrom || i >= pageLine.visibleTo) {
							if(addRemoveGlyphes) {
								this._buffer.addElement(pageLine.glyphes[i]);
							}
							if(visibleFrom > i) {
								visibleFrom = i;
							}
							if(visibleTo < i + 1) {
								visibleTo = i + 1;
							}
						}
					} else {
						if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
							this._buffer.removeElement(pageLine.glyphes[i]);
						}
						if(visibleTo > i) {
							visibleTo = i;
						}
					}
				} else {
					if(addRemoveGlyphes && i >= pageLine.visibleFrom && i < pageLine.visibleTo) {
						this._buffer.removeElement(pageLine.glyphes[i]);
					}
					visibleFrom = i + 1;
				}
			}
			pageLine.visibleFrom = visibleFrom;
			pageLine.visibleTo = visibleTo;
			pageLine.textSize += _offset;
		} else {
			if(pageLine.updateFrom >= pageLine.glyphes.length - to + from) {
				pageLine.updateFrom = 16777216;
				pageLine.updateTo = 0;
			} else if(pageLine.updateTo > pageLine.glyphes.length - to + from) {
				pageLine.updateTo = pageLine.glyphes.length - to + from;
			}
			if(from != 0) {
				var glyph = pageLine.glyphes[from - 1];
				var charcode = pageLine.glyphes[from - 1].char;
				var range = this.font.rangeMapping;
				var charcode1 = charcode == 9 ? 32 : charcode;
				var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
				var charData = metric == null ? null : { fontData : range, metric : metric};
				var width = glyph.width;
				_offset = glyph.x + (charData.metric.advance - charData.metric.left) * (glyph.char == 9 ? width * 3.0 : width) - (x + offset + pageLine.textSize);
			} else {
				_offset = -pageLine.textSize;
			}
			pageLine.textSize += _offset;
		}
		var _offset1 = _offset;
		if(from < pageLine.visibleFrom) {
			pageLine.visibleFrom = to < pageLine.visibleFrom ? pageLine.visibleFrom - to + from : from;
			pageLine.visibleTo = to < pageLine.visibleTo ? pageLine.visibleTo - to + from : from;
		} else if(from < pageLine.visibleTo) {
			pageLine.visibleTo = to < pageLine.visibleTo ? pageLine.visibleTo - to + from : from;
		}
		pageLine.glyphes.splice(from,to - from);
		return cut;
	}
	,pageLineGetChars: function(pageLine,from,to) {
		if(from == null) {
			from = 0;
		}
		if(to == null) {
			to = pageLine.glyphes.length;
		}
		var chars = "";
		var _g = from;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var code = pageLine.glyphes[i].char;
			chars += String.fromCodePoint(code);
		}
		return chars;
	}
	,pageLineUpdate: function(pageLine,from,to) {
		if(from != null) {
			pageLine.updateFrom = from;
		}
		if(to != null) {
			pageLine.updateTo = to;
		}
		if(pageLine.updateTo > 0) {
			if(pageLine.visibleFrom > pageLine.updateFrom) {
				pageLine.updateFrom = pageLine.visibleFrom;
			}
			if(pageLine.visibleTo < pageLine.updateTo) {
				pageLine.updateTo = pageLine.visibleTo;
			}
			var _g = pageLine.updateFrom;
			var _g1 = pageLine.updateTo;
			while(_g < _g1) {
				var i = _g++;
				this._buffer.updateElement(pageLine.glyphes[i]);
			}
			pageLine.updateFrom = 16777216;
			pageLine.updateTo = 0;
		}
	}
	,pageLineGetPositionAtChar: function(pageLine,x,offset,position) {
		if(position == 0 || pageLine.glyphes.length == 0) {
			return x + offset;
		} else if(position < pageLine.glyphes.length) {
			var right_glyph = pageLine.glyphes[position];
			var charcode = right_glyph.char;
			var range = this.font.rangeMapping;
			var charcode1 = charcode == 9 ? 32 : charcode;
			var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
			var chardata = metric == null ? null : { fontData : range, metric : metric};
			var glyph = pageLine.glyphes[position - 1];
			var width = glyph.width;
			var width1 = right_glyph.width;
			return (glyph.x + (chardata.metric.advance - chardata.metric.left) * (glyph.char == 9 ? width * 3.0 : width) + (right_glyph.x - chardata.metric.left * (right_glyph.char == 9 ? width1 * 3.0 : width1))) / 2;
		} else {
			var last_glyph = pageLine.glyphes[pageLine.glyphes.length - 1];
			var charcode = last_glyph.char;
			var range = this.font.rangeMapping;
			var charcode1 = charcode == 9 ? 32 : charcode;
			var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
			var charData = metric == null ? null : { fontData : range, metric : metric};
			var width = last_glyph.width;
			return last_glyph.x + (charData.metric.advance - charData.metric.left) * (last_glyph.char == 9 ? width * 3.0 : width);
		}
	}
	,pageLineGetCharAtPosition: function(pageLine,x,size,offset,xPosition,intoVisibleRange) {
		if(intoVisibleRange == null) {
			intoVisibleRange = true;
		}
		if(xPosition <= x + (intoVisibleRange ? 0 : offset)) {
			if(intoVisibleRange) {
				return pageLine.visibleFrom;
			} else {
				return 0;
			}
		} else if(xPosition >= x + (intoVisibleRange ? size : offset + pageLine.textSize)) {
			if(intoVisibleRange) {
				return pageLine.visibleTo;
			} else {
				return pageLine.glyphes.length;
			}
		} else if(pageLine.glyphes.length == 0 || xPosition <= pageLine.glyphes[0].x) {
			return 0;
		} else {
			var from = intoVisibleRange ? pageLine.visibleFrom : 0;
			var to = intoVisibleRange ? pageLine.visibleTo : pageLine.glyphes.length;
			if(from >= to) {
				return pageLine.glyphes.length;
			}
			while(from + 1 < to) if(xPosition > pageLine.glyphes[from + (to - from >> 1)].x) {
				from += to - from >> 1;
			} else {
				to = from + (to - from >> 1);
			}
			var left_glyph = pageLine.glyphes[from];
			var charcode = left_glyph.char;
			var range = this.font.rangeMapping;
			var charcode1 = charcode == 9 ? 32 : charcode;
			var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
			var chardata = metric == null ? null : { fontData : range, metric : metric};
			var width = left_glyph.width;
			var width1 = left_glyph.width;
			if(xPosition < (left_glyph.x - chardata.metric.left * (left_glyph.char == 9 ? width * 3.0 : width) + (left_glyph.x + (chardata.metric.advance - chardata.metric.left) * (left_glyph.char == 9 ? width1 * 3.0 : width1))) / 2) {
				return from;
			} else {
				return to;
			}
		}
	}
	,pageSet: function(page,chars,x,y,width,height,xOffset,yOffset,glyphStyle,defaultFontRange,addRemoveGlyphes,onUnrecognizedChar) {
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		if(x != null) {
			page.x = x;
		}
		if(y != null) {
			page.y = y;
		} else {
			y = page.y;
		}
		if(width != null) {
			page.width = width;
		}
		if(height != null) {
			page.height = height;
		}
		if(xOffset != null) {
			page.xOffset = xOffset;
		}
		if(yOffset != null) {
			page.yOffset = yOffset;
		}
		chars += "\n";
		var visibleLineFrom = 0;
		var visibleLineTo = 0;
		var i = 0;
		var textWidth = 0.0;
		y += page.yOffset;
		while(i < page.pageLines.length && peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit.match(chars)) {
			var pageLine = page.pageLines[i];
			if(i > visibleLineFrom) {
				this.pageLineSet(pageLine,peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit.matched(1),page.x,y,page.width,page.xOffset,glyphStyle,defaultFontRange,addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo),onUnrecognizedChar == null ? null : (function(_g,a1) {
					return function(a2,a3) {
						_g[0](a1[0],a2,a3);
					};
				})([onUnrecognizedChar],[i]));
				if(y <= page.y + page.height) {
					if(addRemoveGlyphes && !(page.visibleLineFrom <= i && i < page.visibleLineTo)) {
						var _g = pageLine.visibleFrom;
						var _g1 = pageLine.visibleTo;
						while(_g < _g1) {
							var i1 = _g++;
							this._buffer.addElement(pageLine.glyphes[i1]);
						}
					}
					++visibleLineTo;
				} else if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
					var _g2 = pageLine.visibleFrom;
					var _g3 = pageLine.visibleTo;
					while(_g2 < _g3) {
						var i2 = _g2++;
						this._buffer.removeElement(pageLine.glyphes[i2]);
					}
				}
			} else {
				this.pageLineSet(pageLine,peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit.matched(1),page.x,y,page.width,page.xOffset,glyphStyle,defaultFontRange,addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo),onUnrecognizedChar == null ? null : (function(_g,a1) {
					return function(a2,a3) {
						_g[0](a1[0],a2,a3);
					};
				})([onUnrecognizedChar],[i]));
				if(y + pageLine.lineHeight < page.y) {
					if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
						var _g4 = pageLine.visibleFrom;
						var _g5 = pageLine.visibleTo;
						while(_g4 < _g5) {
							var i3 = _g4++;
							this._buffer.removeElement(pageLine.glyphes[i3]);
						}
					}
					++visibleLineFrom;
					++visibleLineTo;
				} else {
					if(addRemoveGlyphes && !(page.visibleLineFrom <= i && i < page.visibleLineTo)) {
						var _g6 = pageLine.visibleFrom;
						var _g7 = pageLine.visibleTo;
						while(_g6 < _g7) {
							var i4 = _g6++;
							this._buffer.addElement(pageLine.glyphes[i4]);
						}
					}
					++visibleLineTo;
				}
			}
			++i;
			y += pageLine.lineHeight;
			if(pageLine.textSize > textWidth) {
				textWidth = pageLine.textSize;
			}
			chars = peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit.matchedRight();
		}
		page.textWidth = textWidth;
		page.updateLineFrom = 0;
		page.updateLineTo = i;
		if(i < page.pageLines.length) {
			while(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
				haxe_Log.trace("removeLine",{ fileName : "peote/text/FontProgram.hx", lineNumber : 2301, className : "peote.text.FontProgram__Main_MyFontStyle", methodName : "pageSet", customParams : [i]});
				var pageLine = page.pageLines[i];
				var _g = pageLine.visibleFrom;
				var _g1 = pageLine.visibleTo;
				while(_g < _g1) {
					var i1 = _g++;
					this._buffer.removeElement(pageLine.glyphes[i1]);
				}
				++i;
			}
			var newLength = page.updateLineTo;
			page.pageLines.splice(newLength,page.pageLines.length - newLength);
			page.visibleLineFrom = visibleLineFrom;
			page.visibleLineTo = visibleLineTo;
		} else {
			var chars1 = chars;
			var i1 = i;
			var y1 = y;
			var visibleLineFrom1 = visibleLineFrom;
			var visibleLineTo1 = visibleLineTo;
			var textWidth = page.textWidth;
			var onUnrecognizedLineChar;
			if(onUnrecognizedChar == null) {
				onUnrecognizedLineChar = null;
			} else {
				var _g = onUnrecognizedChar;
				var a1 = i1;
				onUnrecognizedLineChar = function(a2,a3) {
					_g(a1,a2,a3);
				};
			}
			var y_start = y1;
			while(peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit.match(chars1)) {
				var pageLine = new peote_text_PageLine_$_$Main_$MyFontStyle();
				if(i1 > visibleLineFrom1) {
					if(y1 <= page.y + page.height) {
						this.pageLineSet(pageLine,peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit.matched(1),page.x,y1,page.width,page.xOffset,glyphStyle,defaultFontRange,addRemoveGlyphes,onUnrecognizedLineChar);
						++visibleLineTo1;
					} else {
						this.pageLineSet(pageLine,peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit.matched(1),page.x,y1,page.width,page.xOffset,glyphStyle,defaultFontRange,false,onUnrecognizedLineChar);
					}
				} else {
					this.pageLineSet(pageLine,peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit.matched(1),page.x,y1,page.width,page.xOffset,glyphStyle,defaultFontRange,false,onUnrecognizedLineChar);
					if(y1 + pageLine.lineHeight < page.y) {
						++visibleLineFrom1;
						++visibleLineTo1;
					} else {
						if(addRemoveGlyphes) {
							var _g1 = pageLine.visibleFrom;
							var _g2 = pageLine.visibleTo;
							while(_g1 < _g2) {
								var i = _g1++;
								this._buffer.addElement(pageLine.glyphes[i]);
							}
						}
						++visibleLineTo1;
					}
				}
				++i1;
				y1 += pageLine.lineHeight;
				page.pageLines.push(pageLine);
				if(pageLine.textSize > textWidth) {
					textWidth = pageLine.textSize;
				}
				chars1 = peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit.matchedRight();
			}
			page.visibleLineFrom = visibleLineFrom1;
			page.visibleLineTo = visibleLineTo1;
			page.textWidth = textWidth;
			y += y1 - y_start;
		}
		page.textHeight = y - page.yOffset - page.y;
	}
	,pageSetStyle: function(page,glyphStyle,fromLine,fromPosition,toLine,toPosition,addRemoveGlyphes) {
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		if(fromPosition == null) {
			fromPosition = 0;
		}
		if(fromLine == null) {
			fromLine = 0;
		}
		if(toLine == null || toLine > page.pageLines.length) {
			toLine = page.pageLines.length;
		}
		if(toLine < fromLine) {
			var tmp = toLine;
			toLine = fromLine;
			fromLine = tmp;
		} else if(fromLine == toLine) {
			++toLine;
		}
		if(fromLine < page.updateLineFrom) {
			page.updateLineFrom = fromLine;
		}
		if(toLine > page.updateLineTo) {
			page.updateLineTo = toLine;
		}
		if(fromLine < 0) {
			fromLine = 0;
		}
		var pageLine;
		var offset = 0.0;
		var y = 0.0;
		var oldLineHeight = 0.0;
		var oldLineSize = 0.0;
		var newLineSize = 0.0;
		var visibleLineFrom = page.visibleLineFrom;
		var visibleLineTo = page.visibleLineTo;
		var _g = fromLine;
		var _g1 = toLine;
		while(_g < _g1) {
			var i = _g++;
			pageLine = page.pageLines[i];
			if(pageLine.textSize > oldLineSize) {
				oldLineSize = pageLine.textSize;
			}
			oldLineHeight = pageLine.lineHeight;
			if(i == fromLine) {
				this.pageLineSetStyle(pageLine,page.x,page.width,page.xOffset,glyphStyle,fromPosition,null,addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo));
				y = pageLine.y;
			} else {
				if(i == toLine - 1) {
					this.pageLineSetStyle(pageLine,page.x,page.width,page.xOffset,glyphStyle,0,toPosition,addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo));
				} else {
					this.pageLineSetStyle(pageLine,page.x,page.width,page.xOffset,glyphStyle,null,null,addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo));
				}
				y += pageLine.lineHeight;
			}
			if(pageLine.textSize > newLineSize) {
				newLineSize = pageLine.textSize;
			}
			if(pageLine.lineHeight != oldLineHeight) {
				this.pageLineSetYPosition(pageLine,page.x,page.width,page.xOffset,y,null,addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo));
				offset += pageLine.lineHeight - oldLineHeight;
				if(pageLine.y + pageLine.lineHeight >= page.y) {
					if(pageLine.y < page.y + page.height) {
						if(i < visibleLineFrom || i >= visibleLineTo) {
							if(addRemoveGlyphes && !(page.visibleLineFrom <= i && i < page.visibleLineTo)) {
								var _g2 = pageLine.visibleFrom;
								var _g3 = pageLine.visibleTo;
								while(_g2 < _g3) {
									var i1 = _g2++;
									this._buffer.addElement(pageLine.glyphes[i1]);
								}
							}
							if(visibleLineFrom > i) {
								visibleLineFrom = i;
							}
							if(visibleLineTo < i + 1) {
								visibleLineTo = i + 1;
							}
						}
					} else {
						if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
							var _g4 = pageLine.visibleFrom;
							var _g5 = pageLine.visibleTo;
							while(_g4 < _g5) {
								var i2 = _g4++;
								this._buffer.removeElement(pageLine.glyphes[i2]);
							}
						}
						if(visibleLineTo > i) {
							visibleLineTo = i;
						}
					}
				} else {
					if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
						var _g6 = pageLine.visibleFrom;
						var _g7 = pageLine.visibleTo;
						while(_g6 < _g7) {
							var i3 = _g6++;
							this._buffer.removeElement(pageLine.glyphes[i3]);
						}
					}
					visibleLineFrom = i + 1;
				}
			}
		}
		var newSize = newLineSize;
		if(newSize > page.textWidth) {
			page.textWidth = newSize;
		} else if(oldLineSize >= page.textWidth && newSize < page.textWidth) {
			var pageLine1;
			var _g = 0;
			var _g1 = fromLine;
			while(_g < _g1) {
				var i = _g++;
				pageLine1 = page.pageLines[i];
				if(pageLine1.textSize > newSize) {
					newSize = pageLine1.textSize;
				}
			}
			var _g = toLine;
			var _g1 = page.pageLines.length;
			while(_g < _g1) {
				var i = _g++;
				pageLine1 = page.pageLines[i];
				if(pageLine1.textSize > newSize) {
					newSize = pageLine1.textSize;
				}
			}
			page.textWidth = newSize;
		}
		if(offset != 0) {
			page.updateLineTo = page.pageLines.length;
			var _g = toLine;
			var _g1 = page.pageLines.length;
			while(_g < _g1) {
				var i = _g++;
				pageLine = page.pageLines[i];
				this.pageLineSetYPosition(pageLine,page.x,page.width,page.xOffset,pageLine.y + offset,null,addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo));
				if(pageLine.y + pageLine.lineHeight >= page.y) {
					if(pageLine.y < page.y + page.height) {
						if(i < visibleLineFrom || i >= visibleLineTo) {
							if(addRemoveGlyphes && !(page.visibleLineFrom <= i && i < page.visibleLineTo)) {
								var _g2 = pageLine.visibleFrom;
								var _g3 = pageLine.visibleTo;
								while(_g2 < _g3) {
									var i1 = _g2++;
									this._buffer.addElement(pageLine.glyphes[i1]);
								}
							}
							if(visibleLineFrom > i) {
								visibleLineFrom = i;
							}
							if(visibleLineTo < i + 1) {
								visibleLineTo = i + 1;
							}
						}
					} else {
						if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
							var _g4 = pageLine.visibleFrom;
							var _g5 = pageLine.visibleTo;
							while(_g4 < _g5) {
								var i2 = _g4++;
								this._buffer.removeElement(pageLine.glyphes[i2]);
							}
						}
						if(visibleLineTo > i) {
							visibleLineTo = i;
						}
					}
				} else {
					if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
						var _g6 = pageLine.visibleFrom;
						var _g7 = pageLine.visibleTo;
						while(_g6 < _g7) {
							var i3 = _g6++;
							this._buffer.removeElement(pageLine.glyphes[i3]);
						}
					}
					visibleLineFrom = i + 1;
				}
			}
		}
		page.visibleLineFrom = visibleLineFrom;
		page.visibleLineTo = visibleLineTo;
		page.textHeight += offset;
		return offset;
	}
	,pageInsertChars: function(page,chars,lineNumber,position,glyphStyle,defaultFontRange,addRemoveGlyphes,onUnrecognizedChar) {
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		if(position == null) {
			position = 0;
		}
		if(lineNumber == null) {
			lineNumber = 0;
		}
		chars += "\n";
		var offset = 0.0;
		if(page.pageLines.length > 0 && lineNumber < page.pageLines.length) {
			if(peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit.match(chars)) {
				var pageLine = page.pageLines[lineNumber];
				if(peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit.matchedRight().length == 0) {
					if(lineNumber < page.updateLineFrom) {
						page.updateLineFrom = lineNumber;
					}
					if(lineNumber >= page.updateLineTo) {
						page.updateLineTo = lineNumber + 1;
					}
					var page1 = page.x;
					var page2 = page.width;
					var page3 = page.xOffset;
					var tmp = peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit.matched(1);
					var tmp1;
					if(onUnrecognizedChar == null) {
						tmp1 = null;
					} else {
						var _g = onUnrecognizedChar;
						var a1 = lineNumber;
						tmp1 = function(a2,a3) {
							_g(a1,a2,a3);
						};
					}
					this.pageLineInsertChars(pageLine,page1,page2,page3,tmp,position,glyphStyle,addRemoveGlyphes && (page.visibleLineFrom <= lineNumber && lineNumber < page.visibleLineTo),tmp1);
					var newSize = pageLine.textSize;
					if(newSize > page.textWidth) {
						page.textWidth = newSize;
					}
				} else {
					var restChars = pageLine.glyphes.splice(position,pageLine.glyphes.length - position);
					var oldFrom = 0;
					var oldTo = 0;
					var restCharsTextSize = 0.0;
					var firstLineOldTextSize = pageLine.textSize;
					if(restChars.length > 0) {
						if(position == 0) {
							pageLine.textSize = 0.0;
							restCharsTextSize = firstLineOldTextSize;
						} else {
							var glyph = pageLine.glyphes[position - 1];
							var charcode = pageLine.glyphes[position - 1].char;
							var range = this.font.rangeMapping;
							var charcode1 = charcode == 9 ? 32 : charcode;
							var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
							var charData = metric == null ? null : { fontData : range, metric : metric};
							var width = glyph.width;
							pageLine.textSize = glyph.x + (charData.metric.advance - charData.metric.left) * (glyph.char == 9 ? width * 3.0 : width) - page.x - page.xOffset;
							restCharsTextSize = firstLineOldTextSize - pageLine.textSize;
						}
						oldFrom = pageLine.visibleFrom - pageLine.glyphes.length;
						oldTo = pageLine.visibleTo - pageLine.glyphes.length;
						if(pageLine.visibleFrom > pageLine.glyphes.length) {
							pageLine.visibleFrom = pageLine.glyphes.length;
						}
						if(pageLine.visibleTo > pageLine.glyphes.length) {
							pageLine.visibleTo = pageLine.glyphes.length;
						}
					}
					var oldLineFrom = page.visibleLineFrom;
					var oldLineTo = page.visibleLineTo;
					var page1 = page.x;
					var page2 = page.width;
					var page3 = page.xOffset;
					var tmp = peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit.matched(1);
					var tmp1;
					if(onUnrecognizedChar == null) {
						tmp1 = null;
					} else {
						var _g1 = onUnrecognizedChar;
						var a11 = lineNumber;
						tmp1 = function(a2,a3) {
							_g1(a11,a2,a3);
						};
					}
					this.pageLineAppendChars(pageLine,page1,page2,page3,tmp,glyphStyle,addRemoveGlyphes && (page.visibleLineFrom <= lineNumber && lineNumber < page.visibleLineTo),tmp1);
					var firstLineNewTextSize = pageLine.textSize;
					var restLines = page.pageLines.splice(lineNumber + 1,page.pageLines.length - (lineNumber + 1));
					var restLineFrom = page.pageLines.length;
					var restLineWasVisible = page.visibleLineFrom <= lineNumber && lineNumber < page.visibleLineTo;
					var chars1 = peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit.matchedRight();
					var i = page.pageLines.length;
					var y = pageLine.y + pageLine.lineHeight;
					var visibleLineFrom = page.visibleLineFrom > page.pageLines.length ? page.pageLines.length : page.visibleLineFrom;
					var visibleLineTo = page.visibleLineTo > page.pageLines.length ? page.pageLines.length : page.visibleLineTo;
					var textWidth = page.textWidth;
					var onUnrecognizedLineChar;
					if(onUnrecognizedChar == null) {
						onUnrecognizedLineChar = null;
					} else {
						var _g2 = onUnrecognizedChar;
						var a12 = i;
						onUnrecognizedLineChar = function(a2,a3) {
							_g2(a12,a2,a3);
						};
					}
					var y_start = y;
					while(peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit.match(chars1)) {
						var pageLine = new peote_text_PageLine_$_$Main_$MyFontStyle();
						if(i > visibleLineFrom) {
							if(y <= page.y + page.height) {
								this.pageLineSet(pageLine,peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit.matched(1),page.x,y,page.width,page.xOffset,glyphStyle,defaultFontRange,addRemoveGlyphes,onUnrecognizedLineChar);
								++visibleLineTo;
							} else {
								this.pageLineSet(pageLine,peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit.matched(1),page.x,y,page.width,page.xOffset,glyphStyle,defaultFontRange,false,onUnrecognizedLineChar);
							}
						} else {
							this.pageLineSet(pageLine,peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit.matched(1),page.x,y,page.width,page.xOffset,glyphStyle,defaultFontRange,false,onUnrecognizedLineChar);
							if(y + pageLine.lineHeight < page.y) {
								++visibleLineFrom;
								++visibleLineTo;
							} else {
								if(addRemoveGlyphes) {
									var _g3 = pageLine.visibleFrom;
									var _g4 = pageLine.visibleTo;
									while(_g3 < _g4) {
										var i1 = _g3++;
										this._buffer.addElement(pageLine.glyphes[i1]);
									}
								}
								++visibleLineTo;
							}
						}
						++i;
						y += pageLine.lineHeight;
						page.pageLines.push(pageLine);
						if(pageLine.textSize > textWidth) {
							textWidth = pageLine.textSize;
						}
						chars1 = peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit.matchedRight();
					}
					page.visibleLineFrom = visibleLineFrom;
					page.visibleLineTo = visibleLineTo;
					page.textWidth = textWidth;
					offset = y - y_start;
					if(restChars.length > 0) {
						var pageLine = page.pageLines[page.pageLines.length - 1];
						if(pageLine.glyphes.length < pageLine.updateFrom) {
							pageLine.updateFrom = pageLine.glyphes.length;
						}
						var line_max = page.x + page.width;
						var glyph = restChars[0];
						var charcode = restChars[0].char;
						var range = this.font.rangeMapping;
						var charcode1 = charcode == 9 ? 32 : charcode;
						var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
						var width = glyph.width;
						var deltaX = pageLine.textSize - (glyph.x - (metric == null ? null : { fontData : range, metric : metric}).metric.left * (glyph.char == 9 ? width * 3.0 : width)) + page.x + page.xOffset;
						if(pageLine.glyphes.length > 0) {
							var prev_glyph = pageLine.glyphes[pageLine.glyphes.length - 1];
							var glyph = restChars[0];
							var deltaX1;
							if(prev_glyph != null) {
								if(this.font.kerning) {
									var charcode = restChars[0].char;
									var range = this.font.rangeMapping;
									var charcode1 = charcode == 9 ? 32 : charcode;
									var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
									var charcode = prev_glyph.char;
									var charcode1 = glyph.char;
									deltaX1 = (metric == null ? null : { fontData : range, metric : metric}).fontData.kerning[charcode == 9 ? 32 : charcode][charcode1 == 9 ? 32 : charcode1] * (glyph.width + prev_glyph.width) / 2;
								} else {
									deltaX1 = 0.0;
								}
							} else {
								deltaX1 = 0.0;
							}
							deltaX += deltaX1;
						}
						var glyph = restChars[0];
						var charcode = glyph.char;
						var range = this.font.rangeMapping;
						var charcode1 = charcode == 9 ? 32 : charcode;
						var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
						var charData = metric == null ? null : { fontData : range, metric : metric};
						var deltaY = pageLine.y + pageLine.base - (glyph.y - (charData.fontData.base - charData.metric.top) * glyph.height + charData.fontData.base * glyph.height);
						var restLineIsVisible = page.visibleLineFrom <= page.pageLines.length - 1 && page.pageLines.length - 1 < page.visibleLineTo;
						var _g3 = 0;
						var _g4 = restChars.length;
						while(_g3 < _g4) {
							var i = _g3++;
							restChars[i].x += deltaX;
							restChars[i].y += deltaY;
							if(restLineWasVisible) {
								if(restChars[i].x + restChars[i].w >= page.x) {
									if(restChars[i].x < line_max) {
										if(restLineIsVisible && addRemoveGlyphes && (i < oldFrom || i >= oldTo)) {
											this._buffer.addElement(restChars[i]);
										}
										pageLine.visibleTo++;
									} else if(restLineIsVisible && addRemoveGlyphes && i >= oldFrom && i < oldTo) {
										this._buffer.removeElement(restChars[i]);
									}
								} else {
									if(restLineIsVisible && addRemoveGlyphes && i >= oldFrom && i < oldTo) {
										this._buffer.removeElement(restChars[i]);
									}
									pageLine.visibleFrom++;
									pageLine.visibleTo++;
								}
								if(!restLineIsVisible && addRemoveGlyphes && i >= oldFrom && i < oldTo) {
									this._buffer.removeElement(restChars[i]);
								}
							} else if(restChars[i].x + restChars[i].w >= page.x) {
								if(restChars[i].x < line_max) {
									if(addRemoveGlyphes && restLineIsVisible) {
										this._buffer.addElement(restChars[i]);
									}
									pageLine.visibleTo++;
								}
							} else {
								pageLine.visibleFrom++;
								pageLine.visibleTo++;
							}
						}
						pageLine.glyphes = pageLine.glyphes.concat(restChars);
						pageLine.updateTo = pageLine.glyphes.length;
						if(page.pageLines.length - 1 < page.updateLineFrom) {
							page.updateLineFrom = page.pageLines.length - 1;
						}
						pageLine.textSize += restCharsTextSize;
						var newSize = pageLine.textSize;
						if(newSize > page.textWidth) {
							page.textWidth = newSize;
						}
					}
					if(restLines.length > 0) {
						if(page.pageLines.length < page.updateLineFrom) {
							page.updateLineFrom = page.pageLines.length;
						}
						page.pageLines = page.pageLines.concat(restLines);
						var visibleLineFrom = page.visibleLineFrom;
						var visibleLineTo = page.visibleLineTo;
						var fromLine = page.pageLines.length - restLines.length;
						var _g3 = fromLine;
						var _g4 = page.pageLines.length;
						while(_g3 < _g4) {
							var i = _g3++;
							var pageLine = page.pageLines[i];
							this.pageLineSetYPosition(pageLine,page.x,page.width,page.xOffset,offset + pageLine.y,null,addRemoveGlyphes && (oldLineFrom <= restLineFrom && restLineFrom < oldLineTo));
							if(pageLine.y + pageLine.lineHeight >= page.y) {
								if(pageLine.y < page.y + page.height) {
									if(i < page.visibleLineFrom || i >= page.visibleLineTo) {
										if(addRemoveGlyphes && !(restLineFrom >= oldLineFrom && restLineFrom < oldLineTo)) {
											var _g5 = pageLine.visibleFrom;
											var _g6 = pageLine.visibleTo;
											while(_g5 < _g6) {
												var i1 = _g5++;
												this._buffer.addElement(pageLine.glyphes[i1]);
											}
										}
										if(visibleLineFrom > i) {
											visibleLineFrom = i;
										}
										if(visibleLineTo < i + 1) {
											visibleLineTo = i + 1;
										}
									}
								} else {
									if(addRemoveGlyphes && restLineFrom >= oldLineFrom && restLineFrom < oldLineTo) {
										var _g7 = pageLine.visibleFrom;
										var _g8 = pageLine.visibleTo;
										while(_g7 < _g8) {
											var i2 = _g7++;
											this._buffer.removeElement(pageLine.glyphes[i2]);
										}
									}
									if(visibleLineTo > i) {
										visibleLineTo = i;
									}
								}
							} else {
								if(addRemoveGlyphes && restLineFrom >= oldLineFrom && restLineFrom < oldLineTo) {
									var _g9 = pageLine.visibleFrom;
									var _g10 = pageLine.visibleTo;
									while(_g9 < _g10) {
										var i3 = _g9++;
										this._buffer.removeElement(pageLine.glyphes[i3]);
									}
								}
								visibleLineFrom = i + 1;
							}
							++restLineFrom;
						}
						page.visibleLineFrom = visibleLineFrom;
						page.visibleLineTo = visibleLineTo;
					}
					var newSize = firstLineNewTextSize;
					if(newSize > page.textWidth) {
						page.textWidth = newSize;
					} else if(firstLineOldTextSize >= page.textWidth && newSize < page.textWidth) {
						var _g3 = 0;
						var _g4 = page.pageLines;
						while(_g3 < _g4.length) {
							var pageLine = _g4[_g3];
							++_g3;
							if(pageLine.textSize > newSize) {
								newSize = pageLine.textSize;
							}
						}
						page.textWidth = newSize;
					}
					if(page.pageLines.length > page.updateLineTo) {
						page.updateLineTo = page.pageLines.length;
					}
				}
			}
		} else {
			var chars1 = chars;
			var i = page.pageLines.length;
			var y = page.y + page.textHeight;
			var visibleLineFrom = page.visibleLineFrom;
			var visibleLineTo = page.visibleLineTo;
			var textWidth = page.textWidth;
			var onUnrecognizedLineChar;
			if(onUnrecognizedChar == null) {
				onUnrecognizedLineChar = null;
			} else {
				var _g3 = onUnrecognizedChar;
				var a13 = i;
				onUnrecognizedLineChar = function(a2,a3) {
					_g3(a13,a2,a3);
				};
			}
			var y_start = y;
			while(peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit.match(chars1)) {
				var pageLine = new peote_text_PageLine_$_$Main_$MyFontStyle();
				if(i > visibleLineFrom) {
					if(y <= page.y + page.height) {
						this.pageLineSet(pageLine,peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit.matched(1),page.x,y,page.width,page.xOffset,glyphStyle,defaultFontRange,addRemoveGlyphes,onUnrecognizedLineChar);
						++visibleLineTo;
					} else {
						this.pageLineSet(pageLine,peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit.matched(1),page.x,y,page.width,page.xOffset,glyphStyle,defaultFontRange,false,onUnrecognizedLineChar);
					}
				} else {
					this.pageLineSet(pageLine,peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit.matched(1),page.x,y,page.width,page.xOffset,glyphStyle,defaultFontRange,false,onUnrecognizedLineChar);
					if(y + pageLine.lineHeight < page.y) {
						++visibleLineFrom;
						++visibleLineTo;
					} else {
						if(addRemoveGlyphes) {
							var _g4 = pageLine.visibleFrom;
							var _g5 = pageLine.visibleTo;
							while(_g4 < _g5) {
								var i1 = _g4++;
								this._buffer.addElement(pageLine.glyphes[i1]);
							}
						}
						++visibleLineTo;
					}
				}
				++i;
				y += pageLine.lineHeight;
				page.pageLines.push(pageLine);
				if(pageLine.textSize > textWidth) {
					textWidth = pageLine.textSize;
				}
				chars1 = peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit.matchedRight();
			}
			page.visibleLineFrom = visibleLineFrom;
			page.visibleLineTo = visibleLineTo;
			page.textWidth = textWidth;
			offset = y - y_start;
			page.updateLineFrom = 0;
			page.updateLineTo = page.pageLines.length;
		}
		page.textHeight += offset;
		return offset;
	}
	,pageGetChars: function(page,fromLine,toLine,fromChar,toChar) {
		if(fromChar == null) {
			fromChar = 0;
		}
		if(fromLine == null) {
			fromLine = 0;
		}
		if(toLine == null) {
			toLine = page.pageLines.length;
		}
		var chars = "";
		if(fromLine == toLine - 1) {
			chars = this.pageLineGetChars(page.pageLines[fromLine],fromChar,toChar);
		} else {
			chars += this.pageLineGetChars(page.pageLines[fromLine],fromChar) + "\n";
			var _g = fromLine + 1;
			var _g1 = toLine - 1;
			while(_g < _g1) {
				var i = _g++;
				var pageLine = page.pageLines[i];
				chars += this.pageLineGetChars(pageLine) + "\n";
			}
			chars += this.pageLineGetChars(page.pageLines[toLine - 1],0,toChar);
		}
		return chars;
	}
	,pageAddLinefeedAt: function(page,pageLine,lineNumber,position,glyphStyle,defaultFontRange,addRemoveGlyphes) {
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		if(position == null) {
			position = 0;
		}
		if(pageLine == null) {
			pageLine = page.pageLines[lineNumber];
		}
		if(position == 0) {
			var pageLine1 = null;
			var afterLine = false;
			if(afterLine == null) {
				afterLine = true;
			}
			if(pageLine1 == null) {
				pageLine1 = page.pageLines[lineNumber];
			}
			if(afterLine) {
				this.pageInsertChars(page,"\n",lineNumber,pageLine1.glyphes.length,glyphStyle,defaultFontRange,true);
			} else {
				this.pageInsertChars(page,"\n",lineNumber,0,glyphStyle,defaultFontRange,true);
			}
		} else if(position == pageLine.glyphes.length) {
			var pageLine = null;
			if(pageLine == null) {
				pageLine = page.pageLines[lineNumber];
			}
			this.pageInsertChars(page,"\n",lineNumber,pageLine.glyphes.length,glyphStyle,defaultFontRange,true);
		} else {
			this.pageInsertChars(page,"\n",lineNumber,position,glyphStyle,defaultFontRange,addRemoveGlyphes);
		}
	}
	,pageRemoveLinefeed: function(page,pageLine,lineNumber,addRemoveGlyphes) {
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		if(lineNumber >= page.pageLines.length - 1) {
			return;
		}
		if(pageLine == null) {
			pageLine = page.pageLines[lineNumber];
		}
		var nextLine = page.pageLines[lineNumber + 1];
		if(pageLine.glyphes.length == 0) {
			var pageLineY = pageLine.y;
			var addRemoveGlyphes1 = addRemoveGlyphes;
			if(addRemoveGlyphes1 == null) {
				addRemoveGlyphes1 = true;
			}
			var oldTextSize = pageLine.textSize;
			page.pageLines.splice(lineNumber,1);
			var newSize = 0.0;
			if(newSize > page.textWidth) {
				page.textWidth = newSize;
			} else if(pageLine.textSize >= page.textWidth && newSize < page.textWidth) {
				var _g = 0;
				var _g1 = page.pageLines;
				while(_g < _g1.length) {
					var pageLine1 = _g1[_g];
					++_g;
					if(pageLine1.textSize > newSize) {
						newSize = pageLine1.textSize;
					}
				}
				page.textWidth = newSize;
			}
			if(page.visibleLineFrom > lineNumber) {
				page.visibleLineFrom--;
			}
			if(page.visibleLineTo > lineNumber) {
				page.visibleLineTo--;
			}
			var addRemoveGlyphes2 = addRemoveGlyphes1;
			if(addRemoveGlyphes2 == null) {
				addRemoveGlyphes2 = true;
			}
			if(lineNumber < page.pageLines.length) {
				var yOffset = pageLineY - page.pageLines[lineNumber].y;
				var visibleLineFrom = page.visibleLineFrom;
				var visibleLineTo = page.visibleLineTo;
				var _g = lineNumber;
				var _g1 = page.pageLines.length;
				while(_g < _g1) {
					var i = _g++;
					var pageLine1 = page.pageLines[i];
					this.pageLineSetYPosition(pageLine1,page.x,page.width,page.xOffset,pageLine1.y + yOffset,null,addRemoveGlyphes2 && (page.visibleLineFrom <= i && i < page.visibleLineTo));
					if(pageLine1.y + pageLine1.lineHeight >= page.y) {
						if(pageLine1.y < page.y + page.height) {
							if(i < page.visibleLineFrom || i >= page.visibleLineTo) {
								if(addRemoveGlyphes2) {
									var _g2 = pageLine1.visibleFrom;
									var _g3 = pageLine1.visibleTo;
									while(_g2 < _g3) {
										var i1 = _g2++;
										this._buffer.addElement(pageLine1.glyphes[i1]);
									}
								}
								if(visibleLineFrom > i) {
									visibleLineFrom = i;
								}
								if(visibleLineTo < i + 1) {
									visibleLineTo = i + 1;
								}
							}
						} else {
							if(addRemoveGlyphes2 && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
								var _g4 = pageLine1.visibleFrom;
								var _g5 = pageLine1.visibleTo;
								while(_g4 < _g5) {
									var i2 = _g4++;
									this._buffer.removeElement(pageLine1.glyphes[i2]);
								}
							}
							if(visibleLineTo > i) {
								visibleLineTo = i;
							}
						}
					} else {
						if(addRemoveGlyphes2 && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
							var _g6 = pageLine1.visibleFrom;
							var _g7 = pageLine1.visibleTo;
							while(_g6 < _g7) {
								var i3 = _g6++;
								this._buffer.removeElement(pageLine1.glyphes[i3]);
							}
						}
						visibleLineFrom = i + 1;
					}
				}
				page.visibleLineFrom = visibleLineFrom;
				page.visibleLineTo = visibleLineTo;
				page.textHeight += yOffset;
			} else {
				page.textHeight = pageLineY - page.y - page.yOffset;
			}
			if(lineNumber < page.updateLineFrom) {
				page.updateLineFrom = lineNumber;
			}
			page.updateLineTo = page.pageLines.length;
		} else if(nextLine.glyphes.length == 0) {
			var pageLineY = nextLine.y;
			var lineNumber1 = lineNumber + 1;
			var addRemoveGlyphes1 = addRemoveGlyphes;
			if(addRemoveGlyphes1 == null) {
				addRemoveGlyphes1 = true;
			}
			var oldTextSize = pageLine.textSize;
			page.pageLines.splice(lineNumber1,1);
			var newSize = 0.0;
			if(newSize > page.textWidth) {
				page.textWidth = newSize;
			} else if(pageLine.textSize >= page.textWidth && newSize < page.textWidth) {
				var _g = 0;
				var _g1 = page.pageLines;
				while(_g < _g1.length) {
					var pageLine1 = _g1[_g];
					++_g;
					if(pageLine1.textSize > newSize) {
						newSize = pageLine1.textSize;
					}
				}
				page.textWidth = newSize;
			}
			if(page.visibleLineFrom > lineNumber1) {
				page.visibleLineFrom--;
			}
			if(page.visibleLineTo > lineNumber1) {
				page.visibleLineTo--;
			}
			var addRemoveGlyphes2 = addRemoveGlyphes1;
			if(addRemoveGlyphes2 == null) {
				addRemoveGlyphes2 = true;
			}
			if(lineNumber1 < page.pageLines.length) {
				var yOffset = pageLineY - page.pageLines[lineNumber1].y;
				var visibleLineFrom = page.visibleLineFrom;
				var visibleLineTo = page.visibleLineTo;
				var _g = lineNumber1;
				var _g1 = page.pageLines.length;
				while(_g < _g1) {
					var i = _g++;
					var pageLine1 = page.pageLines[i];
					this.pageLineSetYPosition(pageLine1,page.x,page.width,page.xOffset,pageLine1.y + yOffset,null,addRemoveGlyphes2 && (page.visibleLineFrom <= i && i < page.visibleLineTo));
					if(pageLine1.y + pageLine1.lineHeight >= page.y) {
						if(pageLine1.y < page.y + page.height) {
							if(i < page.visibleLineFrom || i >= page.visibleLineTo) {
								if(addRemoveGlyphes2) {
									var _g2 = pageLine1.visibleFrom;
									var _g3 = pageLine1.visibleTo;
									while(_g2 < _g3) {
										var i1 = _g2++;
										this._buffer.addElement(pageLine1.glyphes[i1]);
									}
								}
								if(visibleLineFrom > i) {
									visibleLineFrom = i;
								}
								if(visibleLineTo < i + 1) {
									visibleLineTo = i + 1;
								}
							}
						} else {
							if(addRemoveGlyphes2 && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
								var _g4 = pageLine1.visibleFrom;
								var _g5 = pageLine1.visibleTo;
								while(_g4 < _g5) {
									var i2 = _g4++;
									this._buffer.removeElement(pageLine1.glyphes[i2]);
								}
							}
							if(visibleLineTo > i) {
								visibleLineTo = i;
							}
						}
					} else {
						if(addRemoveGlyphes2 && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
							var _g6 = pageLine1.visibleFrom;
							var _g7 = pageLine1.visibleTo;
							while(_g6 < _g7) {
								var i3 = _g6++;
								this._buffer.removeElement(pageLine1.glyphes[i3]);
							}
						}
						visibleLineFrom = i + 1;
					}
				}
				page.visibleLineFrom = visibleLineFrom;
				page.visibleLineTo = visibleLineTo;
				page.textHeight += yOffset;
			} else {
				page.textHeight = pageLineY - page.y - page.yOffset;
			}
			if(lineNumber1 < page.updateLineFrom) {
				page.updateLineFrom = lineNumber1;
			}
			page.updateLineTo = page.pageLines.length;
		} else {
			var glyph = pageLine.glyphes[pageLine.glyphes.length - 1];
			var nextGlyph = nextLine.glyphes[0];
			var charcode = nextGlyph.char;
			var range = this.font.rangeMapping;
			var charcode1 = charcode == 9 ? 32 : charcode;
			var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
			var nextCharData = metric == null ? null : { fontData : range, metric : metric};
			var charcode = glyph.char;
			var range = this.font.rangeMapping;
			var charcode1 = charcode == 9 ? 32 : charcode;
			var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
			var charData = metric == null ? null : { fontData : range, metric : metric};
			var width = glyph.width;
			var xOff = glyph.x + (charData.metric.advance - charData.metric.left) * (glyph.char == 9 ? width * 3.0 : width) - page.x;
			var kerningOff;
			if(glyph != null) {
				if(this.font.kerning) {
					var charcode = glyph.char;
					var charcode1 = nextGlyph.char;
					kerningOff = nextCharData.fontData.kerning[charcode == 9 ? 32 : charcode][charcode1 == 9 ? 32 : charcode1] * (nextGlyph.width + glyph.width) / 2;
				} else {
					kerningOff = 0.0;
				}
			} else {
				kerningOff = 0.0;
			}
			var nextLineY = nextLine.y;
			if(addRemoveGlyphes) {
				var tmp;
				if(page.visibleLineFrom <= lineNumber && lineNumber < page.visibleLineTo) {
					var lineNumber1 = lineNumber + 1;
					tmp = !(page.visibleLineFrom <= lineNumber1 && lineNumber1 < page.visibleLineTo);
				} else {
					tmp = false;
				}
				if(tmp) {
					var _g = nextLine.visibleFrom;
					var _g1 = nextLine.visibleTo;
					while(_g < _g1) {
						var i = _g++;
						this._buffer.addElement(nextLine.glyphes[i]);
					}
				} else {
					var tmp;
					if(!(page.visibleLineFrom <= lineNumber && lineNumber < page.visibleLineTo)) {
						var lineNumber1 = lineNumber + 1;
						tmp = page.visibleLineFrom <= lineNumber1 && lineNumber1 < page.visibleLineTo;
					} else {
						tmp = false;
					}
					if(tmp) {
						var _g = nextLine.visibleFrom;
						var _g1 = nextLine.visibleTo;
						while(_g < _g1) {
							var i = _g++;
							this._buffer.removeElement(nextLine.glyphes[i]);
						}
					}
				}
			}
			this.pageLineSetPosition(nextLine,page.x,page.width,page.xOffset,page.x,pageLine.y + (nextGlyph != null ? pageLine.base - nextCharData.fontData.base * nextGlyph.height : 0),page.xOffset + xOff + kerningOff,addRemoveGlyphes && (page.visibleLineFrom <= lineNumber && lineNumber < page.visibleLineTo));
			if(nextLine.visibleFrom < nextLine.visibleTo) {
				if(nextLine.visibleFrom > 0) {
					pageLine.visibleFrom = pageLine.glyphes.length + nextLine.visibleFrom;
				}
				pageLine.visibleTo = pageLine.glyphes.length + nextLine.visibleTo;
			}
			pageLine.textSize += nextLine.textSize + kerningOff;
			var newSize = pageLine.textSize;
			if(newSize > page.textWidth) {
				page.textWidth = newSize;
			}
			if(pageLine.glyphes.length < pageLine.updateFrom) {
				pageLine.updateFrom = pageLine.glyphes.length;
			}
			var _g = 0;
			var _g1 = nextLine.glyphes;
			while(_g < _g1.length) {
				var glyph = _g1[_g];
				++_g;
				pageLine.glyphes.push(glyph);
			}
			pageLine.updateTo = pageLine.glyphes.length;
			if(lineNumber < page.updateLineFrom) {
				page.updateLineFrom = lineNumber;
			}
			var lineNumber1 = lineNumber + 1;
			var addRemoveGlyphes1 = addRemoveGlyphes;
			if(addRemoveGlyphes1 == null) {
				addRemoveGlyphes1 = true;
			}
			var oldTextSize = nextLine.textSize;
			page.pageLines.splice(lineNumber1,1);
			var newSize = 0.0;
			if(newSize > page.textWidth) {
				page.textWidth = newSize;
			} else if(nextLine.textSize >= page.textWidth && newSize < page.textWidth) {
				var _g = 0;
				var _g1 = page.pageLines;
				while(_g < _g1.length) {
					var pageLine = _g1[_g];
					++_g;
					if(pageLine.textSize > newSize) {
						newSize = pageLine.textSize;
					}
				}
				page.textWidth = newSize;
			}
			if(page.visibleLineFrom > lineNumber1) {
				page.visibleLineFrom--;
			}
			if(page.visibleLineTo > lineNumber1) {
				page.visibleLineTo--;
			}
			var addRemoveGlyphes = addRemoveGlyphes1;
			if(addRemoveGlyphes == null) {
				addRemoveGlyphes = true;
			}
			if(lineNumber1 < page.pageLines.length) {
				var yOffset = nextLineY - page.pageLines[lineNumber1].y;
				var visibleLineFrom = page.visibleLineFrom;
				var visibleLineTo = page.visibleLineTo;
				var _g = lineNumber1;
				var _g1 = page.pageLines.length;
				while(_g < _g1) {
					var i = _g++;
					var pageLine = page.pageLines[i];
					this.pageLineSetYPosition(pageLine,page.x,page.width,page.xOffset,pageLine.y + yOffset,null,addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo));
					if(pageLine.y + pageLine.lineHeight >= page.y) {
						if(pageLine.y < page.y + page.height) {
							if(i < page.visibleLineFrom || i >= page.visibleLineTo) {
								if(addRemoveGlyphes) {
									var _g2 = pageLine.visibleFrom;
									var _g3 = pageLine.visibleTo;
									while(_g2 < _g3) {
										var i1 = _g2++;
										this._buffer.addElement(pageLine.glyphes[i1]);
									}
								}
								if(visibleLineFrom > i) {
									visibleLineFrom = i;
								}
								if(visibleLineTo < i + 1) {
									visibleLineTo = i + 1;
								}
							}
						} else {
							if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
								var _g4 = pageLine.visibleFrom;
								var _g5 = pageLine.visibleTo;
								while(_g4 < _g5) {
									var i2 = _g4++;
									this._buffer.removeElement(pageLine.glyphes[i2]);
								}
							}
							if(visibleLineTo > i) {
								visibleLineTo = i;
							}
						}
					} else {
						if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
							var _g6 = pageLine.visibleFrom;
							var _g7 = pageLine.visibleTo;
							while(_g6 < _g7) {
								var i3 = _g6++;
								this._buffer.removeElement(pageLine.glyphes[i3]);
							}
						}
						visibleLineFrom = i + 1;
					}
				}
				page.visibleLineFrom = visibleLineFrom;
				page.visibleLineTo = visibleLineTo;
				page.textHeight += yOffset;
			} else {
				page.textHeight = nextLineY - page.y - page.yOffset;
			}
			if(lineNumber1 < page.updateLineFrom) {
				page.updateLineFrom = lineNumber1;
			}
			page.updateLineTo = page.pageLines.length;
		}
	}
	,pageDeleteChar: function(page,pageLine,lineNumber,position,addRemoveGlyphes) {
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		if(pageLine == null) {
			pageLine = page.pageLines[lineNumber];
		}
		if(position < pageLine.glyphes.length) {
			var oldTextSize = pageLine.textSize;
			this.pageLineDeleteChar(pageLine,page.x,page.width,page.xOffset,position,addRemoveGlyphes && (page.visibleLineFrom <= lineNumber && lineNumber < page.visibleLineTo));
			if(lineNumber < page.updateLineFrom) {
				page.updateLineFrom = lineNumber;
			}
			if(lineNumber >= page.updateLineTo) {
				page.updateLineTo = lineNumber + 1;
			}
			var newSize = pageLine.textSize;
			if(newSize > page.textWidth) {
				page.textWidth = newSize;
			} else if(oldTextSize >= page.textWidth && newSize < page.textWidth) {
				var _g = 0;
				var _g1 = page.pageLines;
				while(_g < _g1.length) {
					var pageLine1 = _g1[_g];
					++_g;
					if(pageLine1.textSize > newSize) {
						newSize = pageLine1.textSize;
					}
				}
				page.textWidth = newSize;
			}
		} else {
			this.pageRemoveLinefeed(page,pageLine,lineNumber,addRemoveGlyphes);
		}
	}
	,pageDeleteChars: function(page,fromLine,toLine,fromChar,toChar,addRemoveGlyphes) {
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		if(fromLine == toLine - 1) {
			var pageLine = page.pageLines[fromLine];
			var oldTextSize = pageLine.textSize;
			this.pageLineDeleteChars(pageLine,page.x,page.width,page.xOffset,fromChar,toChar,addRemoveGlyphes && (page.visibleLineFrom <= fromLine && fromLine < page.visibleLineTo));
			if(fromLine < page.updateLineFrom) {
				page.updateLineFrom = fromLine;
			}
			if(toLine > page.updateLineTo) {
				page.updateLineTo = toLine;
			}
			var newSize = pageLine.textSize;
			if(newSize > page.textWidth) {
				page.textWidth = newSize;
			} else if(oldTextSize >= page.textWidth && newSize < page.textWidth) {
				var _g = 0;
				var _g1 = page.pageLines;
				while(_g < _g1.length) {
					var pageLine = _g1[_g];
					++_g;
					if(pageLine.textSize > newSize) {
						newSize = pageLine.textSize;
					}
				}
				page.textWidth = newSize;
			}
		} else if(fromChar == 0 && toChar == 0) {
			this.pageDeleteLines(page,fromLine,toLine - 1,addRemoveGlyphes);
		} else if(fromChar == 0) {
			var nextLineY = page.pageLines[fromLine].y;
			var nextLine = page.pageLines[toLine - 1];
			var oldTextSize = nextLine.textSize;
			var tmp;
			if(addRemoveGlyphes) {
				var lineNumber = toLine - 1;
				tmp = page.visibleLineFrom <= lineNumber && lineNumber < page.visibleLineTo;
			} else {
				tmp = false;
			}
			this.pageLineDeleteChars(nextLine,page.x,page.width,page.xOffset,0,toChar,tmp);
			var newTextSize = nextLine.textSize;
			if(fromLine < page.updateLineFrom) {
				page.updateLineFrom = fromLine;
			}
			var _g = fromLine;
			var _g1 = toLine - 1;
			while(_g < _g1) {
				var i = _g++;
				var _pageLine = page.pageLines[i];
				if(_pageLine.textSize > oldTextSize) {
					oldTextSize = _pageLine.textSize;
				}
				if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
					var _g2 = _pageLine.visibleFrom;
					var _g3 = _pageLine.visibleTo;
					while(_g2 < _g3) {
						var i1 = _g2++;
						this._buffer.removeElement(_pageLine.glyphes[i1]);
					}
				}
			}
			var newSize = newTextSize;
			if(newSize > page.textWidth) {
				page.textWidth = newSize;
			} else if(oldTextSize >= page.textWidth && newSize < page.textWidth) {
				var pageLine;
				var _g = 0;
				var _g1 = fromLine;
				while(_g < _g1) {
					var i = _g++;
					pageLine = page.pageLines[i];
					if(pageLine.textSize > newSize) {
						newSize = pageLine.textSize;
					}
				}
				var _g = toLine;
				var _g1 = page.pageLines.length;
				while(_g < _g1) {
					var i = _g++;
					pageLine = page.pageLines[i];
					if(pageLine.textSize > newSize) {
						newSize = pageLine.textSize;
					}
				}
				page.textWidth = newSize;
			}
			var toLine1 = toLine - 1;
			var addRemoveGlyphes1 = addRemoveGlyphes;
			if(addRemoveGlyphes1 == null) {
				addRemoveGlyphes1 = true;
			}
			var n = toLine1 - fromLine;
			page.pageLines.splice(fromLine,n);
			if(page.visibleLineFrom > fromLine) {
				if(page.visibleLineFrom < toLine1) {
					page.visibleLineFrom = fromLine;
				} else {
					page.visibleLineFrom -= n;
				}
			}
			if(page.visibleLineTo > fromLine) {
				if(page.visibleLineTo < toLine1) {
					page.visibleLineTo = fromLine;
				} else {
					page.visibleLineTo -= n;
				}
			}
			var addRemoveGlyphes2 = addRemoveGlyphes1;
			if(addRemoveGlyphes2 == null) {
				addRemoveGlyphes2 = true;
			}
			if(fromLine < page.pageLines.length) {
				var yOffset = nextLineY - page.pageLines[fromLine].y;
				var visibleLineFrom = page.visibleLineFrom;
				var visibleLineTo = page.visibleLineTo;
				var _g = fromLine;
				var _g1 = page.pageLines.length;
				while(_g < _g1) {
					var i = _g++;
					var pageLine = page.pageLines[i];
					this.pageLineSetYPosition(pageLine,page.x,page.width,page.xOffset,pageLine.y + yOffset,null,addRemoveGlyphes2 && (page.visibleLineFrom <= i && i < page.visibleLineTo));
					if(pageLine.y + pageLine.lineHeight >= page.y) {
						if(pageLine.y < page.y + page.height) {
							if(i < page.visibleLineFrom || i >= page.visibleLineTo) {
								if(addRemoveGlyphes2) {
									var _g2 = pageLine.visibleFrom;
									var _g3 = pageLine.visibleTo;
									while(_g2 < _g3) {
										var i1 = _g2++;
										this._buffer.addElement(pageLine.glyphes[i1]);
									}
								}
								if(visibleLineFrom > i) {
									visibleLineFrom = i;
								}
								if(visibleLineTo < i + 1) {
									visibleLineTo = i + 1;
								}
							}
						} else {
							if(addRemoveGlyphes2 && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
								var _g4 = pageLine.visibleFrom;
								var _g5 = pageLine.visibleTo;
								while(_g4 < _g5) {
									var i2 = _g4++;
									this._buffer.removeElement(pageLine.glyphes[i2]);
								}
							}
							if(visibleLineTo > i) {
								visibleLineTo = i;
							}
						}
					} else {
						if(addRemoveGlyphes2 && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
							var _g6 = pageLine.visibleFrom;
							var _g7 = pageLine.visibleTo;
							while(_g6 < _g7) {
								var i3 = _g6++;
								this._buffer.removeElement(pageLine.glyphes[i3]);
							}
						}
						visibleLineFrom = i + 1;
					}
				}
				page.visibleLineFrom = visibleLineFrom;
				page.visibleLineTo = visibleLineTo;
				page.textHeight += yOffset;
			} else {
				page.textHeight = nextLineY - page.y - page.yOffset;
			}
			if(fromLine < page.updateLineFrom) {
				page.updateLineFrom = fromLine;
			}
			page.updateLineTo = page.pageLines.length;
		} else {
			var pageLine = page.pageLines[fromLine];
			var oldTextSize = pageLine.textSize;
			var nextLineY = page.pageLines[fromLine + 1].y;
			this.pageLineDeleteChars(pageLine,page.x,page.width,page.xOffset,fromChar,null,addRemoveGlyphes && (page.visibleLineFrom <= fromLine && fromLine < page.visibleLineTo));
			var nextLine = page.pageLines[toLine - 1];
			if(fromLine < page.updateLineFrom) {
				page.updateLineFrom = fromLine;
			}
			if(toChar >= nextLine.glyphes.length) {
				var newTextSize = pageLine.textSize;
				var _g = fromLine + 1;
				var _g1 = toLine;
				while(_g < _g1) {
					var i = _g++;
					var _pageLine = page.pageLines[i];
					if(_pageLine.textSize > oldTextSize) {
						oldTextSize = _pageLine.textSize;
					}
					if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
						var _g2 = _pageLine.visibleFrom;
						var _g3 = _pageLine.visibleTo;
						while(_g2 < _g3) {
							var i1 = _g2++;
							this._buffer.removeElement(_pageLine.glyphes[i1]);
						}
					}
				}
				var newSize = newTextSize;
				if(newSize > page.textWidth) {
					page.textWidth = newSize;
				} else if(oldTextSize >= page.textWidth && newSize < page.textWidth) {
					var pageLine1;
					var _g = 0;
					var _g1 = fromLine;
					while(_g < _g1) {
						var i = _g++;
						pageLine1 = page.pageLines[i];
						if(pageLine1.textSize > newSize) {
							newSize = pageLine1.textSize;
						}
					}
					var _g = toLine;
					var _g1 = page.pageLines.length;
					while(_g < _g1) {
						var i = _g++;
						pageLine1 = page.pageLines[i];
						if(pageLine1.textSize > newSize) {
							newSize = pageLine1.textSize;
						}
					}
					page.textWidth = newSize;
				}
				var fromLine1 = fromLine + 1;
				var addRemoveGlyphes1 = addRemoveGlyphes;
				if(addRemoveGlyphes1 == null) {
					addRemoveGlyphes1 = true;
				}
				var n = toLine - fromLine1;
				page.pageLines.splice(fromLine1,n);
				if(page.visibleLineFrom > fromLine1) {
					if(page.visibleLineFrom < toLine) {
						page.visibleLineFrom = fromLine1;
					} else {
						page.visibleLineFrom -= n;
					}
				}
				if(page.visibleLineTo > fromLine1) {
					if(page.visibleLineTo < toLine) {
						page.visibleLineTo = fromLine1;
					} else {
						page.visibleLineTo -= n;
					}
				}
				var addRemoveGlyphes2 = addRemoveGlyphes1;
				if(addRemoveGlyphes2 == null) {
					addRemoveGlyphes2 = true;
				}
				if(fromLine1 < page.pageLines.length) {
					var yOffset = nextLineY - page.pageLines[fromLine1].y;
					var visibleLineFrom = page.visibleLineFrom;
					var visibleLineTo = page.visibleLineTo;
					var _g = fromLine1;
					var _g1 = page.pageLines.length;
					while(_g < _g1) {
						var i = _g++;
						var pageLine1 = page.pageLines[i];
						this.pageLineSetYPosition(pageLine1,page.x,page.width,page.xOffset,pageLine1.y + yOffset,null,addRemoveGlyphes2 && (page.visibleLineFrom <= i && i < page.visibleLineTo));
						if(pageLine1.y + pageLine1.lineHeight >= page.y) {
							if(pageLine1.y < page.y + page.height) {
								if(i < page.visibleLineFrom || i >= page.visibleLineTo) {
									if(addRemoveGlyphes2) {
										var _g2 = pageLine1.visibleFrom;
										var _g3 = pageLine1.visibleTo;
										while(_g2 < _g3) {
											var i1 = _g2++;
											this._buffer.addElement(pageLine1.glyphes[i1]);
										}
									}
									if(visibleLineFrom > i) {
										visibleLineFrom = i;
									}
									if(visibleLineTo < i + 1) {
										visibleLineTo = i + 1;
									}
								}
							} else {
								if(addRemoveGlyphes2 && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
									var _g4 = pageLine1.visibleFrom;
									var _g5 = pageLine1.visibleTo;
									while(_g4 < _g5) {
										var i2 = _g4++;
										this._buffer.removeElement(pageLine1.glyphes[i2]);
									}
								}
								if(visibleLineTo > i) {
									visibleLineTo = i;
								}
							}
						} else {
							if(addRemoveGlyphes2 && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
								var _g6 = pageLine1.visibleFrom;
								var _g7 = pageLine1.visibleTo;
								while(_g6 < _g7) {
									var i3 = _g6++;
									this._buffer.removeElement(pageLine1.glyphes[i3]);
								}
							}
							visibleLineFrom = i + 1;
						}
					}
					page.visibleLineFrom = visibleLineFrom;
					page.visibleLineTo = visibleLineTo;
					page.textHeight += yOffset;
				} else {
					page.textHeight = nextLineY - page.y - page.yOffset;
				}
				if(fromLine1 < page.updateLineFrom) {
					page.updateLineFrom = fromLine1;
				}
				page.updateLineTo = page.pageLines.length;
			} else {
				if(nextLine.textSize > oldTextSize) {
					oldTextSize = nextLine.textSize;
				}
				var tmp;
				if(addRemoveGlyphes) {
					var lineNumber = toLine - 1;
					tmp = page.visibleLineFrom <= lineNumber && lineNumber < page.visibleLineTo;
				} else {
					tmp = false;
				}
				this.pageLineDeleteChars(nextLine,page.x,page.width,page.xOffset,0,toChar,tmp);
				var glyph = pageLine.glyphes[pageLine.glyphes.length - 1];
				var nextGlyph = nextLine.glyphes[0];
				var charcode = nextGlyph.char;
				var range = this.font.rangeMapping;
				var charcode1 = charcode == 9 ? 32 : charcode;
				var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
				var nextCharData = metric == null ? null : { fontData : range, metric : metric};
				var charcode = glyph.char;
				var range = this.font.rangeMapping;
				var charcode1 = charcode == 9 ? 32 : charcode;
				var metric = charcode1 >= range.rangeMin && charcode1 <= range.rangeMax ? range.metrics[charcode1 - range.rangeMin] : null;
				var charData = metric == null ? null : { fontData : range, metric : metric};
				var width = glyph.width;
				var xOff = glyph.x + (charData.metric.advance - charData.metric.left) * (glyph.char == 9 ? width * 3.0 : width) - page.x;
				var kerningOff;
				if(glyph != null) {
					if(this.font.kerning) {
						var charcode = glyph.char;
						var charcode1 = nextGlyph.char;
						kerningOff = nextCharData.fontData.kerning[charcode == 9 ? 32 : charcode][charcode1 == 9 ? 32 : charcode1] * (nextGlyph.width + glyph.width) / 2;
					} else {
						kerningOff = 0.0;
					}
				} else {
					kerningOff = 0.0;
				}
				if(addRemoveGlyphes) {
					var tmp;
					if(page.visibleLineFrom <= fromLine && fromLine < page.visibleLineTo) {
						var lineNumber = toLine - 1;
						tmp = !(page.visibleLineFrom <= lineNumber && lineNumber < page.visibleLineTo);
					} else {
						tmp = false;
					}
					if(tmp) {
						var _g = nextLine.visibleFrom;
						var _g1 = nextLine.visibleTo;
						while(_g < _g1) {
							var i = _g++;
							this._buffer.addElement(nextLine.glyphes[i]);
						}
					} else {
						var tmp;
						if(!(page.visibleLineFrom <= fromLine && fromLine < page.visibleLineTo)) {
							var lineNumber = toLine - 1;
							tmp = page.visibleLineFrom <= lineNumber && lineNumber < page.visibleLineTo;
						} else {
							tmp = false;
						}
						if(tmp) {
							var _g = nextLine.visibleFrom;
							var _g1 = nextLine.visibleTo;
							while(_g < _g1) {
								var i = _g++;
								this._buffer.removeElement(nextLine.glyphes[i]);
							}
						}
					}
				}
				this.pageLineSetPosition(nextLine,page.x,page.width,page.xOffset,page.x,pageLine.y + (nextGlyph != null ? pageLine.base - nextCharData.fontData.base * nextGlyph.height : 0),page.xOffset + xOff + kerningOff,addRemoveGlyphes && (page.visibleLineFrom <= fromLine && fromLine < page.visibleLineTo));
				if(nextLine.visibleFrom < nextLine.visibleTo) {
					if(nextLine.visibleFrom > 0) {
						pageLine.visibleFrom = pageLine.glyphes.length + nextLine.visibleFrom;
					}
					pageLine.visibleTo = pageLine.glyphes.length + nextLine.visibleTo;
				}
				var newTextSize = pageLine.textSize += nextLine.textSize + kerningOff;
				if(pageLine.glyphes.length < pageLine.updateFrom) {
					pageLine.updateFrom = pageLine.glyphes.length;
				}
				var _g = 0;
				var _g1 = nextLine.glyphes;
				while(_g < _g1.length) {
					var glyph = _g1[_g];
					++_g;
					pageLine.glyphes.push(glyph);
				}
				pageLine.updateTo = pageLine.glyphes.length;
				var _g = fromLine + 1;
				var _g1 = toLine - 1;
				while(_g < _g1) {
					var i = _g++;
					var _pageLine = page.pageLines[i];
					if(_pageLine.textSize > oldTextSize) {
						oldTextSize = _pageLine.textSize;
					}
					if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
						var _g2 = _pageLine.visibleFrom;
						var _g3 = _pageLine.visibleTo;
						while(_g2 < _g3) {
							var i1 = _g2++;
							this._buffer.removeElement(_pageLine.glyphes[i1]);
						}
					}
				}
				var newSize = newTextSize;
				if(newSize > page.textWidth) {
					page.textWidth = newSize;
				} else if(oldTextSize >= page.textWidth && newSize < page.textWidth) {
					var pageLine;
					var _g = 0;
					var _g1 = fromLine;
					while(_g < _g1) {
						var i = _g++;
						pageLine = page.pageLines[i];
						if(pageLine.textSize > newSize) {
							newSize = pageLine.textSize;
						}
					}
					var _g = toLine;
					var _g1 = page.pageLines.length;
					while(_g < _g1) {
						var i = _g++;
						pageLine = page.pageLines[i];
						if(pageLine.textSize > newSize) {
							newSize = pageLine.textSize;
						}
					}
					page.textWidth = newSize;
				}
				var fromLine1 = fromLine + 1;
				var addRemoveGlyphes1 = addRemoveGlyphes;
				if(addRemoveGlyphes1 == null) {
					addRemoveGlyphes1 = true;
				}
				var n = toLine - fromLine1;
				page.pageLines.splice(fromLine1,n);
				if(page.visibleLineFrom > fromLine1) {
					if(page.visibleLineFrom < toLine) {
						page.visibleLineFrom = fromLine1;
					} else {
						page.visibleLineFrom -= n;
					}
				}
				if(page.visibleLineTo > fromLine1) {
					if(page.visibleLineTo < toLine) {
						page.visibleLineTo = fromLine1;
					} else {
						page.visibleLineTo -= n;
					}
				}
				var addRemoveGlyphes = addRemoveGlyphes1;
				if(addRemoveGlyphes == null) {
					addRemoveGlyphes = true;
				}
				if(fromLine1 < page.pageLines.length) {
					var yOffset = nextLineY - page.pageLines[fromLine1].y;
					var visibleLineFrom = page.visibleLineFrom;
					var visibleLineTo = page.visibleLineTo;
					var _g = fromLine1;
					var _g1 = page.pageLines.length;
					while(_g < _g1) {
						var i = _g++;
						var pageLine = page.pageLines[i];
						this.pageLineSetYPosition(pageLine,page.x,page.width,page.xOffset,pageLine.y + yOffset,null,addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo));
						if(pageLine.y + pageLine.lineHeight >= page.y) {
							if(pageLine.y < page.y + page.height) {
								if(i < page.visibleLineFrom || i >= page.visibleLineTo) {
									if(addRemoveGlyphes) {
										var _g2 = pageLine.visibleFrom;
										var _g3 = pageLine.visibleTo;
										while(_g2 < _g3) {
											var i1 = _g2++;
											this._buffer.addElement(pageLine.glyphes[i1]);
										}
									}
									if(visibleLineFrom > i) {
										visibleLineFrom = i;
									}
									if(visibleLineTo < i + 1) {
										visibleLineTo = i + 1;
									}
								}
							} else {
								if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
									var _g4 = pageLine.visibleFrom;
									var _g5 = pageLine.visibleTo;
									while(_g4 < _g5) {
										var i2 = _g4++;
										this._buffer.removeElement(pageLine.glyphes[i2]);
									}
								}
								if(visibleLineTo > i) {
									visibleLineTo = i;
								}
							}
						} else {
							if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
								var _g6 = pageLine.visibleFrom;
								var _g7 = pageLine.visibleTo;
								while(_g6 < _g7) {
									var i3 = _g6++;
									this._buffer.removeElement(pageLine.glyphes[i3]);
								}
							}
							visibleLineFrom = i + 1;
						}
					}
					page.visibleLineFrom = visibleLineFrom;
					page.visibleLineTo = visibleLineTo;
					page.textHeight += yOffset;
				} else {
					page.textHeight = nextLineY - page.y - page.yOffset;
				}
				if(fromLine1 < page.updateLineFrom) {
					page.updateLineFrom = fromLine1;
				}
				page.updateLineTo = page.pageLines.length;
			}
		}
	}
	,pageDeleteLines: function(page,fromLine,toLine,addRemoveGlyphes) {
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		var oldTextSize = 0.0;
		var _g = fromLine;
		var _g1 = toLine;
		while(_g < _g1) {
			var i = _g++;
			var _pageLine = page.pageLines[i];
			if(_pageLine.textSize > oldTextSize) {
				oldTextSize = _pageLine.textSize;
			}
			if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
				var _g2 = _pageLine.visibleFrom;
				var _g3 = _pageLine.visibleTo;
				while(_g2 < _g3) {
					var i1 = _g2++;
					this._buffer.removeElement(_pageLine.glyphes[i1]);
				}
			}
		}
		var newSize = 0.0;
		if(newSize > page.textWidth) {
			page.textWidth = newSize;
		} else if(oldTextSize >= page.textWidth && newSize < page.textWidth) {
			var pageLine;
			var _g = 0;
			var _g1 = fromLine;
			while(_g < _g1) {
				var i = _g++;
				pageLine = page.pageLines[i];
				if(pageLine.textSize > newSize) {
					newSize = pageLine.textSize;
				}
			}
			var _g = toLine;
			var _g1 = page.pageLines.length;
			while(_g < _g1) {
				var i = _g++;
				pageLine = page.pageLines[i];
				if(pageLine.textSize > newSize) {
					newSize = pageLine.textSize;
				}
			}
			page.textWidth = newSize;
		}
		var pageLineY = page.pageLines[fromLine].y;
		var addRemoveGlyphes1 = addRemoveGlyphes;
		if(addRemoveGlyphes1 == null) {
			addRemoveGlyphes1 = true;
		}
		var n = toLine - fromLine;
		page.pageLines.splice(fromLine,n);
		if(page.visibleLineFrom > fromLine) {
			if(page.visibleLineFrom < toLine) {
				page.visibleLineFrom = fromLine;
			} else {
				page.visibleLineFrom -= n;
			}
		}
		if(page.visibleLineTo > fromLine) {
			if(page.visibleLineTo < toLine) {
				page.visibleLineTo = fromLine;
			} else {
				page.visibleLineTo -= n;
			}
		}
		var addRemoveGlyphes = addRemoveGlyphes1;
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		if(fromLine < page.pageLines.length) {
			var yOffset = pageLineY - page.pageLines[fromLine].y;
			var visibleLineFrom = page.visibleLineFrom;
			var visibleLineTo = page.visibleLineTo;
			var _g = fromLine;
			var _g1 = page.pageLines.length;
			while(_g < _g1) {
				var i = _g++;
				var pageLine = page.pageLines[i];
				this.pageLineSetYPosition(pageLine,page.x,page.width,page.xOffset,pageLine.y + yOffset,null,addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo));
				if(pageLine.y + pageLine.lineHeight >= page.y) {
					if(pageLine.y < page.y + page.height) {
						if(i < page.visibleLineFrom || i >= page.visibleLineTo) {
							if(addRemoveGlyphes) {
								var _g2 = pageLine.visibleFrom;
								var _g3 = pageLine.visibleTo;
								while(_g2 < _g3) {
									var i1 = _g2++;
									this._buffer.addElement(pageLine.glyphes[i1]);
								}
							}
							if(visibleLineFrom > i) {
								visibleLineFrom = i;
							}
							if(visibleLineTo < i + 1) {
								visibleLineTo = i + 1;
							}
						}
					} else {
						if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
							var _g4 = pageLine.visibleFrom;
							var _g5 = pageLine.visibleTo;
							while(_g4 < _g5) {
								var i2 = _g4++;
								this._buffer.removeElement(pageLine.glyphes[i2]);
							}
						}
						if(visibleLineTo > i) {
							visibleLineTo = i;
						}
					}
				} else {
					if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
						var _g6 = pageLine.visibleFrom;
						var _g7 = pageLine.visibleTo;
						while(_g6 < _g7) {
							var i3 = _g6++;
							this._buffer.removeElement(pageLine.glyphes[i3]);
						}
					}
					visibleLineFrom = i + 1;
				}
			}
			page.visibleLineFrom = visibleLineFrom;
			page.visibleLineTo = visibleLineTo;
			page.textHeight += yOffset;
		} else {
			page.textHeight = pageLineY - page.y - page.yOffset;
		}
		if(fromLine < page.updateLineFrom) {
			page.updateLineFrom = fromLine;
		}
		page.updateLineTo = page.pageLines.length;
	}
	,pageSetPosition: function(page,x,y,xOffset,yOffset,addRemoveGlyphes) {
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		page.updateLineFrom = 0;
		page.updateLineTo = page.pageLines.length;
		if(yOffset != null) {
			var yOffset1 = yOffset;
			var visibleLineFrom = page.visibleLineFrom;
			var visibleLineTo = page.visibleLineTo;
			yOffset1 += y - page.y - page.yOffset;
			var _g = 0;
			var _g1 = page.pageLines.length;
			while(_g < _g1) {
				var i = _g++;
				var pageLine = page.pageLines[i];
				if(x != null) {
					this.pageLineSetPosition(pageLine,page.x,page.width,page.xOffset,x,yOffset1 + pageLine.y,xOffset,addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo));
				} else {
					this.pageLineSetYPosition(pageLine,page.x,page.width,page.xOffset,yOffset1 + pageLine.y,xOffset,addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo));
				}
				if(pageLine.y + pageLine.lineHeight >= y) {
					if(pageLine.y < y + page.height) {
						if(i < page.visibleLineFrom || i >= page.visibleLineTo) {
							if(addRemoveGlyphes) {
								var _g2 = pageLine.visibleFrom;
								var _g3 = pageLine.visibleTo;
								while(_g2 < _g3) {
									var i1 = _g2++;
									this._buffer.addElement(pageLine.glyphes[i1]);
								}
							}
							if(visibleLineFrom > i) {
								visibleLineFrom = i;
							}
							if(visibleLineTo < i + 1) {
								visibleLineTo = i + 1;
							}
						}
					} else {
						if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
							var _g4 = pageLine.visibleFrom;
							var _g5 = pageLine.visibleTo;
							while(_g4 < _g5) {
								var i2 = _g4++;
								this._buffer.removeElement(pageLine.glyphes[i2]);
							}
						}
						if(visibleLineTo > i) {
							visibleLineTo = i;
						}
					}
				} else {
					if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
						var _g6 = pageLine.visibleFrom;
						var _g7 = pageLine.visibleTo;
						while(_g6 < _g7) {
							var i3 = _g6++;
							this._buffer.removeElement(pageLine.glyphes[i3]);
						}
					}
					visibleLineFrom = i + 1;
				}
			}
			page.visibleLineFrom = visibleLineFrom;
			page.visibleLineTo = visibleLineTo;
		} else {
			var _g = 0;
			var _g1 = page.pageLines.length;
			while(_g < _g1) {
				var i = _g++;
				var pageLine = page.pageLines[i];
				this.pageLineSetPosition(pageLine,page.x,page.width,page.xOffset,x,pageLine.y + y - page.y,xOffset,addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo));
			}
		}
		page.x = x;
		page.y = y;
		if(xOffset != null) {
			page.xOffset = xOffset;
		}
		if(yOffset != null) {
			page.yOffset = yOffset;
		}
	}
	,pageSetPositionSize: function(page,x,y,width,height,xOffset,yOffset,addRemoveGlyphes) {
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		page.updateLineFrom = 0;
		page.updateLineTo = page.pageLines.length;
		page.height = height;
		if(page.width != width) {
			page.width = width;
			var yOffset1 = yOffset != null ? yOffset : 0;
			var visibleLineFrom = page.visibleLineFrom;
			var visibleLineTo = page.visibleLineTo;
			yOffset1 += y - page.y - page.yOffset;
			var _g = 0;
			var _g1 = page.pageLines.length;
			while(_g < _g1) {
				var i = _g++;
				var pageLine = page.pageLines[i];
				this.pageLineSetPositionSize(pageLine,page.x,page.width,page.xOffset,x,yOffset1 + pageLine.y,xOffset,addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo));
				if(pageLine.y + pageLine.lineHeight >= y) {
					if(pageLine.y < y + page.height) {
						if(i < page.visibleLineFrom || i >= page.visibleLineTo) {
							if(addRemoveGlyphes) {
								var _g2 = pageLine.visibleFrom;
								var _g3 = pageLine.visibleTo;
								while(_g2 < _g3) {
									var i1 = _g2++;
									this._buffer.addElement(pageLine.glyphes[i1]);
								}
							}
							if(visibleLineFrom > i) {
								visibleLineFrom = i;
							}
							if(visibleLineTo < i + 1) {
								visibleLineTo = i + 1;
							}
						}
					} else {
						if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
							var _g4 = pageLine.visibleFrom;
							var _g5 = pageLine.visibleTo;
							while(_g4 < _g5) {
								var i2 = _g4++;
								this._buffer.removeElement(pageLine.glyphes[i2]);
							}
						}
						if(visibleLineTo > i) {
							visibleLineTo = i;
						}
					}
				} else {
					if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
						var _g6 = pageLine.visibleFrom;
						var _g7 = pageLine.visibleTo;
						while(_g6 < _g7) {
							var i3 = _g6++;
							this._buffer.removeElement(pageLine.glyphes[i3]);
						}
					}
					visibleLineFrom = i + 1;
				}
			}
			page.visibleLineFrom = visibleLineFrom;
			page.visibleLineTo = visibleLineTo;
		} else {
			var yOffset1 = yOffset != null ? yOffset : 0;
			var visibleLineFrom = page.visibleLineFrom;
			var visibleLineTo = page.visibleLineTo;
			yOffset1 += y - page.y - page.yOffset;
			var _g = 0;
			var _g1 = page.pageLines.length;
			while(_g < _g1) {
				var i = _g++;
				var pageLine = page.pageLines[i];
				if(x != null) {
					this.pageLineSetPosition(pageLine,page.x,page.width,page.xOffset,x,yOffset1 + pageLine.y,xOffset,addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo));
				} else {
					this.pageLineSetYPosition(pageLine,page.x,page.width,page.xOffset,yOffset1 + pageLine.y,xOffset,addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo));
				}
				if(pageLine.y + pageLine.lineHeight >= y) {
					if(pageLine.y < y + page.height) {
						if(i < page.visibleLineFrom || i >= page.visibleLineTo) {
							if(addRemoveGlyphes) {
								var _g2 = pageLine.visibleFrom;
								var _g3 = pageLine.visibleTo;
								while(_g2 < _g3) {
									var i1 = _g2++;
									this._buffer.addElement(pageLine.glyphes[i1]);
								}
							}
							if(visibleLineFrom > i) {
								visibleLineFrom = i;
							}
							if(visibleLineTo < i + 1) {
								visibleLineTo = i + 1;
							}
						}
					} else {
						if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
							var _g4 = pageLine.visibleFrom;
							var _g5 = pageLine.visibleTo;
							while(_g4 < _g5) {
								var i2 = _g4++;
								this._buffer.removeElement(pageLine.glyphes[i2]);
							}
						}
						if(visibleLineTo > i) {
							visibleLineTo = i;
						}
					}
				} else {
					if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
						var _g6 = pageLine.visibleFrom;
						var _g7 = pageLine.visibleTo;
						while(_g6 < _g7) {
							var i3 = _g6++;
							this._buffer.removeElement(pageLine.glyphes[i3]);
						}
					}
					visibleLineFrom = i + 1;
				}
			}
			page.visibleLineFrom = visibleLineFrom;
			page.visibleLineTo = visibleLineTo;
		}
		page.x = x;
		page.y = y;
		if(xOffset != null) {
			page.xOffset = xOffset;
		}
		if(yOffset != null) {
			page.yOffset = yOffset;
		}
	}
	,pageSetSize: function(page,width,height,xOffset,yOffset,addRemoveGlyphes) {
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		page.updateLineFrom = 0;
		page.updateLineTo = page.pageLines.length;
		page.height = height;
		if(page.width != width) {
			page.width = width;
			if(yOffset != null) {
				var x = page.x;
				var y = page.y;
				var yOffset1 = yOffset;
				var visibleLineFrom = page.visibleLineFrom;
				var visibleLineTo = page.visibleLineTo;
				yOffset1 += y - page.y - page.yOffset;
				var _g = 0;
				var _g1 = page.pageLines.length;
				while(_g < _g1) {
					var i = _g++;
					var pageLine = page.pageLines[i];
					this.pageLineSetPositionSize(pageLine,page.x,page.width,page.xOffset,x,yOffset1 + pageLine.y,xOffset,addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo));
					if(pageLine.y + pageLine.lineHeight >= y) {
						if(pageLine.y < y + page.height) {
							if(i < page.visibleLineFrom || i >= page.visibleLineTo) {
								if(addRemoveGlyphes) {
									var _g2 = pageLine.visibleFrom;
									var _g3 = pageLine.visibleTo;
									while(_g2 < _g3) {
										var i1 = _g2++;
										this._buffer.addElement(pageLine.glyphes[i1]);
									}
								}
								if(visibleLineFrom > i) {
									visibleLineFrom = i;
								}
								if(visibleLineTo < i + 1) {
									visibleLineTo = i + 1;
								}
							}
						} else {
							if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
								var _g4 = pageLine.visibleFrom;
								var _g5 = pageLine.visibleTo;
								while(_g4 < _g5) {
									var i2 = _g4++;
									this._buffer.removeElement(pageLine.glyphes[i2]);
								}
							}
							if(visibleLineTo > i) {
								visibleLineTo = i;
							}
						}
					} else {
						if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
							var _g6 = pageLine.visibleFrom;
							var _g7 = pageLine.visibleTo;
							while(_g6 < _g7) {
								var i3 = _g6++;
								this._buffer.removeElement(pageLine.glyphes[i3]);
							}
						}
						visibleLineFrom = i + 1;
					}
				}
				page.visibleLineFrom = visibleLineFrom;
				page.visibleLineTo = visibleLineTo;
			} else {
				var x = null;
				var y = page.y;
				var yOffset1 = 0;
				var visibleLineFrom = page.visibleLineFrom;
				var visibleLineTo = page.visibleLineTo;
				yOffset1 += y - page.y - page.yOffset;
				var _g = 0;
				var _g1 = page.pageLines.length;
				while(_g < _g1) {
					var i = _g++;
					var pageLine = page.pageLines[i];
					this.pageLineSetSize(pageLine,page.x,page.width,page.xOffset,xOffset,addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo));
					if(pageLine.y + pageLine.lineHeight >= y) {
						if(pageLine.y < y + page.height) {
							if(i < page.visibleLineFrom || i >= page.visibleLineTo) {
								if(addRemoveGlyphes) {
									var _g2 = pageLine.visibleFrom;
									var _g3 = pageLine.visibleTo;
									while(_g2 < _g3) {
										var i1 = _g2++;
										this._buffer.addElement(pageLine.glyphes[i1]);
									}
								}
								if(visibleLineFrom > i) {
									visibleLineFrom = i;
								}
								if(visibleLineTo < i + 1) {
									visibleLineTo = i + 1;
								}
							}
						} else {
							if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
								var _g4 = pageLine.visibleFrom;
								var _g5 = pageLine.visibleTo;
								while(_g4 < _g5) {
									var i2 = _g4++;
									this._buffer.removeElement(pageLine.glyphes[i2]);
								}
							}
							if(visibleLineTo > i) {
								visibleLineTo = i;
							}
						}
					} else {
						if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
							var _g6 = pageLine.visibleFrom;
							var _g7 = pageLine.visibleTo;
							while(_g6 < _g7) {
								var i3 = _g6++;
								this._buffer.removeElement(pageLine.glyphes[i3]);
							}
						}
						visibleLineFrom = i + 1;
					}
				}
				page.visibleLineFrom = visibleLineFrom;
				page.visibleLineTo = visibleLineTo;
			}
		} else {
			var x = null;
			var y = page.y;
			var yOffset1 = yOffset != null ? yOffset : 0;
			var visibleLineFrom = page.visibleLineFrom;
			var visibleLineTo = page.visibleLineTo;
			yOffset1 += y - page.y - page.yOffset;
			var _g = 0;
			var _g1 = page.pageLines.length;
			while(_g < _g1) {
				var i = _g++;
				var pageLine = page.pageLines[i];
				if(x != null) {
					this.pageLineSetPosition(pageLine,page.x,page.width,page.xOffset,x,yOffset1 + pageLine.y,xOffset,addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo));
				} else {
					this.pageLineSetYPosition(pageLine,page.x,page.width,page.xOffset,yOffset1 + pageLine.y,xOffset,addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo));
				}
				if(pageLine.y + pageLine.lineHeight >= y) {
					if(pageLine.y < y + page.height) {
						if(i < page.visibleLineFrom || i >= page.visibleLineTo) {
							if(addRemoveGlyphes) {
								var _g2 = pageLine.visibleFrom;
								var _g3 = pageLine.visibleTo;
								while(_g2 < _g3) {
									var i1 = _g2++;
									this._buffer.addElement(pageLine.glyphes[i1]);
								}
							}
							if(visibleLineFrom > i) {
								visibleLineFrom = i;
							}
							if(visibleLineTo < i + 1) {
								visibleLineTo = i + 1;
							}
						}
					} else {
						if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
							var _g4 = pageLine.visibleFrom;
							var _g5 = pageLine.visibleTo;
							while(_g4 < _g5) {
								var i2 = _g4++;
								this._buffer.removeElement(pageLine.glyphes[i2]);
							}
						}
						if(visibleLineTo > i) {
							visibleLineTo = i;
						}
					}
				} else {
					if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
						var _g6 = pageLine.visibleFrom;
						var _g7 = pageLine.visibleTo;
						while(_g6 < _g7) {
							var i3 = _g6++;
							this._buffer.removeElement(pageLine.glyphes[i3]);
						}
					}
					visibleLineFrom = i + 1;
				}
			}
			page.visibleLineFrom = visibleLineFrom;
			page.visibleLineTo = visibleLineTo;
		}
		if(xOffset != null) {
			page.xOffset = xOffset;
		}
		if(yOffset != null) {
			page.yOffset = yOffset;
		}
	}
	,pageSetOffset: function(page,xOffset,yOffset,addRemoveGlyphes) {
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		page.updateLineFrom = 0;
		page.updateLineTo = page.pageLines.length;
		if(yOffset != null) {
			var x = null;
			var y = page.y;
			var yOffset1 = yOffset;
			var visibleLineFrom = page.visibleLineFrom;
			var visibleLineTo = page.visibleLineTo;
			yOffset1 += y - page.y - page.yOffset;
			var _g = 0;
			var _g1 = page.pageLines.length;
			while(_g < _g1) {
				var i = _g++;
				var pageLine = page.pageLines[i];
				if(x != null) {
					this.pageLineSetPosition(pageLine,page.x,page.width,page.xOffset,x,yOffset1 + pageLine.y,xOffset,addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo));
				} else {
					this.pageLineSetYPosition(pageLine,page.x,page.width,page.xOffset,yOffset1 + pageLine.y,xOffset,addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo));
				}
				if(pageLine.y + pageLine.lineHeight >= y) {
					if(pageLine.y < y + page.height) {
						if(i < page.visibleLineFrom || i >= page.visibleLineTo) {
							if(addRemoveGlyphes) {
								var _g2 = pageLine.visibleFrom;
								var _g3 = pageLine.visibleTo;
								while(_g2 < _g3) {
									var i1 = _g2++;
									this._buffer.addElement(pageLine.glyphes[i1]);
								}
							}
							if(visibleLineFrom > i) {
								visibleLineFrom = i;
							}
							if(visibleLineTo < i + 1) {
								visibleLineTo = i + 1;
							}
						}
					} else {
						if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
							var _g4 = pageLine.visibleFrom;
							var _g5 = pageLine.visibleTo;
							while(_g4 < _g5) {
								var i2 = _g4++;
								this._buffer.removeElement(pageLine.glyphes[i2]);
							}
						}
						if(visibleLineTo > i) {
							visibleLineTo = i;
						}
					}
				} else {
					if(addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo)) {
						var _g6 = pageLine.visibleFrom;
						var _g7 = pageLine.visibleTo;
						while(_g6 < _g7) {
							var i3 = _g6++;
							this._buffer.removeElement(pageLine.glyphes[i3]);
						}
					}
					visibleLineFrom = i + 1;
				}
			}
			page.visibleLineFrom = visibleLineFrom;
			page.visibleLineTo = visibleLineTo;
		} else if(xOffset != null) {
			var _g = 0;
			var _g1 = page.pageLines.length;
			while(_g < _g1) {
				var i = _g++;
				var pageLine = page.pageLines[i];
				this.pageLineSetOffset(pageLine,page.x,page.width,page.xOffset,xOffset,addRemoveGlyphes && (page.visibleLineFrom <= i && i < page.visibleLineTo));
			}
		}
		if(xOffset != null) {
			page.xOffset = xOffset;
		}
		if(yOffset != null) {
			page.yOffset = yOffset;
		}
	}
	,pageUpdate: function(page,fromLine,toLine) {
		if(fromLine != null) {
			page.updateLineFrom = fromLine;
		}
		if(toLine != null) {
			page.updateLineTo = toLine;
		}
		if(page.updateLineTo > 0) {
			if(page.visibleLineFrom > page.updateLineFrom) {
				page.updateLineFrom = page.visibleLineFrom;
			}
			if(page.visibleLineTo < page.updateLineTo) {
				page.updateLineTo = page.visibleLineTo;
			}
			var _g = page.updateLineFrom;
			var _g1 = page.updateLineTo;
			while(_g < _g1) {
				var i = _g++;
				this.pageLineUpdate(page.pageLines[i]);
			}
			page.updateLineFrom = 16777216;
			page.updateLineTo = 0;
		}
	}
	,pageGetLineAtPosition: function(page,yPosition,intoVisibleRange) {
		if(intoVisibleRange == null) {
			intoVisibleRange = true;
		}
		if(yPosition <= page.y + (intoVisibleRange ? 0 : page.yOffset)) {
			if(intoVisibleRange) {
				return page.visibleLineFrom;
			} else {
				return 0;
			}
		} else if(yPosition >= page.y + (intoVisibleRange ? page.height : page.yOffset + page.textHeight)) {
			if(intoVisibleRange) {
				return page.visibleLineTo;
			} else {
				return page.pageLines.length;
			}
		} else if(page.pageLines.length == 0 || yPosition <= page.pageLines[0].y) {
			return 0;
		} else {
			var from = intoVisibleRange ? page.visibleLineFrom : 0;
			var to = intoVisibleRange ? page.visibleLineTo : page.pageLines.length;
			while(from + 1 < to) if(yPosition > page.pageLines[from + (to - from >> 1)].y) {
				from += to - from >> 1;
			} else {
				to = from + (to - from >> 1);
			}
			return from;
		}
	}
	,__class__: peote_text_FontProgram_$_$Main_$MyFontStyle
});
var peote_text_Font_$_$Main_$MyFontStyle = function(configJsonPath,ranges,kerning,maxTextureSize) {
	if(maxTextureSize == null) {
		maxTextureSize = 16384;
	}
	if(kerning == null) {
		kerning = true;
	}
	this.rHexToDec = new EReg("(\"\\s*)?(0x[0-9a-f]+)(\\s*\")?","gi");
	this.rComments = new EReg("//.*?$","gm");
	this.rParseEnding = new EReg("\\.[a-z]+$","i");
	this.rParsePathConfig = new EReg("^(.*?)([^/]+)$","");
	this.kerning = false;
	this.rangeSize = 4096;
	if(this.rParsePathConfig.match(configJsonPath)) {
		this.path = this.rParsePathConfig.matched(1);
		this.jsonFilename = this.rParsePathConfig.matched(2);
	} else {
		throw haxe_Exception.thrown("Can't load font, error in path to jsonfile: " + "\"" + configJsonPath + "\"");
	}
	this.ranges = ranges;
	this.kerning = kerning;
	this.maxTextureSize = maxTextureSize;
};
$hxClasses["peote.text.Font__Main_MyFontStyle"] = peote_text_Font_$_$Main_$MyFontStyle;
peote_text_Font_$_$Main_$MyFontStyle.__name__ = "peote.text.Font__Main_MyFontStyle";
peote_text_Font_$_$Main_$MyFontStyle.prototype = {
	createFontProgram: function(fontStyle,isMasked,bufferMinSize,bufferGrowSize,bufferAutoShrink) {
		if(bufferAutoShrink == null) {
			bufferAutoShrink = true;
		}
		if(bufferGrowSize == null) {
			bufferGrowSize = 1024;
		}
		if(bufferMinSize == null) {
			bufferMinSize = 1024;
		}
		if(isMasked == null) {
			isMasked = false;
		}
		return new peote_text_FontProgram_$_$Main_$MyFontStyle(this,fontStyle,isMasked,bufferMinSize,bufferGrowSize,bufferAutoShrink);
	}
	,createFontStyle: function() {
		return new MyFontStyle();
	}
	,createUITextLine: function(xPosition,yPosition,textSize,zIndex,text,fontStyle,textStyle) {
		if(zIndex == null) {
			zIndex = 0;
		}
		return new peote_ui_interactive_UITextLine_$_$Main_$MyFontStyle(xPosition,yPosition,textSize,zIndex,text,this,fontStyle,textStyle);
	}
	,createUITextPage: function(xPosition,yPosition,textSize,zIndex,text,fontStyle,textStyle) {
		if(zIndex == null) {
			zIndex = 0;
		}
		return new peote_ui_interactive_UITextPage_$_$Main_$MyFontStyle(xPosition,yPosition,textSize,zIndex,text,this,fontStyle,textStyle);
	}
	,load: function(onLoad,onProgressOverall,debug) {
		if(debug == null) {
			debug = false;
		}
		var _gthis = this;
		var debug1 = debug;
		var onProgress = null;
		var onError = function(jsonString) {
			jsonString = jsonString.replace(_gthis.rComments.r,"");
			jsonString = _gthis.rHexToDec.map(jsonString,function(r) {
				return Std.string(Std.parseInt(r.matched(2)));
			});
			var parser = new JsonParser_$5();
			_gthis.config = parser.fromJson(jsonString,_gthis.path + _gthis.jsonFilename);
			var _g = 0;
			var _g1 = parser.errors;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				var pos;
				switch(e._hx_index) {
				case 0:
					var _g2 = e.variable;
					var _g3 = e.expected;
					var pos1 = e.pos;
					pos = pos1;
					break;
				case 1:
					var _g4 = e.value;
					var _g5 = e.expected;
					var pos2 = e.pos;
					pos = pos2;
					break;
				case 2:
					var _g6 = e.value;
					var _g7 = e.expected;
					var pos3 = e.pos;
					pos = pos3;
					break;
				case 3:
					var _g8 = e.variable;
					var pos4 = e.pos;
					pos = pos4;
					break;
				case 4:
					var _g9 = e.variable;
					var pos5 = e.pos;
					pos = pos5;
					break;
				case 5:
					var _g10 = e.message;
					var pos6 = e.pos;
					pos = pos6;
					break;
				case 6:
					var _g11 = e.e;
					var pos7 = e.pos;
					pos = pos7;
					break;
				}
				haxe_Log.trace(pos.lines[0].number,{ fileName : "peote/text/Font.hx", lineNumber : 206, className : "peote.text.Font__Main_MyFontStyle", methodName : "load"});
				if(pos != null) {
					haxe_Log.trace(json2object_ErrorUtils.convertError(e),{ fileName : pos.file, lineNumber : pos.lines[0].number, className : "", methodName : ""});
				}
			}
			_gthis.rangeSize = _gthis.config.rangeSplitSize;
			var onError = _gthis.config.line != null;
			if(!_gthis.config.packed) {
				var error = "Error, for " + "MyFontStyle" + " \"@packed\" in \"" + _gthis.path + _gthis.jsonFilename + "\" set \"packed\":true";
				haxe_Log.trace(error,{ fileName : _gthis.path + _gthis.jsonFilename, lineNumber : 0, className : "", methodName : ""});
				throw haxe_Exception.thrown(error);
			}
			if(_gthis.kerning && _gthis.config.kerning != null) {
				_gthis.kerning = _gthis.config.kerning;
			}
			if(_gthis.ranges == null && _gthis.config.ranges.length > 1) {
				var error = "Error, set " + "MyFontStyle" + " to @multiSlot and/or @multiTexture or define a single range while Font creation or inside \"" + _gthis.path + _gthis.jsonFilename + "\"";
				haxe_Log.trace(error,{ fileName : _gthis.path + _gthis.jsonFilename, lineNumber : 0, className : "", methodName : ""});
				throw haxe_Exception.thrown(error);
			}
			var found_ranges = [];
			var _g = 0;
			var _g1 = _gthis.config.ranges;
			while(_g < _g1.length) {
				var item = _g1[_g];
				++_g;
				var min = item.range.min;
				var max = item.range.max;
				if(_gthis.ranges != null) {
					var _g2 = 0;
					var _g3 = _gthis.ranges;
					while(_g2 < _g3.length) {
						var r = _g3[_g2];
						++_g2;
						if(r.min >= min && r.min <= max || r.max >= min && r.max <= max) {
							found_ranges.push(item);
							break;
						}
					}
				} else {
					found_ranges.push(item);
				}
				if(found_ranges.length == 1) {
					break;
				}
			}
			if(found_ranges.length == 0) {
				var error = "Error, can not found any ranges inside font-config \"" + _gthis.path + _gthis.jsonFilename + "\" that fit " + Std.string(_gthis.ranges);
				haxe_Log.trace(error,{ fileName : _gthis.path + _gthis.jsonFilename, lineNumber : 0, className : "", methodName : ""});
				throw haxe_Exception.thrown(error);
			} else {
				_gthis.config.ranges = found_ranges;
			}
			_gthis.init(onLoad,onProgressOverall,debug);
		};
		var onLoad1 = null;
		if(debug1 == null) {
			debug1 = false;
		}
		var name = this.path + this.jsonFilename;
		var debug2 = debug1;
		var onError1 = onLoad1 == null && onError == null ? null : onError;
		var onLoad2 = onLoad1 == null && onError == null ? null : function(bytes) {
			if(onLoad1 != null && onError != null) {
				onLoad1(bytes.toString());
			} else {
				onError(bytes.toString());
			}
		};
		if(debug2 == null) {
			debug2 = false;
		}
		if(utils_Loader.corsServer != "" && new EReg("^https?://","").match(name)) {
			name = "//" + utils_Loader.corsServer + "/" + name;
		}
		var future = lime_utils_Bytes.loadFromFile(name);
		if(debug2) {
			haxe_Log.trace("Start loading bytes \"" + name + "\"",{ fileName : "utils/Loader.hx", lineNumber : 81, className : "utils.Loader", methodName : "bytes"});
			future.onProgress(function(a,b) {
				utils_Loader.onProgressDebug(a,b,name);
			});
			future.onError(utils_Loader.onErrorDebug);
			future.onComplete(function(bytes) {
				utils_Loader.onCompleteDebug(name);
			});
		}
		if(onProgress != null) {
			future.onProgress(onProgress);
		}
		if(onError1 != null) {
			future.onError(onError1);
		}
		if(onLoad2 != null) {
			future.onComplete(onLoad2);
		}
	}
	,init: function(onLoad,onProgressOverall,debug) {
		var w = 0;
		var h = 0;
		var _g = 0;
		var _g1 = this.config.ranges;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(item.slot.width > w) {
				w = item.slot.width;
			}
			if(item.slot.height > h) {
				h = item.slot.height;
			}
		}
		this.textureCache = new peote_view_Texture(w,h,this.config.ranges.length,4,false,1,1,null,this.maxTextureSize);
		this.loadFontData(onLoad,onProgressOverall,debug);
	}
	,loadFontData: function(onLoad,onProgressOverall,debug) {
		var _gthis = this;
		var gl3FontData = [];
		var _this = this.config.ranges;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var v = _this[i];
			result[i] = v.data != null ? _gthis.path + v.data : _gthis.path + v.image.replace(_gthis.rParseEnding.r,".dat");
		}
		var names = result;
		var debug1 = debug;
		var onProgress = null;
		var onProgressOverall1 = null;
		var onError = null;
		var onLoad1 = function(index,bytes) {
			gl3FontData[index] = new peote_text_Gl3FontData(bytes,_gthis.config.ranges[index].range.min,_gthis.config.ranges[index].range.max,_gthis.kerning);
		};
		var onLoadAll = function(bytes) {
			_gthis.loadImages(gl3FontData,onLoad,onProgressOverall,debug);
		};
		if(debug1 == null) {
			debug1 = false;
		}
		var allBytes = [];
		var loaded = names.length;
		var progressSumA = [];
		var progressSumB = [];
		if(onProgressOverall1 != null) {
			var _g = [];
			var _g1 = 0;
			var _g2 = names.length;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(0);
			}
			progressSumA = _g;
			var _g = [];
			var _g1 = 0;
			var _g2 = names.length;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(0);
			}
			progressSumB = _g;
		}
		var _g = 0;
		var _g1 = names.length;
		while(_g < _g1) {
			var i = [_g++];
			var name = [names[i[0]]];
			var debug2 = debug1;
			var onProgress1 = onProgress == null && onProgressOverall1 == null ? null : (function(i) {
				return function(a,b) {
					if(onProgress != null) {
						onProgress(i[0],a,b);
					}
					if(onProgressOverall1 != null) {
						progressSumA[i[0]] = a;
						progressSumB[i[0]] = b;
						b = 0;
						var _g = 0;
						while(_g < progressSumB.length) {
							var x = progressSumB[_g];
							++_g;
							if(x == 0) {
								b = 0;
								break;
							}
							b += x;
						}
						if(b > 0) {
							a = 0;
							var _g = 0;
							while(_g < progressSumA.length) {
								var x = progressSumA[_g];
								++_g;
								a += x;
							}
							onProgressOverall1(a,b);
						}
					}
				};
			})(i);
			var onError1 = onError == null ? null : (function(i) {
				return function(msg) {
					onError(i[0],msg);
				};
			})(i);
			var onLoad2 = onLoadAll == null ? null : (function(i) {
				return function(bytes) {
					allBytes[i[0]] = bytes;
					if(onLoad1 != null) {
						onLoad1(i[0],bytes);
					}
					if((loaded -= 1) == 0) {
						onLoadAll(allBytes);
					}
				};
			})(i);
			if(debug2 == null) {
				debug2 = false;
			}
			if(utils_Loader.corsServer != "" && new EReg("^https?://","").match(name[0])) {
				name[0] = "//" + utils_Loader.corsServer + "/" + name[0];
			}
			var future = lime_utils_Bytes.loadFromFile(name[0]);
			if(debug2) {
				haxe_Log.trace("Start loading bytes \"" + name[0] + "\"",{ fileName : "utils/Loader.hx", lineNumber : 81, className : "utils.Loader", methodName : "bytes"});
				future.onProgress((function(name) {
					return function(a,b) {
						utils_Loader.onProgressDebug(a,b,name[0]);
					};
				})(name));
				future.onError(utils_Loader.onErrorDebug);
				future.onComplete((function(name) {
					return function(bytes) {
						utils_Loader.onCompleteDebug(name[0]);
					};
				})(name));
			}
			if(onProgress1 != null) {
				future.onProgress(onProgress1);
			}
			if(onError1 != null) {
				future.onError(onError1);
			}
			if(onLoad2 != null) {
				future.onComplete(onLoad2);
			}
		}
	}
	,loadImages: function(gl3FontData,onLoad,onProgressOverall,debug) {
		var _gthis = this;
		var _this = this.config.ranges;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _gthis.path + _this[i].image;
		}
		var names = result;
		var debug1 = debug;
		var onProgress = function(index,loaded,size) {
			if(onProgressOverall != null) {
				onProgressOverall(loaded,size);
			}
		};
		var onProgressOverall1 = null;
		var onError = null;
		var onLoad1 = function(index,image) {
			var gl3font = gl3FontData[index];
			var _g = gl3font.rangeMin;
			var _g1 = gl3font.rangeMax + 1;
			while(_g < _g1) {
				var charcode = _g++;
				var m = charcode >= gl3font.rangeMin && charcode <= gl3font.rangeMax ? gl3font.metrics[charcode - gl3font.rangeMin] : null;
				if(m != null) {
					m.u *= image.width;
					m.v *= image.height;
					m.w *= image.width;
					m.h *= image.height;
					if(charcode >= gl3font.rangeMin && charcode <= gl3font.rangeMax) {
						gl3font.metrics[charcode - gl3font.rangeMin] = m;
					}
				}
			}
			var range = _gthis.config.ranges[index].range;
			_gthis.textureCache.setImage(peote_view_TextureData.fromLimeImage(image));
			_gthis.rangeMapping = gl3font;
		};
		var onLoadAll = function(images) {
			onLoad(_gthis);
		};
		if(debug1 == null) {
			debug1 = false;
		}
		var images = [];
		var loaded = names.length;
		var progressSumA = [];
		var progressSumB = [];
		if(onProgressOverall1 != null) {
			var _g = [];
			var _g1 = 0;
			var _g2 = names.length;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(0);
			}
			progressSumA = _g;
			var _g = [];
			var _g1 = 0;
			var _g2 = names.length;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(0);
			}
			progressSumB = _g;
		}
		var _g = 0;
		var _g1 = names.length;
		while(_g < _g1) {
			var i = [_g++];
			var name = [names[i[0]]];
			var debug = debug1;
			var onProgress1 = onProgress == null && onProgressOverall1 == null ? null : (function(i) {
				return function(a,b) {
					if(onProgress != null) {
						onProgress(i[0],a,b);
					}
					if(onProgressOverall1 != null) {
						progressSumA[i[0]] = a;
						progressSumB[i[0]] = b;
						b = 0;
						var _g = 0;
						while(_g < progressSumB.length) {
							var x = progressSumB[_g];
							++_g;
							if(x == 0) {
								b = 0;
								break;
							}
							b += x;
						}
						if(b > 0) {
							a = 0;
							var _g = 0;
							while(_g < progressSumA.length) {
								var x = progressSumA[_g];
								++_g;
								a += x;
							}
							onProgressOverall1(a,b);
						}
					}
				};
			})(i);
			var onError1 = onError == null ? null : (function(i) {
				return function(msg) {
					onError(i[0],msg);
				};
			})(i);
			var onLoad2 = onLoadAll == null ? null : (function(i) {
				return function(image) {
					images[i[0]] = image;
					if(onLoad1 != null) {
						onLoad1(i[0],image);
					}
					if((loaded -= 1) == 0) {
						onLoadAll(images);
					}
				};
			})(i);
			if(debug == null) {
				debug = false;
			}
			if(utils_Loader.corsServer != "" && new EReg("^https?://","").match(name[0])) {
				name[0] = "//" + utils_Loader.corsServer + "/" + name[0];
			}
			var future = lime_graphics_Image.loadFromFile(name[0]);
			if(debug) {
				haxe_Log.trace("Start loading image \"" + name[0] + "\"",{ fileName : "utils/Loader.hx", lineNumber : 28, className : "utils.Loader", methodName : "image"});
				future.onProgress((function(name) {
					return function(a,b) {
						utils_Loader.onProgressDebug(a,b,name[0]);
					};
				})(name));
				future.onError(utils_Loader.onErrorDebug);
				future.onComplete((function(name) {
					return function(image) {
						utils_Loader.onCompleteDebug(name[0]);
					};
				})(name));
			}
			if(onProgress1 != null) {
				future.onProgress(onProgress1);
			}
			if(onError1 != null) {
				future.onError(onError1);
			}
			if(onLoad2 != null) {
				future.onComplete(onLoad2);
			}
		}
	}
	,__class__: peote_text_Font_$_$Main_$MyFontStyle
};
var peote_text_Gl3FontData = function(bytes,rangeMin,rangeMax,isKerning) {
	if(isKerning == null) {
		isKerning = true;
	}
	this.rangeMin = rangeMin;
	this.rangeMax = rangeMax;
	this.metrics = [];
	var pos = 0;
	var N = bytes.getInt32(pos);
	pos += 4;
	this.lineHeight = bytes.getFloat(pos);
	pos += 4;
	this.base = bytes.getFloat(pos) / this.lineHeight;
	pos += 4;
	this.height = this.base - bytes.getFloat(pos) / this.lineHeight;
	pos += 4;
	var _g = 0;
	var _g1 = N;
	while(_g < _g1) {
		var i = _g++;
		var charcode = bytes.getInt32(pos);
		pos += 4;
		var m = { kerning : i, advance : bytes.getFloat(pos) / this.lineHeight, left : bytes.getFloat(pos + 4) / this.lineHeight, top : bytes.getFloat(pos + 8) / this.lineHeight, width : bytes.getFloat(pos + 12) / this.lineHeight, height : bytes.getFloat(pos + 16) / this.lineHeight, u : bytes.getFloat(pos + 20), v : bytes.getFloat(pos + 24), w : bytes.getFloat(pos + 28), h : bytes.getFloat(pos + 32)};
		pos += 36;
		if(charcode >= this.rangeMin && charcode <= this.rangeMax) {
			this.metrics[charcode - this.rangeMin] = m;
		}
	}
	if(isKerning) {
		var y = 0;
		var x = 0;
		var kern = [];
		this.kerning = [kern];
		while(x < N && y < N) {
			var k = bytes.getFloat(pos) / this.lineHeight;
			pos += 4;
			var amount = bytes.getInt32(pos);
			pos += 4;
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i = _g++;
				kern[x++] = k;
				if(x == N) {
					x = 0;
					kern = [];
					this.kerning.push(kern);
					++y;
				}
			}
		}
	}
};
$hxClasses["peote.text.Gl3FontData"] = peote_text_Gl3FontData;
peote_text_Gl3FontData.__name__ = "peote.text.Gl3FontData";
peote_text_Gl3FontData.prototype = {
	__class__: peote_text_Gl3FontData
};
var peote_text_Glyph_$_$Main_$MyFontStyle = function() {
	this.bytePos = -1;
	this.th = 0.0;
	this.tw = 0.0;
	this.ty = 0.0;
	this.tx = 0.0;
	this.h = 0.0;
	this.w = 0.0;
	this.color = -1;
	this.y = 0.0;
	this.x = 0.0;
	this.char = -1;
};
$hxClasses["peote.text.Glyph__Main_MyFontStyle"] = peote_text_Glyph_$_$Main_$MyFontStyle;
peote_text_Glyph_$_$Main_$MyFontStyle.__name__ = "peote.text.Glyph__Main_MyFontStyle";
peote_text_Glyph_$_$Main_$MyFontStyle.prototype = {
	set_width: function(value) {
		if(this.width > 0.0) {
			this.w = this.w / this.width * value;
		} else {
			this.w = 0;
		}
		return this.width = value;
	}
	,set_height: function(value) {
		if(this.height > 0.0) {
			this.h = this.h / this.height * value;
		} else {
			this.h = 0;
		}
		return this.height = value;
	}
	,__class__: peote_text_Glyph_$_$Main_$MyFontStyle
	,__properties__: {set_height:"set_height",set_width:"set_width"}
};
var peote_text_Line_$_$Main_$MyFontStyle = function() {
	this.pageLine = new peote_text_PageLine_$_$Main_$MyFontStyle();
	this.size = 65535;
	this.offset = 0.0;
	this.x = 0.0;
};
$hxClasses["peote.text.Line__Main_MyFontStyle"] = peote_text_Line_$_$Main_$MyFontStyle;
peote_text_Line_$_$Main_$MyFontStyle.__name__ = "peote.text.Line__Main_MyFontStyle";
peote_text_Line_$_$Main_$MyFontStyle.prototype = {
	__class__: peote_text_Line_$_$Main_$MyFontStyle
};
var peote_text_MaskElement = function(x,y,w,h) {
	this.bytePos = -1;
	this.h = 100;
	this.w = 100;
	this.y = 0;
	this.x = 0;
	this.x = x;
	this.y = y;
	this.w = w;
	this.h = h;
};
$hxClasses["peote.text.MaskElement"] = peote_text_MaskElement;
peote_text_MaskElement.__name__ = "peote.text.MaskElement";
peote_text_MaskElement.prototype = {
	__class__: peote_text_MaskElement
};
var peote_text_PageLine_$_$Main_$MyFontStyle = function() {
	this.updateTo = 0;
	this.updateFrom = 16777216;
	this.visibleTo = 0;
	this.visibleFrom = 0;
	this.glyphes = [];
	this.height = 0.0;
	this.base = 0.0;
	this.lineHeight = 0.0;
	this.textSize = 0.0;
	this.y = 0.0;
};
$hxClasses["peote.text.PageLine__Main_MyFontStyle"] = peote_text_PageLine_$_$Main_$MyFontStyle;
peote_text_PageLine_$_$Main_$MyFontStyle.__name__ = "peote.text.PageLine__Main_MyFontStyle";
peote_text_PageLine_$_$Main_$MyFontStyle.prototype = {
	__class__: peote_text_PageLine_$_$Main_$MyFontStyle
};
var peote_text_Page_$_$Main_$MyFontStyle = function() {
	this.updateLineTo = 0;
	this.updateLineFrom = 16777216;
	this.visibleLineTo = 0;
	this.visibleLineFrom = 0;
	this.pageLines = [];
	this.textHeight = 0.0;
	this.textWidth = 0.0;
	this.height = 65535;
	this.width = 65535;
	this.yOffset = 0.0;
	this.xOffset = 0.0;
	this.y = 0.0;
	this.x = 0.0;
};
$hxClasses["peote.text.Page__Main_MyFontStyle"] = peote_text_Page_$_$Main_$MyFontStyle;
peote_text_Page_$_$Main_$MyFontStyle.__name__ = "peote.text.Page__Main_MyFontStyle";
peote_text_Page_$_$Main_$MyFontStyle.prototype = {
	__class__: peote_text_Page_$_$Main_$MyFontStyle
};
var peote_text_Range = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["peote.text.Range"] = peote_text_Range;
peote_text_Range.__name__ = "peote.text.Range";
peote_text_Range.prototype = {
	__class__: peote_text_Range
};
var peote_text_skin_SkinProgram = function() { };
$hxClasses["peote.text.skin.SkinProgram"] = peote_text_skin_SkinProgram;
peote_text_skin_SkinProgram.__name__ = "peote.text.skin.SkinProgram";
peote_text_skin_SkinProgram.__isInterface__ = true;
peote_text_skin_SkinProgram.prototype = {
	__class__: peote_text_skin_SkinProgram
};
var peote_view_Display = function(x,y,width,height,color) {
	if(color == null) {
		color = 0;
	}
	this.renderFramebufferFrame = 0;
	this.renderFramebufferSkipFrames = 0;
	this._renderFramebufferEnabled = false;
	this.framebufferTextureSlot = 0;
	this.fbTexture = null;
	this.gl = null;
	this.peoteView = null;
	this.alpha = 1.0;
	this.blue = 0.0;
	this.green = 0.0;
	this.red = 0.0;
	this.backgroundEnabled = false;
	this.backgroundDepth = false;
	this.backgroundAlpha = false;
	this.isVisible = true;
	this.yz = 1.0;
	this.xz = 1.0;
	this.yOffset = 0;
	this.xOffset = 0;
	this.y = 0;
	this.x = 0;
	this.height = 0;
	this.width = 0;
	if(peote_view_Version.isUBO) {
		var _this = this.uniformBuffer;
		var gl = this.gl;
		if(gl != null) {
			_this.uniformBytes.b_UFloat32[0] = x + this.xOffset;
			gl.bindBuffer(gl.UNIFORM_BUFFER,_this.uniformBuffer);
			gl.bufferSubData(gl.UNIFORM_BUFFER,0,_this.xOffestBufferPointer);
			gl.bindBuffer(gl.UNIFORM_BUFFER,null);
		}
	}
	this.x = x;
	if(peote_view_Version.isUBO) {
		var _this = this.uniformBuffer;
		var gl = this.gl;
		if(gl != null) {
			_this.uniformBytes.b_UFloat32[1] = y + this.yOffset;
			gl.bindBuffer(gl.UNIFORM_BUFFER,_this.uniformBuffer);
			gl.bufferSubData(gl.UNIFORM_BUFFER,4,_this.yOffestBufferPointer);
			gl.bindBuffer(gl.UNIFORM_BUFFER,null);
		}
	}
	this.y = y;
	this.width = width;
	this.height = height;
	this.red = (color >> 24 & 255) / 255.0;
	this.green = (color >> 16 & 255) / 255.0;
	this.blue = (color >> 8 & 255) / 255.0;
	this.alpha = (color & 255) / 255.0;
	this.backgroundEnabled = this.alpha > 0.0;
	this.backgroundAlpha = this.alpha < 1.0;
	this.programList = new peote_view_utils_RenderList_$peote_$view_$Program(new haxe_ds_ObjectMap());
	if(peote_view_Version.isUBO) {
		this.uniformBuffer = new peote_view_UniformBufferDisplay();
		this.uniformBufferFB = new peote_view_UniformBufferDisplay();
		this.uniformBufferViewFB = new peote_view_UniformBufferView();
	}
};
$hxClasses["peote.view.Display"] = peote_view_Display;
peote_view_Display.__name__ = "peote.view.Display";
peote_view_Display.prototype = {
	addToPeoteView: function(peoteView,atDisplay,addBefore) {
		if(addBefore == null) {
			addBefore = false;
		}
		if(this.peoteView != peoteView) {
			this.peoteView = peoteView;
			this.setNewGLContext(peoteView.gl);
		}
		peoteView.displayList.add(this,atDisplay,addBefore);
	}
	,setNewGLContext: function(newGl) {
		if(newGl != null && newGl != this.gl) {
			if(this.gl != null) {
				if(peote_view_Version.isUBO) {
					this.uniformBuffer.deleteGLBuffer(this.gl);
					this.uniformBufferFB.deleteGLBuffer(this.gl);
					this.uniformBufferViewFB.deleteGLBuffer(this.gl);
				}
			}
			this.gl = newGl;
			if(peote_view_Version.isUBO) {
				this.uniformBuffer.createGLBuffer(this.gl,this.x + this.xOffset,this.y + this.yOffset,this.xz,this.yz);
				this.uniformBufferFB.createGLBuffer(this.gl,this.xOffset,this.yOffset - this.height,this.xz,this.yz);
				this.uniformBufferViewFB.createGLBuffer(this.gl,this.width,-this.height,0.0,0.0,1.0,1.0);
			}
			var _g_item = this.programList.first;
			while(_g_item != null) {
				var value = _g_item.value;
				_g_item = _g_item.next;
				var program = value;
				if(newGl != null && newGl != program.gl) {
					var _g = 0;
					var _g1 = program.displays;
					while(_g < _g1.length) {
						var d = _g1[_g];
						++_g;
						if(d.gl != null && d.gl != newGl) {
							throw haxe_Exception.thrown("Error, program can not used inside different gl-contexts");
						}
					}
					if(program.gl != null) {
						program.gl.deleteShader(program.glVertexShader);
						program.gl.deleteShader(program.glFragmentShader);
						program.gl.deleteProgram(program.glProgram);
						if(program.buffer.hasPicking()) {
							program.gl.deleteShader(program.glVertexShaderPicking);
							program.gl.deleteShader(program.glFragmentShaderPicking);
							program.gl.deleteProgram(program.glProgramPicking);
						}
					}
					program.gl = newGl;
					if(peote_view_Version.isES3) {
						program.glShaderConfig.isES3 = true;
						program.glShaderConfig.IN = "in";
						program.glShaderConfig.VARIN = "in";
						program.glShaderConfig.VAROUT = "out";
					}
					if(peote_view_Version.isUBO) {
						program.glShaderConfig.isUBO = true;
					}
					if(peote_view_Version.isINSTANCED) {
						program.glShaderConfig.isINSTANCED = true;
					}
					program.glShaderConfig.FRAGMENT_EXTENSIONS = [];
					if(program.gl.getExtension("OES_standard_derivatives") != null) {
						program.glShaderConfig.FRAGMENT_EXTENSIONS.push({ EXTENSION : "GL_OES_standard_derivatives"});
					}
					if(program.gl.getExtension("EXT_color_buffer_float") != null) {
						program.glShaderConfig.FRAGMENT_EXTENSIONS.push({ EXTENSION : "EXT_color_buffer_float"});
					} else if(program.gl.getExtension("OES_texture_float") != null) {
						program.glShaderConfig.FRAGMENT_EXTENSIONS.push({ EXTENSION : "OES_texture_float"});
					}
					program.buffer.setNewGLContext(program.gl);
					program.createProg();
					if(program.buffer.hasPicking()) {
						program.createProg(true);
					}
					var _g2 = 0;
					var _g3 = program.activeTextures;
					while(_g2 < _g3.length) {
						var t = _g3[_g2];
						++_g2;
						var newGl1 = program.gl;
						if(newGl1 != null && newGl1 != t.gl) {
							var _g4 = 0;
							var _g5 = t.programs;
							while(_g4 < _g5.length) {
								var p = _g5[_g4];
								++_g4;
								if(p.gl != null && p.gl != newGl1) {
									throw haxe_Exception.thrown("Error, texture can not used inside different gl-contexts");
								}
							}
							var _g6 = 0;
							var _g7 = t.displays;
							while(_g6 < _g7.length) {
								var d1 = _g7[_g6];
								++_g6;
								if(d1.gl != null && d1.gl != newGl1) {
									throw haxe_Exception.thrown("Error, texture can not used inside different gl-contexts");
								}
							}
							if(t.gl != null) {
								t.gl.deleteTexture(t.glTexture);
								t.glTexture = null;
								if(t.displays.length == 0 && t.framebuffer != null) {
									t.gl.deleteFramebuffer(t.framebuffer);
									t.framebuffer = null;
									if(t.glDepthBuffer != null) {
										t.gl.deleteRenderbuffer(t.glDepthBuffer);
									}
									t.glDepthBuffer = null;
								}
							}
							t.gl = newGl1;
							if(t.width > t.gl.getParameter(t.gl.MAX_TEXTURE_SIZE) || t.height > t.gl.getParameter(t.gl.MAX_TEXTURE_SIZE)) {
								throw haxe_Exception.thrown("Error, texture size is greater then gl.MAX_TEXTURE_SIZE");
							}
							t.glTexture = peote_view_utils_TexUtils.createEmptyTexture(t.gl,t.width,t.height,t.colorChannels,t.createMipmaps,t.magFilter,t.minFilter,t.useFloat);
							if(t.displays.length > 0 && t.framebuffer == null) {
								t.glDepthBuffer = t.gl.createRenderbuffer();
								var gl = t.gl;
								var texture = t.glTexture;
								var depthBuffer = t.glDepthBuffer;
								var width = t.width;
								var height = t.height;
								var framebuffer = gl.createFramebuffer();
								gl.bindRenderbuffer(gl.RENDERBUFFER,depthBuffer);
								peote_view_utils_GLTool.clearGlErrorQueue(gl);
								gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT24,width,height);
								if(peote_view_utils_GLTool.getLastGlError(gl) == gl.INVALID_ENUM) {
									haxe_Log.trace("switching to DEPTH_COMPONENT16 for framebuffer",{ fileName : "peote/view/utils/GLTool.hx", lineNumber : 41, className : "peote.view.utils.GLTool", methodName : "createFramebuffer"});
									gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT16,width,height);
								}
								gl.bindFramebuffer(gl.FRAMEBUFFER,framebuffer);
								gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,depthBuffer);
								gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,texture,0);
								if(gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
									throw haxe_Exception.thrown("Error: Framebuffer not complete!");
								}
								gl.bindFramebuffer(gl.FRAMEBUFFER,null);
								gl.bindRenderbuffer(gl.RENDERBUFFER,null);
								t.framebuffer = framebuffer;
								t.updated = true;
							}
							var image = t.images.keys();
							while(image.hasNext()) {
								var image1 = image.next();
								t.bufferImage(image1,t.images.h[image1.__id__]);
							}
						}
					}
				}
			}
			if(this.fbTexture != null) {
				var _this = this.fbTexture;
				if(newGl != null && newGl != _this.gl) {
					var _g = 0;
					var _g1 = _this.programs;
					while(_g < _g1.length) {
						var p = _g1[_g];
						++_g;
						if(p.gl != null && p.gl != newGl) {
							throw haxe_Exception.thrown("Error, texture can not used inside different gl-contexts");
						}
					}
					var _g = 0;
					var _g1 = _this.displays;
					while(_g < _g1.length) {
						var d = _g1[_g];
						++_g;
						if(d.gl != null && d.gl != newGl) {
							throw haxe_Exception.thrown("Error, texture can not used inside different gl-contexts");
						}
					}
					if(_this.gl != null) {
						_this.gl.deleteTexture(_this.glTexture);
						_this.glTexture = null;
						if(_this.displays.length == 0 && _this.framebuffer != null) {
							_this.gl.deleteFramebuffer(_this.framebuffer);
							_this.framebuffer = null;
							if(_this.glDepthBuffer != null) {
								_this.gl.deleteRenderbuffer(_this.glDepthBuffer);
							}
							_this.glDepthBuffer = null;
						}
					}
					_this.gl = newGl;
					if(_this.width > _this.gl.getParameter(_this.gl.MAX_TEXTURE_SIZE) || _this.height > _this.gl.getParameter(_this.gl.MAX_TEXTURE_SIZE)) {
						throw haxe_Exception.thrown("Error, texture size is greater then gl.MAX_TEXTURE_SIZE");
					}
					_this.glTexture = peote_view_utils_TexUtils.createEmptyTexture(_this.gl,_this.width,_this.height,_this.colorChannels,_this.createMipmaps,_this.magFilter,_this.minFilter,_this.useFloat);
					if(_this.displays.length > 0 && _this.framebuffer == null) {
						_this.glDepthBuffer = _this.gl.createRenderbuffer();
						var gl = _this.gl;
						var texture = _this.glTexture;
						var depthBuffer = _this.glDepthBuffer;
						var width = _this.width;
						var height = _this.height;
						var framebuffer = gl.createFramebuffer();
						gl.bindRenderbuffer(gl.RENDERBUFFER,depthBuffer);
						peote_view_utils_GLTool.clearGlErrorQueue(gl);
						gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT24,width,height);
						if(peote_view_utils_GLTool.getLastGlError(gl) == gl.INVALID_ENUM) {
							haxe_Log.trace("switching to DEPTH_COMPONENT16 for framebuffer",{ fileName : "peote/view/utils/GLTool.hx", lineNumber : 41, className : "peote.view.utils.GLTool", methodName : "createFramebuffer"});
							gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT16,width,height);
						}
						gl.bindFramebuffer(gl.FRAMEBUFFER,framebuffer);
						gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,depthBuffer);
						gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,texture,0);
						if(gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
							throw haxe_Exception.thrown("Error: Framebuffer not complete!");
						}
						gl.bindFramebuffer(gl.FRAMEBUFFER,null);
						gl.bindRenderbuffer(gl.RENDERBUFFER,null);
						_this.framebuffer = framebuffer;
						_this.updated = true;
					}
					var image = _this.images.keys();
					while(image.hasNext()) {
						var image1 = image.next();
						_this.bufferImage(image1,_this.images.h[image1.__id__]);
					}
				}
			}
		}
	}
	,addProgram: function(program,atProgram,addBefore) {
		if(addBefore == null) {
			addBefore = false;
		}
		program.addToDisplay(this,atProgram,addBefore);
	}
	,__class__: peote_view_Display
};
var peote_ui_PeoteUIDisplay = function(x,y,width,height,color,maxTouchpoints,availableStyles,autoAddStyles) {
	if(maxTouchpoints == null) {
		maxTouchpoints = 3;
	}
	if(color == null) {
		color = 0;
	}
	this.activeIndex = 0;
	this.dragOriginY = 0;
	this.dragOriginX = 0;
	this.dragMaxY = 32767;
	this.dragMaxX = 32767;
	this.dragMinY = -32767;
	this.dragMinX = -32767;
	this.inputFocusElement = null;
	this.isTouchDown = 0;
	this.isMouseDown = 0;
	this.isTouchOver = false;
	this.isTouchInside = false;
	this.lastMouseY = 0.0;
	this.lastMouseX = 0.0;
	this.isMouseOver = false;
	this.isMouseInside = false;
	this.onPointerMove = null;
	this.onPointerClick = null;
	this.onPointerUp = null;
	this.onPointerDown = null;
	this.onPointerOut = null;
	this.onPointerOver = null;
	this.lockMouseDown = 0;
	this.lastMouseOverIndex = -1;
	this.lockTouchDown = 0;
	this.touchEnabled = true;
	this.mouseEnabled = true;
	this.autoAddStyles = true;
	this.stylePosBeforeFont = 0;
	this.usedStyleID = [];
	this.usedStyleProgram = [];
	this.upDownEventsBubble = false;
	this.moveEventsBubble = false;
	this.overOutEventsBubble = false;
	this.number = peote_ui_PeoteUIDisplay.getFreeNumber();
	peote_view_Display.call(this,x,y,width,height,color);
	if(availableStyles == null) {
		this.autoAddStyles = autoAddStyles == null ? true : autoAddStyles;
		this.usedStyleProgram = [];
	} else {
		this.autoAddStyles = autoAddStyles == null ? false : autoAddStyles;
		var noFontYet = true;
		var _g = 0;
		while(_g < availableStyles.length) {
			var style = availableStyles[_g];
			++_g;
			var id = style.getUUID();
			if(this.usedStyleID.indexOf(id) != -1) {
				var c = js_Boot.getClass(style);
				throw haxe_Exception.thrown("Error by creating new UIDisplay. Give each of the styles \"" + c.__name__ + "\" an unique ID to have multiple of them into the availableStyles list!");
			}
			this.usedStyleID.push(id);
			if(style.isFontStyle()) {
				this.usedStyleProgram.push(null);
				noFontYet = false;
			} else {
				var program = style.createStyleProgram();
				this.usedStyleProgram.push(program);
				this.addProgram(program);
				if(noFontYet) {
					this.stylePosBeforeFont++;
				}
			}
		}
	}
	this.movePickBuffer = new peote_view_Buffer_$Pickable(1024,1024);
	this.movePickProgram = new peote_view_Program(this.movePickBuffer);
	this.clickPickBuffer = new peote_view_Buffer_$Pickable(1024,1024);
	this.clickPickProgram = new peote_view_Program(this.clickPickBuffer);
	this.uiElements = [];
	var this1 = new Array(3);
	this.lastMouseDownIndex = this1;
	var _g = 0;
	var _g1 = this.lastMouseDownIndex.length;
	while(_g < _g1) {
		var i = _g++;
		this.lastMouseDownIndex[i] = -1;
	}
	this.draggingMouseElements = [];
	this.maxTouchpoints = maxTouchpoints;
	var this1 = new Array(maxTouchpoints);
	this.lastTouchOverIndex = this1;
	var this1 = new Array(maxTouchpoints);
	this.lastTouchDownIndex = this1;
	var this1 = new Array(maxTouchpoints);
	this.draggingTouchElements = this1;
	var _g = 0;
	var _g1 = maxTouchpoints;
	while(_g < _g1) {
		var i = _g++;
		this.lastTouchOverIndex[i] = -1;
		this.lastTouchDownIndex[i] = -1;
		this.draggingTouchElements[i] = [];
	}
	peote_ui_interactive_input2action_InputTextLine.input2Action = new input2action_Input2Action(peote_ui_interactive_input2action_InputTextLine.actionConfig,peote_ui_interactive_input2action_InputTextLine.actionMap);
	peote_ui_interactive_input2action_InputTextLine.input2Action.setKeyboard();
	peote_ui_interactive_input2action_InputTextPage.input2Action = new input2action_Input2Action(peote_ui_interactive_input2action_InputTextPage.actionConfig,peote_ui_interactive_input2action_InputTextPage.actionMap);
	peote_ui_interactive_input2action_InputTextPage.input2Action.setKeyboard();
};
$hxClasses["peote.ui.PeoteUIDisplay"] = peote_ui_PeoteUIDisplay;
peote_ui_PeoteUIDisplay.__name__ = "peote.ui.PeoteUIDisplay";
peote_ui_PeoteUIDisplay.getFreeNumber = function() {
	var bit = 1;
	var _g = 0;
	var _g1 = peote_ui_PeoteUIDisplay.MAX_DISPLAYS;
	while(_g < _g1) {
		var i = _g++;
		if((peote_ui_PeoteUIDisplay.AVAILABLE_NUMBER & bit) == 0) {
			peote_ui_PeoteUIDisplay.AVAILABLE_NUMBER |= bit;
			return i;
		}
		bit <<= 1;
	}
	throw haxe_Exception.thrown("Error, reach maximum of " + peote_ui_PeoteUIDisplay.MAX_DISPLAYS + " UIDisplays");
};
peote_ui_PeoteUIDisplay.mouseMoveActive = function(mouseX,mouseY) {
	var checkForEvent = 3;
	if(peote_ui_PeoteUIDisplay.draggingMouseDisplays.length > 0) {
		var _g = 0;
		var _g1 = peote_ui_PeoteUIDisplay.draggingMouseDisplays;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			if(d.mouseEnabled) {
				if(d.peoteView != null) {
					var toX = mouseX / d.peoteView.xz / d.xz | 0;
					var toY = mouseY / d.peoteView.yz / d.yz | 0;
					if(toX >= d.dragMinX + d.dragOriginX) {
						if(toX < d.dragMaxX - d.width + d.dragOriginX) {
							var _x = toX - d.dragOriginX;
							if(peote_view_Version.isUBO) {
								var _this = d.uniformBuffer;
								var gl = d.gl;
								if(gl != null) {
									_this.uniformBytes.b_UFloat32[0] = _x + d.xOffset;
									gl.bindBuffer(gl.UNIFORM_BUFFER,_this.uniformBuffer);
									gl.bufferSubData(gl.UNIFORM_BUFFER,0,_this.xOffestBufferPointer);
									gl.bindBuffer(gl.UNIFORM_BUFFER,null);
								}
							}
							d.x = _x;
						} else {
							var _x1 = d.dragMaxX - d.width;
							if(peote_view_Version.isUBO) {
								var _this1 = d.uniformBuffer;
								var gl1 = d.gl;
								if(gl1 != null) {
									_this1.uniformBytes.b_UFloat32[0] = _x1 + d.xOffset;
									gl1.bindBuffer(gl1.UNIFORM_BUFFER,_this1.uniformBuffer);
									gl1.bufferSubData(gl1.UNIFORM_BUFFER,0,_this1.xOffestBufferPointer);
									gl1.bindBuffer(gl1.UNIFORM_BUFFER,null);
								}
							}
							d.x = _x1;
						}
					} else {
						var _x2 = d.dragMinX;
						if(peote_view_Version.isUBO) {
							var _this2 = d.uniformBuffer;
							var gl2 = d.gl;
							if(gl2 != null) {
								_this2.uniformBytes.b_UFloat32[0] = _x2 + d.xOffset;
								gl2.bindBuffer(gl2.UNIFORM_BUFFER,_this2.uniformBuffer);
								gl2.bufferSubData(gl2.UNIFORM_BUFFER,0,_this2.xOffestBufferPointer);
								gl2.bindBuffer(gl2.UNIFORM_BUFFER,null);
							}
						}
						d.x = _x2;
					}
					if(toY >= d.dragMinY + d.dragOriginY) {
						if(toY < d.dragMaxY - d.height + d.dragOriginY) {
							var _y = toY - d.dragOriginY;
							if(peote_view_Version.isUBO) {
								var _this3 = d.uniformBuffer;
								var gl3 = d.gl;
								if(gl3 != null) {
									_this3.uniformBytes.b_UFloat32[1] = _y + d.yOffset;
									gl3.bindBuffer(gl3.UNIFORM_BUFFER,_this3.uniformBuffer);
									gl3.bufferSubData(gl3.UNIFORM_BUFFER,4,_this3.yOffestBufferPointer);
									gl3.bindBuffer(gl3.UNIFORM_BUFFER,null);
								}
							}
							d.y = _y;
						} else {
							var _y1 = d.dragMaxY - d.height;
							if(peote_view_Version.isUBO) {
								var _this4 = d.uniformBuffer;
								var gl4 = d.gl;
								if(gl4 != null) {
									_this4.uniformBytes.b_UFloat32[1] = _y1 + d.yOffset;
									gl4.bindBuffer(gl4.UNIFORM_BUFFER,_this4.uniformBuffer);
									gl4.bufferSubData(gl4.UNIFORM_BUFFER,4,_this4.yOffestBufferPointer);
									gl4.bindBuffer(gl4.UNIFORM_BUFFER,null);
								}
							}
							d.y = _y1;
						}
					} else {
						var _y2 = d.dragMinY;
						if(peote_view_Version.isUBO) {
							var _this5 = d.uniformBuffer;
							var gl5 = d.gl;
							if(gl5 != null) {
								_this5.uniformBytes.b_UFloat32[1] = _y2 + d.yOffset;
								gl5.bindBuffer(gl5.UNIFORM_BUFFER,_this5.uniformBuffer);
								gl5.bufferSubData(gl5.UNIFORM_BUFFER,4,_this5.yOffestBufferPointer);
								gl5.bindBuffer(gl5.UNIFORM_BUFFER,null);
							}
						}
						d.y = _y2;
					}
				}
			}
		}
	} else {
		var _g = 0;
		var _g1 = peote_ui_PeoteUIDisplay.maxActiveIndex;
		while(_g < _g1) {
			var i = _g++;
			var _this = peote_ui_PeoteUIDisplay.activeUIDisplay[i];
			var checkForEvent1 = checkForEvent;
			if(checkForEvent1 == null) {
				checkForEvent1 = 3;
			}
			if(_this.mouseEnabled && _this.peoteView != null) {
				var x = (_this.lastMouseX = mouseX) | 0;
				var y = (_this.lastMouseY = mouseY) | 0;
				var isInside = false;
				var pickedIndex = -1;
				var checkForEvent2;
				if(checkForEvent1 > 0) {
					var px = x;
					var py = y;
					px = px / _this.peoteView.xz - _this.peoteView.xOffset | 0;
					py = py / _this.peoteView.yz - _this.peoteView.yOffset | 0;
					checkForEvent2 = px >= _this.x && px < _this.x + _this.width && py >= _this.y && py < _this.y + _this.height;
				} else {
					checkForEvent2 = false;
				}
				if(checkForEvent2) {
					isInside = true;
					pickedIndex = _this.peoteView.getElementAt(mouseX,mouseY,_this,_this.movePickProgram);
				}
				if(peote_ui_PeoteUIDisplay.intoSelectionTextLine != null) {
					var peoteView = null;
					if(peoteView == null) {
						peoteView = _this.peoteView;
					}
					var peoteView1 = null;
					if(peoteView1 == null) {
						peoteView1 = _this.peoteView;
					}
					peote_ui_PeoteUIDisplay.intoSelectionTextLine.onSelect({ x : (peoteView != null ? (x / peoteView.xz - peoteView.xOffset - _this.xOffset - _this.x) / _this.xz : (x - _this.xOffset - _this.x) / _this.xz) | 0, y : (peoteView1 != null ? (y / peoteView1.xz - peoteView1.xOffset - _this.xOffset - _this.x) / _this.xz : (y - _this.xOffset - _this.x) / _this.xz) | 0, type : 0});
				} else if(_this.draggingMouseElements.length > 0) {
					var _g2 = 0;
					var _g3 = _this.draggingMouseElements;
					while(_g2 < _g3.length) {
						var uiElement = _g3[_g2];
						++_g2;
						var dragToX = x;
						var dragToY = y;
						dragToX = dragToX / uiElement.uiDisplay.peoteView.xz / uiElement.uiDisplay.xz | 0;
						dragToY = dragToY / uiElement.uiDisplay.peoteView.yz / uiElement.uiDisplay.yz | 0;
						if(dragToX >= uiElement.dragMinX + uiElement.dragOriginX) {
							if(dragToX < uiElement.dragMaxX - uiElement.width + uiElement.dragOriginX) {
								uiElement.x = dragToX - uiElement.dragOriginX;
							} else {
								uiElement.x = uiElement.dragMaxX - uiElement.width;
							}
						} else {
							uiElement.x = uiElement.dragMinX;
						}
						if(dragToY >= uiElement.dragMinY + uiElement.dragOriginY) {
							if(dragToY < uiElement.dragMaxY - uiElement.height + uiElement.dragOriginY) {
								uiElement.y = dragToY - uiElement.dragOriginY;
							} else {
								uiElement.y = uiElement.dragMaxY - uiElement.height;
							}
						} else {
							uiElement.y = uiElement.dragMinY;
						}
						if(uiElement.drag != null) {
							uiElement.drag((uiElement.x - uiElement.dragMinX) / (uiElement.dragMaxX - uiElement.dragMinX - uiElement.width),(uiElement.y - uiElement.dragMinY) / (uiElement.dragMaxY - uiElement.dragMinY - uiElement.height));
						}
						uiElement.updateLayout();
					}
				} else {
					var hasEventOver = false;
					var hasEventOut = false;
					if(pickedIndex != _this.lastMouseOverIndex) {
						if(_this.lastMouseOverIndex >= 0) {
							var lastElem = _this.movePickBuffer.getElement(_this.lastMouseOverIndex).uiElement;
							if(pickedIndex >= 0) {
								var pickedElem = _this.movePickBuffer.getElement(pickedIndex).uiElement;
								if(lastElem.intoOverOutEventBubbleOf(pickedElem)) {
									while(pickedElem != null && pickedElem != lastElem) {
										pickedElem.pointerOver({ x : x, y : y, type : 0});
										if(pickedElem.overOutEventsBubbleTo == null && !pickedElem.overOutEventsBubbleToDisplay) {
											hasEventOut = true;
										}
										pickedElem = pickedElem.overOutEventsBubbleTo;
									}
								} else {
									while(lastElem != null && lastElem != pickedElem) {
										lastElem.pointerOut({ x : x, y : y, type : 0});
										if(lastElem.overOutEventsBubbleTo == null && !lastElem.overOutEventsBubbleToDisplay) {
											hasEventOver = true;
										}
										lastElem = lastElem.overOutEventsBubbleTo;
									}
									if(lastElem == null) {
										while(pickedElem != null) {
											pickedElem.pointerOver({ x : x, y : y, type : 0});
											if(pickedElem.overOutEventsBubbleTo == null && !pickedElem.overOutEventsBubbleToDisplay) {
												hasEventOut = true;
											}
											pickedElem = pickedElem.overOutEventsBubbleTo;
										}
									}
								}
							} else {
								while(lastElem != null) {
									lastElem.pointerOut({ x : x, y : y, type : 0});
									if(lastElem.overOutEventsBubbleTo == null && !lastElem.overOutEventsBubbleToDisplay) {
										hasEventOver = true;
									}
									lastElem = lastElem.overOutEventsBubbleTo;
								}
							}
						} else if(pickedIndex >= 0) {
							var pickedElem1 = _this.movePickBuffer.getElement(pickedIndex).uiElement;
							while(pickedElem1 != null) {
								pickedElem1.pointerOver({ x : x, y : y, type : 0});
								if(pickedElem1.overOutEventsBubbleTo == null && !pickedElem1.overOutEventsBubbleToDisplay) {
									hasEventOut = true;
								}
								pickedElem1 = pickedElem1.overOutEventsBubbleTo;
							}
						}
						_this.lastMouseOverIndex = pickedIndex;
					}
					if((checkForEvent1 & 2) != 0) {
						var hasEventMove = false;
						if(pickedIndex >= 0) {
							var pickedElem2 = _this.movePickBuffer.getElement(pickedIndex).uiElement;
							while(pickedElem2 != null) {
								pickedElem2.pointerMove({ x : x, y : y, type : 0});
								if(pickedElem2.moveEventsBubbleTo == null && pickedElem2.moveEventsBubbleToDisplay) {
									hasEventMove = true;
								}
								pickedElem2 = pickedElem2.moveEventsBubbleTo;
							}
						} else {
							hasEventMove = true;
						}
						if(hasEventMove) {
							if(_this.onPointerMove != null) {
								_this.onPointerMove(_this,{ x : x, y : y, type : 0});
							}
							if(!_this.moveEventsBubble) {
								checkForEvent1 -= 2;
							}
						} else {
							checkForEvent1 -= 2;
						}
					}
					if((checkForEvent1 & 1) != 0) {
						if(isInside) {
							if(!_this.isMouseInside) {
								_this.isMouseInside = true;
								hasEventOver = true;
							}
						} else if(_this.isMouseInside) {
							_this.isMouseInside = false;
							hasEventOut = true;
						}
						if(hasEventOver && !hasEventOut) {
							if(_this.onPointerOver != null) {
								_this.onPointerOver(_this,{ x : x, y : y, type : 0});
							}
							_this.isMouseOver = true;
						} else if(hasEventOut && !hasEventOver) {
							if(_this.onPointerOut != null) {
								_this.onPointerOut(_this,{ x : x, y : y, type : 0});
							}
							_this.isMouseOver = false;
						}
						if(_this.isMouseInside) {
							if(!_this.isMouseOver || !_this.overOutEventsBubble) {
								--checkForEvent1;
							}
						}
					} else if(_this.isMouseInside) {
						if(_this.onPointerOut != null) {
							_this.onPointerOut(_this,{ x : x, y : y, type : 0});
						}
						_this.isMouseInside = _this.isMouseOver = false;
					}
				}
			}
			checkForEvent = checkForEvent1;
		}
	}
};
peote_ui_PeoteUIDisplay.mouseDownActive = function(mouseX,mouseY,button) {
	var _g = 0;
	var _g1 = peote_ui_PeoteUIDisplay.maxActiveIndex;
	while(_g < _g1) {
		var i = _g++;
		var _this = peote_ui_PeoteUIDisplay.activeUIDisplay[i];
		var hasEventDown = false;
		if(_this.mouseEnabled && (_this.lockMouseDown & 1 << button) == 0 && _this.peoteView != null) {
			var x = mouseX | 0;
			var y = mouseY | 0;
			var px = x;
			var py = y;
			px = px / _this.peoteView.xz - _this.peoteView.xOffset | 0;
			py = py / _this.peoteView.yz - _this.peoteView.yOffset | 0;
			if(px >= _this.x && px < _this.x + _this.width && py >= _this.y && py < _this.y + _this.height) {
				var pickedIndex = _this.peoteView.getElementAt(mouseX,mouseY,_this,_this.clickPickProgram);
				if(pickedIndex >= 0) {
					var pickedElem = _this.clickPickBuffer.getElement(pickedIndex).uiElement;
					while(pickedElem != null) {
						pickedElem.pointerDown({ x : x, y : y, type : 0, mouseButton : button});
						if(pickedElem.upDownEventsBubbleTo == null && pickedElem.upDownEventsBubbleToDisplay) {
							hasEventDown = true;
						}
						pickedElem = pickedElem.upDownEventsBubbleTo;
					}
					_this.lockMouseDown |= 1 << button;
					_this.lastMouseDownIndex[button] = pickedIndex;
					if(hasEventDown) {
						if(_this.onPointerDown != null) {
							_this.onPointerDown(_this,{ x : x, y : y, type : 0, mouseButton : button});
						}
						_this.isMouseDown |= 1 << button;
						hasEventDown = !_this.upDownEventsBubble;
					} else {
						hasEventDown = true;
					}
				} else {
					if(_this.onPointerDown != null) {
						_this.onPointerDown(_this,{ x : x, y : y, type : 0, mouseButton : button});
					}
					_this.isMouseDown |= 1 << button;
					hasEventDown = !_this.upDownEventsBubble;
				}
			}
		}
		if(hasEventDown) {
			break;
		}
	}
};
peote_ui_PeoteUIDisplay.mouseUpActive = function(mouseX,mouseY,button) {
	var _g = 0;
	var _g1 = peote_ui_PeoteUIDisplay.maxActiveIndex;
	while(_g < _g1) {
		var i = _g++;
		var _this = peote_ui_PeoteUIDisplay.activeUIDisplay[i];
		if(_this.mouseEnabled && _this.peoteView != null) {
			var x = mouseX | 0;
			var y = mouseY | 0;
			var _lastMouseDownIndex = _this.lastMouseDownIndex[button];
			if(_lastMouseDownIndex >= 0) {
				var lastMouseDownElem = _this.clickPickBuffer.getElement(_lastMouseDownIndex).uiElement;
				var startClick = false;
				var px = x;
				var py = y;
				px = px / _this.peoteView.xz - _this.peoteView.xOffset | 0;
				py = py / _this.peoteView.yz - _this.peoteView.yOffset | 0;
				var pickedIndex = px >= _this.x && px < _this.x + _this.width && py >= _this.y && py < _this.y + _this.height ? _this.peoteView.getElementAt(mouseX,mouseY,_this,_this.clickPickProgram) : -1;
				var pickedElem = null;
				if(pickedIndex >= 0) {
					pickedElem = _this.clickPickBuffer.getElement(pickedIndex).uiElement;
					if(lastMouseDownElem.intoUpDownEventBubbleOf(pickedElem)) {
						startClick = true;
					}
				}
				while(lastMouseDownElem != null) {
					lastMouseDownElem.pointerUp({ x : x, y : y, type : 0, mouseButton : button});
					if(!startClick && pickedElem == lastMouseDownElem) {
						startClick = true;
					}
					if(startClick) {
						lastMouseDownElem.pointerClick({ x : x, y : y, type : 0, mouseButton : button});
					}
					lastMouseDownElem = lastMouseDownElem.upDownEventsBubbleTo;
				}
				_this.lastMouseDownIndex[button] = -1;
				_this.lockMouseDown -= 1 << button;
			}
			if((_this.isMouseDown & 1 << button) != 0) {
				if(_this.onPointerUp != null) {
					_this.onPointerUp(_this,{ x : x, y : y, type : 0, mouseButton : button});
				}
				if(_this.onPointerClick != null && _this.isMouseOver) {
					_this.onPointerClick(_this,{ x : x, y : y, type : 0, mouseButton : button});
				}
				_this.isMouseDown -= 1 << button;
			}
		}
	}
};
peote_ui_PeoteUIDisplay.mouseWheelActive = function(dx,dy,mode) {
	var _g = 0;
	var _g1 = peote_ui_PeoteUIDisplay.maxActiveIndex;
	while(_g < _g1) {
		var i = _g++;
		var _this = peote_ui_PeoteUIDisplay.activeUIDisplay[i];
		if(_this.mouseEnabled && _this.lastMouseOverIndex >= 0 && _this.peoteView != null) {
			var lastElem = _this.movePickBuffer.getElement(_this.lastMouseOverIndex).uiElement;
			while(lastElem != null) {
				lastElem.mouseWheel({ deltaX : dx, deltaY : dy, deltaMode : mode});
				lastElem = lastElem.wheelEventsBubbleTo;
			}
		}
	}
};
peote_ui_PeoteUIDisplay.touchMoveActive = function(touch) {
	var checkForEvent = 3;
	if(peote_ui_PeoteUIDisplay.draggingTouchDisplays.length > 0) {
		var _g = 0;
		var _g1 = peote_ui_PeoteUIDisplay.draggingTouchDisplays;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			if(d.touchEnabled && (d.isTouchDown & 1 << touch.id) > 0) {
				if(d.peoteView != null) {
					var toX = Math.round(touch.x * d.peoteView.width) / d.peoteView.xz / d.xz | 0;
					var toY = Math.round(touch.y * d.peoteView.height) / d.peoteView.yz / d.yz | 0;
					if(toX >= d.dragMinX + d.dragOriginX) {
						if(toX < d.dragMaxX - d.width + d.dragOriginX) {
							var _x = toX - d.dragOriginX;
							if(peote_view_Version.isUBO) {
								var _this = d.uniformBuffer;
								var gl = d.gl;
								if(gl != null) {
									_this.uniformBytes.b_UFloat32[0] = _x + d.xOffset;
									gl.bindBuffer(gl.UNIFORM_BUFFER,_this.uniformBuffer);
									gl.bufferSubData(gl.UNIFORM_BUFFER,0,_this.xOffestBufferPointer);
									gl.bindBuffer(gl.UNIFORM_BUFFER,null);
								}
							}
							d.x = _x;
						} else {
							var _x1 = d.dragMaxX - d.width;
							if(peote_view_Version.isUBO) {
								var _this1 = d.uniformBuffer;
								var gl1 = d.gl;
								if(gl1 != null) {
									_this1.uniformBytes.b_UFloat32[0] = _x1 + d.xOffset;
									gl1.bindBuffer(gl1.UNIFORM_BUFFER,_this1.uniformBuffer);
									gl1.bufferSubData(gl1.UNIFORM_BUFFER,0,_this1.xOffestBufferPointer);
									gl1.bindBuffer(gl1.UNIFORM_BUFFER,null);
								}
							}
							d.x = _x1;
						}
					} else {
						var _x2 = d.dragMinX;
						if(peote_view_Version.isUBO) {
							var _this2 = d.uniformBuffer;
							var gl2 = d.gl;
							if(gl2 != null) {
								_this2.uniformBytes.b_UFloat32[0] = _x2 + d.xOffset;
								gl2.bindBuffer(gl2.UNIFORM_BUFFER,_this2.uniformBuffer);
								gl2.bufferSubData(gl2.UNIFORM_BUFFER,0,_this2.xOffestBufferPointer);
								gl2.bindBuffer(gl2.UNIFORM_BUFFER,null);
							}
						}
						d.x = _x2;
					}
					if(toY >= d.dragMinY + d.dragOriginY) {
						if(toY < d.dragMaxY - d.height + d.dragOriginY) {
							var _y = toY - d.dragOriginY;
							if(peote_view_Version.isUBO) {
								var _this3 = d.uniformBuffer;
								var gl3 = d.gl;
								if(gl3 != null) {
									_this3.uniformBytes.b_UFloat32[1] = _y + d.yOffset;
									gl3.bindBuffer(gl3.UNIFORM_BUFFER,_this3.uniformBuffer);
									gl3.bufferSubData(gl3.UNIFORM_BUFFER,4,_this3.yOffestBufferPointer);
									gl3.bindBuffer(gl3.UNIFORM_BUFFER,null);
								}
							}
							d.y = _y;
						} else {
							var _y1 = d.dragMaxY - d.height;
							if(peote_view_Version.isUBO) {
								var _this4 = d.uniformBuffer;
								var gl4 = d.gl;
								if(gl4 != null) {
									_this4.uniformBytes.b_UFloat32[1] = _y1 + d.yOffset;
									gl4.bindBuffer(gl4.UNIFORM_BUFFER,_this4.uniformBuffer);
									gl4.bufferSubData(gl4.UNIFORM_BUFFER,4,_this4.yOffestBufferPointer);
									gl4.bindBuffer(gl4.UNIFORM_BUFFER,null);
								}
							}
							d.y = _y1;
						}
					} else {
						var _y2 = d.dragMinY;
						if(peote_view_Version.isUBO) {
							var _this5 = d.uniformBuffer;
							var gl5 = d.gl;
							if(gl5 != null) {
								_this5.uniformBytes.b_UFloat32[1] = _y2 + d.yOffset;
								gl5.bindBuffer(gl5.UNIFORM_BUFFER,_this5.uniformBuffer);
								gl5.bufferSubData(gl5.UNIFORM_BUFFER,4,_this5.yOffestBufferPointer);
								gl5.bindBuffer(gl5.UNIFORM_BUFFER,null);
							}
						}
						d.y = _y2;
					}
				}
			}
		}
	} else {
		var _g = 0;
		var _g1 = peote_ui_PeoteUIDisplay.maxActiveIndex;
		while(_g < _g1) {
			var i = _g++;
			var _this = peote_ui_PeoteUIDisplay.activeUIDisplay[i];
			var checkForEvent1 = checkForEvent;
			if(checkForEvent1 == null) {
				checkForEvent1 = 3;
			}
			if(_this.touchEnabled && _this.peoteView != null && touch.id < _this.maxTouchpoints) {
				var x = Math.round(touch.x * _this.peoteView.width);
				var y = Math.round(touch.y * _this.peoteView.height);
				var isInside = false;
				var pickedIndex = -1;
				var checkForEvent2;
				if(checkForEvent1 > 0) {
					var px = x;
					var py = y;
					px = px / _this.peoteView.xz - _this.peoteView.xOffset | 0;
					py = py / _this.peoteView.yz - _this.peoteView.yOffset | 0;
					checkForEvent2 = px >= _this.x && px < _this.x + _this.width && py >= _this.y && py < _this.y + _this.height;
				} else {
					checkForEvent2 = false;
				}
				if(checkForEvent2) {
					isInside = true;
					pickedIndex = _this.peoteView.getElementAt(x,y,_this,_this.movePickProgram);
				}
				var draggingTouchElemArray = _this.draggingTouchElements[touch.id];
				if(draggingTouchElemArray.length > 0) {
					var _g2 = 0;
					while(_g2 < draggingTouchElemArray.length) {
						var uiElement = draggingTouchElemArray[_g2];
						++_g2;
						var dragToX = x;
						var dragToY = y;
						dragToX = dragToX / uiElement.uiDisplay.peoteView.xz / uiElement.uiDisplay.xz | 0;
						dragToY = dragToY / uiElement.uiDisplay.peoteView.yz / uiElement.uiDisplay.yz | 0;
						if(dragToX >= uiElement.dragMinX + uiElement.dragOriginX) {
							if(dragToX < uiElement.dragMaxX - uiElement.width + uiElement.dragOriginX) {
								uiElement.x = dragToX - uiElement.dragOriginX;
							} else {
								uiElement.x = uiElement.dragMaxX - uiElement.width;
							}
						} else {
							uiElement.x = uiElement.dragMinX;
						}
						if(dragToY >= uiElement.dragMinY + uiElement.dragOriginY) {
							if(dragToY < uiElement.dragMaxY - uiElement.height + uiElement.dragOriginY) {
								uiElement.y = dragToY - uiElement.dragOriginY;
							} else {
								uiElement.y = uiElement.dragMaxY - uiElement.height;
							}
						} else {
							uiElement.y = uiElement.dragMinY;
						}
						if(uiElement.drag != null) {
							uiElement.drag((uiElement.x - uiElement.dragMinX) / (uiElement.dragMaxX - uiElement.dragMinX - uiElement.width),(uiElement.y - uiElement.dragMinY) / (uiElement.dragMaxY - uiElement.dragMinY - uiElement.height));
						}
						_this.update(uiElement);
					}
				} else {
					var hasEventOver = false;
					var hasEventOut = false;
					var lastOverIndex = _this.lastTouchOverIndex[touch.id];
					if(pickedIndex != lastOverIndex) {
						if(lastOverIndex >= 0) {
							var lastElem = _this.movePickBuffer.getElement(lastOverIndex).uiElement;
							if(pickedIndex >= 0) {
								var pickedElem = _this.movePickBuffer.getElement(pickedIndex).uiElement;
								if(lastElem.intoOverOutEventBubbleOf(pickedElem)) {
									while(pickedElem != null && pickedElem != lastElem) {
										pickedElem.pointerOver({ x : x, y : y, type : 1, touch : touch});
										if(pickedElem.overOutEventsBubbleTo == null && !pickedElem.overOutEventsBubbleToDisplay) {
											hasEventOut = true;
										}
										pickedElem = pickedElem.overOutEventsBubbleTo;
									}
								} else {
									while(lastElem != null && lastElem != pickedElem) {
										lastElem.pointerOut({ x : x, y : y, type : 1, touch : touch});
										if(lastElem.overOutEventsBubbleTo == null && !lastElem.overOutEventsBubbleToDisplay) {
											hasEventOver = true;
										}
										lastElem = lastElem.overOutEventsBubbleTo;
									}
									if(lastElem == null) {
										while(pickedElem != null) {
											pickedElem.pointerOver({ x : x, y : y, type : 1, touch : touch});
											if(pickedElem.overOutEventsBubbleTo == null && !pickedElem.overOutEventsBubbleToDisplay) {
												hasEventOut = true;
											}
											pickedElem = pickedElem.overOutEventsBubbleTo;
										}
									}
								}
							} else {
								while(lastElem != null) {
									lastElem.pointerOut({ x : x, y : y, type : 1, touch : touch});
									if(lastElem.overOutEventsBubbleTo == null && !lastElem.overOutEventsBubbleToDisplay) {
										hasEventOver = true;
									}
									lastElem = lastElem.overOutEventsBubbleTo;
								}
							}
						} else if(pickedIndex >= 0) {
							var pickedElem1 = _this.movePickBuffer.getElement(pickedIndex).uiElement;
							while(pickedElem1 != null) {
								pickedElem1.pointerOver({ x : x, y : y, type : 1, touch : touch});
								if(pickedElem1.overOutEventsBubbleTo == null && !pickedElem1.overOutEventsBubbleToDisplay) {
									hasEventOut = true;
								}
								pickedElem1 = pickedElem1.overOutEventsBubbleTo;
							}
						}
						_this.lastTouchOverIndex[touch.id] = pickedIndex;
					}
					if((checkForEvent1 & 2) != 0) {
						var hasEventMove = false;
						if(pickedIndex >= 0) {
							var pickedElem2 = _this.movePickBuffer.getElement(pickedIndex).uiElement;
							while(pickedElem2 != null) {
								pickedElem2.pointerMove({ x : x, y : y, type : 1, touch : touch});
								if(pickedElem2.moveEventsBubbleTo == null && pickedElem2.moveEventsBubbleToDisplay) {
									hasEventMove = true;
								}
								pickedElem2 = pickedElem2.moveEventsBubbleTo;
							}
						} else {
							hasEventMove = true;
						}
						if(hasEventMove && (_this.isTouchDown & 1 << touch.id) > 0) {
							if(_this.onPointerMove != null) {
								_this.onPointerMove(_this,{ x : x, y : y, type : 1, touch : touch});
							}
							if(!_this.moveEventsBubble) {
								checkForEvent1 -= 2;
							}
						} else {
							checkForEvent1 -= 2;
						}
					}
					if((checkForEvent1 & 1) != 0 && (_this.isTouchDown & 1 << touch.id) > 0) {
						if(isInside) {
							if(!_this.isTouchInside) {
								_this.isTouchInside = true;
								hasEventOver = true;
							}
						} else if(_this.isTouchInside) {
							_this.isTouchInside = false;
							hasEventOut = true;
						}
						if(hasEventOver && !hasEventOut && !_this.isTouchOver) {
							haxe_Log.trace("KK",{ fileName : "peote/ui/PeoteUIDisplay.hx", lineNumber : 724, className : "peote.ui.PeoteUIDisplay", methodName : "touchMove"});
							if(_this.onPointerOver != null) {
								_this.onPointerOver(_this,{ x : x, y : y, type : 1, touch : touch});
							}
							_this.isTouchOver = true;
						} else if(hasEventOut && !hasEventOver && _this.isTouchOver) {
							if(_this.onPointerOut != null) {
								_this.onPointerOut(_this,{ x : x, y : y, type : 1, touch : touch});
							}
							_this.isTouchOver = false;
						}
						if(_this.isTouchInside) {
							if(!_this.isTouchOver || !_this.overOutEventsBubble) {
								--checkForEvent1;
							}
						}
					} else if(_this.isTouchInside) {
						if(_this.onPointerOut != null) {
							_this.onPointerOut(_this,{ x : x, y : y, type : 0});
						}
						_this.isTouchInside = _this.isTouchOver = false;
					}
				}
			}
			checkForEvent = checkForEvent1;
		}
	}
};
peote_ui_PeoteUIDisplay.touchStartActive = function(touch) {
	var _g = 0;
	var _g1 = peote_ui_PeoteUIDisplay.maxActiveIndex;
	while(_g < _g1) {
		var i = _g++;
		var _this = peote_ui_PeoteUIDisplay.activeUIDisplay[i];
		var hasEventDown = false;
		var hasEventOver = false;
		if(_this.touchEnabled && (_this.lockTouchDown & 1 << touch.id) == 0 && _this.peoteView != null && touch.id < _this.maxTouchpoints) {
			var x = Math.round(touch.x * _this.peoteView.width);
			var y = Math.round(touch.y * _this.peoteView.height);
			var px = x;
			var py = y;
			px = px / _this.peoteView.xz - _this.peoteView.xOffset | 0;
			py = py / _this.peoteView.yz - _this.peoteView.yOffset | 0;
			if(px >= _this.x && px < _this.x + _this.width && py >= _this.y && py < _this.y + _this.height) {
				var pickedIndex = _this.peoteView.getElementAt(x,y,_this,_this.movePickProgram);
				if(pickedIndex >= 0) {
					var pickedElem = _this.movePickBuffer.getElement(pickedIndex).uiElement;
					while(pickedElem != null) {
						pickedElem.pointerOver({ x : x, y : y, type : 1, touch : touch});
						if(pickedElem.overOutEventsBubbleTo == null && pickedElem.overOutEventsBubbleToDisplay) {
							hasEventOver = true;
						}
						pickedElem = pickedElem.overOutEventsBubbleTo;
					}
					_this.lastTouchOverIndex[touch.id] = pickedIndex;
				} else {
					hasEventOver = true;
				}
				var touchDownIndex = _this.peoteView.getElementAt(x,y,_this,_this.clickPickProgram);
				if(touchDownIndex >= 0) {
					var pickedElem1 = _this.clickPickBuffer.getElement(touchDownIndex).uiElement;
					while(pickedElem1 != null) {
						pickedElem1.pointerDown({ x : x, y : y, type : 1, touch : touch});
						if(pickedElem1.upDownEventsBubbleTo == null && pickedElem1.upDownEventsBubbleToDisplay) {
							hasEventDown = true;
						}
						pickedElem1 = pickedElem1.upDownEventsBubbleTo;
					}
					_this.lockTouchDown |= 1 << touch.id;
					_this.lastTouchDownIndex[touch.id] = touchDownIndex;
				} else {
					hasEventDown = true;
				}
				haxe_Log.trace("hasEventOver",{ fileName : "peote/ui/PeoteUIDisplay.hx", lineNumber : 838, className : "peote.ui.PeoteUIDisplay", methodName : "touchStart", customParams : [hasEventOver,"isTouchOver",_this.isTouchOver]});
				if(hasEventOver && !_this.isTouchOver) {
					if(_this.onPointerOver != null) {
						_this.onPointerOver(_this,{ x : x, y : y, type : 1, touch : touch});
					}
					_this.isTouchOver = true;
					hasEventOver = !_this.overOutEventsBubble;
				} else {
					hasEventOver = true;
				}
				haxe_Log.trace("hasEventDown",{ fileName : "peote/ui/PeoteUIDisplay.hx", lineNumber : 846, className : "peote.ui.PeoteUIDisplay", methodName : "touchStart", customParams : [hasEventDown]});
				if(hasEventDown) {
					if(_this.onPointerDown != null) {
						_this.onPointerDown(_this,{ x : x, y : y, type : 1, touch : touch});
					}
					_this.isTouchDown |= 1 << touch.id;
					hasEventDown = !_this.upDownEventsBubble;
				} else {
					hasEventDown = true;
				}
			}
		}
		if(hasEventOver || hasEventDown) {
			break;
		}
	}
};
peote_ui_PeoteUIDisplay.touchEndActive = function(touch) {
	var _g = 0;
	var _g1 = peote_ui_PeoteUIDisplay.maxActiveIndex;
	while(_g < _g1) {
		var i = _g++;
		var _this = peote_ui_PeoteUIDisplay.activeUIDisplay[i];
		if(_this.touchEnabled && _this.peoteView != null && touch.id < _this.maxTouchpoints) {
			var x = Math.round(touch.x * _this.peoteView.width);
			var y = Math.round(touch.y * _this.peoteView.height);
			var pickedIndex;
			var pickedElem = null;
			var _lastTouchDownIndex = _this.lastTouchDownIndex[touch.id];
			if(_lastTouchDownIndex >= 0) {
				var lastTouchDownElem = _this.clickPickBuffer.getElement(_lastTouchDownIndex).uiElement;
				var startClick = false;
				var px = x;
				var py = y;
				px = px / _this.peoteView.xz - _this.peoteView.xOffset | 0;
				py = py / _this.peoteView.yz - _this.peoteView.yOffset | 0;
				pickedIndex = px >= _this.x && px < _this.x + _this.width && py >= _this.y && py < _this.y + _this.height ? _this.peoteView.getElementAt(x,y,_this,_this.clickPickProgram) : -1;
				if(pickedIndex >= 0) {
					pickedElem = _this.clickPickBuffer.getElement(pickedIndex).uiElement;
					if(lastTouchDownElem.intoUpDownEventBubbleOf(pickedElem)) {
						startClick = true;
					}
				}
				while(lastTouchDownElem != null) {
					lastTouchDownElem.pointerUp({ x : x, y : y, type : 1, touch : touch});
					if(!startClick && pickedElem == lastTouchDownElem) {
						startClick = true;
					}
					if(startClick) {
						lastTouchDownElem.pointerClick({ x : x, y : y, type : 1, touch : touch});
					}
					lastTouchDownElem = lastTouchDownElem.upDownEventsBubbleTo;
				}
				_this.lastTouchDownIndex[touch.id] = -1;
				_this.lockTouchDown -= 1 << touch.id;
			}
			var px1 = x;
			var py1 = y;
			px1 = px1 / _this.peoteView.xz - _this.peoteView.xOffset | 0;
			py1 = py1 / _this.peoteView.yz - _this.peoteView.yOffset | 0;
			pickedIndex = px1 >= _this.x && px1 < _this.x + _this.width && py1 >= _this.y && py1 < _this.y + _this.height ? _this.peoteView.getElementAt(x,y,_this,_this.movePickProgram) : -1;
			if(pickedIndex >= 0 && pickedIndex == _this.lastTouchOverIndex[touch.id]) {
				pickedElem = _this.movePickBuffer.getElement(pickedIndex).uiElement;
				while(pickedElem != null) {
					pickedElem.pointerOut({ x : x, y : y, type : 1, touch : touch});
					pickedElem = pickedElem.overOutEventsBubbleTo;
				}
				_this.lastTouchOverIndex[touch.id] = -1;
			}
			if((_this.isTouchDown & 1 << touch.id) > 0) {
				_this.isTouchDown -= 1 << touch.id;
				if(_this.isTouchOver) {
					if(_this.onPointerOut != null) {
						_this.onPointerOut(_this,{ x : x, y : y, type : 1, touch : touch});
					}
					_this.isTouchOver = false;
				}
				if(_this.onPointerUp != null) {
					_this.onPointerUp(_this,{ x : x, y : y, type : 1, touch : touch});
				}
				var tmp;
				if(_this.onPointerClick != null) {
					var px2 = x;
					var py2 = y;
					px2 = px2 / _this.peoteView.xz - _this.peoteView.xOffset | 0;
					py2 = py2 / _this.peoteView.yz - _this.peoteView.yOffset | 0;
					tmp = px2 >= _this.x && px2 < _this.x + _this.width && py2 >= _this.y && py2 < _this.y + _this.height;
				} else {
					tmp = false;
				}
				if(tmp) {
					_this.onPointerClick(_this,{ x : x, y : y, type : 1, touch : touch});
				}
			}
		}
	}
};
peote_ui_PeoteUIDisplay.touchCancelActive = function(touch) {
	var _g = 0;
	var _g1 = peote_ui_PeoteUIDisplay.maxActiveIndex;
	while(_g < _g1) {
		var i = _g++;
		var _this = peote_ui_PeoteUIDisplay.activeUIDisplay[i];
		haxe_Log.trace("onTouchCancel",{ fileName : "peote/ui/PeoteUIDisplay.hx", lineNumber : 990, className : "peote.ui.PeoteUIDisplay", methodName : "touchCancel", customParams : [touch.id,Math.round(touch.x * _this.peoteView.width),Math.round(touch.y * _this.peoteView.height)]});
	}
};
peote_ui_PeoteUIDisplay.keyDownActive = function(keyCode,modifier) {
	var _g = 0;
	var _g1 = peote_ui_PeoteUIDisplay.maxActiveIndex;
	while(_g < _g1) {
		var i = _g++;
		var _this = peote_ui_PeoteUIDisplay.activeUIDisplay[i];
		if(lime_ui_KeyModifier.get_altKey(modifier) && lime_ui_KeyModifier.get_ctrlKey(modifier)) {
			event.preventDefault();
		}
		if(_this.inputFocusElement != null) {
			if(keyCode == 9) {
				event.preventDefault();
			}
			_this.inputFocusElement.keyDown(keyCode,modifier);
		}
	}
};
peote_ui_PeoteUIDisplay.keyUpActive = function(keyCode,modifier) {
	var _g = 0;
	var _g1 = peote_ui_PeoteUIDisplay.maxActiveIndex;
	while(_g < _g1) {
		var i = _g++;
		var _this = peote_ui_PeoteUIDisplay.activeUIDisplay[i];
		if(_this.inputFocusElement != null) {
			_this.inputFocusElement.keyUp(keyCode,modifier);
		}
	}
};
peote_ui_PeoteUIDisplay.textInputActive = function(text) {
	if(peote_ui_PeoteUIDisplay.inputFocusUIDisplay != null) {
		var _this = peote_ui_PeoteUIDisplay.inputFocusUIDisplay;
		if(_this.inputFocusElement != null) {
			_this.inputFocusElement.textInput(text);
		}
	}
};
peote_ui_PeoteUIDisplay.windowLeaveActive = function() {
	var _g = 0;
	var _g1 = peote_ui_PeoteUIDisplay.maxActiveIndex;
	while(_g < _g1) {
		var i = _g++;
		var _this = peote_ui_PeoteUIDisplay.activeUIDisplay[i];
		var lastElem;
		if(_this.lastMouseOverIndex >= 0) {
			lastElem = _this.movePickBuffer.getElement(_this.lastMouseOverIndex).uiElement;
			while(lastElem != null) {
				lastElem.pointerOut({ x : -1, y : -1, type : 0});
				lastElem = lastElem.overOutEventsBubbleTo;
			}
			_this.lastMouseOverIndex = -1;
		}
		var lastIndex;
		var _g2 = 0;
		var _g3 = _this.lastMouseDownIndex.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			lastIndex = _this.lastMouseDownIndex[i1];
			if(lastIndex >= 0) {
				lastElem = _this.clickPickBuffer.getElement(lastIndex).uiElement;
				while(lastElem != null) {
					lastElem.pointerUp({ x : -1, y : -1, type : 0, mouseButton : i1});
					lastElem = lastElem.upDownEventsBubbleTo;
				}
				_this.lastMouseDownIndex[i1] = -1;
			}
		}
		_this.lockMouseDown = 0;
		if(_this.isMouseOver) {
			if(_this.onPointerOut != null) {
				_this.onPointerOut(_this,{ x : -1, y : -1, type : 0});
			}
			_this.isMouseInside = false;
			_this.isMouseOver = false;
		}
		var button = 0;
		while(_this.isMouseDown > 0) {
			if((_this.isMouseDown & 1 << button) > 0) {
				if(_this.onPointerUp != null) {
					_this.onPointerUp(_this,{ x : -1, y : -1, type : 0, mouseButton : button});
				}
				_this.isMouseDown -= 1 << button;
			}
			++button;
		}
		var _g4 = 0;
		var _g5 = _this.lastTouchOverIndex.length;
		while(_g4 < _g5) {
			var i2 = _g4++;
			lastIndex = _this.lastTouchOverIndex[i2];
			if(lastIndex >= 0) {
				lastElem = _this.movePickBuffer.getElement(lastIndex).uiElement;
				while(lastElem != null) {
					lastElem.pointerOut({ x : -1, y : -1, type : 1, touch : new lime_ui_Touch(-1,-1,i2,0,0,0,0)});
					lastElem = lastElem.overOutEventsBubbleTo;
				}
				_this.lastTouchOverIndex[i2] = -1;
			}
		}
		var _g6 = 0;
		var _g7 = _this.lastTouchDownIndex.length;
		while(_g6 < _g7) {
			var i3 = _g6++;
			lastIndex = _this.lastTouchDownIndex[i3];
			if(lastIndex >= 0) {
				lastElem = _this.clickPickBuffer.getElement(lastIndex).uiElement;
				while(lastElem != null) {
					lastElem.pointerUp({ x : -1, y : -1, type : 1, touch : new lime_ui_Touch(-1,-1,i3,0,0,0,0)});
					lastElem = lastElem.upDownEventsBubbleTo;
				}
				_this.lastTouchDownIndex[i3] = -1;
			}
		}
		_this.lockTouchDown = 0;
		if(_this.isTouchOver) {
			if(_this.onPointerOut != null) {
				_this.onPointerOut(_this,{ x : -1, y : -1, type : 1, touch : new lime_ui_Touch(-1,-1,0,0,0,0,0)});
			}
			_this.isTouchInside = false;
			_this.isTouchOver = false;
		}
		var touchID = 0;
		while(_this.isTouchDown > 0) {
			if((_this.isTouchDown & 1 << touchID) > 0) {
				if(_this.onPointerUp != null) {
					_this.onPointerUp(_this,{ x : -1, y : -1, type : 1, touch : new lime_ui_Touch(-1,-1,touchID,0,0,0,0)});
				}
				_this.isTouchDown -= 1 << touchID;
			}
			++touchID;
		}
	}
};
peote_ui_PeoteUIDisplay.registerEvents = function($window) {
	$window.__backend.setTextInputEnabled(true);
	$window.onMouseUp.add(peote_ui_PeoteUIDisplay.mouseUpActive);
	$window.onMouseDown.add(peote_ui_PeoteUIDisplay.mouseDownActive);
	$window.onMouseWheel.add(peote_ui_PeoteUIDisplay.mouseWheelActive);
	lime_ui_Touch.onStart.add(peote_ui_PeoteUIDisplay.touchStartActive);
	lime_ui_Touch.onMove.add(peote_ui_PeoteUIDisplay.touchMoveActive);
	lime_ui_Touch.onEnd.add(peote_ui_PeoteUIDisplay.touchEndActive);
	lime_ui_Touch.onCancel.add(peote_ui_PeoteUIDisplay.touchCancelActive);
	$window.onMouseMove.add(peote_ui_PeoteUIDisplay.mouseMoveActive);
	$window.onLeave.add(peote_ui_PeoteUIDisplay.windowLeaveActive);
	$window.onActivate.add(peote_ui_PeoteUIDisplay._windowActivateHackFocus);
	$window.onKeyDown.add(peote_ui_PeoteUIDisplay.keyDownActive);
	$window.onKeyUp.add(peote_ui_PeoteUIDisplay.keyUpActive);
	$window.onTextInput.add(peote_ui_PeoteUIDisplay.textInputActive);
};
peote_ui_PeoteUIDisplay._windowActivateHackFocus = function() {
	lime__$internal_backend_html5_HTML5Window.textInput.focus();
};
peote_ui_PeoteUIDisplay.__super__ = peote_view_Display;
peote_ui_PeoteUIDisplay.prototype = $extend(peote_view_Display.prototype,{
	addToPeoteView: function(peoteView,atDisplay,addBefore) {
		if(addBefore == null) {
			addBefore = false;
		}
		if(this.peoteView == peoteView) {
			var _g = this.activeIndex + 1;
			var _g1 = peote_ui_PeoteUIDisplay.maxActiveIndex;
			while(_g < _g1) {
				var i = _g++;
				var d = peote_ui_PeoteUIDisplay.activeUIDisplay[i];
				d.activeIndex = i - 1;
				peote_ui_PeoteUIDisplay.activeUIDisplay[d.activeIndex] = d;
			}
			peote_ui_PeoteUIDisplay.maxActiveIndex--;
		}
		peote_view_Display.prototype.addToPeoteView.call(this,peoteView,atDisplay,addBefore);
		var _this = this.movePickProgram;
		var newGl = peoteView.gl;
		if(newGl != null && newGl != _this.gl) {
			var _g = 0;
			var _g1 = _this.displays;
			while(_g < _g1.length) {
				var d = _g1[_g];
				++_g;
				if(d.gl != null && d.gl != newGl) {
					throw haxe_Exception.thrown("Error, program can not used inside different gl-contexts");
				}
			}
			if(_this.gl != null) {
				_this.gl.deleteShader(_this.glVertexShader);
				_this.gl.deleteShader(_this.glFragmentShader);
				_this.gl.deleteProgram(_this.glProgram);
				if(_this.buffer.hasPicking()) {
					_this.gl.deleteShader(_this.glVertexShaderPicking);
					_this.gl.deleteShader(_this.glFragmentShaderPicking);
					_this.gl.deleteProgram(_this.glProgramPicking);
				}
			}
			_this.gl = newGl;
			if(peote_view_Version.isES3) {
				_this.glShaderConfig.isES3 = true;
				_this.glShaderConfig.IN = "in";
				_this.glShaderConfig.VARIN = "in";
				_this.glShaderConfig.VAROUT = "out";
			}
			if(peote_view_Version.isUBO) {
				_this.glShaderConfig.isUBO = true;
			}
			if(peote_view_Version.isINSTANCED) {
				_this.glShaderConfig.isINSTANCED = true;
			}
			_this.glShaderConfig.FRAGMENT_EXTENSIONS = [];
			if(_this.gl.getExtension("OES_standard_derivatives") != null) {
				_this.glShaderConfig.FRAGMENT_EXTENSIONS.push({ EXTENSION : "GL_OES_standard_derivatives"});
			}
			if(_this.gl.getExtension("EXT_color_buffer_float") != null) {
				_this.glShaderConfig.FRAGMENT_EXTENSIONS.push({ EXTENSION : "EXT_color_buffer_float"});
			} else if(_this.gl.getExtension("OES_texture_float") != null) {
				_this.glShaderConfig.FRAGMENT_EXTENSIONS.push({ EXTENSION : "OES_texture_float"});
			}
			_this.buffer.setNewGLContext(_this.gl);
			_this.createProg();
			if(_this.buffer.hasPicking()) {
				_this.createProg(true);
			}
			var _g = 0;
			var _g1 = _this.activeTextures;
			while(_g < _g1.length) {
				var t = _g1[_g];
				++_g;
				var newGl = _this.gl;
				if(newGl != null && newGl != t.gl) {
					var _g2 = 0;
					var _g3 = t.programs;
					while(_g2 < _g3.length) {
						var p = _g3[_g2];
						++_g2;
						if(p.gl != null && p.gl != newGl) {
							throw haxe_Exception.thrown("Error, texture can not used inside different gl-contexts");
						}
					}
					var _g4 = 0;
					var _g5 = t.displays;
					while(_g4 < _g5.length) {
						var d = _g5[_g4];
						++_g4;
						if(d.gl != null && d.gl != newGl) {
							throw haxe_Exception.thrown("Error, texture can not used inside different gl-contexts");
						}
					}
					if(t.gl != null) {
						t.gl.deleteTexture(t.glTexture);
						t.glTexture = null;
						if(t.displays.length == 0 && t.framebuffer != null) {
							t.gl.deleteFramebuffer(t.framebuffer);
							t.framebuffer = null;
							if(t.glDepthBuffer != null) {
								t.gl.deleteRenderbuffer(t.glDepthBuffer);
							}
							t.glDepthBuffer = null;
						}
					}
					t.gl = newGl;
					if(t.width > t.gl.getParameter(t.gl.MAX_TEXTURE_SIZE) || t.height > t.gl.getParameter(t.gl.MAX_TEXTURE_SIZE)) {
						throw haxe_Exception.thrown("Error, texture size is greater then gl.MAX_TEXTURE_SIZE");
					}
					t.glTexture = peote_view_utils_TexUtils.createEmptyTexture(t.gl,t.width,t.height,t.colorChannels,t.createMipmaps,t.magFilter,t.minFilter,t.useFloat);
					if(t.displays.length > 0 && t.framebuffer == null) {
						t.glDepthBuffer = t.gl.createRenderbuffer();
						var gl = t.gl;
						var texture = t.glTexture;
						var depthBuffer = t.glDepthBuffer;
						var width = t.width;
						var height = t.height;
						var framebuffer = gl.createFramebuffer();
						gl.bindRenderbuffer(gl.RENDERBUFFER,depthBuffer);
						peote_view_utils_GLTool.clearGlErrorQueue(gl);
						gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT24,width,height);
						if(peote_view_utils_GLTool.getLastGlError(gl) == gl.INVALID_ENUM) {
							haxe_Log.trace("switching to DEPTH_COMPONENT16 for framebuffer",{ fileName : "peote/view/utils/GLTool.hx", lineNumber : 41, className : "peote.view.utils.GLTool", methodName : "createFramebuffer"});
							gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT16,width,height);
						}
						gl.bindFramebuffer(gl.FRAMEBUFFER,framebuffer);
						gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,depthBuffer);
						gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,texture,0);
						if(gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
							throw haxe_Exception.thrown("Error: Framebuffer not complete!");
						}
						gl.bindFramebuffer(gl.FRAMEBUFFER,null);
						gl.bindRenderbuffer(gl.RENDERBUFFER,null);
						t.framebuffer = framebuffer;
						t.updated = true;
					}
					var image = t.images.keys();
					while(image.hasNext()) {
						var image1 = image.next();
						t.bufferImage(image1,t.images.h[image1.__id__]);
					}
				}
			}
		}
		var _this = this.clickPickProgram;
		var newGl = peoteView.gl;
		if(newGl != null && newGl != _this.gl) {
			var _g = 0;
			var _g1 = _this.displays;
			while(_g < _g1.length) {
				var d = _g1[_g];
				++_g;
				if(d.gl != null && d.gl != newGl) {
					throw haxe_Exception.thrown("Error, program can not used inside different gl-contexts");
				}
			}
			if(_this.gl != null) {
				_this.gl.deleteShader(_this.glVertexShader);
				_this.gl.deleteShader(_this.glFragmentShader);
				_this.gl.deleteProgram(_this.glProgram);
				if(_this.buffer.hasPicking()) {
					_this.gl.deleteShader(_this.glVertexShaderPicking);
					_this.gl.deleteShader(_this.glFragmentShaderPicking);
					_this.gl.deleteProgram(_this.glProgramPicking);
				}
			}
			_this.gl = newGl;
			if(peote_view_Version.isES3) {
				_this.glShaderConfig.isES3 = true;
				_this.glShaderConfig.IN = "in";
				_this.glShaderConfig.VARIN = "in";
				_this.glShaderConfig.VAROUT = "out";
			}
			if(peote_view_Version.isUBO) {
				_this.glShaderConfig.isUBO = true;
			}
			if(peote_view_Version.isINSTANCED) {
				_this.glShaderConfig.isINSTANCED = true;
			}
			_this.glShaderConfig.FRAGMENT_EXTENSIONS = [];
			if(_this.gl.getExtension("OES_standard_derivatives") != null) {
				_this.glShaderConfig.FRAGMENT_EXTENSIONS.push({ EXTENSION : "GL_OES_standard_derivatives"});
			}
			if(_this.gl.getExtension("EXT_color_buffer_float") != null) {
				_this.glShaderConfig.FRAGMENT_EXTENSIONS.push({ EXTENSION : "EXT_color_buffer_float"});
			} else if(_this.gl.getExtension("OES_texture_float") != null) {
				_this.glShaderConfig.FRAGMENT_EXTENSIONS.push({ EXTENSION : "OES_texture_float"});
			}
			_this.buffer.setNewGLContext(_this.gl);
			_this.createProg();
			if(_this.buffer.hasPicking()) {
				_this.createProg(true);
			}
			var _g = 0;
			var _g1 = _this.activeTextures;
			while(_g < _g1.length) {
				var t = _g1[_g];
				++_g;
				var newGl = _this.gl;
				if(newGl != null && newGl != t.gl) {
					var _g2 = 0;
					var _g3 = t.programs;
					while(_g2 < _g3.length) {
						var p = _g3[_g2];
						++_g2;
						if(p.gl != null && p.gl != newGl) {
							throw haxe_Exception.thrown("Error, texture can not used inside different gl-contexts");
						}
					}
					var _g4 = 0;
					var _g5 = t.displays;
					while(_g4 < _g5.length) {
						var d = _g5[_g4];
						++_g4;
						if(d.gl != null && d.gl != newGl) {
							throw haxe_Exception.thrown("Error, texture can not used inside different gl-contexts");
						}
					}
					if(t.gl != null) {
						t.gl.deleteTexture(t.glTexture);
						t.glTexture = null;
						if(t.displays.length == 0 && t.framebuffer != null) {
							t.gl.deleteFramebuffer(t.framebuffer);
							t.framebuffer = null;
							if(t.glDepthBuffer != null) {
								t.gl.deleteRenderbuffer(t.glDepthBuffer);
							}
							t.glDepthBuffer = null;
						}
					}
					t.gl = newGl;
					if(t.width > t.gl.getParameter(t.gl.MAX_TEXTURE_SIZE) || t.height > t.gl.getParameter(t.gl.MAX_TEXTURE_SIZE)) {
						throw haxe_Exception.thrown("Error, texture size is greater then gl.MAX_TEXTURE_SIZE");
					}
					t.glTexture = peote_view_utils_TexUtils.createEmptyTexture(t.gl,t.width,t.height,t.colorChannels,t.createMipmaps,t.magFilter,t.minFilter,t.useFloat);
					if(t.displays.length > 0 && t.framebuffer == null) {
						t.glDepthBuffer = t.gl.createRenderbuffer();
						var gl = t.gl;
						var texture = t.glTexture;
						var depthBuffer = t.glDepthBuffer;
						var width = t.width;
						var height = t.height;
						var framebuffer = gl.createFramebuffer();
						gl.bindRenderbuffer(gl.RENDERBUFFER,depthBuffer);
						peote_view_utils_GLTool.clearGlErrorQueue(gl);
						gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT24,width,height);
						if(peote_view_utils_GLTool.getLastGlError(gl) == gl.INVALID_ENUM) {
							haxe_Log.trace("switching to DEPTH_COMPONENT16 for framebuffer",{ fileName : "peote/view/utils/GLTool.hx", lineNumber : 41, className : "peote.view.utils.GLTool", methodName : "createFramebuffer"});
							gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT16,width,height);
						}
						gl.bindFramebuffer(gl.FRAMEBUFFER,framebuffer);
						gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,depthBuffer);
						gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,texture,0);
						if(gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
							throw haxe_Exception.thrown("Error: Framebuffer not complete!");
						}
						gl.bindFramebuffer(gl.FRAMEBUFFER,null);
						gl.bindRenderbuffer(gl.RENDERBUFFER,null);
						t.framebuffer = framebuffer;
						t.updated = true;
					}
					var image = t.images.keys();
					while(image.hasNext()) {
						var image1 = image.next();
						t.bufferImage(image1,t.images.h[image1.__id__]);
					}
				}
			}
		}
		var addBefore1 = addBefore;
		if(addBefore1 == null) {
			addBefore1 = false;
		}
		if(addBefore1 && (atDisplay == null || atDisplay == this.peoteView.displayList.first.value)) {
			this.activeIndex = peote_ui_PeoteUIDisplay.maxActiveIndex;
		} else {
			var displayListItem = this.peoteView.displayList.first;
			var toItem = this.peoteView.displayList.itemMap.h[this.__id__];
			var i = peote_ui_PeoteUIDisplay.maxActiveIndex;
			while(displayListItem != toItem) {
				if(((displayListItem.value) instanceof peote_ui_PeoteUIDisplay)) {
					var d = displayListItem.value;
					i = d.activeIndex;
					d.activeIndex += 1;
					peote_ui_PeoteUIDisplay.activeUIDisplay[d.activeIndex] = d;
				}
				displayListItem = displayListItem.next;
			}
			this.activeIndex = i;
		}
		peote_ui_PeoteUIDisplay.maxActiveIndex++;
		peote_ui_PeoteUIDisplay.activeUIDisplay[this.activeIndex] = this;
	}
	,add: function(uiElement) {
		if(uiElement.isVisible && uiElement.uiDisplay != null) {
			throw haxe_Exception.thrown("Error, uiElement is already added to UIDisplay " + uiElement.uiDisplay.number);
		}
		this.uiElements.push(uiElement);
		uiElement.uiDisplay = this;
		uiElement.isVisible = true;
		uiElement.onAddVisibleToDisplay();
		if(uiElement.hasMoveEvent != 0) {
			uiElement.addPickableMove();
		}
		if(uiElement.hasClickEvent != 0) {
			uiElement.addPickableClick();
		}
	}
	,update: function(uiElement) {
		uiElement.update();
	}
	,startSelection: function(t,e) {
		if(peote_ui_PeoteUIDisplay.intoSelectionTextLine != null) {
			var globalX = e.x;
			var peoteView = null;
			if(peoteView == null) {
				peoteView = this.peoteView;
			}
			var globalY = e.y;
			var peoteView1 = null;
			if(peoteView1 == null) {
				peoteView1 = this.peoteView;
			}
			peote_ui_PeoteUIDisplay.intoSelectionTextLine.onSelectStop({ x : (peoteView != null ? (globalX / peoteView.xz - peoteView.xOffset - this.xOffset - this.x) / this.xz : (globalX - this.xOffset - this.x) / this.xz) | 0, y : (peoteView1 != null ? (globalY / peoteView1.yz - peoteView1.yOffset - this.yOffset - this.y) / this.yz : (globalY - this.yOffset - this.y) / this.yz) | 0, type : e.type, touch : e.touch, mouseButton : e.mouseButton});
		}
		peote_ui_PeoteUIDisplay.intoSelectionTextLine = t;
		var globalX = e.x;
		var peoteView = null;
		if(peoteView == null) {
			peoteView = this.peoteView;
		}
		var globalY = e.y;
		var peoteView1 = null;
		if(peoteView1 == null) {
			peoteView1 = this.peoteView;
		}
		t.onSelectStart({ x : (peoteView != null ? (globalX / peoteView.xz - peoteView.xOffset - this.xOffset - this.x) / this.xz : (globalX - this.xOffset - this.x) / this.xz) | 0, y : (peoteView1 != null ? (globalY / peoteView1.yz - peoteView1.yOffset - this.yOffset - this.y) / this.yz : (globalY - this.yOffset - this.y) / this.yz) | 0, type : e.type, touch : e.touch, mouseButton : e.mouseButton});
	}
	,stopSelection: function(t,e) {
		peote_ui_PeoteUIDisplay.intoSelectionTextLine = null;
		var globalX = e.x;
		var peoteView = null;
		if(peoteView == null) {
			peoteView = this.peoteView;
		}
		var globalY = e.y;
		var peoteView1 = null;
		if(peoteView1 == null) {
			peoteView1 = this.peoteView;
		}
		t.onSelectStop({ x : (peoteView != null ? (globalX / peoteView.xz - peoteView.xOffset - this.xOffset - this.x) / this.xz : (globalX - this.xOffset - this.x) / this.xz) | 0, y : (peoteView1 != null ? (globalY / peoteView1.yz - peoteView1.yOffset - this.yOffset - this.y) / this.yz : (globalY - this.yOffset - this.y) / this.yz) | 0, type : e.type, touch : e.touch, mouseButton : e.mouseButton});
	}
	,__class__: peote_ui_PeoteUIDisplay
});
var peote_ui_interactive_Pickable = function(uiElement) {
	this.bytePos = -1;
	this.z = 0;
	this.h = 100;
	this.w = 100;
	this.y = 0;
	this.x = 0;
	this.uiElement = uiElement;
	this.uiElement = uiElement;
	this.z = uiElement.z;
	if(uiElement.masked) {
		this.x = uiElement.x + uiElement.maskX;
		this.y = uiElement.y + uiElement.maskY;
		this.w = uiElement.maskWidth;
		this.h = uiElement.maskHeight;
	} else {
		this.x = uiElement.x;
		this.y = uiElement.y;
		this.w = uiElement.width;
		this.h = uiElement.height;
	}
};
$hxClasses["peote.ui.interactive.Pickable"] = peote_ui_interactive_Pickable;
peote_ui_interactive_Pickable.__name__ = "peote.ui.interactive.Pickable";
peote_ui_interactive_Pickable.prototype = {
	__class__: peote_ui_interactive_Pickable
};
var peote_ui_interactive_Interactive = function(xPosition,yPosition,width,height,zIndex) {
	this.dragOriginY = 0;
	this.dragOriginX = 0;
	this.dragMaxY = 32767;
	this.dragMaxX = 32767;
	this.dragMinY = -32767;
	this.dragMinX = -32767;
	this.resizeHeight = null;
	this.resizeWidth = null;
	this.drag = null;
	this.hasClickEvent = 0;
	this.hasMoveEvent = 0;
	this.maskY = 0;
	this.maskX = 0;
	this.masked = false;
	this.wheelEventsBubbleTo = null;
	this.upDownEventsBubbleTo = null;
	this.upDownEventsBubbleToDisplay = false;
	this.moveEventsBubbleTo = null;
	this.moveEventsBubbleToDisplay = false;
	this.overOutEventsBubbleTo = null;
	this.overOutEventsBubbleToDisplay = true;
	this.pickableClick = null;
	this.pickableMove = null;
	this.isVisible = false;
	this.uiDisplay = null;
	this.x = xPosition;
	this.y = yPosition;
	if(width != this.width) {
		if(this.resizeWidth != null) {
			var oldWidth = this.width;
			this.resizeWidth(this.width = width,width - oldWidth);
		} else {
			this.width = width;
		}
	}
	if(height != this.height) {
		if(this.resizeHeight != null) {
			var oldHeight = this.height;
			this.resizeHeight(this.height = height,height - oldHeight);
		} else {
			this.height = height;
		}
	}
	this.maskWidth = width;
	this.maskHeight = height;
	this.z = zIndex;
	this.pointerOver = peote_ui_interactive_Interactive.noOperation;
	this.pointerOut = peote_ui_interactive_Interactive.noOperation;
	this.pointerMove = peote_ui_interactive_Interactive.noOperation;
	this.mouseWheel = peote_ui_interactive_Interactive.noWheelOperation;
	this.pointerDown = peote_ui_interactive_Interactive.noOperation;
	this.pointerUp = peote_ui_interactive_Interactive.noOperation;
	this.pointerClick = peote_ui_interactive_Interactive.noOperation;
};
$hxClasses["peote.ui.interactive.Interactive"] = peote_ui_interactive_Interactive;
peote_ui_interactive_Interactive.__name__ = "peote.ui.interactive.Interactive";
peote_ui_interactive_Interactive.noOperation = function(e) {
};
peote_ui_interactive_Interactive.noWheelOperation = function(e) {
};
peote_ui_interactive_Interactive.prototype = {
	intoOverOutEventBubbleOf: function(e) {
		while(e.overOutEventsBubbleTo != null) {
			if(e.overOutEventsBubbleTo == this) {
				return true;
			}
			e = e.overOutEventsBubbleTo;
		}
		return false;
	}
	,intoUpDownEventBubbleOf: function(e) {
		while(e.upDownEventsBubbleTo != null) {
			if(e.upDownEventsBubbleTo == this) {
				return true;
			}
			e = e.upDownEventsBubbleTo;
		}
		return false;
	}
	,updateLayout: function() {
		this.updateVisibleLayout();
		if(this.hasMoveEvent != 0) {
			var _this = this.pickableMove;
			_this.uiElement = this;
			_this.z = this.z;
			if(this.masked) {
				_this.x = this.x + this.maskX;
				_this.y = this.y + this.maskY;
				_this.w = this.maskWidth;
				_this.h = this.maskHeight;
			} else {
				_this.x = this.x;
				_this.y = this.y;
				_this.w = this.width;
				_this.h = this.height;
			}
			if(this.isVisible) {
				this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
			}
		}
		if(this.hasClickEvent != 0) {
			var _this = this.pickableClick;
			_this.uiElement = this;
			_this.z = this.z;
			if(this.masked) {
				_this.x = this.x + this.maskX;
				_this.y = this.y + this.maskY;
				_this.w = this.maskWidth;
				_this.h = this.maskHeight;
			} else {
				_this.x = this.x;
				_this.y = this.y;
				_this.w = this.width;
				_this.h = this.height;
			}
			if(this.isVisible) {
				this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
			}
		}
	}
	,update: function() {
		this.updateVisible();
		if(this.hasMoveEvent != 0) {
			var _this = this.pickableMove;
			_this.uiElement = this;
			_this.z = this.z;
			if(this.masked) {
				_this.x = this.x + this.maskX;
				_this.y = this.y + this.maskY;
				_this.w = this.maskWidth;
				_this.h = this.maskHeight;
			} else {
				_this.x = this.x;
				_this.y = this.y;
				_this.w = this.width;
				_this.h = this.height;
			}
			if(this.isVisible) {
				this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
			}
		}
		if(this.hasClickEvent != 0) {
			var _this = this.pickableClick;
			_this.uiElement = this;
			_this.z = this.z;
			if(this.masked) {
				_this.x = this.x + this.maskX;
				_this.y = this.y + this.maskY;
				_this.w = this.maskWidth;
				_this.h = this.maskHeight;
			} else {
				_this.x = this.x;
				_this.y = this.y;
				_this.w = this.width;
				_this.h = this.height;
			}
			if(this.isVisible) {
				this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
			}
		}
	}
	,updateVisibleLayout: function() {
	}
	,updateVisible: function() {
	}
	,onAddVisibleToDisplay: function() {
	}
	,addPickableMove: function() {
		if(this.pickableMove == null) {
			this.pickableMove = new peote_ui_interactive_Pickable(this);
		}
		if(this.isVisible) {
			this.uiDisplay.movePickBuffer.addElement(this.pickableMove);
		}
	}
	,addPickableClick: function() {
		if(this.pickableClick == null) {
			this.pickableClick = new peote_ui_interactive_Pickable(this);
		}
		if(this.isVisible) {
			this.uiDisplay.clickPickBuffer.addElement(this.pickableClick);
		}
	}
	,removePickableClick: function() {
		if(this.isVisible) {
			var index = this.uiDisplay.clickPickBuffer.getElementIndex(this.pickableClick);
			if(index < this.uiDisplay.clickPickBuffer._maxElements - 1) {
				if(this.uiDisplay.mouseEnabled) {
					var _g = 0;
					var _g1 = this.uiDisplay.lastMouseDownIndex.length;
					while(_g < _g1) {
						var i = _g++;
						if(this.uiDisplay.lastMouseDownIndex[i] == this.uiDisplay.clickPickBuffer._maxElements - 1) {
							this.uiDisplay.lastMouseDownIndex[i] = index;
						}
					}
				}
				if(this.uiDisplay.touchEnabled) {
					var _g = 0;
					var _g1 = this.uiDisplay.lastTouchDownIndex.length;
					while(_g < _g1) {
						var i = _g++;
						if(this.uiDisplay.lastTouchDownIndex[i] == this.uiDisplay.clickPickBuffer._maxElements - 1) {
							this.uiDisplay.lastTouchDownIndex[i] = index;
						}
					}
				}
			}
			this.uiDisplay.clickPickBuffer.removeElement(this.pickableClick);
		}
	}
	,__class__: peote_ui_interactive_Interactive
};
var peote_ui_interactive_interfaces_InputText = function() { };
$hxClasses["peote.ui.interactive.interfaces.InputText"] = peote_ui_interactive_interfaces_InputText;
peote_ui_interactive_interfaces_InputText.__name__ = "peote.ui.interactive.interfaces.InputText";
peote_ui_interactive_interfaces_InputText.__isInterface__ = true;
peote_ui_interactive_interfaces_InputText.prototype = {
	__class__: peote_ui_interactive_interfaces_InputText
};
var peote_ui_interactive_interfaces_InputFocus = function() { };
$hxClasses["peote.ui.interactive.interfaces.InputFocus"] = peote_ui_interactive_interfaces_InputFocus;
peote_ui_interactive_interfaces_InputFocus.__name__ = "peote.ui.interactive.interfaces.InputFocus";
peote_ui_interactive_interfaces_InputFocus.__isInterface__ = true;
peote_ui_interactive_interfaces_InputFocus.prototype = {
	__class__: peote_ui_interactive_interfaces_InputFocus
};
var peote_ui_interactive_interfaces_ActionTextLine = function() { };
$hxClasses["peote.ui.interactive.interfaces.ActionTextLine"] = peote_ui_interactive_interfaces_ActionTextLine;
peote_ui_interactive_interfaces_ActionTextLine.__name__ = "peote.ui.interactive.interfaces.ActionTextLine";
peote_ui_interactive_interfaces_ActionTextLine.__isInterface__ = true;
peote_ui_interactive_interfaces_ActionTextLine.prototype = {
	__class__: peote_ui_interactive_interfaces_ActionTextLine
};
var peote_ui_interactive_UITextLine_$_$Main_$MyFontStyle = function(xPosition,yPosition,textSize,zIndex,text,font,fontStyle,textStyle) {
	if(zIndex == null) {
		zIndex = 0;
	}
	this.xOffsetAtSelectStart = 0;
	this.selectStartFrom = 0;
	this.input2Action = null;
	this.bottomSpace = 0;
	this.topSpace = 0;
	this.rightSpace = 0;
	this.leftSpace = 0;
	this.yOffset = 0;
	this.xOffset = 0;
	this.vAlign = 4;
	this.hAlign = 0;
	this.autoSize = 3;
	this.text = null;
	this.cursor = 0;
	this.cursorIsVisible = false;
	this.cursorStyle = null;
	this.cursorElement = null;
	this.cursorProgram = null;
	this.selectTo = 0;
	this.selectFrom = 0;
	this.selectionIsVisible = false;
	this.selectionStyle = null;
	this.selectionElement = null;
	this.selectionProgram = null;
	this.backgroundIsVisible = true;
	this.backgroundStyle = null;
	this.backgroundElement = null;
	this.backgroundProgram = null;
	this.line = null;
	var width = 0;
	var height = 0;
	if(textSize != null) {
		if(textSize.height != null) {
			height = textSize.height;
			this.autoSize &= 2;
		}
		if(textSize.width != null) {
			width = textSize.width;
			this.autoSize &= 1;
		}
		if(textSize.hAlign != null) {
			this.hAlign = textSize.hAlign;
		}
		if(textSize.vAlign != null) {
			this.vAlign = textSize.vAlign;
		}
		if(textSize.xOffset != null) {
			this.xOffset = textSize.xOffset;
		}
		if(textSize.yOffset != null) {
			this.yOffset = textSize.yOffset;
		}
		if(textSize.leftSpace != null) {
			this.leftSpace = textSize.leftSpace;
		}
		if(textSize.rightSpace != null) {
			this.rightSpace = textSize.rightSpace;
		}
		if(textSize.topSpace != null) {
			this.topSpace = textSize.topSpace;
		}
		if(textSize.bottomSpace != null) {
			this.bottomSpace = textSize.bottomSpace;
		}
	}
	peote_ui_interactive_Interactive.call(this,xPosition,yPosition,width,height,zIndex);
	if(this.line == null || text == null) {
		this.text = text;
	} else {
		this.setText(text);
	}
	this.font = font;
	if(fontStyle == null) {
		fontStyle = font.createFontStyle();
	}
	this.fontStyle = fontStyle;
	if(textStyle != null) {
		if(textStyle.backgroundStyle != null) {
			var style = textStyle.backgroundStyle;
			if(this.backgroundElement == null) {
				this.backgroundStyle = style;
				if(style != null && this.line != null) {
					var addUpdate = this.isVisible && this.backgroundIsVisible;
					var stylePos = this.uiDisplay.usedStyleID.indexOf(this.backgroundStyle.getUUID());
					if(stylePos < 0) {
						if(this.uiDisplay.autoAddStyles) {
							var _this = this.uiDisplay;
							var program = this.backgroundProgram = this.backgroundStyle.createStyleProgram();
							var styleId = this.backgroundStyle.getUUID();
							_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
							if(_this.stylePosBeforeFont == 0) {
								_this.addProgram(program,null,true);
							} else {
								_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
							}
							_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
							_this.stylePosBeforeFont++;
						} else {
							var c = js_Boot.getClass(this.backgroundStyle);
							throw haxe_Exception.thrown("Error by creating background for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.backgroundStyle.id) + " is not inside the availableStyle list of UIDisplay.");
						}
					} else {
						this.backgroundProgram = this.uiDisplay.usedStyleProgram[stylePos];
						if(this.backgroundProgram == null) {
							var _this = this.uiDisplay;
							var program = this.backgroundProgram = this.backgroundStyle.createStyleProgram();
							var stylePos1 = stylePos;
							_this.usedStyleProgram[stylePos1] = program;
							var afterProgram = null;
							while(stylePos1-- > 0) {
								afterProgram = _this.usedStyleProgram[stylePos1];
								if(afterProgram != null) {
									break;
								}
							}
							_this.addProgram(program,afterProgram,afterProgram == null);
						}
					}
					this.backgroundElement = this.backgroundProgram.createElement(this,this.backgroundStyle);
					if(addUpdate) {
						this.backgroundProgram.addElement(this.backgroundElement);
					}
				}
			} else if(style != null) {
				if(style.getUUID() != this.backgroundStyle.getUUID()) {
					if(this.isVisible && this.backgroundIsVisible) {
						this.backgroundProgram.removeElement(this.backgroundElement);
					}
					this.backgroundProgram = null;
					this.backgroundStyle = style;
					var addUpdate = this.isVisible && this.backgroundIsVisible;
					var stylePos = this.uiDisplay.usedStyleID.indexOf(this.backgroundStyle.getUUID());
					if(stylePos < 0) {
						if(this.uiDisplay.autoAddStyles) {
							var _this = this.uiDisplay;
							var program = this.backgroundProgram = this.backgroundStyle.createStyleProgram();
							var styleId = this.backgroundStyle.getUUID();
							_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
							if(_this.stylePosBeforeFont == 0) {
								_this.addProgram(program,null,true);
							} else {
								_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
							}
							_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
							_this.stylePosBeforeFont++;
						} else {
							var c = js_Boot.getClass(this.backgroundStyle);
							throw haxe_Exception.thrown("Error by creating background for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.backgroundStyle.id) + " is not inside the availableStyle list of UIDisplay.");
						}
					} else {
						this.backgroundProgram = this.uiDisplay.usedStyleProgram[stylePos];
						if(this.backgroundProgram == null) {
							var _this = this.uiDisplay;
							var program = this.backgroundProgram = this.backgroundStyle.createStyleProgram();
							var stylePos1 = stylePos;
							_this.usedStyleProgram[stylePos1] = program;
							var afterProgram = null;
							while(stylePos1-- > 0) {
								afterProgram = _this.usedStyleProgram[stylePos1];
								if(afterProgram != null) {
									break;
								}
							}
							_this.addProgram(program,afterProgram,afterProgram == null);
						}
					}
					this.backgroundElement = this.backgroundProgram.createElement(this,this.backgroundStyle);
					if(addUpdate) {
						this.backgroundProgram.addElement(this.backgroundElement);
					}
				} else {
					this.backgroundStyle = style;
					this.backgroundElement.setStyle(style);
					if(this.isVisible && this.backgroundIsVisible) {
						this.backgroundProgram.update(this.backgroundElement);
					}
				}
			} else {
				if(this.isVisible && this.backgroundIsVisible) {
					this.backgroundProgram.removeElement(this.backgroundElement);
				}
				this.backgroundStyle = null;
				this.backgroundProgram = null;
				this.backgroundElement = null;
			}
		}
		if(textStyle.selectionStyle != null) {
			var style = textStyle.selectionStyle;
			if(this.selectionElement == null) {
				this.selectionStyle = style;
				if(style != null && this.line != null) {
					var addUpdate = this.isVisible && this.selectionIsVisible;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = this.yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
							break;
						default:
							y_offset = this.yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					var line = this.line;
					var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
					var line = this.line;
					var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
					var selectY = Math.round(this.y + y_offset1);
					var selectHeight = Math.round(this.line.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = selectWidth;
					var mh = selectHeight;
					if(selectX < _x) {
						mw -= _x - selectX;
						mx = _x - selectX;
						if(mw > _width) {
							mw = _width;
						}
					} else if(selectX + selectWidth > _x + _width) {
						mw = _x + _width - selectX;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(selectY < _y) {
						mh -= _y - selectY;
						my = _y - selectY;
						if(mh > _height) {
							mh = _height;
						}
					} else if(selectY + selectHeight > _y + _height) {
						mh = _y + _height - selectY;
					}
					if(mh < 0) {
						mh = 0;
					}
					var z = this.z;
					var stylePos = this.uiDisplay.usedStyleID.indexOf(this.selectionStyle.getUUID());
					if(stylePos < 0) {
						if(this.uiDisplay.autoAddStyles) {
							var _this = this.uiDisplay;
							var program = this.selectionProgram = this.selectionStyle.createStyleProgram();
							var styleId = this.selectionStyle.getUUID();
							_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
							if(_this.stylePosBeforeFont == 0) {
								_this.addProgram(program,null,true);
							} else {
								_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
							}
							_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
							_this.stylePosBeforeFont++;
						} else {
							var c = js_Boot.getClass(this.selectionStyle);
							throw haxe_Exception.thrown("Error by creating selection for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.selectionStyle.id) + " is not inside the availableStyle list of UIDisplay.");
						}
					} else {
						this.selectionProgram = this.uiDisplay.usedStyleProgram[stylePos];
						if(this.selectionProgram == null) {
							var _this = this.uiDisplay;
							var program = this.selectionProgram = this.selectionStyle.createStyleProgram();
							var stylePos1 = stylePos;
							_this.usedStyleProgram[stylePos1] = program;
							var afterProgram = null;
							while(stylePos1-- > 0) {
								afterProgram = _this.usedStyleProgram[stylePos1];
								if(afterProgram != null) {
									break;
								}
							}
							_this.addProgram(program,afterProgram,afterProgram == null);
						}
					}
					this.selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,z,this.selectionStyle);
					if(addUpdate) {
						this.selectionProgram.addElement(this.selectionElement);
					}
				}
			} else if(style != null) {
				if(style.getUUID() != this.selectionStyle.getUUID()) {
					if(this.isVisible && this.selectionIsVisible) {
						this.selectionProgram.removeElement(this.selectionElement);
					}
					this.selectionProgram = null;
					this.selectionStyle = style;
					var addUpdate = this.isVisible && this.selectionIsVisible;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = this.yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
							break;
						default:
							y_offset = this.yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					var line = this.line;
					var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
					var line = this.line;
					var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
					var selectY = Math.round(this.y + y_offset1);
					var selectHeight = Math.round(this.line.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = selectWidth;
					var mh = selectHeight;
					if(selectX < _x) {
						mw -= _x - selectX;
						mx = _x - selectX;
						if(mw > _width) {
							mw = _width;
						}
					} else if(selectX + selectWidth > _x + _width) {
						mw = _x + _width - selectX;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(selectY < _y) {
						mh -= _y - selectY;
						my = _y - selectY;
						if(mh > _height) {
							mh = _height;
						}
					} else if(selectY + selectHeight > _y + _height) {
						mh = _y + _height - selectY;
					}
					if(mh < 0) {
						mh = 0;
					}
					var z = this.z;
					var stylePos = this.uiDisplay.usedStyleID.indexOf(this.selectionStyle.getUUID());
					if(stylePos < 0) {
						if(this.uiDisplay.autoAddStyles) {
							var _this = this.uiDisplay;
							var program = this.selectionProgram = this.selectionStyle.createStyleProgram();
							var styleId = this.selectionStyle.getUUID();
							_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
							if(_this.stylePosBeforeFont == 0) {
								_this.addProgram(program,null,true);
							} else {
								_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
							}
							_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
							_this.stylePosBeforeFont++;
						} else {
							var c = js_Boot.getClass(this.selectionStyle);
							throw haxe_Exception.thrown("Error by creating selection for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.selectionStyle.id) + " is not inside the availableStyle list of UIDisplay.");
						}
					} else {
						this.selectionProgram = this.uiDisplay.usedStyleProgram[stylePos];
						if(this.selectionProgram == null) {
							var _this = this.uiDisplay;
							var program = this.selectionProgram = this.selectionStyle.createStyleProgram();
							var stylePos1 = stylePos;
							_this.usedStyleProgram[stylePos1] = program;
							var afterProgram = null;
							while(stylePos1-- > 0) {
								afterProgram = _this.usedStyleProgram[stylePos1];
								if(afterProgram != null) {
									break;
								}
							}
							_this.addProgram(program,afterProgram,afterProgram == null);
						}
					}
					this.selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,z,this.selectionStyle);
					if(addUpdate) {
						this.selectionProgram.addElement(this.selectionElement);
					}
				} else {
					this.selectionStyle = style;
					this.selectionElement.setStyle(style);
					if(this.isVisible && this.selectionIsVisible) {
						this.selectionProgram.update(this.selectionElement);
					}
				}
			} else {
				if(this.isVisible && this.selectionIsVisible) {
					this.selectionProgram.removeElement(this.selectionElement);
				}
				this.selectionStyle = null;
				this.selectionProgram = null;
				this.selectionElement = null;
			}
		}
		var style = textStyle.cursorStyle;
		if(this.cursorElement == null) {
			this.cursorStyle = style;
			if(style != null && this.line != null) {
				var addUpdate = this.isVisible && this.cursorIsVisible;
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var _width1 = _width;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = this.yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
						break;
					default:
						y_offset = this.yOffset;
					}
				}
				var y_offset1 = y_offset + this.topSpace;
				_width1 += 3;
				var line = this.line;
				var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
				var cw = 2;
				var cy = Math.round(this.y + y_offset1);
				var ch = Math.round(this.line.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = cw;
				var mh = ch;
				if(cx < _x) {
					mw -= _x - cx;
					mx = _x - cx;
					if(mw > _width1) {
						mw = _width1;
					}
				} else if(cx + cw > _x + _width1) {
					mw = _x + _width1 - cx;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(cy < _y) {
					mh -= _y - cy;
					my = _y - cy;
					if(mh > _height) {
						mh = _height;
					}
				} else if(cy + ch > _y + _height) {
					mh = _y + _height - cy;
				}
				if(mh < 0) {
					mh = 0;
				}
				var z = this.z;
				var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
				if(stylePos < 0) {
					if(this.uiDisplay.autoAddStyles) {
						var _this = this.uiDisplay;
						var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
						var styleId = this.cursorStyle.getUUID();
						_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
						if(_this.stylePosBeforeFont == 0) {
							_this.addProgram(program,null,true);
						} else {
							_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
						}
						_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
						_this.stylePosBeforeFont++;
					} else {
						var c = js_Boot.getClass(this.cursorStyle);
						throw haxe_Exception.thrown("Error by creating cursor for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
					}
				} else {
					this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
					if(this.cursorProgram == null) {
						var _this = this.uiDisplay;
						var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
						var stylePos1 = stylePos;
						_this.usedStyleProgram[stylePos1] = program;
						var afterProgram = null;
						while(stylePos1-- > 0) {
							afterProgram = _this.usedStyleProgram[stylePos1];
							if(afterProgram != null) {
								break;
							}
						}
						_this.addProgram(program,afterProgram,afterProgram == null);
					}
				}
				this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
				if(addUpdate) {
					this.cursorProgram.addElement(this.cursorElement);
				}
			}
		} else if(style != null) {
			if(style.getUUID() != this.cursorStyle.getUUID()) {
				if(this.isVisible && this.cursorIsVisible) {
					this.cursorProgram.removeElement(this.cursorElement);
				}
				this.cursorProgram = null;
				this.cursorStyle = style;
				var addUpdate = this.isVisible && this.cursorIsVisible;
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var _width1 = _width;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = this.yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
						break;
					default:
						y_offset = this.yOffset;
					}
				}
				var y_offset1 = y_offset + this.topSpace;
				_width1 += 3;
				var line = this.line;
				var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
				var cw = 2;
				var cy = Math.round(this.y + y_offset1);
				var ch = Math.round(this.line.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = cw;
				var mh = ch;
				if(cx < _x) {
					mw -= _x - cx;
					mx = _x - cx;
					if(mw > _width1) {
						mw = _width1;
					}
				} else if(cx + cw > _x + _width1) {
					mw = _x + _width1 - cx;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(cy < _y) {
					mh -= _y - cy;
					my = _y - cy;
					if(mh > _height) {
						mh = _height;
					}
				} else if(cy + ch > _y + _height) {
					mh = _y + _height - cy;
				}
				if(mh < 0) {
					mh = 0;
				}
				var z = this.z;
				var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
				if(stylePos < 0) {
					if(this.uiDisplay.autoAddStyles) {
						var _this = this.uiDisplay;
						var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
						var styleId = this.cursorStyle.getUUID();
						_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
						if(_this.stylePosBeforeFont == 0) {
							_this.addProgram(program,null,true);
						} else {
							_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
						}
						_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
						_this.stylePosBeforeFont++;
					} else {
						var c = js_Boot.getClass(this.cursorStyle);
						throw haxe_Exception.thrown("Error by creating cursor for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
					}
				} else {
					this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
					if(this.cursorProgram == null) {
						var _this = this.uiDisplay;
						var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
						var stylePos1 = stylePos;
						_this.usedStyleProgram[stylePos1] = program;
						var afterProgram = null;
						while(stylePos1-- > 0) {
							afterProgram = _this.usedStyleProgram[stylePos1];
							if(afterProgram != null) {
								break;
							}
						}
						_this.addProgram(program,afterProgram,afterProgram == null);
					}
				}
				this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
				if(addUpdate) {
					this.cursorProgram.addElement(this.cursorElement);
				}
			} else {
				this.cursorStyle = style;
				this.cursorElement.setStyle(style);
				if(this.isVisible && this.cursorIsVisible) {
					this.cursorProgram.update(this.cursorElement);
				}
			}
		} else {
			if(this.isVisible && this.cursorIsVisible) {
				this.cursorProgram.removeElement(this.cursorElement);
			}
			this.cursorStyle = null;
			this.cursorProgram = null;
			this.cursorElement = null;
		}
	}
};
$hxClasses["peote.ui.interactive.UITextLine__Main_MyFontStyle"] = peote_ui_interactive_UITextLine_$_$Main_$MyFontStyle;
peote_ui_interactive_UITextLine_$_$Main_$MyFontStyle.__name__ = "peote.ui.interactive.UITextLine__Main_MyFontStyle";
peote_ui_interactive_UITextLine_$_$Main_$MyFontStyle.__interfaces__ = [peote_ui_interactive_interfaces_InputText,peote_ui_interactive_interfaces_InputFocus,peote_ui_interactive_interfaces_ActionTextLine];
peote_ui_interactive_UITextLine_$_$Main_$MyFontStyle.__super__ = peote_ui_interactive_Interactive;
peote_ui_interactive_UITextLine_$_$Main_$MyFontStyle.prototype = $extend(peote_ui_interactive_Interactive.prototype,{
	select: function(from,to) {
		if(from < 0) {
			from = 0;
		}
		if(to < 0) {
			to = 0;
		}
		if(from <= to) {
			this.selectFrom = from;
			this.selectTo = to;
		} else {
			this.selectFrom = to;
			this.selectTo = from;
		}
		if(this.selectFrom == this.selectTo) {
			if(this.line != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElement != null && this.isVisible) {
					this.selectionProgram.removeElement(this.selectionElement);
				}
			}
			this.selectionIsVisible = false;
		} else {
			if(this.line != null && this.selectionStyle != null) {
				if(this.selectTo > this.line.pageLine.glyphes.length) {
					this.selectTo = this.line.pageLine.glyphes.length;
				}
				var addUpdate = this.isVisible && this.selectionIsVisible;
				var create = this.selectionElement == null;
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = this.yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
						break;
					default:
						y_offset = this.yOffset;
					}
				}
				var y_offset1 = y_offset + this.topSpace;
				var line = this.line;
				var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
				var line = this.line;
				var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
				var selectY = Math.round(this.y + y_offset1);
				var selectHeight = Math.round(this.line.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = selectWidth;
				var mh = selectHeight;
				if(selectX < _x) {
					mw -= _x - selectX;
					mx = _x - selectX;
					if(mw > _width) {
						mw = _width;
					}
				} else if(selectX + selectWidth > _x + _width) {
					mw = _x + _width - selectX;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(selectY < _y) {
					mh -= _y - selectY;
					my = _y - selectY;
					if(mh > _height) {
						mh = _height;
					}
				} else if(selectY + selectHeight > _y + _height) {
					mh = _y + _height - selectY;
				}
				if(mh < 0) {
					mh = 0;
				}
				if(create) {
					var z = this.z;
					var stylePos = this.uiDisplay.usedStyleID.indexOf(this.selectionStyle.getUUID());
					if(stylePos < 0) {
						if(this.uiDisplay.autoAddStyles) {
							var _this = this.uiDisplay;
							var program = this.selectionProgram = this.selectionStyle.createStyleProgram();
							var styleId = this.selectionStyle.getUUID();
							_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
							if(_this.stylePosBeforeFont == 0) {
								_this.addProgram(program,null,true);
							} else {
								_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
							}
							_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
							_this.stylePosBeforeFont++;
						} else {
							var c = js_Boot.getClass(this.selectionStyle);
							throw haxe_Exception.thrown("Error by creating selection for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.selectionStyle.id) + " is not inside the availableStyle list of UIDisplay.");
						}
					} else {
						this.selectionProgram = this.uiDisplay.usedStyleProgram[stylePos];
						if(this.selectionProgram == null) {
							var _this = this.uiDisplay;
							var program = this.selectionProgram = this.selectionStyle.createStyleProgram();
							var stylePos1 = stylePos;
							_this.usedStyleProgram[stylePos1] = program;
							var afterProgram = null;
							while(stylePos1-- > 0) {
								afterProgram = _this.usedStyleProgram[stylePos1];
								if(afterProgram != null) {
									break;
								}
							}
							_this.addProgram(program,afterProgram,afterProgram == null);
						}
					}
					this.selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,z,this.selectionStyle);
					if(addUpdate) {
						this.selectionProgram.addElement(this.selectionElement);
					}
				} else {
					this.selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.selectionProgram.update(this.selectionElement);
					}
				}
			}
			if(this.line != null && this.selectionStyle != null) {
				if(!this.selectionIsVisible) {
					if(this.selectionElement == null) {
						var addUpdate = this.isVisible;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = this.yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
								break;
							default:
								y_offset = this.yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						var line = this.line;
						var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
						var line = this.line;
						var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
						var selectY = Math.round(this.y + y_offset1);
						var selectHeight = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = selectWidth;
						var mh = selectHeight;
						if(selectX < _x) {
							mw -= _x - selectX;
							mx = _x - selectX;
							if(mw > _width) {
								mw = _width;
							}
						} else if(selectX + selectWidth > _x + _width) {
							mw = _x + _width - selectX;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(selectY < _y) {
							mh -= _y - selectY;
							my = _y - selectY;
							if(mh > _height) {
								mh = _height;
							}
						} else if(selectY + selectHeight > _y + _height) {
							mh = _y + _height - selectY;
						}
						if(mh < 0) {
							mh = 0;
						}
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.selectionStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.selectionProgram = this.selectionStyle.createStyleProgram();
								var styleId = this.selectionStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.selectionStyle);
								throw haxe_Exception.thrown("Error by creating selection for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.selectionStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.selectionProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.selectionProgram == null) {
								var _this = this.uiDisplay;
								var program = this.selectionProgram = this.selectionStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,z,this.selectionStyle);
						if(addUpdate) {
							this.selectionProgram.addElement(this.selectionElement);
						}
					} else if(this.isVisible) {
						this.selectionProgram.addElement(this.selectionElement);
					}
				}
			}
			this.selectionIsVisible = true;
		}
	}
	,updateVisibleLayout: function() {
		if(this.line != null) {
			if(this.autoSize > 0) {
				if((this.autoSize & 2) > 0) {
					var w = (this.line.pageLine.textSize | 0) + this.leftSpace + this.rightSpace;
					if(w != this.width) {
						if(this.resizeWidth != null) {
							var oldWidth = this.width;
							this.resizeWidth(this.width = w,w - oldWidth);
						} else {
							this.width = w;
						}
					}
				}
				if((this.autoSize & 1) > 0) {
					var h = (this.line.pageLine.height | 0) + this.topSpace + this.bottomSpace;
					if(h != this.height) {
						if(this.resizeHeight != null) {
							var oldHeight = this.height;
							this.resizeHeight(this.height = h,h - oldHeight);
						} else {
							this.height = h;
						}
					}
				}
				if(this.hasMoveEvent != 0) {
					var _this = this.pickableMove;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
					if(this.isVisible) {
						this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
					}
				}
				if(this.hasClickEvent != 0) {
					var _this = this.pickableClick;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
					if(this.isVisible) {
						this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
					}
				}
			}
			var _x = this.x + this.leftSpace;
			var _y = this.y + this.topSpace;
			var _width = this.width - this.leftSpace - this.rightSpace;
			var _height = this.height - this.topSpace - this.bottomSpace;
			var y_offset;
			if((this.autoSize & 1) > 0) {
				y_offset = this.yOffset;
			} else {
				switch(this.vAlign) {
				case 4:
					y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
					break;
				case 8:
					y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
					break;
				default:
					y_offset = this.yOffset;
				}
			}
			var _this = this.fontProgram;
			var line = this.line;
			var _xOffset = this.xOffset;
			var offset;
			if((this.autoSize & 2) > 0) {
				offset = _xOffset;
			} else {
				switch(this.hAlign) {
				case 1:
					offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
					break;
				case 2:
					offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
					break;
				default:
					offset = _xOffset;
				}
			}
			var addRemoveGlyphes = this.isVisible;
			if(addRemoveGlyphes == null) {
				addRemoveGlyphes = true;
			}
			_this.pageLineSetPositionSize(line.pageLine,line.x,_width,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
			line.x = _x;
			line.size = _width;
			if(offset != null) {
				line.offset = offset;
			}
			if(this.isVisible) {
				this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
			}
			if(this.masked) {
				if(this.maskX > this.leftSpace) {
					_x = this.x + this.maskX;
				}
				if(this.maskY > this.topSpace) {
					_y = this.y + this.maskY;
				}
				if(this.x + this.maskX + this.maskWidth < _x + _width) {
					_width = this.maskX + this.maskWidth + this.x - _x;
				}
				if(this.y + this.maskY + this.maskHeight < _y + _height) {
					_height = this.maskY + this.maskHeight + this.y - _y;
				}
			}
			var maskElement = this.maskElement;
			var autoUpdate = this.isVisible;
			if(autoUpdate == null) {
				autoUpdate = true;
			}
			maskElement.x = _x;
			maskElement.y = _y;
			maskElement.w = _width;
			maskElement.h = _height;
			if(autoUpdate) {
				this.fontProgram.maskBuffer.updateElement(maskElement);
			}
			if(this.backgroundElement != null) {
				this.backgroundElement.setLayout(this);
				if(this.isVisible && this.backgroundIsVisible) {
					this.backgroundProgram.update(this.backgroundElement);
				}
			}
			if(this.selectionElement != null) {
				var y_offset1 = y_offset + this.topSpace;
				var addUpdate = this.isVisible && this.selectionIsVisible;
				var line = this.line;
				var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
				var line = this.line;
				var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
				var selectY = Math.round(this.y + y_offset1);
				var selectHeight = Math.round(this.line.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = selectWidth;
				var mh = selectHeight;
				if(selectX < _x) {
					mw -= _x - selectX;
					mx = _x - selectX;
					if(mw > _width) {
						mw = _width;
					}
				} else if(selectX + selectWidth > _x + _width) {
					mw = _x + _width - selectX;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(selectY < _y) {
					mh -= _y - selectY;
					my = _y - selectY;
					if(mh > _height) {
						mh = _height;
					}
				} else if(selectY + selectHeight > _y + _height) {
					mh = _y + _height - selectY;
				}
				if(mh < 0) {
					mh = 0;
				}
				this.selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
				if(addUpdate) {
					this.selectionProgram.update(this.selectionElement);
				}
			}
			if(this.cursorElement != null) {
				var y_offset1 = y_offset + this.topSpace;
				var addUpdate = this.isVisible && this.cursorIsVisible;
				var _width1 = _width;
				_width1 += 3;
				var line = this.line;
				var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
				var cw = 2;
				var cy = Math.round(this.y + y_offset1);
				var ch = Math.round(this.line.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = cw;
				var mh = ch;
				if(cx < _x) {
					mw -= _x - cx;
					mx = _x - cx;
					if(mw > _width1) {
						mw = _width1;
					}
				} else if(cx + cw > _x + _width1) {
					mw = _x + _width1 - cx;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(cy < _y) {
					mh -= _y - cy;
					my = _y - cy;
					if(mh > _height) {
						mh = _height;
					}
				} else if(cy + ch > _y + _height) {
					mh = _y + _height - cy;
				}
				if(mh < 0) {
					mh = 0;
				}
				this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
				if(addUpdate) {
					this.cursorProgram.update(this.cursorElement);
				}
			}
		}
	}
	,updateVisible: function() {
		if(this.line != null) {
			var line = this.line;
			var addRemoveGlyphes = this.isVisible;
			if(addRemoveGlyphes == null) {
				addRemoveGlyphes = true;
			}
			this.fontProgram.pageLineSetStyle(line.pageLine,line.x,line.size,line.offset,this.fontStyle,0,null,addRemoveGlyphes);
			if(this.autoSize > 0) {
				if((this.autoSize & 2) > 0) {
					var w = (this.line.pageLine.textSize | 0) + this.leftSpace + this.rightSpace;
					if(w != this.width) {
						if(this.resizeWidth != null) {
							var oldWidth = this.width;
							this.resizeWidth(this.width = w,w - oldWidth);
						} else {
							this.width = w;
						}
					}
				}
				if((this.autoSize & 1) > 0) {
					var h = (this.line.pageLine.height | 0) + this.topSpace + this.bottomSpace;
					if(h != this.height) {
						if(this.resizeHeight != null) {
							var oldHeight = this.height;
							this.resizeHeight(this.height = h,h - oldHeight);
						} else {
							this.height = h;
						}
					}
				}
				if(this.hasMoveEvent != 0) {
					var _this = this.pickableMove;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
					if(this.isVisible) {
						this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
					}
				}
				if(this.hasClickEvent != 0) {
					var _this = this.pickableClick;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
					if(this.isVisible) {
						this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
					}
				}
			}
			var _x = this.x + this.leftSpace;
			var _y = this.y + this.topSpace;
			var _width = this.width - this.leftSpace - this.rightSpace;
			var _height = this.height - this.topSpace - this.bottomSpace;
			var y_offset;
			if((this.autoSize & 1) > 0) {
				y_offset = this.yOffset;
			} else {
				switch(this.vAlign) {
				case 4:
					y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
					break;
				case 8:
					y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
					break;
				default:
					y_offset = this.yOffset;
				}
			}
			var _this = this.fontProgram;
			var line = this.line;
			var _xOffset = this.xOffset;
			var offset;
			if((this.autoSize & 2) > 0) {
				offset = _xOffset;
			} else {
				switch(this.hAlign) {
				case 1:
					offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
					break;
				case 2:
					offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
					break;
				default:
					offset = _xOffset;
				}
			}
			var addRemoveGlyphes = this.isVisible;
			if(addRemoveGlyphes == null) {
				addRemoveGlyphes = true;
			}
			_this.pageLineSetPositionSize(line.pageLine,line.x,_width,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
			line.x = _x;
			line.size = _width;
			if(offset != null) {
				line.offset = offset;
			}
			if(this.isVisible) {
				this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
			}
			if(this.masked) {
				if(this.maskX > this.leftSpace) {
					_x = this.x + this.maskX;
				}
				if(this.maskY > this.topSpace) {
					_y = this.y + this.maskY;
				}
				if(this.x + this.maskX + this.maskWidth < _x + _width) {
					_width = this.maskX + this.maskWidth + this.x - _x;
				}
				if(this.y + this.maskY + this.maskHeight < _y + _height) {
					_height = this.maskY + this.maskHeight + this.y - _y;
				}
			}
			var maskElement = this.maskElement;
			var autoUpdate = this.isVisible;
			if(autoUpdate == null) {
				autoUpdate = true;
			}
			maskElement.x = _x;
			maskElement.y = _y;
			maskElement.w = _width;
			maskElement.h = _height;
			if(autoUpdate) {
				this.fontProgram.maskBuffer.updateElement(maskElement);
			}
			if(this.backgroundElement != null) {
				this.backgroundElement.setStyle(this.backgroundStyle);
				this.backgroundElement.setLayout(this);
				if(this.isVisible && this.backgroundIsVisible) {
					this.backgroundProgram.update(this.backgroundElement);
				}
			}
			if(this.selectionElement != null) {
				this.selectionElement.setStyle(this.selectionStyle);
				var y_offset1 = y_offset + this.topSpace;
				var addUpdate = this.isVisible && this.selectionIsVisible;
				var line = this.line;
				var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
				var line = this.line;
				var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
				var selectY = Math.round(this.y + y_offset1);
				var selectHeight = Math.round(this.line.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = selectWidth;
				var mh = selectHeight;
				if(selectX < _x) {
					mw -= _x - selectX;
					mx = _x - selectX;
					if(mw > _width) {
						mw = _width;
					}
				} else if(selectX + selectWidth > _x + _width) {
					mw = _x + _width - selectX;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(selectY < _y) {
					mh -= _y - selectY;
					my = _y - selectY;
					if(mh > _height) {
						mh = _height;
					}
				} else if(selectY + selectHeight > _y + _height) {
					mh = _y + _height - selectY;
				}
				if(mh < 0) {
					mh = 0;
				}
				this.selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
				if(addUpdate) {
					this.selectionProgram.update(this.selectionElement);
				}
			}
			if(this.cursorElement != null) {
				this.cursorElement.setStyle(this.cursorStyle);
				var y_offset1 = y_offset + this.topSpace;
				var addUpdate = this.isVisible && this.cursorIsVisible;
				var _width1 = _width;
				_width1 += 3;
				var line = this.line;
				var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
				var cw = 2;
				var cy = Math.round(this.y + y_offset1);
				var ch = Math.round(this.line.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = cw;
				var mh = ch;
				if(cx < _x) {
					mw -= _x - cx;
					mx = _x - cx;
					if(mw > _width1) {
						mw = _width1;
					}
				} else if(cx + cw > _x + _width1) {
					mw = _x + _width1 - cx;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(cy < _y) {
					mh -= _y - cy;
					my = _y - cy;
					if(mh > _height) {
						mh = _height;
					}
				} else if(cy + ch > _y + _height) {
					mh = _y + _height - cy;
				}
				if(mh < 0) {
					mh = 0;
				}
				this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
				if(addUpdate) {
					this.cursorProgram.update(this.cursorElement);
				}
			}
		}
	}
	,onAddVisibleToDisplay: function() {
		if(this.line != null) {
			this.fontProgram.maskBuffer.addElement(this.maskElement);
			if(this.backgroundIsVisible && this.backgroundElement != null) {
				this.backgroundProgram.addElement(this.backgroundElement);
			}
			if(this.selectionIsVisible && this.selectionElement != null) {
				this.selectionProgram.addElement(this.selectionElement);
			}
			if(this.cursorIsVisible && this.cursorElement != null) {
				this.cursorProgram.addElement(this.cursorElement);
			}
			var _this = this.fontProgram;
			var pageLine = this.line.pageLine;
			var _g = pageLine.visibleFrom;
			var _g1 = pageLine.visibleTo;
			while(_g < _g1) {
				var i = _g++;
				_this._buffer.addElement(pageLine.glyphes[i]);
			}
		} else {
			var fontStylePos = this.uiDisplay.usedStyleID.indexOf(MyFontStyle.ID | this.fontStyle.id);
			if(fontStylePos < 0) {
				if(this.uiDisplay.autoAddStyles) {
					var _this = this.uiDisplay;
					var program = this.fontProgram = this.font.createFontProgram(this.fontStyle,true,1024,1024,true);
					var styleId = MyFontStyle.ID | this.fontStyle.id;
					var addOnTop = true;
					if(addOnTop == null) {
						addOnTop = false;
					}
					if(addOnTop) {
						_this.usedStyleID.push(styleId);
						_this.usedStyleProgram.push(program);
						_this.addProgram(program);
					} else {
						_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
						if(_this.stylePosBeforeFont == 0) {
							_this.addProgram(program,null,true);
						} else {
							_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
						}
						_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
						_this.stylePosBeforeFont++;
					}
				} else {
					var c = js_Boot.getClass(this.fontStyle);
					throw haxe_Exception.thrown("Error by creating new UITextLine. The style \"" + c.__name__ + "\" id=" + this.fontStyle.id + " is not inside the availableStyle list of UIDisplay.");
				}
			} else {
				this.fontProgram = this.uiDisplay.usedStyleProgram[fontStylePos];
				if(this.fontProgram == null) {
					var _this = this.uiDisplay;
					var program = this.fontProgram = this.font.createFontProgram(this.fontStyle,true,1024,1024,true);
					var stylePos = fontStylePos;
					_this.usedStyleProgram[stylePos] = program;
					var afterProgram = null;
					while(stylePos-- > 0) {
						afterProgram = _this.usedStyleProgram[stylePos];
						if(afterProgram != null) {
							break;
						}
					}
					_this.addProgram(program,afterProgram,afterProgram == null);
				}
			}
			var _this = this.fontProgram;
			var chars = this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null);
			var x = this.x;
			var y = this.y;
			var size = (this.autoSize & 2) > 0 ? null : this.width;
			var offset = this.xOffset;
			var glyphStyle = this.fontStyle;
			var line = new peote_text_Line_$_$Main_$MyFontStyle();
			var addRemoveGlyphes = true;
			if(addRemoveGlyphes == null) {
				addRemoveGlyphes = true;
			}
			if(x != null) {
				line.x = x;
			}
			if(size != null) {
				line.size = size;
			}
			if(offset != null) {
				line.offset = offset;
			}
			_this.pageLineSet(line.pageLine,chars,x,y,line.size,line.offset,glyphStyle,null,addRemoveGlyphes,null);
			this.line = line;
			var t = null;
			if(this.line == null || t == null) {
				this.text = t;
			} else {
				this.setText(t);
			}
			if(this.autoSize > 0) {
				if((this.autoSize & 2) > 0) {
					var w = (this.line.pageLine.textSize | 0) + this.leftSpace + this.rightSpace;
					if(w != this.width) {
						if(this.resizeWidth != null) {
							var oldWidth = this.width;
							this.resizeWidth(this.width = w,w - oldWidth);
						} else {
							this.width = w;
						}
					}
				}
				if((this.autoSize & 1) > 0) {
					var h = (this.line.pageLine.height | 0) + this.topSpace + this.bottomSpace;
					if(h != this.height) {
						if(this.resizeHeight != null) {
							var oldHeight = this.height;
							this.resizeHeight(this.height = h,h - oldHeight);
						} else {
							this.height = h;
						}
					}
				}
				if(this.hasMoveEvent != 0) {
					var _this = this.pickableMove;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
				}
				if(this.hasClickEvent != 0) {
					var _this = this.pickableClick;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
				}
			}
			var _x = this.x + this.leftSpace;
			var _y = this.y + this.topSpace;
			var _width = this.width - this.leftSpace - this.rightSpace;
			var _height = this.height - this.topSpace - this.bottomSpace;
			var y_offset;
			if((this.autoSize & 1) > 0) {
				y_offset = this.yOffset;
			} else {
				switch(this.vAlign) {
				case 4:
					y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
					break;
				case 8:
					y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
					break;
				default:
					y_offset = this.yOffset;
				}
			}
			var _this = this.fontProgram;
			var line = this.line;
			var _xOffset = this.xOffset;
			var offset;
			if((this.autoSize & 2) > 0) {
				offset = _xOffset;
			} else {
				switch(this.hAlign) {
				case 1:
					offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
					break;
				case 2:
					offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
					break;
				default:
					offset = _xOffset;
				}
			}
			var addRemoveGlyphes = this.isVisible;
			if(addRemoveGlyphes == null) {
				addRemoveGlyphes = true;
			}
			_this.pageLineSetPositionSize(line.pageLine,line.x,_width,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
			line.x = _x;
			line.size = _width;
			if(offset != null) {
				line.offset = offset;
			}
			this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
			if(this.masked) {
				if(this.maskX > this.leftSpace) {
					_x = this.x + this.maskX;
				}
				if(this.maskY > this.topSpace) {
					_y = this.y + this.maskY;
				}
				if(this.x + this.maskX + this.maskWidth < _x + _width) {
					_width = this.maskX + this.maskWidth + this.x - _x;
				}
				if(this.y + this.maskY + this.maskHeight < _y + _height) {
					_height = this.maskY + this.maskHeight + this.y - _y;
				}
			}
			var _this = this.fontProgram;
			var maskElement = new peote_text_MaskElement(_x,_y,_width,_height);
			_this.maskBuffer.addElement(maskElement);
			this.maskElement = maskElement;
			if(this.backgroundStyle != null) {
				var addUpdate = this.backgroundIsVisible;
				var stylePos = this.uiDisplay.usedStyleID.indexOf(this.backgroundStyle.getUUID());
				if(stylePos < 0) {
					if(this.uiDisplay.autoAddStyles) {
						var _this = this.uiDisplay;
						var program = this.backgroundProgram = this.backgroundStyle.createStyleProgram();
						var styleId = this.backgroundStyle.getUUID();
						_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
						if(_this.stylePosBeforeFont == 0) {
							_this.addProgram(program,null,true);
						} else {
							_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
						}
						_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
						_this.stylePosBeforeFont++;
					} else {
						var c = js_Boot.getClass(this.backgroundStyle);
						throw haxe_Exception.thrown("Error by creating background for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.backgroundStyle.id) + " is not inside the availableStyle list of UIDisplay.");
					}
				} else {
					this.backgroundProgram = this.uiDisplay.usedStyleProgram[stylePos];
					if(this.backgroundProgram == null) {
						var _this = this.uiDisplay;
						var program = this.backgroundProgram = this.backgroundStyle.createStyleProgram();
						var stylePos1 = stylePos;
						_this.usedStyleProgram[stylePos1] = program;
						var afterProgram = null;
						while(stylePos1-- > 0) {
							afterProgram = _this.usedStyleProgram[stylePos1];
							if(afterProgram != null) {
								break;
							}
						}
						_this.addProgram(program,afterProgram,afterProgram == null);
					}
				}
				this.backgroundElement = this.backgroundProgram.createElement(this,this.backgroundStyle);
				if(addUpdate) {
					this.backgroundProgram.addElement(this.backgroundElement);
				}
			}
			if(this.selectionStyle != null) {
				var y_offset1 = y_offset + this.topSpace;
				var addUpdate = this.selectionIsVisible;
				var line = this.line;
				var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
				var line = this.line;
				var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
				var selectY = Math.round(this.y + y_offset1);
				var selectHeight = Math.round(this.line.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = selectWidth;
				var mh = selectHeight;
				if(selectX < _x) {
					mw -= _x - selectX;
					mx = _x - selectX;
					if(mw > _width) {
						mw = _width;
					}
				} else if(selectX + selectWidth > _x + _width) {
					mw = _x + _width - selectX;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(selectY < _y) {
					mh -= _y - selectY;
					my = _y - selectY;
					if(mh > _height) {
						mh = _height;
					}
				} else if(selectY + selectHeight > _y + _height) {
					mh = _y + _height - selectY;
				}
				if(mh < 0) {
					mh = 0;
				}
				var z = this.z;
				var stylePos = this.uiDisplay.usedStyleID.indexOf(this.selectionStyle.getUUID());
				if(stylePos < 0) {
					if(this.uiDisplay.autoAddStyles) {
						var _this = this.uiDisplay;
						var program = this.selectionProgram = this.selectionStyle.createStyleProgram();
						var styleId = this.selectionStyle.getUUID();
						_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
						if(_this.stylePosBeforeFont == 0) {
							_this.addProgram(program,null,true);
						} else {
							_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
						}
						_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
						_this.stylePosBeforeFont++;
					} else {
						var c = js_Boot.getClass(this.selectionStyle);
						throw haxe_Exception.thrown("Error by creating selection for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.selectionStyle.id) + " is not inside the availableStyle list of UIDisplay.");
					}
				} else {
					this.selectionProgram = this.uiDisplay.usedStyleProgram[stylePos];
					if(this.selectionProgram == null) {
						var _this = this.uiDisplay;
						var program = this.selectionProgram = this.selectionStyle.createStyleProgram();
						var stylePos1 = stylePos;
						_this.usedStyleProgram[stylePos1] = program;
						var afterProgram = null;
						while(stylePos1-- > 0) {
							afterProgram = _this.usedStyleProgram[stylePos1];
							if(afterProgram != null) {
								break;
							}
						}
						_this.addProgram(program,afterProgram,afterProgram == null);
					}
				}
				this.selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,z,this.selectionStyle);
				if(addUpdate) {
					this.selectionProgram.addElement(this.selectionElement);
				}
			}
			if(this.cursorStyle != null) {
				var y_offset1 = y_offset + this.topSpace;
				var addUpdate = this.cursorIsVisible;
				var _width1 = _width;
				_width1 += 3;
				var line = this.line;
				var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
				var cw = 2;
				var cy = Math.round(this.y + y_offset1);
				var ch = Math.round(this.line.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = cw;
				var mh = ch;
				if(cx < _x) {
					mw -= _x - cx;
					mx = _x - cx;
					if(mw > _width1) {
						mw = _width1;
					}
				} else if(cx + cw > _x + _width1) {
					mw = _x + _width1 - cx;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(cy < _y) {
					mh -= _y - cy;
					my = _y - cy;
					if(mh > _height) {
						mh = _height;
					}
				} else if(cy + ch > _y + _height) {
					mh = _y + _height - cy;
				}
				if(mh < 0) {
					mh = 0;
				}
				var z = this.z;
				var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
				if(stylePos < 0) {
					if(this.uiDisplay.autoAddStyles) {
						var _this = this.uiDisplay;
						var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
						var styleId = this.cursorStyle.getUUID();
						_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
						if(_this.stylePosBeforeFont == 0) {
							_this.addProgram(program,null,true);
						} else {
							_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
						}
						_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
						_this.stylePosBeforeFont++;
					} else {
						var c = js_Boot.getClass(this.cursorStyle);
						throw haxe_Exception.thrown("Error by creating cursor for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
					}
				} else {
					this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
					if(this.cursorProgram == null) {
						var _this = this.uiDisplay;
						var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
						var stylePos1 = stylePos;
						_this.usedStyleProgram[stylePos1] = program;
						var afterProgram = null;
						while(stylePos1-- > 0) {
							afterProgram = _this.usedStyleProgram[stylePos1];
							if(afterProgram != null) {
								break;
							}
						}
						_this.addProgram(program,afterProgram,afterProgram == null);
					}
				}
				this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
				if(addUpdate) {
					this.cursorProgram.addElement(this.cursorElement);
				}
			}
		}
	}
	,removeInputFocus: function() {
		if(this.uiDisplay != null) {
			this.uiDisplay.inputFocusElement = null;
		}
		if(this.line != null && this.cursorStyle != null) {
			if(this.cursorIsVisible && this.cursorElement != null && this.isVisible) {
				this.cursorProgram.removeElement(this.cursorElement);
			}
		}
		this.cursorIsVisible = false;
	}
	,keyDown: function(keyCode,modifier) {
		if(this.input2Action != null) {
			var this1 = this.input2Action.keyboardState;
			var keyState = this1[keyCode < 1073741881 ? keyCode : keyCode - 1073741881 + (127 + 1)];
			if(keyState != null) {
				var repeated = false;
				if(!keyState.isDown) {
					keyState.isDown = true;
				} else {
					repeated = true;
				}
				if(keyState.keyCombo != null) {
					var called = false;
					var actionState;
					var _g = 0;
					var _g1 = keyState.keyCombo;
					while(_g < _g1.length) {
						var keyCombo = _g1[_g];
						++_g;
						var tmp;
						if(keyCombo.keyCode != -1) {
							var keyState = this1[keyCombo.keyCode];
							tmp = keyState == null ? false : keyState.isDown;
						} else {
							tmp = true;
						}
						if(tmp) {
							actionState = keyCombo.actionState;
							if(!actionState.single || !called) {
								called = true;
								keyCombo.downBy = true;
								if(!repeated) {
									actionState.pressed++;
								}
								var actionState1 = [actionState];
								if(actionState1[0].repeatKeyboardDefault) {
									actionState1[0].action(true,actionState1[0].player);
								} else if(!repeated) {
									if(actionState1[0].each || actionState1[0].pressed == 1) {
										actionState1[0].action(true,actionState1[0].player);
									}
									if(actionState1[0].repeatRate != 0 && actionState1[0].timer == null) {
										if(actionState1[0].repeatDelay == 0) {
											actionState1[0].timer = new haxe_Timer(actionState1[0].repeatRate);
											actionState1[0].timer.run = ($_=actionState1[0],$bind($_,$_.callDownAction));
										} else {
											actionState1[0].timer = new haxe_Timer(actionState1[0].repeatDelay);
											actionState1[0].timer.run = (function(actionState) {
												return function() {
													actionState[0].action(true,actionState[0].player);
													actionState[0].timer.stop();
													actionState[0].timer = new haxe_Timer(actionState[0].repeatRate);
													actionState[0].timer.run = ($_=actionState[0],$bind($_,$_.callDownAction));
												};
											})(actionState1);
										}
									}
								}
								if(actionState.single) {
									break;
								}
							}
						}
					}
				}
			}
		} else {
			var this1 = peote_ui_interactive_input2action_InputTextLine.input2Action.keyboardState;
			var keyState = this1[keyCode < 1073741881 ? keyCode : keyCode - 1073741881 + (127 + 1)];
			if(keyState != null) {
				var repeated = false;
				if(!keyState.isDown) {
					keyState.isDown = true;
				} else {
					repeated = true;
				}
				if(keyState.keyCombo != null) {
					var called = false;
					var actionState;
					var _g = 0;
					var _g1 = keyState.keyCombo;
					while(_g < _g1.length) {
						var keyCombo = _g1[_g];
						++_g;
						var tmp;
						if(keyCombo.keyCode != -1) {
							var keyState = this1[keyCombo.keyCode];
							tmp = keyState == null ? false : keyState.isDown;
						} else {
							tmp = true;
						}
						if(tmp) {
							actionState = keyCombo.actionState;
							if(!actionState.single || !called) {
								called = true;
								keyCombo.downBy = true;
								if(!repeated) {
									actionState.pressed++;
								}
								var actionState2 = [actionState];
								if(actionState2[0].repeatKeyboardDefault) {
									actionState2[0].action(true,actionState2[0].player);
								} else if(!repeated) {
									if(actionState2[0].each || actionState2[0].pressed == 1) {
										actionState2[0].action(true,actionState2[0].player);
									}
									if(actionState2[0].repeatRate != 0 && actionState2[0].timer == null) {
										if(actionState2[0].repeatDelay == 0) {
											actionState2[0].timer = new haxe_Timer(actionState2[0].repeatRate);
											actionState2[0].timer.run = ($_=actionState2[0],$bind($_,$_.callDownAction));
										} else {
											actionState2[0].timer = new haxe_Timer(actionState2[0].repeatDelay);
											actionState2[0].timer.run = (function(actionState) {
												return function() {
													actionState[0].action(true,actionState[0].player);
													actionState[0].timer.stop();
													actionState[0].timer = new haxe_Timer(actionState[0].repeatRate);
													actionState[0].timer.run = ($_=actionState[0],$bind($_,$_.callDownAction));
												};
											})(actionState2);
										}
									}
								}
								if(actionState.single) {
									break;
								}
							}
						}
					}
				}
			}
		}
	}
	,keyUp: function(keyCode,modifier) {
		if(this.input2Action != null) {
			input2action_InputState.callUpActions(this.input2Action.keyboardState,keyCode < 1073741881 ? keyCode : keyCode - 1073741881 + (127 + 1),true);
		} else {
			input2action_InputState.callUpActions(peote_ui_interactive_input2action_InputTextLine.input2Action.keyboardState,keyCode < 1073741881 ? keyCode : keyCode - 1073741881 + (127 + 1),true);
		}
	}
	,onSelectStart: function(e) {
		this.selectFrom = this.selectTo = 0;
		if(this.line != null && this.selectionStyle != null) {
			if(this.selectionIsVisible && this.selectionElement != null && this.isVisible) {
				this.selectionProgram.removeElement(this.selectionElement);
			}
		}
		this.selectionIsVisible = false;
		var line = this.line;
		var pos = this.fontProgram.pageLineGetCharAtPosition(line.pageLine,line.x,line.size,line.offset,e.x,true);
		if(pos != this.cursor) {
			if(pos < 0) {
				this.cursor = 0;
			} else if(this.line != null) {
				if(pos > this.line.pageLine.glyphes.length) {
					this.cursor = this.line.pageLine.glyphes.length;
				} else {
					this.cursor = pos;
				}
			} else if(pos > (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length) {
				this.cursor = (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length;
			} else {
				this.cursor = pos;
			}
			if(this.line != null && this.cursorStyle != null) {
				var addUpdate = this.isVisible && this.cursorIsVisible;
				var create = this.cursorElement == null;
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var _width1 = _width;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = this.yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
						break;
					default:
						y_offset = this.yOffset;
					}
				}
				var y_offset1 = y_offset + this.topSpace;
				_width1 += 3;
				var line = this.line;
				var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
				var cw = 2;
				var cy = Math.round(this.y + y_offset1);
				var ch = Math.round(this.line.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = cw;
				var mh = ch;
				if(cx < _x) {
					mw -= _x - cx;
					mx = _x - cx;
					if(mw > _width1) {
						mw = _width1;
					}
				} else if(cx + cw > _x + _width1) {
					mw = _x + _width1 - cx;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(cy < _y) {
					mh -= _y - cy;
					my = _y - cy;
					if(mh > _height) {
						mh = _height;
					}
				} else if(cy + ch > _y + _height) {
					mh = _y + _height - cy;
				}
				if(mh < 0) {
					mh = 0;
				}
				if(create) {
					var z = this.z;
					var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
					if(stylePos < 0) {
						if(this.uiDisplay.autoAddStyles) {
							var _this = this.uiDisplay;
							var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
							var styleId = this.cursorStyle.getUUID();
							_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
							if(_this.stylePosBeforeFont == 0) {
								_this.addProgram(program,null,true);
							} else {
								_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
							}
							_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
							_this.stylePosBeforeFont++;
						} else {
							var c = js_Boot.getClass(this.cursorStyle);
							throw haxe_Exception.thrown("Error by creating cursor for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
						}
					} else {
						this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
						if(this.cursorProgram == null) {
							var _this = this.uiDisplay;
							var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
							var stylePos1 = stylePos;
							_this.usedStyleProgram[stylePos1] = program;
							var afterProgram = null;
							while(stylePos1-- > 0) {
								afterProgram = _this.usedStyleProgram[stylePos1];
								if(afterProgram != null) {
									break;
								}
							}
							_this.addProgram(program,afterProgram,afterProgram == null);
						}
					}
					this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
					if(addUpdate) {
						this.cursorProgram.addElement(this.cursorElement);
					}
				} else {
					this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.cursorProgram.update(this.cursorElement);
					}
				}
			}
		}
		this.selectStartFrom = this.cursor;
		this.xOffsetAtSelectStart = this.xOffset;
		if(this.line != null && this.selectionStyle != null) {
			if(this.selectionIsVisible && this.selectionElement != null && this.isVisible) {
				this.selectionProgram.removeElement(this.selectionElement);
			}
		}
		this.selectionIsVisible = false;
	}
	,onSelectStop: function(e) {
	}
	,onSelect: function(e) {
		var globalX = e.x;
		if(this.uiDisplay == null) {
			throw haxe_Exception.thrown("Error, ui-element has to add to an UIDisplay instance first");
		}
		var _this = this.uiDisplay;
		var peoteView = null;
		if(peoteView == null) {
			peoteView = _this.peoteView;
		}
		if((peoteView != null ? (globalX / peoteView.xz - peoteView.xOffset - _this.xOffset - _this.x) / _this.xz : (globalX - _this.xOffset - _this.x) / _this.xz) - this.x < this.leftSpace) {
			var globalX = e.x;
			if(this.uiDisplay == null) {
				throw haxe_Exception.thrown("Error, ui-element has to add to an UIDisplay instance first");
			}
			var _this = this.uiDisplay;
			var peoteView = null;
			if(peoteView == null) {
				peoteView = _this.peoteView;
			}
			var tmp = (peoteView != null ? (globalX / peoteView.xz - peoteView.xOffset - _this.xOffset - _this.x) / _this.xz : (globalX - _this.xOffset - _this.x) / _this.xz) - this.x;
			var _xOffset = this.leftSpace;
			var tmp1;
			if((this.autoSize & 2) > 0) {
				tmp1 = _xOffset;
			} else {
				switch(this.hAlign) {
				case 1:
					tmp1 = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
					break;
				case 2:
					tmp1 = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
					break;
				default:
					tmp1 = _xOffset;
				}
			}
			if(tmp < tmp1 + this.xOffsetAtSelectStart) {
				var tmp;
				if((this.autoSize & 2) > 0) {
					tmp = 0;
				} else {
					switch(this.hAlign) {
					case 1:
						tmp = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2;
						break;
					case 2:
						tmp = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize;
						break;
					default:
						tmp = 0;
					}
				}
				this.xOffset = Math.max(-tmp,this.xOffsetAtSelectStart);
			} else {
				var tmp = this.leftSpace;
				var globalX = e.x;
				if(this.uiDisplay == null) {
					throw haxe_Exception.thrown("Error, ui-element has to add to an UIDisplay instance first");
				}
				var _this = this.uiDisplay;
				var peoteView = null;
				if(peoteView == null) {
					peoteView = _this.peoteView;
				}
				this.xOffset = tmp - ((peoteView != null ? (globalX / peoteView.xz - peoteView.xOffset - _this.xOffset - _this.x) / _this.xz : (globalX - _this.xOffset - _this.x) / _this.xz) - this.x) + this.xOffsetAtSelectStart;
			}
			if(this.autoSize > 0) {
				if((this.autoSize & 2) > 0) {
					var w = (this.line.pageLine.textSize | 0) + this.leftSpace + this.rightSpace;
					if(w != this.width) {
						if(this.resizeWidth != null) {
							var oldWidth = this.width;
							this.resizeWidth(this.width = w,w - oldWidth);
						} else {
							this.width = w;
						}
					}
				}
				if((this.autoSize & 1) > 0) {
					var h = (this.line.pageLine.height | 0) + this.topSpace + this.bottomSpace;
					if(h != this.height) {
						if(this.resizeHeight != null) {
							var oldHeight = this.height;
							this.resizeHeight(this.height = h,h - oldHeight);
						} else {
							this.height = h;
						}
					}
				}
				if(this.hasMoveEvent != 0) {
					var _this = this.pickableMove;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
					if(this.isVisible) {
						this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
					}
				}
				if(this.hasClickEvent != 0) {
					var _this = this.pickableClick;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
					if(this.isVisible) {
						this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
					}
				}
			}
			var _x = this.x + this.leftSpace;
			var _y = this.y + this.topSpace;
			var _width = this.width - this.leftSpace - this.rightSpace;
			var _height = this.height - this.topSpace - this.bottomSpace;
			var y_offset;
			if((this.autoSize & 1) > 0) {
				y_offset = this.yOffset;
			} else {
				switch(this.vAlign) {
				case 4:
					y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
					break;
				case 8:
					y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
					break;
				default:
					y_offset = this.yOffset;
				}
			}
			var _this = this.fontProgram;
			var line = this.line;
			var _xOffset = this.xOffset;
			var offset;
			if((this.autoSize & 2) > 0) {
				offset = _xOffset;
			} else {
				switch(this.hAlign) {
				case 1:
					offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
					break;
				case 2:
					offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
					break;
				default:
					offset = _xOffset;
				}
			}
			var addRemoveGlyphes = this.isVisible;
			if(addRemoveGlyphes == null) {
				addRemoveGlyphes = true;
			}
			_this.pageLineSetPositionSize(line.pageLine,line.x,_width,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
			line.x = _x;
			line.size = _width;
			if(offset != null) {
				line.offset = offset;
			}
			if(this.isVisible) {
				this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
			}
			if(this.masked) {
				if(this.maskX > this.leftSpace) {
					_x = this.x + this.maskX;
				}
				if(this.maskY > this.topSpace) {
					_y = this.y + this.maskY;
				}
				if(this.x + this.maskX + this.maskWidth < _x + _width) {
					_width = this.maskX + this.maskWidth + this.x - _x;
				}
				if(this.y + this.maskY + this.maskHeight < _y + _height) {
					_height = this.maskY + this.maskHeight + this.y - _y;
				}
			}
			var maskElement = this.maskElement;
			var autoUpdate = this.isVisible;
			if(autoUpdate == null) {
				autoUpdate = true;
			}
			maskElement.x = _x;
			maskElement.y = _y;
			maskElement.w = _width;
			maskElement.h = _height;
			if(autoUpdate) {
				this.fontProgram.maskBuffer.updateElement(maskElement);
			}
			if(this.backgroundElement != null) {
				this.backgroundElement.setLayout(this);
				if(this.isVisible && this.backgroundIsVisible) {
					this.backgroundProgram.update(this.backgroundElement);
				}
			}
			if(this.selectionElement != null) {
				var y_offset1 = y_offset + this.topSpace;
				var addUpdate = this.isVisible && this.selectionIsVisible;
				var line = this.line;
				var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
				var line = this.line;
				var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
				var selectY = Math.round(this.y + y_offset1);
				var selectHeight = Math.round(this.line.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = selectWidth;
				var mh = selectHeight;
				if(selectX < _x) {
					mw -= _x - selectX;
					mx = _x - selectX;
					if(mw > _width) {
						mw = _width;
					}
				} else if(selectX + selectWidth > _x + _width) {
					mw = _x + _width - selectX;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(selectY < _y) {
					mh -= _y - selectY;
					my = _y - selectY;
					if(mh > _height) {
						mh = _height;
					}
				} else if(selectY + selectHeight > _y + _height) {
					mh = _y + _height - selectY;
				}
				if(mh < 0) {
					mh = 0;
				}
				this.selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
				if(addUpdate) {
					this.selectionProgram.update(this.selectionElement);
				}
			}
			if(this.cursorElement != null) {
				var y_offset1 = y_offset + this.topSpace;
				var addUpdate = this.isVisible && this.cursorIsVisible;
				var _width1 = _width;
				_width1 += 3;
				var line = this.line;
				var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
				var cw = 2;
				var cy = Math.round(this.y + y_offset1);
				var ch = Math.round(this.line.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = cw;
				var mh = ch;
				if(cx < _x) {
					mw -= _x - cx;
					mx = _x - cx;
					if(mw > _width1) {
						mw = _width1;
					}
				} else if(cx + cw > _x + _width1) {
					mw = _x + _width1 - cx;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(cy < _y) {
					mh -= _y - cy;
					my = _y - cy;
					if(mh > _height) {
						mh = _height;
					}
				} else if(cy + ch > _y + _height) {
					mh = _y + _height - cy;
				}
				if(mh < 0) {
					mh = 0;
				}
				this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
				if(addUpdate) {
					this.cursorProgram.update(this.cursorElement);
				}
			}
		} else {
			var globalX = e.x;
			if(this.uiDisplay == null) {
				throw haxe_Exception.thrown("Error, ui-element has to add to an UIDisplay instance first");
			}
			var _this = this.uiDisplay;
			var peoteView = null;
			if(peoteView == null) {
				peoteView = _this.peoteView;
			}
			if((peoteView != null ? (globalX / peoteView.xz - peoteView.xOffset - _this.xOffset - _this.x) / _this.xz : (globalX - _this.xOffset - _this.x) / _this.xz) - this.x > this.width - this.rightSpace) {
				var globalX = e.x;
				if(this.uiDisplay == null) {
					throw haxe_Exception.thrown("Error, ui-element has to add to an UIDisplay instance first");
				}
				var _this = this.uiDisplay;
				var peoteView = null;
				if(peoteView == null) {
					peoteView = _this.peoteView;
				}
				var tmp = (peoteView != null ? (globalX / peoteView.xz - peoteView.xOffset - _this.xOffset - _this.x) / _this.xz : (globalX - _this.xOffset - _this.x) / _this.xz) - this.x;
				var _xOffset = this.line.pageLine.textSize + this.leftSpace + this.xOffsetAtSelectStart;
				var tmp1;
				if((this.autoSize & 2) > 0) {
					tmp1 = _xOffset;
				} else {
					switch(this.hAlign) {
					case 1:
						tmp1 = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
						break;
					case 2:
						tmp1 = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
						break;
					default:
						tmp1 = _xOffset;
					}
				}
				if(tmp > tmp1) {
					var _xOffset = Math.floor(this.line.pageLine.textSize) - this.width + this.leftSpace + this.rightSpace;
					var tmp;
					if((this.autoSize & 2) > 0) {
						tmp = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							tmp = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
							break;
						case 2:
							tmp = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
							break;
						default:
							tmp = _xOffset;
						}
					}
					this.xOffset = Math.min(-tmp,this.xOffsetAtSelectStart);
				} else {
					var tmp = this.width;
					var globalX = e.x;
					if(this.uiDisplay == null) {
						throw haxe_Exception.thrown("Error, ui-element has to add to an UIDisplay instance first");
					}
					var _this = this.uiDisplay;
					var peoteView = null;
					if(peoteView == null) {
						peoteView = _this.peoteView;
					}
					this.xOffset = tmp - ((peoteView != null ? (globalX / peoteView.xz - peoteView.xOffset - _this.xOffset - _this.x) / _this.xz : (globalX - _this.xOffset - _this.x) / _this.xz) - this.x) - this.rightSpace + this.xOffsetAtSelectStart;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.line.pageLine.textSize | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.line.pageLine.height | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = this.yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
						break;
					default:
						y_offset = this.yOffset;
					}
				}
				var _this = this.fontProgram;
				var line = this.line;
				var _xOffset = this.xOffset;
				var offset;
				if((this.autoSize & 2) > 0) {
					offset = _xOffset;
				} else {
					switch(this.hAlign) {
					case 1:
						offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
						break;
					case 2:
						offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
						break;
					default:
						offset = _xOffset;
					}
				}
				var addRemoveGlyphes = this.isVisible;
				if(addRemoveGlyphes == null) {
					addRemoveGlyphes = true;
				}
				_this.pageLineSetPositionSize(line.pageLine,line.x,_width,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
				line.x = _x;
				line.size = _width;
				if(offset != null) {
					line.offset = offset;
				}
				if(this.isVisible) {
					this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
				}
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var maskElement = this.maskElement;
				var autoUpdate = this.isVisible;
				if(autoUpdate == null) {
					autoUpdate = true;
				}
				maskElement.x = _x;
				maskElement.y = _y;
				maskElement.w = _width;
				maskElement.h = _height;
				if(autoUpdate) {
					this.fontProgram.maskBuffer.updateElement(maskElement);
				}
				if(this.backgroundElement != null) {
					this.backgroundElement.setLayout(this);
					if(this.isVisible && this.backgroundIsVisible) {
						this.backgroundProgram.update(this.backgroundElement);
					}
				}
				if(this.selectionElement != null) {
					var y_offset1 = y_offset + this.topSpace;
					var addUpdate = this.isVisible && this.selectionIsVisible;
					var line = this.line;
					var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
					var line = this.line;
					var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
					var selectY = Math.round(this.y + y_offset1);
					var selectHeight = Math.round(this.line.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = selectWidth;
					var mh = selectHeight;
					if(selectX < _x) {
						mw -= _x - selectX;
						mx = _x - selectX;
						if(mw > _width) {
							mw = _width;
						}
					} else if(selectX + selectWidth > _x + _width) {
						mw = _x + _width - selectX;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(selectY < _y) {
						mh -= _y - selectY;
						my = _y - selectY;
						if(mh > _height) {
							mh = _height;
						}
					} else if(selectY + selectHeight > _y + _height) {
						mh = _y + _height - selectY;
					}
					if(mh < 0) {
						mh = 0;
					}
					this.selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.selectionProgram.update(this.selectionElement);
					}
				}
				if(this.cursorElement != null) {
					var y_offset1 = y_offset + this.topSpace;
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var _width1 = _width;
					_width1 += 3;
					var line = this.line;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.y + y_offset1);
					var ch = Math.round(this.line.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.cursorProgram.update(this.cursorElement);
					}
				}
			} else if(this.xOffset != this.xOffsetAtSelectStart) {
				this.xOffset = this.xOffsetAtSelectStart;
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.line.pageLine.textSize | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.line.pageLine.height | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = this.yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
						break;
					default:
						y_offset = this.yOffset;
					}
				}
				var _this = this.fontProgram;
				var line = this.line;
				var _xOffset = this.xOffset;
				var offset;
				if((this.autoSize & 2) > 0) {
					offset = _xOffset;
				} else {
					switch(this.hAlign) {
					case 1:
						offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
						break;
					case 2:
						offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
						break;
					default:
						offset = _xOffset;
					}
				}
				var addRemoveGlyphes = this.isVisible;
				if(addRemoveGlyphes == null) {
					addRemoveGlyphes = true;
				}
				_this.pageLineSetPositionSize(line.pageLine,line.x,_width,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
				line.x = _x;
				line.size = _width;
				if(offset != null) {
					line.offset = offset;
				}
				if(this.isVisible) {
					this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
				}
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var maskElement = this.maskElement;
				var autoUpdate = this.isVisible;
				if(autoUpdate == null) {
					autoUpdate = true;
				}
				maskElement.x = _x;
				maskElement.y = _y;
				maskElement.w = _width;
				maskElement.h = _height;
				if(autoUpdate) {
					this.fontProgram.maskBuffer.updateElement(maskElement);
				}
				if(this.backgroundElement != null) {
					this.backgroundElement.setLayout(this);
					if(this.isVisible && this.backgroundIsVisible) {
						this.backgroundProgram.update(this.backgroundElement);
					}
				}
				if(this.selectionElement != null) {
					var y_offset1 = y_offset + this.topSpace;
					var addUpdate = this.isVisible && this.selectionIsVisible;
					var line = this.line;
					var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
					var line = this.line;
					var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
					var selectY = Math.round(this.y + y_offset1);
					var selectHeight = Math.round(this.line.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = selectWidth;
					var mh = selectHeight;
					if(selectX < _x) {
						mw -= _x - selectX;
						mx = _x - selectX;
						if(mw > _width) {
							mw = _width;
						}
					} else if(selectX + selectWidth > _x + _width) {
						mw = _x + _width - selectX;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(selectY < _y) {
						mh -= _y - selectY;
						my = _y - selectY;
						if(mh > _height) {
							mh = _height;
						}
					} else if(selectY + selectHeight > _y + _height) {
						mh = _y + _height - selectY;
					}
					if(mh < 0) {
						mh = 0;
					}
					this.selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.selectionProgram.update(this.selectionElement);
					}
				}
				if(this.cursorElement != null) {
					var y_offset1 = y_offset + this.topSpace;
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var _width1 = _width;
					_width1 += 3;
					var line = this.line;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.y + y_offset1);
					var ch = Math.round(this.line.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.cursorProgram.update(this.cursorElement);
					}
				}
			}
		}
		var line = this.line;
		var pos = this.fontProgram.pageLineGetCharAtPosition(line.pageLine,line.x,line.size,line.offset,e.x,true);
		if(pos != this.cursor) {
			if(pos < 0) {
				this.cursor = 0;
			} else if(this.line != null) {
				if(pos > this.line.pageLine.glyphes.length) {
					this.cursor = this.line.pageLine.glyphes.length;
				} else {
					this.cursor = pos;
				}
			} else if(pos > (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length) {
				this.cursor = (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length;
			} else {
				this.cursor = pos;
			}
			if(this.line != null && this.cursorStyle != null) {
				var addUpdate = this.isVisible && this.cursorIsVisible;
				var create = this.cursorElement == null;
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var _width1 = _width;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = this.yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
						break;
					default:
						y_offset = this.yOffset;
					}
				}
				var y_offset1 = y_offset + this.topSpace;
				_width1 += 3;
				var line = this.line;
				var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
				var cw = 2;
				var cy = Math.round(this.y + y_offset1);
				var ch = Math.round(this.line.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = cw;
				var mh = ch;
				if(cx < _x) {
					mw -= _x - cx;
					mx = _x - cx;
					if(mw > _width1) {
						mw = _width1;
					}
				} else if(cx + cw > _x + _width1) {
					mw = _x + _width1 - cx;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(cy < _y) {
					mh -= _y - cy;
					my = _y - cy;
					if(mh > _height) {
						mh = _height;
					}
				} else if(cy + ch > _y + _height) {
					mh = _y + _height - cy;
				}
				if(mh < 0) {
					mh = 0;
				}
				if(create) {
					var z = this.z;
					var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
					if(stylePos < 0) {
						if(this.uiDisplay.autoAddStyles) {
							var _this = this.uiDisplay;
							var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
							var styleId = this.cursorStyle.getUUID();
							_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
							if(_this.stylePosBeforeFont == 0) {
								_this.addProgram(program,null,true);
							} else {
								_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
							}
							_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
							_this.stylePosBeforeFont++;
						} else {
							var c = js_Boot.getClass(this.cursorStyle);
							throw haxe_Exception.thrown("Error by creating cursor for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
						}
					} else {
						this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
						if(this.cursorProgram == null) {
							var _this = this.uiDisplay;
							var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
							var stylePos1 = stylePos;
							_this.usedStyleProgram[stylePos1] = program;
							var afterProgram = null;
							while(stylePos1-- > 0) {
								afterProgram = _this.usedStyleProgram[stylePos1];
								if(afterProgram != null) {
									break;
								}
							}
							_this.addProgram(program,afterProgram,afterProgram == null);
						}
					}
					this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
					if(addUpdate) {
						this.cursorProgram.addElement(this.cursorElement);
					}
				} else {
					this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.cursorProgram.update(this.cursorElement);
					}
				}
			}
		}
		this.select(this.selectStartFrom,this.cursor);
	}
	,setText: function(text,fontStyle,forceAutoWidth,forceAutoHeight,autoUpdate) {
		if(autoUpdate == null) {
			autoUpdate = false;
		}
		if(fontStyle != null) {
			this.fontStyle = fontStyle;
		}
		if(forceAutoWidth != null) {
			if(forceAutoWidth) {
				this.autoSize |= 2;
			} else {
				this.autoSize &= 1;
			}
		}
		if(forceAutoHeight != null) {
			if(forceAutoHeight) {
				this.autoSize |= 1;
			} else {
				this.autoSize &= 2;
			}
		}
		if(this.line != null) {
			var line = this.line;
			var x = this.x;
			var size = (this.autoSize & 2) > 0 ? null : this.width;
			var offset = this.xOffset;
			var addRemoveGlyphes = this.isVisible;
			if(addRemoveGlyphes == null) {
				addRemoveGlyphes = true;
			}
			if(x != null) {
				line.x = x;
			}
			if(size != null) {
				line.size = size;
			}
			if(offset != null) {
				line.offset = offset;
			}
			this.fontProgram.pageLineSet(line.pageLine,text,x,this.y,line.size,line.offset,this.fontStyle,null,addRemoveGlyphes,null);
			if(this.cursor > this.line.pageLine.glyphes.length) {
				var pos = this.line.pageLine.glyphes.length;
				if(pos != this.cursor) {
					if(pos < 0) {
						this.cursor = 0;
					} else if(this.line != null) {
						if(pos > this.line.pageLine.glyphes.length) {
							this.cursor = this.line.pageLine.glyphes.length;
						} else {
							this.cursor = pos;
						}
					} else if(pos > (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length) {
						this.cursor = (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length;
					} else {
						this.cursor = pos;
					}
					if(this.line != null && this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = this.yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
								break;
							default:
								y_offset = this.yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var line = this.line;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.y + y_offset1);
						var ch = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
			if(this.selectTo > this.line.pageLine.glyphes.length) {
				this.selectTo = this.line.pageLine.glyphes.length;
			}
			if(autoUpdate) {
				if((this.autoSize & 2) > 0) {
					var updateBgMaskSelCursor = true;
					var lineUpdatePosition = false;
					var lineUpdateSize = true;
					var lineUpdateOffset = false;
					if(lineUpdateOffset == null) {
						lineUpdateOffset = true;
					}
					if(lineUpdateSize == null) {
						lineUpdateSize = true;
					}
					if(lineUpdatePosition == null) {
						lineUpdatePosition = true;
					}
					if(updateBgMaskSelCursor == null) {
						updateBgMaskSelCursor = true;
					}
					if(this.autoSize > 0) {
						if((this.autoSize & 2) > 0) {
							var w = (this.line.pageLine.textSize | 0) + this.leftSpace + this.rightSpace;
							if(w != this.width) {
								if(this.resizeWidth != null) {
									var oldWidth = this.width;
									this.resizeWidth(this.width = w,w - oldWidth);
								} else {
									this.width = w;
								}
							}
						}
						if((this.autoSize & 1) > 0) {
							var h = (this.line.pageLine.height | 0) + this.topSpace + this.bottomSpace;
							if(h != this.height) {
								if(this.resizeHeight != null) {
									var oldHeight = this.height;
									this.resizeHeight(this.height = h,h - oldHeight);
								} else {
									this.height = h;
								}
							}
						}
						if(this.hasMoveEvent != 0) {
							var _this = this.pickableMove;
							_this.uiElement = this;
							_this.z = this.z;
							if(this.masked) {
								_this.x = this.x + this.maskX;
								_this.y = this.y + this.maskY;
								_this.w = this.maskWidth;
								_this.h = this.maskHeight;
							} else {
								_this.x = this.x;
								_this.y = this.y;
								_this.w = this.width;
								_this.h = this.height;
							}
							if(this.isVisible) {
								this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
							}
						}
						if(this.hasClickEvent != 0) {
							var _this = this.pickableClick;
							_this.uiElement = this;
							_this.z = this.z;
							if(this.masked) {
								_this.x = this.x + this.maskX;
								_this.y = this.y + this.maskY;
								_this.w = this.maskWidth;
								_this.h = this.maskHeight;
							} else {
								_this.x = this.x;
								_this.y = this.y;
								_this.w = this.width;
								_this.h = this.height;
							}
							if(this.isVisible) {
								this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
							}
						}
					}
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = this.yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
							break;
						default:
							y_offset = this.yOffset;
						}
					}
					if(lineUpdatePosition && lineUpdateSize) {
						var _this = this.fontProgram;
						var line = this.line;
						var offset;
						if(lineUpdateOffset) {
							var _xOffset = this.xOffset;
							if((this.autoSize & 2) > 0) {
								offset = _xOffset;
							} else {
								switch(this.hAlign) {
								case 1:
									offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
									break;
								case 2:
									offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
									break;
								default:
									offset = _xOffset;
								}
							}
						} else {
							offset = null;
						}
						var addRemoveGlyphes = this.isVisible;
						if(addRemoveGlyphes == null) {
							addRemoveGlyphes = true;
						}
						_this.pageLineSetPositionSize(line.pageLine,line.x,_width,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
						line.x = _x;
						line.size = _width;
						if(offset != null) {
							line.offset = offset;
						}
					} else if(lineUpdatePosition) {
						var _this = this.fontProgram;
						var line = this.line;
						var offset;
						if(lineUpdateOffset) {
							var _xOffset = this.xOffset;
							if((this.autoSize & 2) > 0) {
								offset = _xOffset;
							} else {
								switch(this.hAlign) {
								case 1:
									offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
									break;
								case 2:
									offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
									break;
								default:
									offset = _xOffset;
								}
							}
						} else {
							offset = null;
						}
						var addRemoveGlyphes = this.isVisible;
						if(addRemoveGlyphes == null) {
							addRemoveGlyphes = true;
						}
						_this.pageLineSetPosition(line.pageLine,line.x,line.size,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
						line.x = _x;
						if(offset != null) {
							line.offset = offset;
						}
					} else if(lineUpdateSize) {
						var _this = this.fontProgram;
						var line = this.line;
						var offset;
						if(lineUpdateOffset) {
							var _xOffset = this.xOffset;
							if((this.autoSize & 2) > 0) {
								offset = _xOffset;
							} else {
								switch(this.hAlign) {
								case 1:
									offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
									break;
								case 2:
									offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
									break;
								default:
									offset = _xOffset;
								}
							}
						} else {
							offset = null;
						}
						var addRemoveGlyphes = this.isVisible;
						if(addRemoveGlyphes == null) {
							addRemoveGlyphes = true;
						}
						_this.pageLineSetSize(line.pageLine,line.x,_width,line.offset,offset,addRemoveGlyphes);
						line.size = _width;
						if(offset != null) {
							line.offset = offset;
						}
					} else {
						var _this = this.fontProgram;
						var line = this.line;
						var _xOffset = this.xOffset;
						var offset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
						var addRemoveGlyphes = this.isVisible;
						if(addRemoveGlyphes == null) {
							addRemoveGlyphes = true;
						}
						_this.pageLineSetOffset(line.pageLine,line.x,line.size,line.offset,offset,addRemoveGlyphes);
						line.offset = offset;
					}
					if(this.isVisible) {
						this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
					}
					if(updateBgMaskSelCursor) {
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var maskElement = this.maskElement;
						var autoUpdate = this.isVisible;
						if(autoUpdate == null) {
							autoUpdate = true;
						}
						maskElement.x = _x;
						maskElement.y = _y;
						maskElement.w = _width;
						maskElement.h = _height;
						if(autoUpdate) {
							this.fontProgram.maskBuffer.updateElement(maskElement);
						}
						if(this.backgroundElement != null) {
							this.backgroundElement.setLayout(this);
							if(this.isVisible && this.backgroundIsVisible) {
								this.backgroundProgram.update(this.backgroundElement);
							}
						}
						if(this.selectionElement != null) {
							var y_offset1 = y_offset + this.topSpace;
							var addUpdate = this.isVisible && this.selectionIsVisible;
							var line = this.line;
							var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
							var line = this.line;
							var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
							var selectY = Math.round(this.y + y_offset1);
							var selectHeight = Math.round(this.line.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = selectWidth;
							var mh = selectHeight;
							if(selectX < _x) {
								mw -= _x - selectX;
								mx = _x - selectX;
								if(mw > _width) {
									mw = _width;
								}
							} else if(selectX + selectWidth > _x + _width) {
								mw = _x + _width - selectX;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(selectY < _y) {
								mh -= _y - selectY;
								my = _y - selectY;
								if(mh > _height) {
									mh = _height;
								}
							} else if(selectY + selectHeight > _y + _height) {
								mh = _y + _height - selectY;
							}
							if(mh < 0) {
								mh = 0;
							}
							this.selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.selectionProgram.update(this.selectionElement);
							}
						}
						if(this.cursorElement != null) {
							var y_offset1 = y_offset + this.topSpace;
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var _width1 = _width;
							_width1 += 3;
							var line = this.line;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.y + y_offset1);
							var ch = Math.round(this.line.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				} else if(this.hAlign == 0 && this.isVisible) {
					this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
				} else {
					var updateBgMaskSelCursor = false;
					var lineUpdatePosition = false;
					var lineUpdateSize = false;
					var lineUpdateOffset = true;
					if(lineUpdateOffset == null) {
						lineUpdateOffset = true;
					}
					if(lineUpdateSize == null) {
						lineUpdateSize = true;
					}
					if(lineUpdatePosition == null) {
						lineUpdatePosition = true;
					}
					if(updateBgMaskSelCursor == null) {
						updateBgMaskSelCursor = true;
					}
					if(this.autoSize > 0) {
						if((this.autoSize & 2) > 0) {
							var w = (this.line.pageLine.textSize | 0) + this.leftSpace + this.rightSpace;
							if(w != this.width) {
								if(this.resizeWidth != null) {
									var oldWidth = this.width;
									this.resizeWidth(this.width = w,w - oldWidth);
								} else {
									this.width = w;
								}
							}
						}
						if((this.autoSize & 1) > 0) {
							var h = (this.line.pageLine.height | 0) + this.topSpace + this.bottomSpace;
							if(h != this.height) {
								if(this.resizeHeight != null) {
									var oldHeight = this.height;
									this.resizeHeight(this.height = h,h - oldHeight);
								} else {
									this.height = h;
								}
							}
						}
						if(this.hasMoveEvent != 0) {
							var _this = this.pickableMove;
							_this.uiElement = this;
							_this.z = this.z;
							if(this.masked) {
								_this.x = this.x + this.maskX;
								_this.y = this.y + this.maskY;
								_this.w = this.maskWidth;
								_this.h = this.maskHeight;
							} else {
								_this.x = this.x;
								_this.y = this.y;
								_this.w = this.width;
								_this.h = this.height;
							}
							if(this.isVisible) {
								this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
							}
						}
						if(this.hasClickEvent != 0) {
							var _this = this.pickableClick;
							_this.uiElement = this;
							_this.z = this.z;
							if(this.masked) {
								_this.x = this.x + this.maskX;
								_this.y = this.y + this.maskY;
								_this.w = this.maskWidth;
								_this.h = this.maskHeight;
							} else {
								_this.x = this.x;
								_this.y = this.y;
								_this.w = this.width;
								_this.h = this.height;
							}
							if(this.isVisible) {
								this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
							}
						}
					}
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = this.yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
							break;
						default:
							y_offset = this.yOffset;
						}
					}
					if(lineUpdatePosition && lineUpdateSize) {
						var _this = this.fontProgram;
						var line = this.line;
						var offset;
						if(lineUpdateOffset) {
							var _xOffset = this.xOffset;
							if((this.autoSize & 2) > 0) {
								offset = _xOffset;
							} else {
								switch(this.hAlign) {
								case 1:
									offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
									break;
								case 2:
									offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
									break;
								default:
									offset = _xOffset;
								}
							}
						} else {
							offset = null;
						}
						var addRemoveGlyphes = this.isVisible;
						if(addRemoveGlyphes == null) {
							addRemoveGlyphes = true;
						}
						_this.pageLineSetPositionSize(line.pageLine,line.x,_width,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
						line.x = _x;
						line.size = _width;
						if(offset != null) {
							line.offset = offset;
						}
					} else if(lineUpdatePosition) {
						var _this = this.fontProgram;
						var line = this.line;
						var offset;
						if(lineUpdateOffset) {
							var _xOffset = this.xOffset;
							if((this.autoSize & 2) > 0) {
								offset = _xOffset;
							} else {
								switch(this.hAlign) {
								case 1:
									offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
									break;
								case 2:
									offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
									break;
								default:
									offset = _xOffset;
								}
							}
						} else {
							offset = null;
						}
						var addRemoveGlyphes = this.isVisible;
						if(addRemoveGlyphes == null) {
							addRemoveGlyphes = true;
						}
						_this.pageLineSetPosition(line.pageLine,line.x,line.size,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
						line.x = _x;
						if(offset != null) {
							line.offset = offset;
						}
					} else if(lineUpdateSize) {
						var _this = this.fontProgram;
						var line = this.line;
						var offset;
						if(lineUpdateOffset) {
							var _xOffset = this.xOffset;
							if((this.autoSize & 2) > 0) {
								offset = _xOffset;
							} else {
								switch(this.hAlign) {
								case 1:
									offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
									break;
								case 2:
									offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
									break;
								default:
									offset = _xOffset;
								}
							}
						} else {
							offset = null;
						}
						var addRemoveGlyphes = this.isVisible;
						if(addRemoveGlyphes == null) {
							addRemoveGlyphes = true;
						}
						_this.pageLineSetSize(line.pageLine,line.x,_width,line.offset,offset,addRemoveGlyphes);
						line.size = _width;
						if(offset != null) {
							line.offset = offset;
						}
					} else {
						var _this = this.fontProgram;
						var line = this.line;
						var _xOffset = this.xOffset;
						var offset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
						var addRemoveGlyphes = this.isVisible;
						if(addRemoveGlyphes == null) {
							addRemoveGlyphes = true;
						}
						_this.pageLineSetOffset(line.pageLine,line.x,line.size,line.offset,offset,addRemoveGlyphes);
						line.offset = offset;
					}
					if(this.isVisible) {
						this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
					}
					if(updateBgMaskSelCursor) {
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var maskElement = this.maskElement;
						var autoUpdate = this.isVisible;
						if(autoUpdate == null) {
							autoUpdate = true;
						}
						maskElement.x = _x;
						maskElement.y = _y;
						maskElement.w = _width;
						maskElement.h = _height;
						if(autoUpdate) {
							this.fontProgram.maskBuffer.updateElement(maskElement);
						}
						if(this.backgroundElement != null) {
							this.backgroundElement.setLayout(this);
							if(this.isVisible && this.backgroundIsVisible) {
								this.backgroundProgram.update(this.backgroundElement);
							}
						}
						if(this.selectionElement != null) {
							var y_offset1 = y_offset + this.topSpace;
							var addUpdate = this.isVisible && this.selectionIsVisible;
							var line = this.line;
							var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
							var line = this.line;
							var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
							var selectY = Math.round(this.y + y_offset1);
							var selectHeight = Math.round(this.line.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = selectWidth;
							var mh = selectHeight;
							if(selectX < _x) {
								mw -= _x - selectX;
								mx = _x - selectX;
								if(mw > _width) {
									mw = _width;
								}
							} else if(selectX + selectWidth > _x + _width) {
								mw = _x + _width - selectX;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(selectY < _y) {
								mh -= _y - selectY;
								my = _y - selectY;
								if(mh > _height) {
									mh = _height;
								}
							} else if(selectY + selectHeight > _y + _height) {
								mh = _y + _height - selectY;
							}
							if(mh < 0) {
								mh = 0;
							}
							this.selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.selectionProgram.update(this.selectionElement);
							}
						}
						if(this.cursorElement != null) {
							var y_offset1 = y_offset + this.topSpace;
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var _width1 = _width;
							_width1 += 3;
							var line = this.line;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.y + y_offset1);
							var ch = Math.round(this.line.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
		} else if(this.line == null || text == null) {
			this.text = text;
		} else {
			this.setText(text);
		}
	}
	,textInput: function(chars) {
		if(this.line == null) {
			return;
		}
		var oldCursor = this.cursor;
		if(this.selectFrom != this.selectTo) {
			var line = this.line;
			var from = this.selectFrom;
			var addRemoveGlyphes = this.isVisible;
			if(addRemoveGlyphes == null) {
				addRemoveGlyphes = true;
			}
			if(from == null) {
				from = 0;
			}
			this.fontProgram.pageLineDeleteChars(line.pageLine,line.x,line.size,line.offset,from,this.selectTo,addRemoveGlyphes);
			oldCursor = this.selectFrom;
			this.selectFrom = this.selectTo = 0;
			if(this.line != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElement != null && this.isVisible) {
					this.selectionProgram.removeElement(this.selectionElement);
				}
			}
			this.selectionIsVisible = false;
		}
		var oldLength = this.line.pageLine.glyphes.length;
		var position = oldCursor;
		if(position == null) {
			position = 0;
		}
		var line = this.line;
		var position1 = position;
		var addRemoveGlyphes = this.isVisible;
		if(addRemoveGlyphes == null) {
			addRemoveGlyphes = true;
		}
		if(position1 == null) {
			position1 = 0;
		}
		this.fontProgram.pageLineInsertChars(line.pageLine,line.x,line.size,line.offset,chars,position1,this.fontStyle,addRemoveGlyphes,null);
		if((this.autoSize & 2) > 0) {
			var updateBgMaskSelCursor = true;
			var lineUpdatePosition = false;
			var lineUpdateSize = true;
			var lineUpdateOffset = false;
			if(lineUpdateOffset == null) {
				lineUpdateOffset = true;
			}
			if(lineUpdateSize == null) {
				lineUpdateSize = true;
			}
			if(lineUpdatePosition == null) {
				lineUpdatePosition = true;
			}
			if(updateBgMaskSelCursor == null) {
				updateBgMaskSelCursor = true;
			}
			if(this.autoSize > 0) {
				if((this.autoSize & 2) > 0) {
					var w = (this.line.pageLine.textSize | 0) + this.leftSpace + this.rightSpace;
					if(w != this.width) {
						if(this.resizeWidth != null) {
							var oldWidth = this.width;
							this.resizeWidth(this.width = w,w - oldWidth);
						} else {
							this.width = w;
						}
					}
				}
				if((this.autoSize & 1) > 0) {
					var h = (this.line.pageLine.height | 0) + this.topSpace + this.bottomSpace;
					if(h != this.height) {
						if(this.resizeHeight != null) {
							var oldHeight = this.height;
							this.resizeHeight(this.height = h,h - oldHeight);
						} else {
							this.height = h;
						}
					}
				}
				if(this.hasMoveEvent != 0) {
					var _this = this.pickableMove;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
					if(this.isVisible) {
						this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
					}
				}
				if(this.hasClickEvent != 0) {
					var _this = this.pickableClick;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
					if(this.isVisible) {
						this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
					}
				}
			}
			var _x = this.x + this.leftSpace;
			var _y = this.y + this.topSpace;
			var _width = this.width - this.leftSpace - this.rightSpace;
			var _height = this.height - this.topSpace - this.bottomSpace;
			var y_offset;
			if((this.autoSize & 1) > 0) {
				y_offset = this.yOffset;
			} else {
				switch(this.vAlign) {
				case 4:
					y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
					break;
				case 8:
					y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
					break;
				default:
					y_offset = this.yOffset;
				}
			}
			if(lineUpdatePosition && lineUpdateSize) {
				var _this = this.fontProgram;
				var line = this.line;
				var offset;
				if(lineUpdateOffset) {
					var _xOffset = this.xOffset;
					if((this.autoSize & 2) > 0) {
						offset = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
							break;
						case 2:
							offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
							break;
						default:
							offset = _xOffset;
						}
					}
				} else {
					offset = null;
				}
				var addRemoveGlyphes = this.isVisible;
				if(addRemoveGlyphes == null) {
					addRemoveGlyphes = true;
				}
				_this.pageLineSetPositionSize(line.pageLine,line.x,_width,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
				line.x = _x;
				line.size = _width;
				if(offset != null) {
					line.offset = offset;
				}
			} else if(lineUpdatePosition) {
				var _this = this.fontProgram;
				var line = this.line;
				var offset;
				if(lineUpdateOffset) {
					var _xOffset = this.xOffset;
					if((this.autoSize & 2) > 0) {
						offset = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
							break;
						case 2:
							offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
							break;
						default:
							offset = _xOffset;
						}
					}
				} else {
					offset = null;
				}
				var addRemoveGlyphes = this.isVisible;
				if(addRemoveGlyphes == null) {
					addRemoveGlyphes = true;
				}
				_this.pageLineSetPosition(line.pageLine,line.x,line.size,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
				line.x = _x;
				if(offset != null) {
					line.offset = offset;
				}
			} else if(lineUpdateSize) {
				var _this = this.fontProgram;
				var line = this.line;
				var offset;
				if(lineUpdateOffset) {
					var _xOffset = this.xOffset;
					if((this.autoSize & 2) > 0) {
						offset = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
							break;
						case 2:
							offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
							break;
						default:
							offset = _xOffset;
						}
					}
				} else {
					offset = null;
				}
				var addRemoveGlyphes = this.isVisible;
				if(addRemoveGlyphes == null) {
					addRemoveGlyphes = true;
				}
				_this.pageLineSetSize(line.pageLine,line.x,_width,line.offset,offset,addRemoveGlyphes);
				line.size = _width;
				if(offset != null) {
					line.offset = offset;
				}
			} else {
				var _this = this.fontProgram;
				var line = this.line;
				var _xOffset = this.xOffset;
				var offset;
				if((this.autoSize & 2) > 0) {
					offset = _xOffset;
				} else {
					switch(this.hAlign) {
					case 1:
						offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
						break;
					case 2:
						offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
						break;
					default:
						offset = _xOffset;
					}
				}
				var addRemoveGlyphes = this.isVisible;
				if(addRemoveGlyphes == null) {
					addRemoveGlyphes = true;
				}
				_this.pageLineSetOffset(line.pageLine,line.x,line.size,line.offset,offset,addRemoveGlyphes);
				line.offset = offset;
			}
			if(this.isVisible) {
				this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
			}
			if(updateBgMaskSelCursor) {
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var maskElement = this.maskElement;
				var autoUpdate = this.isVisible;
				if(autoUpdate == null) {
					autoUpdate = true;
				}
				maskElement.x = _x;
				maskElement.y = _y;
				maskElement.w = _width;
				maskElement.h = _height;
				if(autoUpdate) {
					this.fontProgram.maskBuffer.updateElement(maskElement);
				}
				if(this.backgroundElement != null) {
					this.backgroundElement.setLayout(this);
					if(this.isVisible && this.backgroundIsVisible) {
						this.backgroundProgram.update(this.backgroundElement);
					}
				}
				if(this.selectionElement != null) {
					var y_offset1 = y_offset + this.topSpace;
					var addUpdate = this.isVisible && this.selectionIsVisible;
					var line = this.line;
					var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
					var line = this.line;
					var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
					var selectY = Math.round(this.y + y_offset1);
					var selectHeight = Math.round(this.line.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = selectWidth;
					var mh = selectHeight;
					if(selectX < _x) {
						mw -= _x - selectX;
						mx = _x - selectX;
						if(mw > _width) {
							mw = _width;
						}
					} else if(selectX + selectWidth > _x + _width) {
						mw = _x + _width - selectX;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(selectY < _y) {
						mh -= _y - selectY;
						my = _y - selectY;
						if(mh > _height) {
							mh = _height;
						}
					} else if(selectY + selectHeight > _y + _height) {
						mh = _y + _height - selectY;
					}
					if(mh < 0) {
						mh = 0;
					}
					this.selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.selectionProgram.update(this.selectionElement);
					}
				}
				if(this.cursorElement != null) {
					var y_offset1 = y_offset + this.topSpace;
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var _width1 = _width;
					_width1 += 3;
					var line = this.line;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.y + y_offset1);
					var ch = Math.round(this.line.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.cursorProgram.update(this.cursorElement);
					}
				}
			}
		} else if(this.hAlign == 0 && this.isVisible) {
			this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
		} else {
			var updateBgMaskSelCursor = false;
			var lineUpdatePosition = false;
			var lineUpdateSize = false;
			var lineUpdateOffset = true;
			if(lineUpdateOffset == null) {
				lineUpdateOffset = true;
			}
			if(lineUpdateSize == null) {
				lineUpdateSize = true;
			}
			if(lineUpdatePosition == null) {
				lineUpdatePosition = true;
			}
			if(updateBgMaskSelCursor == null) {
				updateBgMaskSelCursor = true;
			}
			if(this.autoSize > 0) {
				if((this.autoSize & 2) > 0) {
					var w = (this.line.pageLine.textSize | 0) + this.leftSpace + this.rightSpace;
					if(w != this.width) {
						if(this.resizeWidth != null) {
							var oldWidth = this.width;
							this.resizeWidth(this.width = w,w - oldWidth);
						} else {
							this.width = w;
						}
					}
				}
				if((this.autoSize & 1) > 0) {
					var h = (this.line.pageLine.height | 0) + this.topSpace + this.bottomSpace;
					if(h != this.height) {
						if(this.resizeHeight != null) {
							var oldHeight = this.height;
							this.resizeHeight(this.height = h,h - oldHeight);
						} else {
							this.height = h;
						}
					}
				}
				if(this.hasMoveEvent != 0) {
					var _this = this.pickableMove;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
					if(this.isVisible) {
						this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
					}
				}
				if(this.hasClickEvent != 0) {
					var _this = this.pickableClick;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
					if(this.isVisible) {
						this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
					}
				}
			}
			var _x = this.x + this.leftSpace;
			var _y = this.y + this.topSpace;
			var _width = this.width - this.leftSpace - this.rightSpace;
			var _height = this.height - this.topSpace - this.bottomSpace;
			var y_offset;
			if((this.autoSize & 1) > 0) {
				y_offset = this.yOffset;
			} else {
				switch(this.vAlign) {
				case 4:
					y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
					break;
				case 8:
					y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
					break;
				default:
					y_offset = this.yOffset;
				}
			}
			if(lineUpdatePosition && lineUpdateSize) {
				var _this = this.fontProgram;
				var line = this.line;
				var offset;
				if(lineUpdateOffset) {
					var _xOffset = this.xOffset;
					if((this.autoSize & 2) > 0) {
						offset = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
							break;
						case 2:
							offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
							break;
						default:
							offset = _xOffset;
						}
					}
				} else {
					offset = null;
				}
				var addRemoveGlyphes = this.isVisible;
				if(addRemoveGlyphes == null) {
					addRemoveGlyphes = true;
				}
				_this.pageLineSetPositionSize(line.pageLine,line.x,_width,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
				line.x = _x;
				line.size = _width;
				if(offset != null) {
					line.offset = offset;
				}
			} else if(lineUpdatePosition) {
				var _this = this.fontProgram;
				var line = this.line;
				var offset;
				if(lineUpdateOffset) {
					var _xOffset = this.xOffset;
					if((this.autoSize & 2) > 0) {
						offset = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
							break;
						case 2:
							offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
							break;
						default:
							offset = _xOffset;
						}
					}
				} else {
					offset = null;
				}
				var addRemoveGlyphes = this.isVisible;
				if(addRemoveGlyphes == null) {
					addRemoveGlyphes = true;
				}
				_this.pageLineSetPosition(line.pageLine,line.x,line.size,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
				line.x = _x;
				if(offset != null) {
					line.offset = offset;
				}
			} else if(lineUpdateSize) {
				var _this = this.fontProgram;
				var line = this.line;
				var offset;
				if(lineUpdateOffset) {
					var _xOffset = this.xOffset;
					if((this.autoSize & 2) > 0) {
						offset = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
							break;
						case 2:
							offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
							break;
						default:
							offset = _xOffset;
						}
					}
				} else {
					offset = null;
				}
				var addRemoveGlyphes = this.isVisible;
				if(addRemoveGlyphes == null) {
					addRemoveGlyphes = true;
				}
				_this.pageLineSetSize(line.pageLine,line.x,_width,line.offset,offset,addRemoveGlyphes);
				line.size = _width;
				if(offset != null) {
					line.offset = offset;
				}
			} else {
				var _this = this.fontProgram;
				var line = this.line;
				var _xOffset = this.xOffset;
				var offset;
				if((this.autoSize & 2) > 0) {
					offset = _xOffset;
				} else {
					switch(this.hAlign) {
					case 1:
						offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
						break;
					case 2:
						offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
						break;
					default:
						offset = _xOffset;
					}
				}
				var addRemoveGlyphes = this.isVisible;
				if(addRemoveGlyphes == null) {
					addRemoveGlyphes = true;
				}
				_this.pageLineSetOffset(line.pageLine,line.x,line.size,line.offset,offset,addRemoveGlyphes);
				line.offset = offset;
			}
			if(this.isVisible) {
				this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
			}
			if(updateBgMaskSelCursor) {
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var maskElement = this.maskElement;
				var autoUpdate = this.isVisible;
				if(autoUpdate == null) {
					autoUpdate = true;
				}
				maskElement.x = _x;
				maskElement.y = _y;
				maskElement.w = _width;
				maskElement.h = _height;
				if(autoUpdate) {
					this.fontProgram.maskBuffer.updateElement(maskElement);
				}
				if(this.backgroundElement != null) {
					this.backgroundElement.setLayout(this);
					if(this.isVisible && this.backgroundIsVisible) {
						this.backgroundProgram.update(this.backgroundElement);
					}
				}
				if(this.selectionElement != null) {
					var y_offset1 = y_offset + this.topSpace;
					var addUpdate = this.isVisible && this.selectionIsVisible;
					var line = this.line;
					var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
					var line = this.line;
					var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
					var selectY = Math.round(this.y + y_offset1);
					var selectHeight = Math.round(this.line.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = selectWidth;
					var mh = selectHeight;
					if(selectX < _x) {
						mw -= _x - selectX;
						mx = _x - selectX;
						if(mw > _width) {
							mw = _width;
						}
					} else if(selectX + selectWidth > _x + _width) {
						mw = _x + _width - selectX;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(selectY < _y) {
						mh -= _y - selectY;
						my = _y - selectY;
						if(mh > _height) {
							mh = _height;
						}
					} else if(selectY + selectHeight > _y + _height) {
						mh = _y + _height - selectY;
					}
					if(mh < 0) {
						mh = 0;
					}
					this.selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.selectionProgram.update(this.selectionElement);
					}
				}
				if(this.cursorElement != null) {
					var y_offset1 = y_offset + this.topSpace;
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var _width1 = _width;
					_width1 += 3;
					var line = this.line;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.y + y_offset1);
					var ch = Math.round(this.line.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.cursorProgram.update(this.cursorElement);
					}
				}
			}
		}
		var pos = oldCursor + (this.line.pageLine.glyphes.length - oldLength);
		if(pos != this.cursor) {
			if(pos < 0) {
				this.cursor = 0;
			} else if(this.line != null) {
				if(pos > this.line.pageLine.glyphes.length) {
					this.cursor = this.line.pageLine.glyphes.length;
				} else {
					this.cursor = pos;
				}
			} else if(pos > (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length) {
				this.cursor = (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length;
			} else {
				this.cursor = pos;
			}
			if(this.line != null && this.cursorStyle != null) {
				var addUpdate = this.isVisible && this.cursorIsVisible;
				var create = this.cursorElement == null;
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var _width1 = _width;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = this.yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
						break;
					default:
						y_offset = this.yOffset;
					}
				}
				var y_offset1 = y_offset + this.topSpace;
				_width1 += 3;
				var line = this.line;
				var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
				var cw = 2;
				var cy = Math.round(this.y + y_offset1);
				var ch = Math.round(this.line.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = cw;
				var mh = ch;
				if(cx < _x) {
					mw -= _x - cx;
					mx = _x - cx;
					if(mw > _width1) {
						mw = _width1;
					}
				} else if(cx + cw > _x + _width1) {
					mw = _x + _width1 - cx;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(cy < _y) {
					mh -= _y - cy;
					my = _y - cy;
					if(mh > _height) {
						mh = _height;
					}
				} else if(cy + ch > _y + _height) {
					mh = _y + _height - cy;
				}
				if(mh < 0) {
					mh = 0;
				}
				if(create) {
					var z = this.z;
					var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
					if(stylePos < 0) {
						if(this.uiDisplay.autoAddStyles) {
							var _this = this.uiDisplay;
							var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
							var styleId = this.cursorStyle.getUUID();
							_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
							if(_this.stylePosBeforeFont == 0) {
								_this.addProgram(program,null,true);
							} else {
								_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
							}
							_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
							_this.stylePosBeforeFont++;
						} else {
							var c = js_Boot.getClass(this.cursorStyle);
							throw haxe_Exception.thrown("Error by creating cursor for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
						}
					} else {
						this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
						if(this.cursorProgram == null) {
							var _this = this.uiDisplay;
							var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
							var stylePos1 = stylePos;
							_this.usedStyleProgram[stylePos1] = program;
							var afterProgram = null;
							while(stylePos1-- > 0) {
								afterProgram = _this.usedStyleProgram[stylePos1];
								if(afterProgram != null) {
									break;
								}
							}
							_this.addProgram(program,afterProgram,afterProgram == null);
						}
					}
					this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
					if(addUpdate) {
						this.cursorProgram.addElement(this.cursorElement);
					}
				} else {
					this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.cursorProgram.update(this.cursorElement);
					}
				}
			}
		}
	}
	,deleteChar: function() {
		if(this.line == null) {
			return;
		}
		if(this.selectFrom != this.selectTo) {
			var line = this.line;
			var from = this.selectFrom;
			var addRemoveGlyphes = this.isVisible;
			if(addRemoveGlyphes == null) {
				addRemoveGlyphes = true;
			}
			if(from == null) {
				from = 0;
			}
			this.fontProgram.pageLineDeleteChars(line.pageLine,line.x,line.size,line.offset,from,this.selectTo,addRemoveGlyphes);
			var pos = this.selectFrom;
			if(pos != this.cursor) {
				if(pos < 0) {
					this.cursor = 0;
				} else if(this.line != null) {
					if(pos > this.line.pageLine.glyphes.length) {
						this.cursor = this.line.pageLine.glyphes.length;
					} else {
						this.cursor = pos;
					}
				} else if(pos > (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length) {
					this.cursor = (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length;
				} else {
					this.cursor = pos;
				}
				if(this.line != null && this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = this.yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
							break;
						default:
							y_offset = this.yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var line = this.line;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.y + y_offset1);
					var ch = Math.round(this.line.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
			this.selectFrom = this.selectTo = 0;
			if(this.line != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElement != null && this.isVisible) {
					this.selectionProgram.removeElement(this.selectionElement);
				}
			}
			this.selectionIsVisible = false;
			if((this.autoSize & 2) > 0) {
				var updateBgMaskSelCursor = true;
				var lineUpdatePosition = false;
				var lineUpdateSize = true;
				var lineUpdateOffset = false;
				if(lineUpdateOffset == null) {
					lineUpdateOffset = true;
				}
				if(lineUpdateSize == null) {
					lineUpdateSize = true;
				}
				if(lineUpdatePosition == null) {
					lineUpdatePosition = true;
				}
				if(updateBgMaskSelCursor == null) {
					updateBgMaskSelCursor = true;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.line.pageLine.textSize | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.line.pageLine.height | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = this.yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
						break;
					default:
						y_offset = this.yOffset;
					}
				}
				if(lineUpdatePosition && lineUpdateSize) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetPositionSize(line.pageLine,line.x,_width,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
					line.x = _x;
					line.size = _width;
					if(offset != null) {
						line.offset = offset;
					}
				} else if(lineUpdatePosition) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetPosition(line.pageLine,line.x,line.size,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
					line.x = _x;
					if(offset != null) {
						line.offset = offset;
					}
				} else if(lineUpdateSize) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetSize(line.pageLine,line.x,_width,line.offset,offset,addRemoveGlyphes);
					line.size = _width;
					if(offset != null) {
						line.offset = offset;
					}
				} else {
					var _this = this.fontProgram;
					var line = this.line;
					var _xOffset = this.xOffset;
					var offset;
					if((this.autoSize & 2) > 0) {
						offset = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
							break;
						case 2:
							offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
							break;
						default:
							offset = _xOffset;
						}
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetOffset(line.pageLine,line.x,line.size,line.offset,offset,addRemoveGlyphes);
					line.offset = offset;
				}
				if(this.isVisible) {
					this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
				}
				if(updateBgMaskSelCursor) {
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var maskElement = this.maskElement;
					var autoUpdate = this.isVisible;
					if(autoUpdate == null) {
						autoUpdate = true;
					}
					maskElement.x = _x;
					maskElement.y = _y;
					maskElement.w = _width;
					maskElement.h = _height;
					if(autoUpdate) {
						this.fontProgram.maskBuffer.updateElement(maskElement);
					}
					if(this.backgroundElement != null) {
						this.backgroundElement.setLayout(this);
						if(this.isVisible && this.backgroundIsVisible) {
							this.backgroundProgram.update(this.backgroundElement);
						}
					}
					if(this.selectionElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.selectionIsVisible;
						var line = this.line;
						var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
						var line = this.line;
						var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
						var selectY = Math.round(this.y + y_offset1);
						var selectHeight = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = selectWidth;
						var mh = selectHeight;
						if(selectX < _x) {
							mw -= _x - selectX;
							mx = _x - selectX;
							if(mw > _width) {
								mw = _width;
							}
						} else if(selectX + selectWidth > _x + _width) {
							mw = _x + _width - selectX;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(selectY < _y) {
							mh -= _y - selectY;
							my = _y - selectY;
							if(mh > _height) {
								mh = _height;
							}
						} else if(selectY + selectHeight > _y + _height) {
							mh = _y + _height - selectY;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.selectionProgram.update(this.selectionElement);
						}
					}
					if(this.cursorElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var _width1 = _width;
						_width1 += 3;
						var line = this.line;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.y + y_offset1);
						var ch = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			} else if(this.hAlign == 0 && this.isVisible) {
				this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
			} else {
				var updateBgMaskSelCursor = false;
				var lineUpdatePosition = false;
				var lineUpdateSize = false;
				var lineUpdateOffset = true;
				if(lineUpdateOffset == null) {
					lineUpdateOffset = true;
				}
				if(lineUpdateSize == null) {
					lineUpdateSize = true;
				}
				if(lineUpdatePosition == null) {
					lineUpdatePosition = true;
				}
				if(updateBgMaskSelCursor == null) {
					updateBgMaskSelCursor = true;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.line.pageLine.textSize | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.line.pageLine.height | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = this.yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
						break;
					default:
						y_offset = this.yOffset;
					}
				}
				if(lineUpdatePosition && lineUpdateSize) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetPositionSize(line.pageLine,line.x,_width,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
					line.x = _x;
					line.size = _width;
					if(offset != null) {
						line.offset = offset;
					}
				} else if(lineUpdatePosition) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetPosition(line.pageLine,line.x,line.size,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
					line.x = _x;
					if(offset != null) {
						line.offset = offset;
					}
				} else if(lineUpdateSize) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetSize(line.pageLine,line.x,_width,line.offset,offset,addRemoveGlyphes);
					line.size = _width;
					if(offset != null) {
						line.offset = offset;
					}
				} else {
					var _this = this.fontProgram;
					var line = this.line;
					var _xOffset = this.xOffset;
					var offset;
					if((this.autoSize & 2) > 0) {
						offset = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
							break;
						case 2:
							offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
							break;
						default:
							offset = _xOffset;
						}
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetOffset(line.pageLine,line.x,line.size,line.offset,offset,addRemoveGlyphes);
					line.offset = offset;
				}
				if(this.isVisible) {
					this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
				}
				if(updateBgMaskSelCursor) {
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var maskElement = this.maskElement;
					var autoUpdate = this.isVisible;
					if(autoUpdate == null) {
						autoUpdate = true;
					}
					maskElement.x = _x;
					maskElement.y = _y;
					maskElement.w = _width;
					maskElement.h = _height;
					if(autoUpdate) {
						this.fontProgram.maskBuffer.updateElement(maskElement);
					}
					if(this.backgroundElement != null) {
						this.backgroundElement.setLayout(this);
						if(this.isVisible && this.backgroundIsVisible) {
							this.backgroundProgram.update(this.backgroundElement);
						}
					}
					if(this.selectionElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.selectionIsVisible;
						var line = this.line;
						var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
						var line = this.line;
						var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
						var selectY = Math.round(this.y + y_offset1);
						var selectHeight = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = selectWidth;
						var mh = selectHeight;
						if(selectX < _x) {
							mw -= _x - selectX;
							mx = _x - selectX;
							if(mw > _width) {
								mw = _width;
							}
						} else if(selectX + selectWidth > _x + _width) {
							mw = _x + _width - selectX;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(selectY < _y) {
							mh -= _y - selectY;
							my = _y - selectY;
							if(mh > _height) {
								mh = _height;
							}
						} else if(selectY + selectHeight > _y + _height) {
							mh = _y + _height - selectY;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.selectionProgram.update(this.selectionElement);
						}
					}
					if(this.cursorElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var _width1 = _width;
						_width1 += 3;
						var line = this.line;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.y + y_offset1);
						var ch = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
		} else if(this.cursor < this.line.pageLine.glyphes.length) {
			var line = this.line;
			var position = this.cursor;
			var addRemoveGlyphes = this.isVisible;
			if(addRemoveGlyphes == null) {
				addRemoveGlyphes = true;
			}
			if(position == null) {
				position = 0;
			}
			this.fontProgram.pageLineDeleteChar(line.pageLine,line.x,line.size,line.offset,position,addRemoveGlyphes);
			if((this.autoSize & 2) > 0) {
				var updateBgMaskSelCursor = true;
				var lineUpdatePosition = false;
				var lineUpdateSize = true;
				var lineUpdateOffset = false;
				if(lineUpdateOffset == null) {
					lineUpdateOffset = true;
				}
				if(lineUpdateSize == null) {
					lineUpdateSize = true;
				}
				if(lineUpdatePosition == null) {
					lineUpdatePosition = true;
				}
				if(updateBgMaskSelCursor == null) {
					updateBgMaskSelCursor = true;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.line.pageLine.textSize | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.line.pageLine.height | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = this.yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
						break;
					default:
						y_offset = this.yOffset;
					}
				}
				if(lineUpdatePosition && lineUpdateSize) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetPositionSize(line.pageLine,line.x,_width,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
					line.x = _x;
					line.size = _width;
					if(offset != null) {
						line.offset = offset;
					}
				} else if(lineUpdatePosition) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetPosition(line.pageLine,line.x,line.size,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
					line.x = _x;
					if(offset != null) {
						line.offset = offset;
					}
				} else if(lineUpdateSize) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetSize(line.pageLine,line.x,_width,line.offset,offset,addRemoveGlyphes);
					line.size = _width;
					if(offset != null) {
						line.offset = offset;
					}
				} else {
					var _this = this.fontProgram;
					var line = this.line;
					var _xOffset = this.xOffset;
					var offset;
					if((this.autoSize & 2) > 0) {
						offset = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
							break;
						case 2:
							offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
							break;
						default:
							offset = _xOffset;
						}
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetOffset(line.pageLine,line.x,line.size,line.offset,offset,addRemoveGlyphes);
					line.offset = offset;
				}
				if(this.isVisible) {
					this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
				}
				if(updateBgMaskSelCursor) {
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var maskElement = this.maskElement;
					var autoUpdate = this.isVisible;
					if(autoUpdate == null) {
						autoUpdate = true;
					}
					maskElement.x = _x;
					maskElement.y = _y;
					maskElement.w = _width;
					maskElement.h = _height;
					if(autoUpdate) {
						this.fontProgram.maskBuffer.updateElement(maskElement);
					}
					if(this.backgroundElement != null) {
						this.backgroundElement.setLayout(this);
						if(this.isVisible && this.backgroundIsVisible) {
							this.backgroundProgram.update(this.backgroundElement);
						}
					}
					if(this.selectionElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.selectionIsVisible;
						var line = this.line;
						var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
						var line = this.line;
						var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
						var selectY = Math.round(this.y + y_offset1);
						var selectHeight = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = selectWidth;
						var mh = selectHeight;
						if(selectX < _x) {
							mw -= _x - selectX;
							mx = _x - selectX;
							if(mw > _width) {
								mw = _width;
							}
						} else if(selectX + selectWidth > _x + _width) {
							mw = _x + _width - selectX;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(selectY < _y) {
							mh -= _y - selectY;
							my = _y - selectY;
							if(mh > _height) {
								mh = _height;
							}
						} else if(selectY + selectHeight > _y + _height) {
							mh = _y + _height - selectY;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.selectionProgram.update(this.selectionElement);
						}
					}
					if(this.cursorElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var _width1 = _width;
						_width1 += 3;
						var line = this.line;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.y + y_offset1);
						var ch = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			} else if(this.hAlign == 0 && this.isVisible) {
				this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
			} else {
				var updateBgMaskSelCursor = false;
				var lineUpdatePosition = false;
				var lineUpdateSize = false;
				var lineUpdateOffset = true;
				if(lineUpdateOffset == null) {
					lineUpdateOffset = true;
				}
				if(lineUpdateSize == null) {
					lineUpdateSize = true;
				}
				if(lineUpdatePosition == null) {
					lineUpdatePosition = true;
				}
				if(updateBgMaskSelCursor == null) {
					updateBgMaskSelCursor = true;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.line.pageLine.textSize | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.line.pageLine.height | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = this.yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
						break;
					default:
						y_offset = this.yOffset;
					}
				}
				if(lineUpdatePosition && lineUpdateSize) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetPositionSize(line.pageLine,line.x,_width,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
					line.x = _x;
					line.size = _width;
					if(offset != null) {
						line.offset = offset;
					}
				} else if(lineUpdatePosition) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetPosition(line.pageLine,line.x,line.size,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
					line.x = _x;
					if(offset != null) {
						line.offset = offset;
					}
				} else if(lineUpdateSize) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetSize(line.pageLine,line.x,_width,line.offset,offset,addRemoveGlyphes);
					line.size = _width;
					if(offset != null) {
						line.offset = offset;
					}
				} else {
					var _this = this.fontProgram;
					var line = this.line;
					var _xOffset = this.xOffset;
					var offset;
					if((this.autoSize & 2) > 0) {
						offset = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
							break;
						case 2:
							offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
							break;
						default:
							offset = _xOffset;
						}
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetOffset(line.pageLine,line.x,line.size,line.offset,offset,addRemoveGlyphes);
					line.offset = offset;
				}
				if(this.isVisible) {
					this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
				}
				if(updateBgMaskSelCursor) {
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var maskElement = this.maskElement;
					var autoUpdate = this.isVisible;
					if(autoUpdate == null) {
						autoUpdate = true;
					}
					maskElement.x = _x;
					maskElement.y = _y;
					maskElement.w = _width;
					maskElement.h = _height;
					if(autoUpdate) {
						this.fontProgram.maskBuffer.updateElement(maskElement);
					}
					if(this.backgroundElement != null) {
						this.backgroundElement.setLayout(this);
						if(this.isVisible && this.backgroundIsVisible) {
							this.backgroundProgram.update(this.backgroundElement);
						}
					}
					if(this.selectionElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.selectionIsVisible;
						var line = this.line;
						var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
						var line = this.line;
						var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
						var selectY = Math.round(this.y + y_offset1);
						var selectHeight = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = selectWidth;
						var mh = selectHeight;
						if(selectX < _x) {
							mw -= _x - selectX;
							mx = _x - selectX;
							if(mw > _width) {
								mw = _width;
							}
						} else if(selectX + selectWidth > _x + _width) {
							mw = _x + _width - selectX;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(selectY < _y) {
							mh -= _y - selectY;
							my = _y - selectY;
							if(mh > _height) {
								mh = _height;
							}
						} else if(selectY + selectHeight > _y + _height) {
							mh = _y + _height - selectY;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.selectionProgram.update(this.selectionElement);
						}
					}
					if(this.cursorElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var _width1 = _width;
						_width1 += 3;
						var line = this.line;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.y + y_offset1);
						var ch = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
		}
	}
	,backspace: function() {
		if(this.line == null) {
			return;
		}
		if(this.selectFrom != this.selectTo) {
			var line = this.line;
			var from = this.selectFrom;
			var addRemoveGlyphes = this.isVisible;
			if(addRemoveGlyphes == null) {
				addRemoveGlyphes = true;
			}
			if(from == null) {
				from = 0;
			}
			this.fontProgram.pageLineDeleteChars(line.pageLine,line.x,line.size,line.offset,from,this.selectTo,addRemoveGlyphes);
			var pos = this.selectFrom;
			if(pos != this.cursor) {
				if(pos < 0) {
					this.cursor = 0;
				} else if(this.line != null) {
					if(pos > this.line.pageLine.glyphes.length) {
						this.cursor = this.line.pageLine.glyphes.length;
					} else {
						this.cursor = pos;
					}
				} else if(pos > (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length) {
					this.cursor = (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length;
				} else {
					this.cursor = pos;
				}
				if(this.line != null && this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = this.yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
							break;
						default:
							y_offset = this.yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var line = this.line;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.y + y_offset1);
					var ch = Math.round(this.line.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
			this.selectFrom = this.selectTo = 0;
			if(this.line != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElement != null && this.isVisible) {
					this.selectionProgram.removeElement(this.selectionElement);
				}
			}
			this.selectionIsVisible = false;
			if((this.autoSize & 2) > 0) {
				var updateBgMaskSelCursor = true;
				var lineUpdatePosition = false;
				var lineUpdateSize = true;
				var lineUpdateOffset = false;
				if(lineUpdateOffset == null) {
					lineUpdateOffset = true;
				}
				if(lineUpdateSize == null) {
					lineUpdateSize = true;
				}
				if(lineUpdatePosition == null) {
					lineUpdatePosition = true;
				}
				if(updateBgMaskSelCursor == null) {
					updateBgMaskSelCursor = true;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.line.pageLine.textSize | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.line.pageLine.height | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = this.yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
						break;
					default:
						y_offset = this.yOffset;
					}
				}
				if(lineUpdatePosition && lineUpdateSize) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetPositionSize(line.pageLine,line.x,_width,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
					line.x = _x;
					line.size = _width;
					if(offset != null) {
						line.offset = offset;
					}
				} else if(lineUpdatePosition) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetPosition(line.pageLine,line.x,line.size,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
					line.x = _x;
					if(offset != null) {
						line.offset = offset;
					}
				} else if(lineUpdateSize) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetSize(line.pageLine,line.x,_width,line.offset,offset,addRemoveGlyphes);
					line.size = _width;
					if(offset != null) {
						line.offset = offset;
					}
				} else {
					var _this = this.fontProgram;
					var line = this.line;
					var _xOffset = this.xOffset;
					var offset;
					if((this.autoSize & 2) > 0) {
						offset = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
							break;
						case 2:
							offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
							break;
						default:
							offset = _xOffset;
						}
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetOffset(line.pageLine,line.x,line.size,line.offset,offset,addRemoveGlyphes);
					line.offset = offset;
				}
				if(this.isVisible) {
					this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
				}
				if(updateBgMaskSelCursor) {
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var maskElement = this.maskElement;
					var autoUpdate = this.isVisible;
					if(autoUpdate == null) {
						autoUpdate = true;
					}
					maskElement.x = _x;
					maskElement.y = _y;
					maskElement.w = _width;
					maskElement.h = _height;
					if(autoUpdate) {
						this.fontProgram.maskBuffer.updateElement(maskElement);
					}
					if(this.backgroundElement != null) {
						this.backgroundElement.setLayout(this);
						if(this.isVisible && this.backgroundIsVisible) {
							this.backgroundProgram.update(this.backgroundElement);
						}
					}
					if(this.selectionElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.selectionIsVisible;
						var line = this.line;
						var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
						var line = this.line;
						var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
						var selectY = Math.round(this.y + y_offset1);
						var selectHeight = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = selectWidth;
						var mh = selectHeight;
						if(selectX < _x) {
							mw -= _x - selectX;
							mx = _x - selectX;
							if(mw > _width) {
								mw = _width;
							}
						} else if(selectX + selectWidth > _x + _width) {
							mw = _x + _width - selectX;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(selectY < _y) {
							mh -= _y - selectY;
							my = _y - selectY;
							if(mh > _height) {
								mh = _height;
							}
						} else if(selectY + selectHeight > _y + _height) {
							mh = _y + _height - selectY;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.selectionProgram.update(this.selectionElement);
						}
					}
					if(this.cursorElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var _width1 = _width;
						_width1 += 3;
						var line = this.line;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.y + y_offset1);
						var ch = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			} else if(this.hAlign == 0 && this.isVisible) {
				this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
			} else {
				var updateBgMaskSelCursor = false;
				var lineUpdatePosition = false;
				var lineUpdateSize = false;
				var lineUpdateOffset = true;
				if(lineUpdateOffset == null) {
					lineUpdateOffset = true;
				}
				if(lineUpdateSize == null) {
					lineUpdateSize = true;
				}
				if(lineUpdatePosition == null) {
					lineUpdatePosition = true;
				}
				if(updateBgMaskSelCursor == null) {
					updateBgMaskSelCursor = true;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.line.pageLine.textSize | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.line.pageLine.height | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = this.yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
						break;
					default:
						y_offset = this.yOffset;
					}
				}
				if(lineUpdatePosition && lineUpdateSize) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetPositionSize(line.pageLine,line.x,_width,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
					line.x = _x;
					line.size = _width;
					if(offset != null) {
						line.offset = offset;
					}
				} else if(lineUpdatePosition) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetPosition(line.pageLine,line.x,line.size,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
					line.x = _x;
					if(offset != null) {
						line.offset = offset;
					}
				} else if(lineUpdateSize) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetSize(line.pageLine,line.x,_width,line.offset,offset,addRemoveGlyphes);
					line.size = _width;
					if(offset != null) {
						line.offset = offset;
					}
				} else {
					var _this = this.fontProgram;
					var line = this.line;
					var _xOffset = this.xOffset;
					var offset;
					if((this.autoSize & 2) > 0) {
						offset = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
							break;
						case 2:
							offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
							break;
						default:
							offset = _xOffset;
						}
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetOffset(line.pageLine,line.x,line.size,line.offset,offset,addRemoveGlyphes);
					line.offset = offset;
				}
				if(this.isVisible) {
					this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
				}
				if(updateBgMaskSelCursor) {
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var maskElement = this.maskElement;
					var autoUpdate = this.isVisible;
					if(autoUpdate == null) {
						autoUpdate = true;
					}
					maskElement.x = _x;
					maskElement.y = _y;
					maskElement.w = _width;
					maskElement.h = _height;
					if(autoUpdate) {
						this.fontProgram.maskBuffer.updateElement(maskElement);
					}
					if(this.backgroundElement != null) {
						this.backgroundElement.setLayout(this);
						if(this.isVisible && this.backgroundIsVisible) {
							this.backgroundProgram.update(this.backgroundElement);
						}
					}
					if(this.selectionElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.selectionIsVisible;
						var line = this.line;
						var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
						var line = this.line;
						var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
						var selectY = Math.round(this.y + y_offset1);
						var selectHeight = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = selectWidth;
						var mh = selectHeight;
						if(selectX < _x) {
							mw -= _x - selectX;
							mx = _x - selectX;
							if(mw > _width) {
								mw = _width;
							}
						} else if(selectX + selectWidth > _x + _width) {
							mw = _x + _width - selectX;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(selectY < _y) {
							mh -= _y - selectY;
							my = _y - selectY;
							if(mh > _height) {
								mh = _height;
							}
						} else if(selectY + selectHeight > _y + _height) {
							mh = _y + _height - selectY;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.selectionProgram.update(this.selectionElement);
						}
					}
					if(this.cursorElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var _width1 = _width;
						_width1 += 3;
						var line = this.line;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.y + y_offset1);
						var ch = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
		} else if(this.cursor > 0) {
			var pos = this.cursor - 1;
			if(pos != this.cursor) {
				if(pos < 0) {
					this.cursor = 0;
				} else if(this.line != null) {
					if(pos > this.line.pageLine.glyphes.length) {
						this.cursor = this.line.pageLine.glyphes.length;
					} else {
						this.cursor = pos;
					}
				} else if(pos > (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length) {
					this.cursor = (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length;
				} else {
					this.cursor = pos;
				}
				if(this.line != null && this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = this.yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
							break;
						default:
							y_offset = this.yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var line = this.line;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.y + y_offset1);
					var ch = Math.round(this.line.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
			var line = this.line;
			var position = this.cursor;
			var addRemoveGlyphes = this.isVisible;
			if(addRemoveGlyphes == null) {
				addRemoveGlyphes = true;
			}
			if(position == null) {
				position = 0;
			}
			this.fontProgram.pageLineDeleteChar(line.pageLine,line.x,line.size,line.offset,position,addRemoveGlyphes);
			if((this.autoSize & 2) > 0) {
				var updateBgMaskSelCursor = true;
				var lineUpdatePosition = false;
				var lineUpdateSize = true;
				var lineUpdateOffset = false;
				if(lineUpdateOffset == null) {
					lineUpdateOffset = true;
				}
				if(lineUpdateSize == null) {
					lineUpdateSize = true;
				}
				if(lineUpdatePosition == null) {
					lineUpdatePosition = true;
				}
				if(updateBgMaskSelCursor == null) {
					updateBgMaskSelCursor = true;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.line.pageLine.textSize | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.line.pageLine.height | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = this.yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
						break;
					default:
						y_offset = this.yOffset;
					}
				}
				if(lineUpdatePosition && lineUpdateSize) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetPositionSize(line.pageLine,line.x,_width,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
					line.x = _x;
					line.size = _width;
					if(offset != null) {
						line.offset = offset;
					}
				} else if(lineUpdatePosition) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetPosition(line.pageLine,line.x,line.size,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
					line.x = _x;
					if(offset != null) {
						line.offset = offset;
					}
				} else if(lineUpdateSize) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetSize(line.pageLine,line.x,_width,line.offset,offset,addRemoveGlyphes);
					line.size = _width;
					if(offset != null) {
						line.offset = offset;
					}
				} else {
					var _this = this.fontProgram;
					var line = this.line;
					var _xOffset = this.xOffset;
					var offset;
					if((this.autoSize & 2) > 0) {
						offset = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
							break;
						case 2:
							offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
							break;
						default:
							offset = _xOffset;
						}
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetOffset(line.pageLine,line.x,line.size,line.offset,offset,addRemoveGlyphes);
					line.offset = offset;
				}
				if(this.isVisible) {
					this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
				}
				if(updateBgMaskSelCursor) {
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var maskElement = this.maskElement;
					var autoUpdate = this.isVisible;
					if(autoUpdate == null) {
						autoUpdate = true;
					}
					maskElement.x = _x;
					maskElement.y = _y;
					maskElement.w = _width;
					maskElement.h = _height;
					if(autoUpdate) {
						this.fontProgram.maskBuffer.updateElement(maskElement);
					}
					if(this.backgroundElement != null) {
						this.backgroundElement.setLayout(this);
						if(this.isVisible && this.backgroundIsVisible) {
							this.backgroundProgram.update(this.backgroundElement);
						}
					}
					if(this.selectionElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.selectionIsVisible;
						var line = this.line;
						var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
						var line = this.line;
						var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
						var selectY = Math.round(this.y + y_offset1);
						var selectHeight = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = selectWidth;
						var mh = selectHeight;
						if(selectX < _x) {
							mw -= _x - selectX;
							mx = _x - selectX;
							if(mw > _width) {
								mw = _width;
							}
						} else if(selectX + selectWidth > _x + _width) {
							mw = _x + _width - selectX;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(selectY < _y) {
							mh -= _y - selectY;
							my = _y - selectY;
							if(mh > _height) {
								mh = _height;
							}
						} else if(selectY + selectHeight > _y + _height) {
							mh = _y + _height - selectY;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.selectionProgram.update(this.selectionElement);
						}
					}
					if(this.cursorElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var _width1 = _width;
						_width1 += 3;
						var line = this.line;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.y + y_offset1);
						var ch = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			} else if(this.hAlign == 0 && this.isVisible) {
				this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
			} else {
				var updateBgMaskSelCursor = false;
				var lineUpdatePosition = false;
				var lineUpdateSize = false;
				var lineUpdateOffset = true;
				if(lineUpdateOffset == null) {
					lineUpdateOffset = true;
				}
				if(lineUpdateSize == null) {
					lineUpdateSize = true;
				}
				if(lineUpdatePosition == null) {
					lineUpdatePosition = true;
				}
				if(updateBgMaskSelCursor == null) {
					updateBgMaskSelCursor = true;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.line.pageLine.textSize | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.line.pageLine.height | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = this.yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
						break;
					default:
						y_offset = this.yOffset;
					}
				}
				if(lineUpdatePosition && lineUpdateSize) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetPositionSize(line.pageLine,line.x,_width,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
					line.x = _x;
					line.size = _width;
					if(offset != null) {
						line.offset = offset;
					}
				} else if(lineUpdatePosition) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetPosition(line.pageLine,line.x,line.size,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
					line.x = _x;
					if(offset != null) {
						line.offset = offset;
					}
				} else if(lineUpdateSize) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetSize(line.pageLine,line.x,_width,line.offset,offset,addRemoveGlyphes);
					line.size = _width;
					if(offset != null) {
						line.offset = offset;
					}
				} else {
					var _this = this.fontProgram;
					var line = this.line;
					var _xOffset = this.xOffset;
					var offset;
					if((this.autoSize & 2) > 0) {
						offset = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
							break;
						case 2:
							offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
							break;
						default:
							offset = _xOffset;
						}
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetOffset(line.pageLine,line.x,line.size,line.offset,offset,addRemoveGlyphes);
					line.offset = offset;
				}
				if(this.isVisible) {
					this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
				}
				if(updateBgMaskSelCursor) {
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var maskElement = this.maskElement;
					var autoUpdate = this.isVisible;
					if(autoUpdate == null) {
						autoUpdate = true;
					}
					maskElement.x = _x;
					maskElement.y = _y;
					maskElement.w = _width;
					maskElement.h = _height;
					if(autoUpdate) {
						this.fontProgram.maskBuffer.updateElement(maskElement);
					}
					if(this.backgroundElement != null) {
						this.backgroundElement.setLayout(this);
						if(this.isVisible && this.backgroundIsVisible) {
							this.backgroundProgram.update(this.backgroundElement);
						}
					}
					if(this.selectionElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.selectionIsVisible;
						var line = this.line;
						var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
						var line = this.line;
						var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
						var selectY = Math.round(this.y + y_offset1);
						var selectHeight = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = selectWidth;
						var mh = selectHeight;
						if(selectX < _x) {
							mw -= _x - selectX;
							mx = _x - selectX;
							if(mw > _width) {
								mw = _width;
							}
						} else if(selectX + selectWidth > _x + _width) {
							mw = _x + _width - selectX;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(selectY < _y) {
							mh -= _y - selectY;
							my = _y - selectY;
							if(mh > _height) {
								mh = _height;
							}
						} else if(selectY + selectHeight > _y + _height) {
							mh = _y + _height - selectY;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.selectionProgram.update(this.selectionElement);
						}
					}
					if(this.cursorElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var _width1 = _width;
						_width1 += 3;
						var line = this.line;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.y + y_offset1);
						var ch = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
		}
	}
	,tabulator: function() {
		if(this.line != null) {
			var oldCursor = this.cursor;
			if(this.selectFrom != this.selectTo) {
				var line = this.line;
				var from = this.selectFrom;
				var addRemoveGlyphes = this.isVisible;
				if(addRemoveGlyphes == null) {
					addRemoveGlyphes = true;
				}
				if(from == null) {
					from = 0;
				}
				this.fontProgram.pageLineDeleteChars(line.pageLine,line.x,line.size,line.offset,from,this.selectTo,addRemoveGlyphes);
				oldCursor = this.selectFrom;
				this.selectFrom = this.selectTo = 0;
				if(this.line != null && this.selectionStyle != null) {
					if(this.selectionIsVisible && this.selectionElement != null && this.isVisible) {
						this.selectionProgram.removeElement(this.selectionElement);
					}
				}
				this.selectionIsVisible = false;
			}
			var oldLength = this.line.pageLine.glyphes.length;
			var position = oldCursor;
			if(position == null) {
				position = 0;
			}
			var line = this.line;
			var position1 = position;
			var addRemoveGlyphes = this.isVisible;
			if(addRemoveGlyphes == null) {
				addRemoveGlyphes = true;
			}
			if(position1 == null) {
				position1 = 0;
			}
			this.fontProgram.pageLineInsertChars(line.pageLine,line.x,line.size,line.offset,"\t",position1,this.fontStyle,addRemoveGlyphes,null);
			if((this.autoSize & 2) > 0) {
				var updateBgMaskSelCursor = true;
				var lineUpdatePosition = false;
				var lineUpdateSize = true;
				var lineUpdateOffset = false;
				if(lineUpdateOffset == null) {
					lineUpdateOffset = true;
				}
				if(lineUpdateSize == null) {
					lineUpdateSize = true;
				}
				if(lineUpdatePosition == null) {
					lineUpdatePosition = true;
				}
				if(updateBgMaskSelCursor == null) {
					updateBgMaskSelCursor = true;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.line.pageLine.textSize | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.line.pageLine.height | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = this.yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
						break;
					default:
						y_offset = this.yOffset;
					}
				}
				if(lineUpdatePosition && lineUpdateSize) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetPositionSize(line.pageLine,line.x,_width,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
					line.x = _x;
					line.size = _width;
					if(offset != null) {
						line.offset = offset;
					}
				} else if(lineUpdatePosition) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetPosition(line.pageLine,line.x,line.size,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
					line.x = _x;
					if(offset != null) {
						line.offset = offset;
					}
				} else if(lineUpdateSize) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetSize(line.pageLine,line.x,_width,line.offset,offset,addRemoveGlyphes);
					line.size = _width;
					if(offset != null) {
						line.offset = offset;
					}
				} else {
					var _this = this.fontProgram;
					var line = this.line;
					var _xOffset = this.xOffset;
					var offset;
					if((this.autoSize & 2) > 0) {
						offset = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
							break;
						case 2:
							offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
							break;
						default:
							offset = _xOffset;
						}
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetOffset(line.pageLine,line.x,line.size,line.offset,offset,addRemoveGlyphes);
					line.offset = offset;
				}
				if(this.isVisible) {
					this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
				}
				if(updateBgMaskSelCursor) {
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var maskElement = this.maskElement;
					var autoUpdate = this.isVisible;
					if(autoUpdate == null) {
						autoUpdate = true;
					}
					maskElement.x = _x;
					maskElement.y = _y;
					maskElement.w = _width;
					maskElement.h = _height;
					if(autoUpdate) {
						this.fontProgram.maskBuffer.updateElement(maskElement);
					}
					if(this.backgroundElement != null) {
						this.backgroundElement.setLayout(this);
						if(this.isVisible && this.backgroundIsVisible) {
							this.backgroundProgram.update(this.backgroundElement);
						}
					}
					if(this.selectionElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.selectionIsVisible;
						var line = this.line;
						var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
						var line = this.line;
						var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
						var selectY = Math.round(this.y + y_offset1);
						var selectHeight = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = selectWidth;
						var mh = selectHeight;
						if(selectX < _x) {
							mw -= _x - selectX;
							mx = _x - selectX;
							if(mw > _width) {
								mw = _width;
							}
						} else if(selectX + selectWidth > _x + _width) {
							mw = _x + _width - selectX;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(selectY < _y) {
							mh -= _y - selectY;
							my = _y - selectY;
							if(mh > _height) {
								mh = _height;
							}
						} else if(selectY + selectHeight > _y + _height) {
							mh = _y + _height - selectY;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.selectionProgram.update(this.selectionElement);
						}
					}
					if(this.cursorElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var _width1 = _width;
						_width1 += 3;
						var line = this.line;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.y + y_offset1);
						var ch = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			} else if(this.hAlign == 0 && this.isVisible) {
				this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
			} else {
				var updateBgMaskSelCursor = false;
				var lineUpdatePosition = false;
				var lineUpdateSize = false;
				var lineUpdateOffset = true;
				if(lineUpdateOffset == null) {
					lineUpdateOffset = true;
				}
				if(lineUpdateSize == null) {
					lineUpdateSize = true;
				}
				if(lineUpdatePosition == null) {
					lineUpdatePosition = true;
				}
				if(updateBgMaskSelCursor == null) {
					updateBgMaskSelCursor = true;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.line.pageLine.textSize | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.line.pageLine.height | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = this.yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
						break;
					default:
						y_offset = this.yOffset;
					}
				}
				if(lineUpdatePosition && lineUpdateSize) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetPositionSize(line.pageLine,line.x,_width,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
					line.x = _x;
					line.size = _width;
					if(offset != null) {
						line.offset = offset;
					}
				} else if(lineUpdatePosition) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetPosition(line.pageLine,line.x,line.size,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
					line.x = _x;
					if(offset != null) {
						line.offset = offset;
					}
				} else if(lineUpdateSize) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetSize(line.pageLine,line.x,_width,line.offset,offset,addRemoveGlyphes);
					line.size = _width;
					if(offset != null) {
						line.offset = offset;
					}
				} else {
					var _this = this.fontProgram;
					var line = this.line;
					var _xOffset = this.xOffset;
					var offset;
					if((this.autoSize & 2) > 0) {
						offset = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
							break;
						case 2:
							offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
							break;
						default:
							offset = _xOffset;
						}
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetOffset(line.pageLine,line.x,line.size,line.offset,offset,addRemoveGlyphes);
					line.offset = offset;
				}
				if(this.isVisible) {
					this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
				}
				if(updateBgMaskSelCursor) {
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var maskElement = this.maskElement;
					var autoUpdate = this.isVisible;
					if(autoUpdate == null) {
						autoUpdate = true;
					}
					maskElement.x = _x;
					maskElement.y = _y;
					maskElement.w = _width;
					maskElement.h = _height;
					if(autoUpdate) {
						this.fontProgram.maskBuffer.updateElement(maskElement);
					}
					if(this.backgroundElement != null) {
						this.backgroundElement.setLayout(this);
						if(this.isVisible && this.backgroundIsVisible) {
							this.backgroundProgram.update(this.backgroundElement);
						}
					}
					if(this.selectionElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.selectionIsVisible;
						var line = this.line;
						var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
						var line = this.line;
						var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
						var selectY = Math.round(this.y + y_offset1);
						var selectHeight = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = selectWidth;
						var mh = selectHeight;
						if(selectX < _x) {
							mw -= _x - selectX;
							mx = _x - selectX;
							if(mw > _width) {
								mw = _width;
							}
						} else if(selectX + selectWidth > _x + _width) {
							mw = _x + _width - selectX;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(selectY < _y) {
							mh -= _y - selectY;
							my = _y - selectY;
							if(mh > _height) {
								mh = _height;
							}
						} else if(selectY + selectHeight > _y + _height) {
							mh = _y + _height - selectY;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.selectionProgram.update(this.selectionElement);
						}
					}
					if(this.cursorElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var _width1 = _width;
						_width1 += 3;
						var line = this.line;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.y + y_offset1);
						var ch = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
			var pos = oldCursor + (this.line.pageLine.glyphes.length - oldLength);
			if(pos != this.cursor) {
				if(pos < 0) {
					this.cursor = 0;
				} else if(this.line != null) {
					if(pos > this.line.pageLine.glyphes.length) {
						this.cursor = this.line.pageLine.glyphes.length;
					} else {
						this.cursor = pos;
					}
				} else if(pos > (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length) {
					this.cursor = (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length;
				} else {
					this.cursor = pos;
				}
				if(this.line != null && this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = this.yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
							break;
						default:
							y_offset = this.yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var line = this.line;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.y + y_offset1);
					var ch = Math.round(this.line.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
		}
	}
	,copyToClipboard: function() {
		if(this.line != null && this.selectFrom != this.selectTo) {
			var from = this.selectFrom;
			if(from == null) {
				from = 0;
			}
			lime_system_Clipboard.set_text(this.fontProgram.pageLineGetChars(this.line.pageLine,from,this.selectTo));
		}
	}
	,cutToClipboard: function() {
		if(this.line != null && this.selectFrom != this.selectTo) {
			var line = this.line;
			var from = this.selectFrom;
			var addRemoveGlyphes = this.isVisible;
			if(addRemoveGlyphes == null) {
				addRemoveGlyphes = true;
			}
			if(from == null) {
				from = 0;
			}
			lime_system_Clipboard.set_text(this.fontProgram.pageLineCutChars(line.pageLine,line.x,line.size,line.offset,from,this.selectTo,addRemoveGlyphes));
			var pos = this.selectFrom;
			if(pos != this.cursor) {
				if(pos < 0) {
					this.cursor = 0;
				} else if(this.line != null) {
					if(pos > this.line.pageLine.glyphes.length) {
						this.cursor = this.line.pageLine.glyphes.length;
					} else {
						this.cursor = pos;
					}
				} else if(pos > (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length) {
					this.cursor = (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length;
				} else {
					this.cursor = pos;
				}
				if(this.line != null && this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = this.yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
							break;
						default:
							y_offset = this.yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var line = this.line;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.y + y_offset1);
					var ch = Math.round(this.line.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
			this.selectFrom = this.selectTo = 0;
			if(this.line != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElement != null && this.isVisible) {
					this.selectionProgram.removeElement(this.selectionElement);
				}
			}
			this.selectionIsVisible = false;
			if((this.autoSize & 2) > 0) {
				var updateBgMaskSelCursor = true;
				var lineUpdatePosition = false;
				var lineUpdateSize = true;
				var lineUpdateOffset = false;
				if(lineUpdateOffset == null) {
					lineUpdateOffset = true;
				}
				if(lineUpdateSize == null) {
					lineUpdateSize = true;
				}
				if(lineUpdatePosition == null) {
					lineUpdatePosition = true;
				}
				if(updateBgMaskSelCursor == null) {
					updateBgMaskSelCursor = true;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.line.pageLine.textSize | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.line.pageLine.height | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = this.yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
						break;
					default:
						y_offset = this.yOffset;
					}
				}
				if(lineUpdatePosition && lineUpdateSize) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetPositionSize(line.pageLine,line.x,_width,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
					line.x = _x;
					line.size = _width;
					if(offset != null) {
						line.offset = offset;
					}
				} else if(lineUpdatePosition) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetPosition(line.pageLine,line.x,line.size,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
					line.x = _x;
					if(offset != null) {
						line.offset = offset;
					}
				} else if(lineUpdateSize) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetSize(line.pageLine,line.x,_width,line.offset,offset,addRemoveGlyphes);
					line.size = _width;
					if(offset != null) {
						line.offset = offset;
					}
				} else {
					var _this = this.fontProgram;
					var line = this.line;
					var _xOffset = this.xOffset;
					var offset;
					if((this.autoSize & 2) > 0) {
						offset = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
							break;
						case 2:
							offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
							break;
						default:
							offset = _xOffset;
						}
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetOffset(line.pageLine,line.x,line.size,line.offset,offset,addRemoveGlyphes);
					line.offset = offset;
				}
				if(this.isVisible) {
					this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
				}
				if(updateBgMaskSelCursor) {
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var maskElement = this.maskElement;
					var autoUpdate = this.isVisible;
					if(autoUpdate == null) {
						autoUpdate = true;
					}
					maskElement.x = _x;
					maskElement.y = _y;
					maskElement.w = _width;
					maskElement.h = _height;
					if(autoUpdate) {
						this.fontProgram.maskBuffer.updateElement(maskElement);
					}
					if(this.backgroundElement != null) {
						this.backgroundElement.setLayout(this);
						if(this.isVisible && this.backgroundIsVisible) {
							this.backgroundProgram.update(this.backgroundElement);
						}
					}
					if(this.selectionElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.selectionIsVisible;
						var line = this.line;
						var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
						var line = this.line;
						var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
						var selectY = Math.round(this.y + y_offset1);
						var selectHeight = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = selectWidth;
						var mh = selectHeight;
						if(selectX < _x) {
							mw -= _x - selectX;
							mx = _x - selectX;
							if(mw > _width) {
								mw = _width;
							}
						} else if(selectX + selectWidth > _x + _width) {
							mw = _x + _width - selectX;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(selectY < _y) {
							mh -= _y - selectY;
							my = _y - selectY;
							if(mh > _height) {
								mh = _height;
							}
						} else if(selectY + selectHeight > _y + _height) {
							mh = _y + _height - selectY;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.selectionProgram.update(this.selectionElement);
						}
					}
					if(this.cursorElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var _width1 = _width;
						_width1 += 3;
						var line = this.line;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.y + y_offset1);
						var ch = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			} else if(this.hAlign == 0 && this.isVisible) {
				this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
			} else {
				var updateBgMaskSelCursor = false;
				var lineUpdatePosition = false;
				var lineUpdateSize = false;
				var lineUpdateOffset = true;
				if(lineUpdateOffset == null) {
					lineUpdateOffset = true;
				}
				if(lineUpdateSize == null) {
					lineUpdateSize = true;
				}
				if(lineUpdatePosition == null) {
					lineUpdatePosition = true;
				}
				if(updateBgMaskSelCursor == null) {
					updateBgMaskSelCursor = true;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.line.pageLine.textSize | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.line.pageLine.height | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = this.yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
						break;
					default:
						y_offset = this.yOffset;
					}
				}
				if(lineUpdatePosition && lineUpdateSize) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetPositionSize(line.pageLine,line.x,_width,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
					line.x = _x;
					line.size = _width;
					if(offset != null) {
						line.offset = offset;
					}
				} else if(lineUpdatePosition) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetPosition(line.pageLine,line.x,line.size,line.offset,_x,_y + y_offset,offset,addRemoveGlyphes);
					line.x = _x;
					if(offset != null) {
						line.offset = offset;
					}
				} else if(lineUpdateSize) {
					var _this = this.fontProgram;
					var line = this.line;
					var offset;
					if(lineUpdateOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							offset = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
								break;
							case 2:
								offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
								break;
							default:
								offset = _xOffset;
							}
						}
					} else {
						offset = null;
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetSize(line.pageLine,line.x,_width,line.offset,offset,addRemoveGlyphes);
					line.size = _width;
					if(offset != null) {
						line.offset = offset;
					}
				} else {
					var _this = this.fontProgram;
					var line = this.line;
					var _xOffset = this.xOffset;
					var offset;
					if((this.autoSize & 2) > 0) {
						offset = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							offset = (this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize) / 2 + _xOffset;
							break;
						case 2:
							offset = this.width - this.leftSpace - this.rightSpace - this.line.pageLine.textSize + _xOffset;
							break;
						default:
							offset = _xOffset;
						}
					}
					var addRemoveGlyphes = this.isVisible;
					if(addRemoveGlyphes == null) {
						addRemoveGlyphes = true;
					}
					_this.pageLineSetOffset(line.pageLine,line.x,line.size,line.offset,offset,addRemoveGlyphes);
					line.offset = offset;
				}
				if(this.isVisible) {
					this.fontProgram.pageLineUpdate(this.line.pageLine,null,null);
				}
				if(updateBgMaskSelCursor) {
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var maskElement = this.maskElement;
					var autoUpdate = this.isVisible;
					if(autoUpdate == null) {
						autoUpdate = true;
					}
					maskElement.x = _x;
					maskElement.y = _y;
					maskElement.w = _width;
					maskElement.h = _height;
					if(autoUpdate) {
						this.fontProgram.maskBuffer.updateElement(maskElement);
					}
					if(this.backgroundElement != null) {
						this.backgroundElement.setLayout(this);
						if(this.isVisible && this.backgroundIsVisible) {
							this.backgroundProgram.update(this.backgroundElement);
						}
					}
					if(this.selectionElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.selectionIsVisible;
						var line = this.line;
						var selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectFrom));
						var line = this.line;
						var selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.selectTo) - selectX);
						var selectY = Math.round(this.y + y_offset1);
						var selectHeight = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = selectWidth;
						var mh = selectHeight;
						if(selectX < _x) {
							mw -= _x - selectX;
							mx = _x - selectX;
							if(mw > _width) {
								mw = _width;
							}
						} else if(selectX + selectWidth > _x + _width) {
							mw = _x + _width - selectX;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(selectY < _y) {
							mh -= _y - selectY;
							my = _y - selectY;
							if(mh > _height) {
								mh = _height;
							}
						} else if(selectY + selectHeight > _y + _height) {
							mh = _y + _height - selectY;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.selectionProgram.update(this.selectionElement);
						}
					}
					if(this.cursorElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var _width1 = _width;
						_width1 += 3;
						var line = this.line;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.y + y_offset1);
						var ch = Math.round(this.line.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
		}
	}
	,pasteFromClipboard: function() {
	}
	,cursorLeft: function() {
		if(this.selectFrom != this.selectTo) {
			var pos = this.selectFrom;
			if(pos != this.cursor) {
				if(pos < 0) {
					this.cursor = 0;
				} else if(this.line != null) {
					if(pos > this.line.pageLine.glyphes.length) {
						this.cursor = this.line.pageLine.glyphes.length;
					} else {
						this.cursor = pos;
					}
				} else if(pos > (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length) {
					this.cursor = (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length;
				} else {
					this.cursor = pos;
				}
				if(this.line != null && this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = this.yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
							break;
						default:
							y_offset = this.yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var line = this.line;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.y + y_offset1);
					var ch = Math.round(this.line.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
			this.selectFrom = this.selectTo = 0;
			if(this.line != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElement != null && this.isVisible) {
					this.selectionProgram.removeElement(this.selectionElement);
				}
			}
			this.selectionIsVisible = false;
		} else {
			var pos = this.cursor - 1;
			if(pos != this.cursor) {
				if(pos < 0) {
					this.cursor = 0;
				} else if(this.line != null) {
					if(pos > this.line.pageLine.glyphes.length) {
						this.cursor = this.line.pageLine.glyphes.length;
					} else {
						this.cursor = pos;
					}
				} else if(pos > (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length) {
					this.cursor = (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length;
				} else {
					this.cursor = pos;
				}
				if(this.line != null && this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = this.yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
							break;
						default:
							y_offset = this.yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var line = this.line;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.y + y_offset1);
					var ch = Math.round(this.line.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
		}
	}
	,cursorRight: function() {
		if(this.selectFrom != this.selectTo) {
			var pos = this.selectTo;
			if(pos != this.cursor) {
				if(pos < 0) {
					this.cursor = 0;
				} else if(this.line != null) {
					if(pos > this.line.pageLine.glyphes.length) {
						this.cursor = this.line.pageLine.glyphes.length;
					} else {
						this.cursor = pos;
					}
				} else if(pos > (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length) {
					this.cursor = (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length;
				} else {
					this.cursor = pos;
				}
				if(this.line != null && this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = this.yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
							break;
						default:
							y_offset = this.yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var line = this.line;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.y + y_offset1);
					var ch = Math.round(this.line.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
			this.selectFrom = this.selectTo = 0;
			if(this.line != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElement != null && this.isVisible) {
					this.selectionProgram.removeElement(this.selectionElement);
				}
			}
			this.selectionIsVisible = false;
		} else {
			var pos = this.cursor + 1;
			if(pos != this.cursor) {
				if(pos < 0) {
					this.cursor = 0;
				} else if(this.line != null) {
					if(pos > this.line.pageLine.glyphes.length) {
						this.cursor = this.line.pageLine.glyphes.length;
					} else {
						this.cursor = pos;
					}
				} else if(pos > (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length) {
					this.cursor = (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length;
				} else {
					this.cursor = pos;
				}
				if(this.line != null && this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = this.yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
							break;
						default:
							y_offset = this.yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var line = this.line;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.y + y_offset1);
					var ch = Math.round(this.line.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
		}
	}
	,cursorLeftWord: function() {
		if(this.selectFrom != this.selectTo) {
			this.selectFrom = this.selectTo = 0;
			if(this.line != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElement != null && this.isVisible) {
					this.selectionProgram.removeElement(this.selectionElement);
				}
			}
			this.selectionIsVisible = false;
		}
		var _this = this.fontProgram;
		var pageLine = this.line.pageLine;
		var position = this.cursor;
		var pos;
		if(position <= 0) {
			pos = 0;
		} else {
			var pos1 = new EReg("\\s","");
			var code = pageLine.glyphes[position - 1].char;
			if(pos1.match(String.fromCodePoint(code))) {
				while(true) {
					var pos1;
					if(position > 0) {
						var pos2 = new EReg("\\s","");
						var code = pageLine.glyphes[position - 1].char;
						pos1 = pos2.match(String.fromCodePoint(code));
					} else {
						pos1 = false;
					}
					if(!pos1) {
						break;
					}
					--position;
				}
			}
			var pos1 = new EReg("\\w","");
			var code = pageLine.glyphes[position - 1].char;
			if(pos1.match(String.fromCodePoint(code))) {
				while(true) {
					var pos1;
					if(position > 0) {
						var pos2 = new EReg("\\w","");
						var code = pageLine.glyphes[position - 1].char;
						pos1 = pos2.match(String.fromCodePoint(code));
					} else {
						pos1 = false;
					}
					if(!pos1) {
						break;
					}
					--position;
				}
			} else {
				while(true) {
					var pos1;
					if(position > 0) {
						var pos2 = new EReg("\\w","");
						var code = pageLine.glyphes[position - 1].char;
						if(!pos2.match(String.fromCodePoint(code))) {
							var pos3 = new EReg("\\s","");
							var code1 = pageLine.glyphes[position - 1].char;
							pos1 = !pos3.match(String.fromCodePoint(code1));
						} else {
							pos1 = false;
						}
					} else {
						pos1 = false;
					}
					if(!pos1) {
						break;
					}
					--position;
				}
			}
			pos = position;
		}
		if(pos != this.cursor) {
			if(pos < 0) {
				this.cursor = 0;
			} else if(this.line != null) {
				if(pos > this.line.pageLine.glyphes.length) {
					this.cursor = this.line.pageLine.glyphes.length;
				} else {
					this.cursor = pos;
				}
			} else if(pos > (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length) {
				this.cursor = (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length;
			} else {
				this.cursor = pos;
			}
			if(this.line != null && this.cursorStyle != null) {
				var addUpdate = this.isVisible && this.cursorIsVisible;
				var create = this.cursorElement == null;
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var _width1 = _width;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = this.yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
						break;
					default:
						y_offset = this.yOffset;
					}
				}
				var y_offset1 = y_offset + this.topSpace;
				_width1 += 3;
				var line = this.line;
				var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
				var cw = 2;
				var cy = Math.round(this.y + y_offset1);
				var ch = Math.round(this.line.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = cw;
				var mh = ch;
				if(cx < _x) {
					mw -= _x - cx;
					mx = _x - cx;
					if(mw > _width1) {
						mw = _width1;
					}
				} else if(cx + cw > _x + _width1) {
					mw = _x + _width1 - cx;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(cy < _y) {
					mh -= _y - cy;
					my = _y - cy;
					if(mh > _height) {
						mh = _height;
					}
				} else if(cy + ch > _y + _height) {
					mh = _y + _height - cy;
				}
				if(mh < 0) {
					mh = 0;
				}
				if(create) {
					var z = this.z;
					var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
					if(stylePos < 0) {
						if(this.uiDisplay.autoAddStyles) {
							var _this = this.uiDisplay;
							var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
							var styleId = this.cursorStyle.getUUID();
							_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
							if(_this.stylePosBeforeFont == 0) {
								_this.addProgram(program,null,true);
							} else {
								_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
							}
							_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
							_this.stylePosBeforeFont++;
						} else {
							var c = js_Boot.getClass(this.cursorStyle);
							throw haxe_Exception.thrown("Error by creating cursor for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
						}
					} else {
						this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
						if(this.cursorProgram == null) {
							var _this = this.uiDisplay;
							var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
							var stylePos1 = stylePos;
							_this.usedStyleProgram[stylePos1] = program;
							var afterProgram = null;
							while(stylePos1-- > 0) {
								afterProgram = _this.usedStyleProgram[stylePos1];
								if(afterProgram != null) {
									break;
								}
							}
							_this.addProgram(program,afterProgram,afterProgram == null);
						}
					}
					this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
					if(addUpdate) {
						this.cursorProgram.addElement(this.cursorElement);
					}
				} else {
					this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.cursorProgram.update(this.cursorElement);
					}
				}
			}
		}
	}
	,cursorRightWord: function() {
		if(this.selectFrom != this.selectTo) {
			this.selectFrom = this.selectTo = 0;
			if(this.line != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElement != null && this.isVisible) {
					this.selectionProgram.removeElement(this.selectionElement);
				}
			}
			this.selectionIsVisible = false;
		}
		var _this = this.fontProgram;
		var pageLine = this.line.pageLine;
		var position = this.cursor;
		var pos;
		if(position >= pageLine.glyphes.length) {
			pos = 0;
		} else {
			var pos1 = new EReg("\\s","");
			var code = pageLine.glyphes[position].char;
			if(pos1.match(String.fromCodePoint(code))) {
				while(true) {
					var pos1;
					if(position < pageLine.glyphes.length) {
						var pos2 = new EReg("\\s","");
						var code = pageLine.glyphes[position].char;
						pos1 = pos2.match(String.fromCodePoint(code));
					} else {
						pos1 = false;
					}
					if(!pos1) {
						break;
					}
					++position;
				}
			} else {
				var pos1 = new EReg("\\w","");
				var code = pageLine.glyphes[position].char;
				if(pos1.match(String.fromCodePoint(code))) {
					while(true) {
						var pos1;
						if(position < pageLine.glyphes.length) {
							var pos2 = new EReg("\\w","");
							var code = pageLine.glyphes[position].char;
							pos1 = pos2.match(String.fromCodePoint(code));
						} else {
							pos1 = false;
						}
						if(!pos1) {
							break;
						}
						++position;
					}
				} else {
					while(true) {
						var pos1;
						if(position < pageLine.glyphes.length) {
							var pos2 = new EReg("\\w","");
							var code = pageLine.glyphes[position].char;
							if(!pos2.match(String.fromCodePoint(code))) {
								var pos3 = new EReg("\\s","");
								var code1 = pageLine.glyphes[position].char;
								pos1 = !pos3.match(String.fromCodePoint(code1));
							} else {
								pos1 = false;
							}
						} else {
							pos1 = false;
						}
						if(!pos1) {
							break;
						}
						++position;
					}
				}
				while(true) {
					var pos1;
					if(position < pageLine.glyphes.length) {
						var pos2 = new EReg("\\s","");
						var code = pageLine.glyphes[position].char;
						pos1 = pos2.match(String.fromCodePoint(code));
					} else {
						pos1 = false;
					}
					if(!pos1) {
						break;
					}
					++position;
				}
			}
			pos = position;
		}
		if(pos != this.cursor) {
			if(pos < 0) {
				this.cursor = 0;
			} else if(this.line != null) {
				if(pos > this.line.pageLine.glyphes.length) {
					this.cursor = this.line.pageLine.glyphes.length;
				} else {
					this.cursor = pos;
				}
			} else if(pos > (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length) {
				this.cursor = (this.line == null ? this.text : this.fontProgram.pageLineGetChars(this.line.pageLine,0,null)).length;
			} else {
				this.cursor = pos;
			}
			if(this.line != null && this.cursorStyle != null) {
				var addUpdate = this.isVisible && this.cursorIsVisible;
				var create = this.cursorElement == null;
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var _width1 = _width;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = this.yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height) / 2 + this.yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.line.pageLine.height + this.yOffset;
						break;
					default:
						y_offset = this.yOffset;
					}
				}
				var y_offset1 = y_offset + this.topSpace;
				_width1 += 3;
				var line = this.line;
				var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(line.pageLine,line.x,line.offset,this.cursor));
				var cw = 2;
				var cy = Math.round(this.y + y_offset1);
				var ch = Math.round(this.line.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = cw;
				var mh = ch;
				if(cx < _x) {
					mw -= _x - cx;
					mx = _x - cx;
					if(mw > _width1) {
						mw = _width1;
					}
				} else if(cx + cw > _x + _width1) {
					mw = _x + _width1 - cx;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(cy < _y) {
					mh -= _y - cy;
					my = _y - cy;
					if(mh > _height) {
						mh = _height;
					}
				} else if(cy + ch > _y + _height) {
					mh = _y + _height - cy;
				}
				if(mh < 0) {
					mh = 0;
				}
				if(create) {
					var z = this.z;
					var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
					if(stylePos < 0) {
						if(this.uiDisplay.autoAddStyles) {
							var _this = this.uiDisplay;
							var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
							var styleId = this.cursorStyle.getUUID();
							_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
							if(_this.stylePosBeforeFont == 0) {
								_this.addProgram(program,null,true);
							} else {
								_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
							}
							_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
							_this.stylePosBeforeFont++;
						} else {
							var c = js_Boot.getClass(this.cursorStyle);
							throw haxe_Exception.thrown("Error by creating cursor for new UITextLine. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
						}
					} else {
						this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
						if(this.cursorProgram == null) {
							var _this = this.uiDisplay;
							var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
							var stylePos1 = stylePos;
							_this.usedStyleProgram[stylePos1] = program;
							var afterProgram = null;
							while(stylePos1-- > 0) {
								afterProgram = _this.usedStyleProgram[stylePos1];
								if(afterProgram != null) {
									break;
								}
							}
							_this.addProgram(program,afterProgram,afterProgram == null);
						}
					}
					this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
					if(addUpdate) {
						this.cursorProgram.addElement(this.cursorElement);
					}
				} else {
					this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.cursorProgram.update(this.cursorElement);
					}
				}
			}
		}
	}
	,__class__: peote_ui_interactive_UITextLine_$_$Main_$MyFontStyle
});
var peote_ui_interactive_interfaces_ActionTextPage = function() { };
$hxClasses["peote.ui.interactive.interfaces.ActionTextPage"] = peote_ui_interactive_interfaces_ActionTextPage;
peote_ui_interactive_interfaces_ActionTextPage.__name__ = "peote.ui.interactive.interfaces.ActionTextPage";
peote_ui_interactive_interfaces_ActionTextPage.__isInterface__ = true;
peote_ui_interactive_interfaces_ActionTextPage.prototype = {
	__class__: peote_ui_interactive_interfaces_ActionTextPage
};
var peote_ui_interactive_UITextPage_$_$Main_$MyFontStyle = function(xPosition,yPosition,textSize,zIndex,text,font,fontStyle,textStyle) {
	if(zIndex == null) {
		zIndex = 0;
	}
	this.yOffsetAtSelectStart = 0;
	this.xOffsetAtSelectStart = 0;
	this.selectStartFromLine = 0;
	this.selectStartFrom = 0;
	this.input2Action = null;
	this.bottomSpace = 0;
	this.topSpace = 0;
	this.rightSpace = 0;
	this.leftSpace = 0;
	this.yOffset = 0;
	this.xOffset = 0;
	this.vAlign = 0;
	this.hAlign = 0;
	this.autoSize = 3;
	this.text = null;
	this.cursorLine = 0;
	this.cursorWant = -1;
	this.cursor = 0;
	this.cursorIsVisible = false;
	this.cursorStyle = null;
	this.cursorElement = null;
	this.cursorProgram = null;
	this.selectLineTo = 0;
	this.selectLineFrom = 0;
	this.selectTo = 0;
	this.selectFrom = 0;
	this.selectionIsVisible = false;
	this.selectionStyle = null;
	this.selectionElementMax = 0;
	this.selectionElementArray = null;
	this.selectionProgram = null;
	this.backgroundIsVisible = true;
	this.backgroundStyle = null;
	this.backgroundElement = null;
	this.backgroundProgram = null;
	this.pageLine = null;
	this.page = null;
	var width = 0;
	var height = 0;
	if(textSize != null) {
		if(textSize.height != null) {
			height = textSize.height;
			this.autoSize &= 2;
		}
		if(textSize.width != null) {
			width = textSize.width;
			this.autoSize &= 1;
		}
		if(textSize.hAlign != null) {
			this.hAlign = textSize.hAlign;
		}
		if(textSize.vAlign != null) {
			this.vAlign = textSize.vAlign;
		}
		if(textSize.xOffset != null) {
			this.xOffset = textSize.xOffset;
		}
		if(textSize.yOffset != null) {
			this.yOffset = textSize.yOffset;
		}
		if(textSize.leftSpace != null) {
			this.leftSpace = textSize.leftSpace;
		}
		if(textSize.rightSpace != null) {
			this.rightSpace = textSize.rightSpace;
		}
		if(textSize.topSpace != null) {
			this.topSpace = textSize.topSpace;
		}
		if(textSize.bottomSpace != null) {
			this.bottomSpace = textSize.bottomSpace;
		}
	}
	peote_ui_interactive_Interactive.call(this,xPosition,yPosition,width,height,zIndex);
	if(this.page == null || text == null) {
		this.text = text;
	} else {
		this.setText(text);
	}
	this.font = font;
	if(fontStyle == null) {
		fontStyle = font.createFontStyle();
	}
	this.fontStyle = fontStyle;
	if(textStyle != null) {
		if(textStyle.backgroundStyle != null) {
			var style = textStyle.backgroundStyle;
			if(this.backgroundElement == null) {
				this.backgroundStyle = style;
				if(style != null && this.page != null) {
					var addUpdate = this.isVisible && this.backgroundIsVisible;
					var stylePos = this.uiDisplay.usedStyleID.indexOf(this.backgroundStyle.getUUID());
					if(stylePos < 0) {
						if(this.uiDisplay.autoAddStyles) {
							var _this = this.uiDisplay;
							var program = this.backgroundProgram = this.backgroundStyle.createStyleProgram();
							var styleId = this.backgroundStyle.getUUID();
							_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
							if(_this.stylePosBeforeFont == 0) {
								_this.addProgram(program,null,true);
							} else {
								_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
							}
							_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
							_this.stylePosBeforeFont++;
						} else {
							var c = js_Boot.getClass(this.backgroundStyle);
							throw haxe_Exception.thrown("Error by creating background for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.backgroundStyle.id) + " is not inside the availableStyle list of UIDisplay.");
						}
					} else {
						this.backgroundProgram = this.uiDisplay.usedStyleProgram[stylePos];
						if(this.backgroundProgram == null) {
							var _this = this.uiDisplay;
							var program = this.backgroundProgram = this.backgroundStyle.createStyleProgram();
							var stylePos1 = stylePos;
							_this.usedStyleProgram[stylePos1] = program;
							var afterProgram = null;
							while(stylePos1-- > 0) {
								afterProgram = _this.usedStyleProgram[stylePos1];
								if(afterProgram != null) {
									break;
								}
							}
							_this.addProgram(program,afterProgram,afterProgram == null);
						}
					}
					this.backgroundElement = this.backgroundProgram.createElement(this,this.backgroundStyle);
					if(addUpdate) {
						this.backgroundProgram.addElement(this.backgroundElement);
					}
				}
			} else if(style != null) {
				if(style.getUUID() != this.backgroundStyle.getUUID()) {
					if(this.isVisible && this.backgroundIsVisible) {
						this.backgroundProgram.removeElement(this.backgroundElement);
					}
					this.backgroundProgram = null;
					this.backgroundStyle = style;
					var addUpdate = this.isVisible && this.backgroundIsVisible;
					var stylePos = this.uiDisplay.usedStyleID.indexOf(this.backgroundStyle.getUUID());
					if(stylePos < 0) {
						if(this.uiDisplay.autoAddStyles) {
							var _this = this.uiDisplay;
							var program = this.backgroundProgram = this.backgroundStyle.createStyleProgram();
							var styleId = this.backgroundStyle.getUUID();
							_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
							if(_this.stylePosBeforeFont == 0) {
								_this.addProgram(program,null,true);
							} else {
								_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
							}
							_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
							_this.stylePosBeforeFont++;
						} else {
							var c = js_Boot.getClass(this.backgroundStyle);
							throw haxe_Exception.thrown("Error by creating background for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.backgroundStyle.id) + " is not inside the availableStyle list of UIDisplay.");
						}
					} else {
						this.backgroundProgram = this.uiDisplay.usedStyleProgram[stylePos];
						if(this.backgroundProgram == null) {
							var _this = this.uiDisplay;
							var program = this.backgroundProgram = this.backgroundStyle.createStyleProgram();
							var stylePos1 = stylePos;
							_this.usedStyleProgram[stylePos1] = program;
							var afterProgram = null;
							while(stylePos1-- > 0) {
								afterProgram = _this.usedStyleProgram[stylePos1];
								if(afterProgram != null) {
									break;
								}
							}
							_this.addProgram(program,afterProgram,afterProgram == null);
						}
					}
					this.backgroundElement = this.backgroundProgram.createElement(this,this.backgroundStyle);
					if(addUpdate) {
						this.backgroundProgram.addElement(this.backgroundElement);
					}
				} else {
					this.backgroundStyle = style;
					this.backgroundElement.setStyle(style);
					if(this.isVisible && this.backgroundIsVisible) {
						this.backgroundProgram.update(this.backgroundElement);
					}
				}
			} else {
				if(this.isVisible && this.backgroundIsVisible) {
					this.backgroundProgram.removeElement(this.backgroundElement);
				}
				this.backgroundStyle = null;
				this.backgroundProgram = null;
				this.backgroundElement = null;
			}
		}
		if(textStyle.selectionStyle != null) {
			var style = textStyle.selectionStyle;
			if(this.selectionElementArray == null) {
				this.selectionStyle = style;
				if(style != null && this.page != null) {
					var addUpdate = this.isVisible && this.selectionIsVisible;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					var selectX;
					var selectWidth;
					var selectY;
					var selectHeight;
					var mx;
					var my;
					var mw;
					var mh;
					var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
					var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
					var _selectFrom = this.selectFrom;
					var _selectTo = this.selectTo;
					if(from >= this.page.pageLines.length) {
						haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
					}
					if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
						_selectFrom = 0;
						++from;
					}
					if(_selectTo == 0 && to > from + 1) {
						if(to - 1 >= this.page.pageLines.length) {
							haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
						}
						--to;
						_selectTo = this.page.pageLines[to - 1].glyphes.length;
					}
					var _pageLine;
					var selectionElement;
					var stylePos = this.uiDisplay.usedStyleID.indexOf(this.selectionStyle.getUUID());
					if(stylePos < 0) {
						if(this.uiDisplay.autoAddStyles) {
							var _this = this.uiDisplay;
							var program = this.selectionProgram = this.selectionStyle.createStyleProgram();
							var styleId = this.selectionStyle.getUUID();
							_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
							if(_this.stylePosBeforeFont == 0) {
								_this.addProgram(program,null,true);
							} else {
								_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
							}
							_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
							_this.stylePosBeforeFont++;
						} else {
							var c = js_Boot.getClass(this.selectionStyle);
							throw haxe_Exception.thrown("Error by creating selection for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.selectionStyle.id) + " is not inside the availableStyle list of UIDisplay.");
						}
					} else {
						this.selectionProgram = this.uiDisplay.usedStyleProgram[stylePos];
						if(this.selectionProgram == null) {
							var _this = this.uiDisplay;
							var program = this.selectionProgram = this.selectionStyle.createStyleProgram();
							var stylePos1 = stylePos;
							_this.usedStyleProgram[stylePos1] = program;
							var afterProgram = null;
							while(stylePos1-- > 0) {
								afterProgram = _this.usedStyleProgram[stylePos1];
								if(afterProgram != null) {
									break;
								}
							}
							_this.addProgram(program,afterProgram,afterProgram == null);
						}
					}
					this.selectionElementArray = [];
					var selectionElementMaxOld = this.selectionElementMax;
					this.selectionElementMax = 0;
					var _g = from;
					var _g1 = to;
					while(_g < _g1) {
						var i = _g++;
						_pageLine = this.page.pageLines[i];
						if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
							var page = this.page;
							selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
							var page1 = this.page;
							selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
						} else if(i == this.selectLineFrom) {
							var page2 = this.page;
							selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
							selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
						} else if(i == this.selectLineTo - 1) {
							selectX = Math.round(this.page.x + this.page.xOffset);
							var page3 = this.page;
							selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
						} else {
							selectX = Math.round(this.page.x + this.page.xOffset);
							selectWidth = Math.round(_pageLine.textSize);
						}
						selectY = Math.round(_pageLine.y);
						selectHeight = Math.round(_pageLine.height);
						mx = 0;
						my = 0;
						mw = selectWidth;
						mh = selectHeight;
						if(selectX < _x) {
							mw -= _x - selectX;
							mx = _x - selectX;
							if(mw > _width) {
								mw = _width;
							}
						} else if(selectX + selectWidth > _x + _width) {
							mw = _x + _width - selectX;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(selectY < _y) {
							mh -= _y - selectY;
							my = _y - selectY;
							if(mh > _height) {
								mh = _height;
							}
						} else if(selectY + selectHeight > _y + _height) {
							mh = _y + _height - selectY;
						}
						if(mh < 0) {
							mh = 0;
						}
						selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
						if(addUpdate) {
							this.selectionProgram.addElement(selectionElement);
						}
						this.selectionElementArray.push(selectionElement);
						this.selectionElementMax++;
					}
				}
			} else if(style != null) {
				if(style.getUUID() != this.selectionStyle.getUUID()) {
					if(this.isVisible && this.selectionIsVisible) {
						var _g = 0;
						var _g1 = this.selectionElementMax;
						while(_g < _g1) {
							var i = _g++;
							this.selectionProgram.removeElement(this.selectionElementArray[i]);
						}
					}
					this.selectionProgram = null;
					this.selectionStyle = style;
					var addUpdate = this.isVisible && this.selectionIsVisible;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					var selectX;
					var selectWidth;
					var selectY;
					var selectHeight;
					var mx;
					var my;
					var mw;
					var mh;
					var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
					var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
					var _selectFrom = this.selectFrom;
					var _selectTo = this.selectTo;
					if(from >= this.page.pageLines.length) {
						haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
					}
					if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
						_selectFrom = 0;
						++from;
					}
					if(_selectTo == 0 && to > from + 1) {
						if(to - 1 >= this.page.pageLines.length) {
							haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
						}
						--to;
						_selectTo = this.page.pageLines[to - 1].glyphes.length;
					}
					var _pageLine;
					var selectionElement;
					var stylePos = this.uiDisplay.usedStyleID.indexOf(this.selectionStyle.getUUID());
					if(stylePos < 0) {
						if(this.uiDisplay.autoAddStyles) {
							var _this = this.uiDisplay;
							var program = this.selectionProgram = this.selectionStyle.createStyleProgram();
							var styleId = this.selectionStyle.getUUID();
							_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
							if(_this.stylePosBeforeFont == 0) {
								_this.addProgram(program,null,true);
							} else {
								_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
							}
							_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
							_this.stylePosBeforeFont++;
						} else {
							var c = js_Boot.getClass(this.selectionStyle);
							throw haxe_Exception.thrown("Error by creating selection for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.selectionStyle.id) + " is not inside the availableStyle list of UIDisplay.");
						}
					} else {
						this.selectionProgram = this.uiDisplay.usedStyleProgram[stylePos];
						if(this.selectionProgram == null) {
							var _this = this.uiDisplay;
							var program = this.selectionProgram = this.selectionStyle.createStyleProgram();
							var stylePos1 = stylePos;
							_this.usedStyleProgram[stylePos1] = program;
							var afterProgram = null;
							while(stylePos1-- > 0) {
								afterProgram = _this.usedStyleProgram[stylePos1];
								if(afterProgram != null) {
									break;
								}
							}
							_this.addProgram(program,afterProgram,afterProgram == null);
						}
					}
					this.selectionElementArray = [];
					var selectionElementMaxOld = this.selectionElementMax;
					this.selectionElementMax = 0;
					var _g = from;
					var _g1 = to;
					while(_g < _g1) {
						var i = _g++;
						_pageLine = this.page.pageLines[i];
						if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
							var page = this.page;
							selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
							var page1 = this.page;
							selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
						} else if(i == this.selectLineFrom) {
							var page2 = this.page;
							selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
							selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
						} else if(i == this.selectLineTo - 1) {
							selectX = Math.round(this.page.x + this.page.xOffset);
							var page3 = this.page;
							selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
						} else {
							selectX = Math.round(this.page.x + this.page.xOffset);
							selectWidth = Math.round(_pageLine.textSize);
						}
						selectY = Math.round(_pageLine.y);
						selectHeight = Math.round(_pageLine.height);
						mx = 0;
						my = 0;
						mw = selectWidth;
						mh = selectHeight;
						if(selectX < _x) {
							mw -= _x - selectX;
							mx = _x - selectX;
							if(mw > _width) {
								mw = _width;
							}
						} else if(selectX + selectWidth > _x + _width) {
							mw = _x + _width - selectX;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(selectY < _y) {
							mh -= _y - selectY;
							my = _y - selectY;
							if(mh > _height) {
								mh = _height;
							}
						} else if(selectY + selectHeight > _y + _height) {
							mh = _y + _height - selectY;
						}
						if(mh < 0) {
							mh = 0;
						}
						selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
						if(addUpdate) {
							this.selectionProgram.addElement(selectionElement);
						}
						this.selectionElementArray.push(selectionElement);
						this.selectionElementMax++;
					}
				} else {
					this.selectionStyle = style;
					var updateAfter = this.isVisible && this.selectionIsVisible;
					var selectionElement;
					var _g = 0;
					var _g1 = this.selectionElementMax;
					while(_g < _g1) {
						var i = _g++;
						selectionElement = this.selectionElementArray[i];
						selectionElement.setStyle(style);
						if(updateAfter) {
							this.selectionProgram.update(selectionElement);
						}
					}
				}
			} else {
				if(this.isVisible && this.selectionIsVisible) {
					var _g = 0;
					var _g1 = this.selectionElementMax;
					while(_g < _g1) {
						var i = _g++;
						this.selectionProgram.removeElement(this.selectionElementArray[i]);
					}
				}
				this.selectionStyle = null;
				this.selectionProgram = null;
				this.selectionElementArray = null;
			}
		}
		var style = textStyle.cursorStyle;
		if(this.cursorElement == null) {
			this.cursorStyle = style;
			if(style != null && this.page != null) {
				var addUpdate = this.isVisible && this.cursorIsVisible;
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var _width1 = _width;
				var _yOffset = this.yOffset;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = _yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
						break;
					default:
						y_offset = _yOffset;
					}
				}
				var y_offset1 = y_offset + this.topSpace;
				_width1 += 3;
				var page = this.page;
				var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
				var cw = 2;
				var cy = Math.round(this.pageLine.y);
				var ch = Math.round(this.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = cw;
				var mh = ch;
				if(cx < _x) {
					mw -= _x - cx;
					mx = _x - cx;
					if(mw > _width1) {
						mw = _width1;
					}
				} else if(cx + cw > _x + _width1) {
					mw = _x + _width1 - cx;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(cy < _y) {
					mh -= _y - cy;
					my = _y - cy;
					if(mh > _height) {
						mh = _height;
					}
				} else if(cy + ch > _y + _height) {
					mh = _y + _height - cy;
				}
				if(mh < 0) {
					mh = 0;
				}
				var z = this.z;
				var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
				if(stylePos < 0) {
					if(this.uiDisplay.autoAddStyles) {
						var _this = this.uiDisplay;
						var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
						var styleId = this.cursorStyle.getUUID();
						_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
						if(_this.stylePosBeforeFont == 0) {
							_this.addProgram(program,null,true);
						} else {
							_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
						}
						_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
						_this.stylePosBeforeFont++;
					} else {
						var c = js_Boot.getClass(this.cursorStyle);
						throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
					}
				} else {
					this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
					if(this.cursorProgram == null) {
						var _this = this.uiDisplay;
						var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
						var stylePos1 = stylePos;
						_this.usedStyleProgram[stylePos1] = program;
						var afterProgram = null;
						while(stylePos1-- > 0) {
							afterProgram = _this.usedStyleProgram[stylePos1];
							if(afterProgram != null) {
								break;
							}
						}
						_this.addProgram(program,afterProgram,afterProgram == null);
					}
				}
				this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
				if(addUpdate) {
					this.cursorProgram.addElement(this.cursorElement);
				}
			}
		} else if(style != null) {
			if(style.getUUID() != this.cursorStyle.getUUID()) {
				if(this.isVisible && this.cursorIsVisible) {
					this.cursorProgram.removeElement(this.cursorElement);
				}
				this.cursorProgram = null;
				this.cursorStyle = style;
				var addUpdate = this.isVisible && this.cursorIsVisible;
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var _width1 = _width;
				var _yOffset = this.yOffset;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = _yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
						break;
					default:
						y_offset = _yOffset;
					}
				}
				var y_offset1 = y_offset + this.topSpace;
				_width1 += 3;
				var page = this.page;
				var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
				var cw = 2;
				var cy = Math.round(this.pageLine.y);
				var ch = Math.round(this.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = cw;
				var mh = ch;
				if(cx < _x) {
					mw -= _x - cx;
					mx = _x - cx;
					if(mw > _width1) {
						mw = _width1;
					}
				} else if(cx + cw > _x + _width1) {
					mw = _x + _width1 - cx;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(cy < _y) {
					mh -= _y - cy;
					my = _y - cy;
					if(mh > _height) {
						mh = _height;
					}
				} else if(cy + ch > _y + _height) {
					mh = _y + _height - cy;
				}
				if(mh < 0) {
					mh = 0;
				}
				var z = this.z;
				var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
				if(stylePos < 0) {
					if(this.uiDisplay.autoAddStyles) {
						var _this = this.uiDisplay;
						var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
						var styleId = this.cursorStyle.getUUID();
						_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
						if(_this.stylePosBeforeFont == 0) {
							_this.addProgram(program,null,true);
						} else {
							_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
						}
						_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
						_this.stylePosBeforeFont++;
					} else {
						var c = js_Boot.getClass(this.cursorStyle);
						throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
					}
				} else {
					this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
					if(this.cursorProgram == null) {
						var _this = this.uiDisplay;
						var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
						var stylePos1 = stylePos;
						_this.usedStyleProgram[stylePos1] = program;
						var afterProgram = null;
						while(stylePos1-- > 0) {
							afterProgram = _this.usedStyleProgram[stylePos1];
							if(afterProgram != null) {
								break;
							}
						}
						_this.addProgram(program,afterProgram,afterProgram == null);
					}
				}
				this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
				if(addUpdate) {
					this.cursorProgram.addElement(this.cursorElement);
				}
			} else {
				this.cursorStyle = style;
				this.cursorElement.setStyle(style);
				if(this.isVisible && this.cursorIsVisible) {
					this.cursorProgram.update(this.cursorElement);
				}
			}
		} else {
			if(this.isVisible && this.cursorIsVisible) {
				this.cursorProgram.removeElement(this.cursorElement);
			}
			this.cursorStyle = null;
			this.cursorProgram = null;
			this.cursorElement = null;
		}
	}
};
$hxClasses["peote.ui.interactive.UITextPage__Main_MyFontStyle"] = peote_ui_interactive_UITextPage_$_$Main_$MyFontStyle;
peote_ui_interactive_UITextPage_$_$Main_$MyFontStyle.__name__ = "peote.ui.interactive.UITextPage__Main_MyFontStyle";
peote_ui_interactive_UITextPage_$_$Main_$MyFontStyle.__interfaces__ = [peote_ui_interactive_interfaces_InputText,peote_ui_interactive_interfaces_InputFocus,peote_ui_interactive_interfaces_ActionTextPage];
peote_ui_interactive_UITextPage_$_$Main_$MyFontStyle.__super__ = peote_ui_interactive_Interactive;
peote_ui_interactive_UITextPage_$_$Main_$MyFontStyle.prototype = $extend(peote_ui_interactive_Interactive.prototype,{
	select: function(fromChar,toChar,fromLine,toLine) {
		if(fromChar < 0) {
			fromChar = 0;
		}
		if(toChar < 0) {
			toChar = 0;
		}
		if(fromLine < 0) {
			fromLine = 0;
		}
		if(toLine < 0) {
			toLine = 0;
		}
		if(fromLine > toLine) {
			this.selectLineFrom = toLine;
			this.selectLineTo = fromLine;
		} else {
			this.selectLineFrom = fromLine;
			this.selectLineTo = toLine;
		}
		if(fromLine > toLine || fromLine == toLine && fromChar > toChar) {
			this.selectFrom = toChar;
			this.selectTo = fromChar;
		} else {
			this.selectFrom = fromChar;
			this.selectTo = toChar;
		}
		this.selectLineTo++;
		if(this.selectLineFrom == this.selectLineTo - 1 && this.selectFrom == this.selectTo) {
			if(this.page != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElementArray != null && this.isVisible) {
					var _g = 0;
					var _g1 = this.selectionElementMax;
					while(_g < _g1) {
						var i = _g++;
						this.selectionProgram.removeElement(this.selectionElementArray[i]);
					}
				}
			}
			this.selectionIsVisible = false;
		} else {
			if(this.page != null && this.selectionStyle != null) {
				if(this.selectLineFrom >= this.page.pageLines.length) {
					if(this.page != null && this.selectionStyle != null) {
						if(this.selectionIsVisible && this.selectionElementArray != null && this.isVisible) {
							var _g = 0;
							var _g1 = this.selectionElementMax;
							while(_g < _g1) {
								var i = _g++;
								this.selectionProgram.removeElement(this.selectionElementArray[i]);
							}
						}
					}
					this.selectionIsVisible = false;
				} else {
					if(this.selectLineTo > this.page.pageLines.length) {
						this.selectLineTo = this.page.pageLines.length;
					}
					if(this.selectTo > this.page.pageLines[this.selectLineTo - 1].glyphes.length) {
						this.selectTo = this.page.pageLines[this.selectLineTo - 1].glyphes.length;
					}
					var addUpdate = this.isVisible && this.selectionIsVisible;
					var create = this.selectionElementArray == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					var selectX;
					var selectWidth;
					var selectY;
					var selectHeight;
					var mx;
					var my;
					var mw;
					var mh;
					var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
					var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
					var _selectFrom = this.selectFrom;
					var _selectTo = this.selectTo;
					if(from >= this.page.pageLines.length) {
						haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
					}
					if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
						_selectFrom = 0;
						++from;
					}
					if(_selectTo == 0 && to > from + 1) {
						if(to - 1 >= this.page.pageLines.length) {
							haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
						}
						--to;
						_selectTo = this.page.pageLines[to - 1].glyphes.length;
					}
					var _pageLine;
					var selectionElement;
					if(create) {
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.selectionStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.selectionProgram = this.selectionStyle.createStyleProgram();
								var styleId = this.selectionStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.selectionStyle);
								throw haxe_Exception.thrown("Error by creating selection for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.selectionStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.selectionProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.selectionProgram == null) {
								var _this = this.uiDisplay;
								var program = this.selectionProgram = this.selectionStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.selectionElementArray = [];
					} else if(addUpdate) {
						var fromOld = to - from;
						if(fromOld < 0) {
							fromOld = 0;
						}
						var _g = fromOld;
						var _g1 = this.selectionElementMax;
						while(_g < _g1) {
							var i = _g++;
							this.selectionProgram.removeElement(this.selectionElementArray[i]);
						}
					}
					var selectionElementMaxOld = this.selectionElementMax;
					this.selectionElementMax = 0;
					var _g = from;
					var _g1 = to;
					while(_g < _g1) {
						var i = _g++;
						_pageLine = this.page.pageLines[i];
						if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
							var page = this.page;
							selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
							var page1 = this.page;
							selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
						} else if(i == this.selectLineFrom) {
							var page2 = this.page;
							selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
							selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
						} else if(i == this.selectLineTo - 1) {
							selectX = Math.round(this.page.x + this.page.xOffset);
							var page3 = this.page;
							selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
						} else {
							selectX = Math.round(this.page.x + this.page.xOffset);
							selectWidth = Math.round(_pageLine.textSize);
						}
						selectY = Math.round(_pageLine.y);
						selectHeight = Math.round(_pageLine.height);
						mx = 0;
						my = 0;
						mw = selectWidth;
						mh = selectHeight;
						if(selectX < _x) {
							mw -= _x - selectX;
							mx = _x - selectX;
							if(mw > _width) {
								mw = _width;
							}
						} else if(selectX + selectWidth > _x + _width) {
							mw = _x + _width - selectX;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(selectY < _y) {
							mh -= _y - selectY;
							my = _y - selectY;
							if(mh > _height) {
								mh = _height;
							}
						} else if(selectY + selectHeight > _y + _height) {
							mh = _y + _height - selectY;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create || this.selectionElementMax >= this.selectionElementArray.length) {
							selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
							if(addUpdate) {
								this.selectionProgram.addElement(selectionElement);
							}
							this.selectionElementArray.push(selectionElement);
						} else {
							selectionElement = this.selectionElementArray[this.selectionElementMax];
							selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
							if(this.selectionElementMax >= selectionElementMaxOld) {
								selectionElement.setStyle(this.selectionStyle);
								if(addUpdate) {
									this.selectionProgram.addElement(selectionElement);
								}
							} else if(addUpdate) {
								this.selectionProgram.update(selectionElement);
							}
						}
						this.selectionElementMax++;
					}
				}
			}
			if(this.page != null && this.selectionStyle != null) {
				if(!this.selectionIsVisible) {
					if(this.selectionElementArray == null) {
						var addUpdate = this.isVisible;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						var selectX;
						var selectWidth;
						var selectY;
						var selectHeight;
						var mx;
						var my;
						var mw;
						var mh;
						var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
						var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
						var _selectFrom = this.selectFrom;
						var _selectTo = this.selectTo;
						if(from >= this.page.pageLines.length) {
							haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
						}
						if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
							_selectFrom = 0;
							++from;
						}
						if(_selectTo == 0 && to > from + 1) {
							if(to - 1 >= this.page.pageLines.length) {
								haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
							}
							--to;
							_selectTo = this.page.pageLines[to - 1].glyphes.length;
						}
						var _pageLine;
						var selectionElement;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.selectionStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.selectionProgram = this.selectionStyle.createStyleProgram();
								var styleId = this.selectionStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.selectionStyle);
								throw haxe_Exception.thrown("Error by creating selection for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.selectionStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.selectionProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.selectionProgram == null) {
								var _this = this.uiDisplay;
								var program = this.selectionProgram = this.selectionStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.selectionElementArray = [];
						var selectionElementMaxOld = this.selectionElementMax;
						this.selectionElementMax = 0;
						var _g = from;
						var _g1 = to;
						while(_g < _g1) {
							var i = _g++;
							_pageLine = this.page.pageLines[i];
							if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
								var page = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
								var page1 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
							} else if(i == this.selectLineFrom) {
								var page2 = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
								selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
							} else if(i == this.selectLineTo - 1) {
								selectX = Math.round(this.page.x + this.page.xOffset);
								var page3 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
							} else {
								selectX = Math.round(this.page.x + this.page.xOffset);
								selectWidth = Math.round(_pageLine.textSize);
							}
							selectY = Math.round(_pageLine.y);
							selectHeight = Math.round(_pageLine.height);
							mx = 0;
							my = 0;
							mw = selectWidth;
							mh = selectHeight;
							if(selectX < _x) {
								mw -= _x - selectX;
								mx = _x - selectX;
								if(mw > _width) {
									mw = _width;
								}
							} else if(selectX + selectWidth > _x + _width) {
								mw = _x + _width - selectX;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(selectY < _y) {
								mh -= _y - selectY;
								my = _y - selectY;
								if(mh > _height) {
									mh = _height;
								}
							} else if(selectY + selectHeight > _y + _height) {
								mh = _y + _height - selectY;
							}
							if(mh < 0) {
								mh = 0;
							}
							selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
							if(addUpdate) {
								this.selectionProgram.addElement(selectionElement);
							}
							this.selectionElementArray.push(selectionElement);
							this.selectionElementMax++;
						}
					} else if(this.isVisible) {
						var _g = 0;
						var _g1 = this.selectionElementMax;
						while(_g < _g1) {
							var i = _g++;
							this.selectionProgram.addElement(this.selectionElementArray[i]);
						}
					}
				}
			}
			this.selectionIsVisible = true;
		}
	}
	,updateVisibleLayout: function() {
		if(this.page != null) {
			if(this.autoSize > 0) {
				if((this.autoSize & 2) > 0) {
					var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
					if(w != this.width) {
						if(this.resizeWidth != null) {
							var oldWidth = this.width;
							this.resizeWidth(this.width = w,w - oldWidth);
						} else {
							this.width = w;
						}
					}
				}
				if((this.autoSize & 1) > 0) {
					var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
					if(h != this.height) {
						if(this.resizeHeight != null) {
							var oldHeight = this.height;
							this.resizeHeight(this.height = h,h - oldHeight);
						} else {
							this.height = h;
						}
					}
				}
				if(this.hasMoveEvent != 0) {
					var _this = this.pickableMove;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
					if(this.isVisible) {
						this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
					}
				}
				if(this.hasClickEvent != 0) {
					var _this = this.pickableClick;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
					if(this.isVisible) {
						this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
					}
				}
			}
			var _x = this.x + this.leftSpace;
			var _y = this.y + this.topSpace;
			var _width = this.width - this.leftSpace - this.rightSpace;
			var _height = this.height - this.topSpace - this.bottomSpace;
			var _yOffset = this.yOffset;
			var y_offset;
			if((this.autoSize & 1) > 0) {
				y_offset = _yOffset;
			} else {
				switch(this.vAlign) {
				case 4:
					y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
					break;
				case 8:
					y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
					break;
				default:
					y_offset = _yOffset;
				}
			}
			var _xOffset = this.xOffset;
			var tmp;
			if((this.autoSize & 2) > 0) {
				tmp = _xOffset;
			} else {
				switch(this.hAlign) {
				case 1:
					tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
					break;
				case 2:
					tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
					break;
				default:
					tmp = _xOffset;
				}
			}
			this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,y_offset,this.isVisible);
			if(this.isVisible) {
				this.fontProgram.pageUpdate(this.page);
			}
			if(this.masked) {
				if(this.maskX > this.leftSpace) {
					_x = this.x + this.maskX;
				}
				if(this.maskY > this.topSpace) {
					_y = this.y + this.maskY;
				}
				if(this.x + this.maskX + this.maskWidth < _x + _width) {
					_width = this.maskX + this.maskWidth + this.x - _x;
				}
				if(this.y + this.maskY + this.maskHeight < _y + _height) {
					_height = this.maskY + this.maskHeight + this.y - _y;
				}
			}
			var maskElement = this.maskElement;
			var autoUpdate = this.isVisible;
			if(autoUpdate == null) {
				autoUpdate = true;
			}
			maskElement.x = _x;
			maskElement.y = _y;
			maskElement.w = _width;
			maskElement.h = _height;
			if(autoUpdate) {
				this.fontProgram.maskBuffer.updateElement(maskElement);
			}
			if(this.backgroundElement != null) {
				this.backgroundElement.setLayout(this);
				if(this.isVisible && this.backgroundIsVisible) {
					this.backgroundProgram.update(this.backgroundElement);
				}
			}
			if(this.selectionElementArray != null) {
				var y_offset1 = y_offset + this.topSpace;
				var addUpdate = this.isVisible && this.selectionIsVisible;
				var selectX;
				var selectWidth;
				var selectY;
				var selectHeight;
				var mx;
				var my;
				var mw;
				var mh;
				var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
				var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
				var _selectFrom = this.selectFrom;
				var _selectTo = this.selectTo;
				if(from >= this.page.pageLines.length) {
					haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
				}
				if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
					_selectFrom = 0;
					++from;
				}
				if(_selectTo == 0 && to > from + 1) {
					if(to - 1 >= this.page.pageLines.length) {
						haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
					}
					--to;
					_selectTo = this.page.pageLines[to - 1].glyphes.length;
				}
				var _pageLine;
				var selectionElement;
				if(addUpdate) {
					var fromOld = to - from;
					if(fromOld < 0) {
						fromOld = 0;
					}
					var _g = fromOld;
					var _g1 = this.selectionElementMax;
					while(_g < _g1) {
						var i = _g++;
						this.selectionProgram.removeElement(this.selectionElementArray[i]);
					}
				}
				var selectionElementMaxOld = this.selectionElementMax;
				this.selectionElementMax = 0;
				var _g = from;
				var _g1 = to;
				while(_g < _g1) {
					var i = _g++;
					_pageLine = this.page.pageLines[i];
					if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
						var page = this.page;
						selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
						var page1 = this.page;
						selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
					} else if(i == this.selectLineFrom) {
						var page2 = this.page;
						selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
						selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
					} else if(i == this.selectLineTo - 1) {
						selectX = Math.round(this.page.x + this.page.xOffset);
						var page3 = this.page;
						selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
					} else {
						selectX = Math.round(this.page.x + this.page.xOffset);
						selectWidth = Math.round(_pageLine.textSize);
					}
					selectY = Math.round(_pageLine.y);
					selectHeight = Math.round(_pageLine.height);
					mx = 0;
					my = 0;
					mw = selectWidth;
					mh = selectHeight;
					if(selectX < _x) {
						mw -= _x - selectX;
						mx = _x - selectX;
						if(mw > _width) {
							mw = _width;
						}
					} else if(selectX + selectWidth > _x + _width) {
						mw = _x + _width - selectX;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(selectY < _y) {
						mh -= _y - selectY;
						my = _y - selectY;
						if(mh > _height) {
							mh = _height;
						}
					} else if(selectY + selectHeight > _y + _height) {
						mh = _y + _height - selectY;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(this.selectionElementMax >= this.selectionElementArray.length) {
						selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
						if(addUpdate) {
							this.selectionProgram.addElement(selectionElement);
						}
						this.selectionElementArray.push(selectionElement);
					} else {
						selectionElement = this.selectionElementArray[this.selectionElementMax];
						selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
						if(this.selectionElementMax >= selectionElementMaxOld) {
							selectionElement.setStyle(this.selectionStyle);
							if(addUpdate) {
								this.selectionProgram.addElement(selectionElement);
							}
						} else if(addUpdate) {
							this.selectionProgram.update(selectionElement);
						}
					}
					this.selectionElementMax++;
				}
			}
			if(this.cursorElement != null) {
				var y_offset1 = y_offset + this.topSpace;
				var addUpdate = this.isVisible && this.cursorIsVisible;
				var _width1 = _width;
				_width1 += 3;
				var page = this.page;
				var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
				var cw = 2;
				var cy = Math.round(this.pageLine.y);
				var ch = Math.round(this.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = cw;
				var mh = ch;
				if(cx < _x) {
					mw -= _x - cx;
					mx = _x - cx;
					if(mw > _width1) {
						mw = _width1;
					}
				} else if(cx + cw > _x + _width1) {
					mw = _x + _width1 - cx;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(cy < _y) {
					mh -= _y - cy;
					my = _y - cy;
					if(mh > _height) {
						mh = _height;
					}
				} else if(cy + ch > _y + _height) {
					mh = _y + _height - cy;
				}
				if(mh < 0) {
					mh = 0;
				}
				this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
				if(addUpdate) {
					this.cursorProgram.update(this.cursorElement);
				}
			}
		}
	}
	,updateVisible: function() {
		if(this.page != null) {
			this.fontProgram.pageSetStyle(this.page,this.fontStyle,null,null,null,null,this.isVisible);
			if(this.autoSize > 0) {
				if((this.autoSize & 2) > 0) {
					var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
					if(w != this.width) {
						if(this.resizeWidth != null) {
							var oldWidth = this.width;
							this.resizeWidth(this.width = w,w - oldWidth);
						} else {
							this.width = w;
						}
					}
				}
				if((this.autoSize & 1) > 0) {
					var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
					if(h != this.height) {
						if(this.resizeHeight != null) {
							var oldHeight = this.height;
							this.resizeHeight(this.height = h,h - oldHeight);
						} else {
							this.height = h;
						}
					}
				}
				if(this.hasMoveEvent != 0) {
					var _this = this.pickableMove;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
					if(this.isVisible) {
						this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
					}
				}
				if(this.hasClickEvent != 0) {
					var _this = this.pickableClick;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
					if(this.isVisible) {
						this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
					}
				}
			}
			var _x = this.x + this.leftSpace;
			var _y = this.y + this.topSpace;
			var _width = this.width - this.leftSpace - this.rightSpace;
			var _height = this.height - this.topSpace - this.bottomSpace;
			var _yOffset = this.yOffset;
			var y_offset;
			if((this.autoSize & 1) > 0) {
				y_offset = _yOffset;
			} else {
				switch(this.vAlign) {
				case 4:
					y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
					break;
				case 8:
					y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
					break;
				default:
					y_offset = _yOffset;
				}
			}
			var _xOffset = this.xOffset;
			var tmp;
			if((this.autoSize & 2) > 0) {
				tmp = _xOffset;
			} else {
				switch(this.hAlign) {
				case 1:
					tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
					break;
				case 2:
					tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
					break;
				default:
					tmp = _xOffset;
				}
			}
			this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,y_offset,this.isVisible);
			if(this.isVisible) {
				this.fontProgram.pageUpdate(this.page);
			}
			if(this.masked) {
				if(this.maskX > this.leftSpace) {
					_x = this.x + this.maskX;
				}
				if(this.maskY > this.topSpace) {
					_y = this.y + this.maskY;
				}
				if(this.x + this.maskX + this.maskWidth < _x + _width) {
					_width = this.maskX + this.maskWidth + this.x - _x;
				}
				if(this.y + this.maskY + this.maskHeight < _y + _height) {
					_height = this.maskY + this.maskHeight + this.y - _y;
				}
			}
			var maskElement = this.maskElement;
			var autoUpdate = this.isVisible;
			if(autoUpdate == null) {
				autoUpdate = true;
			}
			maskElement.x = _x;
			maskElement.y = _y;
			maskElement.w = _width;
			maskElement.h = _height;
			if(autoUpdate) {
				this.fontProgram.maskBuffer.updateElement(maskElement);
			}
			if(this.backgroundElement != null) {
				this.backgroundElement.setStyle(this.backgroundStyle);
				this.backgroundElement.setLayout(this);
				if(this.isVisible && this.backgroundIsVisible) {
					this.backgroundProgram.update(this.backgroundElement);
				}
			}
			if(this.selectionElementArray != null) {
				var y_offset1 = y_offset + this.topSpace;
				var addUpdate = this.isVisible && this.selectionIsVisible;
				var selectX;
				var selectWidth;
				var selectY;
				var selectHeight;
				var mx;
				var my;
				var mw;
				var mh;
				var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
				var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
				var _selectFrom = this.selectFrom;
				var _selectTo = this.selectTo;
				if(from >= this.page.pageLines.length) {
					haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
				}
				if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
					_selectFrom = 0;
					++from;
				}
				if(_selectTo == 0 && to > from + 1) {
					if(to - 1 >= this.page.pageLines.length) {
						haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
					}
					--to;
					_selectTo = this.page.pageLines[to - 1].glyphes.length;
				}
				var _pageLine;
				var selectionElement;
				if(addUpdate) {
					var fromOld = to - from;
					if(fromOld < 0) {
						fromOld = 0;
					}
					var _g = fromOld;
					var _g1 = this.selectionElementMax;
					while(_g < _g1) {
						var i = _g++;
						this.selectionProgram.removeElement(this.selectionElementArray[i]);
					}
				}
				var selectionElementMaxOld = this.selectionElementMax;
				this.selectionElementMax = 0;
				var _g = from;
				var _g1 = to;
				while(_g < _g1) {
					var i = _g++;
					_pageLine = this.page.pageLines[i];
					if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
						var page = this.page;
						selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
						var page1 = this.page;
						selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
					} else if(i == this.selectLineFrom) {
						var page2 = this.page;
						selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
						selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
					} else if(i == this.selectLineTo - 1) {
						selectX = Math.round(this.page.x + this.page.xOffset);
						var page3 = this.page;
						selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
					} else {
						selectX = Math.round(this.page.x + this.page.xOffset);
						selectWidth = Math.round(_pageLine.textSize);
					}
					selectY = Math.round(_pageLine.y);
					selectHeight = Math.round(_pageLine.height);
					mx = 0;
					my = 0;
					mw = selectWidth;
					mh = selectHeight;
					if(selectX < _x) {
						mw -= _x - selectX;
						mx = _x - selectX;
						if(mw > _width) {
							mw = _width;
						}
					} else if(selectX + selectWidth > _x + _width) {
						mw = _x + _width - selectX;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(selectY < _y) {
						mh -= _y - selectY;
						my = _y - selectY;
						if(mh > _height) {
							mh = _height;
						}
					} else if(selectY + selectHeight > _y + _height) {
						mh = _y + _height - selectY;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(this.selectionElementMax >= this.selectionElementArray.length) {
						selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
						if(addUpdate) {
							this.selectionProgram.addElement(selectionElement);
						}
						this.selectionElementArray.push(selectionElement);
					} else {
						selectionElement = this.selectionElementArray[this.selectionElementMax];
						selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
						if(this.selectionElementMax >= selectionElementMaxOld) {
							selectionElement.setStyle(this.selectionStyle);
							if(addUpdate) {
								this.selectionProgram.addElement(selectionElement);
							}
						} else {
							selectionElement.setStyle(this.selectionStyle);
							if(addUpdate) {
								this.selectionProgram.update(selectionElement);
							}
						}
					}
					this.selectionElementMax++;
				}
			}
			if(this.cursorElement != null) {
				this.cursorElement.setStyle(this.cursorStyle);
				var y_offset1 = y_offset + this.topSpace;
				var addUpdate = this.isVisible && this.cursorIsVisible;
				var _width1 = _width;
				_width1 += 3;
				var page = this.page;
				var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
				var cw = 2;
				var cy = Math.round(this.pageLine.y);
				var ch = Math.round(this.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = cw;
				var mh = ch;
				if(cx < _x) {
					mw -= _x - cx;
					mx = _x - cx;
					if(mw > _width1) {
						mw = _width1;
					}
				} else if(cx + cw > _x + _width1) {
					mw = _x + _width1 - cx;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(cy < _y) {
					mh -= _y - cy;
					my = _y - cy;
					if(mh > _height) {
						mh = _height;
					}
				} else if(cy + ch > _y + _height) {
					mh = _y + _height - cy;
				}
				if(mh < 0) {
					mh = 0;
				}
				this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
				if(addUpdate) {
					this.cursorProgram.update(this.cursorElement);
				}
			}
		}
	}
	,onAddVisibleToDisplay: function() {
		if(this.page != null) {
			this.fontProgram.maskBuffer.addElement(this.maskElement);
			if(this.backgroundIsVisible && this.backgroundElement != null) {
				this.backgroundProgram.addElement(this.backgroundElement);
			}
			if(this.selectionIsVisible && this.selectionElementArray != null) {
				var _g = 0;
				var _g1 = this.selectionElementMax;
				while(_g < _g1) {
					var i = _g++;
					this.selectionProgram.addElement(this.selectionElementArray[i]);
				}
			}
			if(this.cursorIsVisible && this.cursorElement != null) {
				this.cursorProgram.addElement(this.cursorElement);
			}
			var _this = this.fontProgram;
			var page = this.page;
			var _g = page.visibleLineFrom;
			var _g1 = page.visibleLineTo;
			while(_g < _g1) {
				var i = _g++;
				var pageLine = page.pageLines[i];
				var _g2 = pageLine.visibleFrom;
				var _g3 = pageLine.visibleTo;
				while(_g2 < _g3) {
					var i1 = _g2++;
					_this._buffer.addElement(pageLine.glyphes[i1]);
				}
			}
		} else {
			var fontStylePos = this.uiDisplay.usedStyleID.indexOf(MyFontStyle.ID | this.fontStyle.id);
			if(fontStylePos < 0) {
				if(this.uiDisplay.autoAddStyles) {
					var _this = this.uiDisplay;
					var program = this.fontProgram = this.font.createFontProgram(this.fontStyle,true,1024,1024,true);
					var styleId = MyFontStyle.ID | this.fontStyle.id;
					var addOnTop = true;
					if(addOnTop == null) {
						addOnTop = false;
					}
					if(addOnTop) {
						_this.usedStyleID.push(styleId);
						_this.usedStyleProgram.push(program);
						_this.addProgram(program);
					} else {
						_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
						if(_this.stylePosBeforeFont == 0) {
							_this.addProgram(program,null,true);
						} else {
							_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
						}
						_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
						_this.stylePosBeforeFont++;
					}
				} else {
					var c = js_Boot.getClass(this.fontStyle);
					throw haxe_Exception.thrown("Error by creating new UITextPage. The style \"" + c.__name__ + "\" id=" + this.fontStyle.id + " is not inside the availableStyle list of UIDisplay.");
				}
			} else {
				this.fontProgram = this.uiDisplay.usedStyleProgram[fontStylePos];
				if(this.fontProgram == null) {
					var _this = this.uiDisplay;
					var program = this.fontProgram = this.font.createFontProgram(this.fontStyle,true,1024,1024,true);
					var stylePos = fontStylePos;
					_this.usedStyleProgram[stylePos] = program;
					var afterProgram = null;
					while(stylePos-- > 0) {
						afterProgram = _this.usedStyleProgram[stylePos];
						if(afterProgram != null) {
							break;
						}
					}
					_this.addProgram(program,afterProgram,afterProgram == null);
				}
			}
			var _this = this.fontProgram;
			var chars = this.page == null ? this.text : this.fontProgram.pageGetChars(this.page);
			var x = this.x;
			var y = this.y;
			var width = (this.autoSize & 2) > 0 ? null : this.width;
			var height = (this.autoSize & 1) > 0 ? null : this.height;
			var xOffset = this.xOffset;
			var yOffset = this.yOffset;
			var glyphStyle = this.fontStyle;
			var page = new peote_text_Page_$_$Main_$MyFontStyle();
			_this.pageSet(page,chars,x,y,width,height,xOffset,yOffset,glyphStyle,null,true,null);
			this.page = page;
			if(this.cursorLine >= this.page.pageLines.length) {
				var pos = this.page.pageLines.length - 1;
				if(pos != this.cursorLine) {
					if(pos < 0) {
						this.cursorLine = 0;
					} else if(this.page != null && pos >= this.page.pageLines.length) {
						this.cursorLine = this.page.pageLines.length - 1;
					} else {
						this.cursorLine = pos;
					}
					if(this.page != null) {
						this.pageLine = this.page.pageLines[this.cursorLine];
						if(this.cursor > this.pageLine.glyphes.length) {
							if(this.cursorWant == -1) {
								this.cursorWant = this.cursor;
							}
							var pos = this.pageLine.glyphes.length;
							if(pos != this.cursor) {
								if(pos < 0) {
									this.cursor = 0;
								} else if(this.page != null && pos > this.pageLine.glyphes.length) {
									this.cursor = this.pageLine.glyphes.length;
								} else {
									this.cursor = pos;
								}
								if(this.page != null && this.cursorStyle != null) {
									var addUpdate = this.isVisible && this.cursorIsVisible;
									var create = this.cursorElement == null;
									var _x = this.x + this.leftSpace;
									var _y = this.y + this.topSpace;
									var _width = this.width - this.leftSpace - this.rightSpace;
									var _height = this.height - this.topSpace - this.bottomSpace;
									if(this.masked) {
										if(this.maskX > this.leftSpace) {
											_x = this.x + this.maskX;
										}
										if(this.maskY > this.topSpace) {
											_y = this.y + this.maskY;
										}
										if(this.x + this.maskX + this.maskWidth < _x + _width) {
											_width = this.maskX + this.maskWidth + this.x - _x;
										}
										if(this.y + this.maskY + this.maskHeight < _y + _height) {
											_height = this.maskY + this.maskHeight + this.y - _y;
										}
									}
									var _width1 = _width;
									var _yOffset = this.yOffset;
									var y_offset;
									if((this.autoSize & 1) > 0) {
										y_offset = _yOffset;
									} else {
										switch(this.vAlign) {
										case 4:
											y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
											break;
										case 8:
											y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
											break;
										default:
											y_offset = _yOffset;
										}
									}
									var y_offset1 = y_offset + this.topSpace;
									_width1 += 3;
									var page = this.page;
									var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
									var cw = 2;
									var cy = Math.round(this.pageLine.y);
									var ch = Math.round(this.pageLine.height);
									var mx = 0;
									var my = 0;
									var mw = cw;
									var mh = ch;
									if(cx < _x) {
										mw -= _x - cx;
										mx = _x - cx;
										if(mw > _width1) {
											mw = _width1;
										}
									} else if(cx + cw > _x + _width1) {
										mw = _x + _width1 - cx;
									}
									if(mw < 0) {
										mw = 0;
									}
									if(cy < _y) {
										mh -= _y - cy;
										my = _y - cy;
										if(mh > _height) {
											mh = _height;
										}
									} else if(cy + ch > _y + _height) {
										mh = _y + _height - cy;
									}
									if(mh < 0) {
										mh = 0;
									}
									if(create) {
										var z = this.z;
										var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
										if(stylePos < 0) {
											if(this.uiDisplay.autoAddStyles) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var styleId = this.cursorStyle.getUUID();
												_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
												if(_this.stylePosBeforeFont == 0) {
													_this.addProgram(program,null,true);
												} else {
													_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
												}
												_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
												_this.stylePosBeforeFont++;
											} else {
												var c = js_Boot.getClass(this.cursorStyle);
												throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
											}
										} else {
											this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
											if(this.cursorProgram == null) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var stylePos1 = stylePos;
												_this.usedStyleProgram[stylePos1] = program;
												var afterProgram = null;
												while(stylePos1-- > 0) {
													afterProgram = _this.usedStyleProgram[stylePos1];
													if(afterProgram != null) {
														break;
													}
												}
												_this.addProgram(program,afterProgram,afterProgram == null);
											}
										}
										this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
										if(addUpdate) {
											this.cursorProgram.addElement(this.cursorElement);
										}
									} else {
										this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
										if(addUpdate) {
											this.cursorProgram.update(this.cursorElement);
										}
									}
								}
							}
						} else if(this.cursorWant > 0) {
							var pos = this.cursorWant;
							if(pos != this.cursor) {
								if(pos < 0) {
									this.cursor = 0;
								} else if(this.page != null && pos > this.pageLine.glyphes.length) {
									this.cursor = this.pageLine.glyphes.length;
								} else {
									this.cursor = pos;
								}
								if(this.page != null && this.cursorStyle != null) {
									var addUpdate = this.isVisible && this.cursorIsVisible;
									var create = this.cursorElement == null;
									var _x = this.x + this.leftSpace;
									var _y = this.y + this.topSpace;
									var _width = this.width - this.leftSpace - this.rightSpace;
									var _height = this.height - this.topSpace - this.bottomSpace;
									if(this.masked) {
										if(this.maskX > this.leftSpace) {
											_x = this.x + this.maskX;
										}
										if(this.maskY > this.topSpace) {
											_y = this.y + this.maskY;
										}
										if(this.x + this.maskX + this.maskWidth < _x + _width) {
											_width = this.maskX + this.maskWidth + this.x - _x;
										}
										if(this.y + this.maskY + this.maskHeight < _y + _height) {
											_height = this.maskY + this.maskHeight + this.y - _y;
										}
									}
									var _width1 = _width;
									var _yOffset = this.yOffset;
									var y_offset;
									if((this.autoSize & 1) > 0) {
										y_offset = _yOffset;
									} else {
										switch(this.vAlign) {
										case 4:
											y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
											break;
										case 8:
											y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
											break;
										default:
											y_offset = _yOffset;
										}
									}
									var y_offset1 = y_offset + this.topSpace;
									_width1 += 3;
									var page = this.page;
									var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
									var cw = 2;
									var cy = Math.round(this.pageLine.y);
									var ch = Math.round(this.pageLine.height);
									var mx = 0;
									var my = 0;
									var mw = cw;
									var mh = ch;
									if(cx < _x) {
										mw -= _x - cx;
										mx = _x - cx;
										if(mw > _width1) {
											mw = _width1;
										}
									} else if(cx + cw > _x + _width1) {
										mw = _x + _width1 - cx;
									}
									if(mw < 0) {
										mw = 0;
									}
									if(cy < _y) {
										mh -= _y - cy;
										my = _y - cy;
										if(mh > _height) {
											mh = _height;
										}
									} else if(cy + ch > _y + _height) {
										mh = _y + _height - cy;
									}
									if(mh < 0) {
										mh = 0;
									}
									if(create) {
										var z = this.z;
										var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
										if(stylePos < 0) {
											if(this.uiDisplay.autoAddStyles) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var styleId = this.cursorStyle.getUUID();
												_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
												if(_this.stylePosBeforeFont == 0) {
													_this.addProgram(program,null,true);
												} else {
													_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
												}
												_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
												_this.stylePosBeforeFont++;
											} else {
												var c = js_Boot.getClass(this.cursorStyle);
												throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
											}
										} else {
											this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
											if(this.cursorProgram == null) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var stylePos1 = stylePos;
												_this.usedStyleProgram[stylePos1] = program;
												var afterProgram = null;
												while(stylePos1-- > 0) {
													afterProgram = _this.usedStyleProgram[stylePos1];
													if(afterProgram != null) {
														break;
													}
												}
												_this.addProgram(program,afterProgram,afterProgram == null);
											}
										}
										this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
										if(addUpdate) {
											this.cursorProgram.addElement(this.cursorElement);
										}
									} else {
										this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
										if(addUpdate) {
											this.cursorProgram.update(this.cursorElement);
										}
									}
								}
							}
						}
						if(this.cursorStyle != null) {
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var create = this.cursorElement == null;
							var _x = this.x + this.leftSpace;
							var _y = this.y + this.topSpace;
							var _width = this.width - this.leftSpace - this.rightSpace;
							var _height = this.height - this.topSpace - this.bottomSpace;
							if(this.masked) {
								if(this.maskX > this.leftSpace) {
									_x = this.x + this.maskX;
								}
								if(this.maskY > this.topSpace) {
									_y = this.y + this.maskY;
								}
								if(this.x + this.maskX + this.maskWidth < _x + _width) {
									_width = this.maskX + this.maskWidth + this.x - _x;
								}
								if(this.y + this.maskY + this.maskHeight < _y + _height) {
									_height = this.maskY + this.maskHeight + this.y - _y;
								}
							}
							var _width1 = _width;
							var _yOffset = this.yOffset;
							var y_offset;
							if((this.autoSize & 1) > 0) {
								y_offset = _yOffset;
							} else {
								switch(this.vAlign) {
								case 4:
									y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
									break;
								case 8:
									y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
									break;
								default:
									y_offset = _yOffset;
								}
							}
							var y_offset1 = y_offset + this.topSpace;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(create) {
								var z = this.z;
								var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
								if(stylePos < 0) {
									if(this.uiDisplay.autoAddStyles) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var styleId = this.cursorStyle.getUUID();
										_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
										if(_this.stylePosBeforeFont == 0) {
											_this.addProgram(program,null,true);
										} else {
											_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
										}
										_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
										_this.stylePosBeforeFont++;
									} else {
										var c = js_Boot.getClass(this.cursorStyle);
										throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
									}
								} else {
									this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
									if(this.cursorProgram == null) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var stylePos1 = stylePos;
										_this.usedStyleProgram[stylePos1] = program;
										var afterProgram = null;
										while(stylePos1-- > 0) {
											afterProgram = _this.usedStyleProgram[stylePos1];
											if(afterProgram != null) {
												break;
											}
										}
										_this.addProgram(program,afterProgram,afterProgram == null);
									}
								}
								this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
								if(addUpdate) {
									this.cursorProgram.addElement(this.cursorElement);
								}
							} else {
								this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
								if(addUpdate) {
									this.cursorProgram.update(this.cursorElement);
								}
							}
						}
					}
				}
			}
			this.pageLine = this.page.pageLines[this.cursorLine];
			if(this.cursor > this.pageLine.glyphes.length) {
				var pos = this.pageLine.glyphes.length;
				if(pos != this.cursor) {
					if(pos < 0) {
						this.cursor = 0;
					} else if(this.page != null && pos > this.pageLine.glyphes.length) {
						this.cursor = this.pageLine.glyphes.length;
					} else {
						this.cursor = pos;
					}
					if(this.page != null && this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
			var t = null;
			if(this.page == null || t == null) {
				this.text = t;
			} else {
				this.setText(t);
			}
			if(this.autoSize > 0) {
				if((this.autoSize & 2) > 0) {
					var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
					if(w != this.width) {
						if(this.resizeWidth != null) {
							var oldWidth = this.width;
							this.resizeWidth(this.width = w,w - oldWidth);
						} else {
							this.width = w;
						}
					}
				}
				if((this.autoSize & 1) > 0) {
					var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
					if(h != this.height) {
						if(this.resizeHeight != null) {
							var oldHeight = this.height;
							this.resizeHeight(this.height = h,h - oldHeight);
						} else {
							this.height = h;
						}
					}
				}
				if(this.hasMoveEvent != 0) {
					var _this = this.pickableMove;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
				}
				if(this.hasClickEvent != 0) {
					var _this = this.pickableClick;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
				}
			}
			var _x = this.x + this.leftSpace;
			var _y = this.y + this.topSpace;
			var _width = this.width - this.leftSpace - this.rightSpace;
			var _height = this.height - this.topSpace - this.bottomSpace;
			var _yOffset = this.yOffset;
			var y_offset;
			if((this.autoSize & 1) > 0) {
				y_offset = _yOffset;
			} else {
				switch(this.vAlign) {
				case 4:
					y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
					break;
				case 8:
					y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
					break;
				default:
					y_offset = _yOffset;
				}
			}
			var _xOffset = this.xOffset;
			var tmp;
			if((this.autoSize & 2) > 0) {
				tmp = _xOffset;
			} else {
				switch(this.hAlign) {
				case 1:
					tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
					break;
				case 2:
					tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
					break;
				default:
					tmp = _xOffset;
				}
			}
			this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,y_offset,this.isVisible);
			this.fontProgram.pageUpdate(this.page);
			if(this.masked) {
				if(this.maskX > this.leftSpace) {
					_x = this.x + this.maskX;
				}
				if(this.maskY > this.topSpace) {
					_y = this.y + this.maskY;
				}
				if(this.x + this.maskX + this.maskWidth < _x + _width) {
					_width = this.maskX + this.maskWidth + this.x - _x;
				}
				if(this.y + this.maskY + this.maskHeight < _y + _height) {
					_height = this.maskY + this.maskHeight + this.y - _y;
				}
			}
			var _this = this.fontProgram;
			var maskElement = new peote_text_MaskElement(_x,_y,_width,_height);
			_this.maskBuffer.addElement(maskElement);
			this.maskElement = maskElement;
			if(this.backgroundStyle != null) {
				var addUpdate = this.backgroundIsVisible;
				var stylePos = this.uiDisplay.usedStyleID.indexOf(this.backgroundStyle.getUUID());
				if(stylePos < 0) {
					if(this.uiDisplay.autoAddStyles) {
						var _this = this.uiDisplay;
						var program = this.backgroundProgram = this.backgroundStyle.createStyleProgram();
						var styleId = this.backgroundStyle.getUUID();
						_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
						if(_this.stylePosBeforeFont == 0) {
							_this.addProgram(program,null,true);
						} else {
							_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
						}
						_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
						_this.stylePosBeforeFont++;
					} else {
						var c = js_Boot.getClass(this.backgroundStyle);
						throw haxe_Exception.thrown("Error by creating background for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.backgroundStyle.id) + " is not inside the availableStyle list of UIDisplay.");
					}
				} else {
					this.backgroundProgram = this.uiDisplay.usedStyleProgram[stylePos];
					if(this.backgroundProgram == null) {
						var _this = this.uiDisplay;
						var program = this.backgroundProgram = this.backgroundStyle.createStyleProgram();
						var stylePos1 = stylePos;
						_this.usedStyleProgram[stylePos1] = program;
						var afterProgram = null;
						while(stylePos1-- > 0) {
							afterProgram = _this.usedStyleProgram[stylePos1];
							if(afterProgram != null) {
								break;
							}
						}
						_this.addProgram(program,afterProgram,afterProgram == null);
					}
				}
				this.backgroundElement = this.backgroundProgram.createElement(this,this.backgroundStyle);
				if(addUpdate) {
					this.backgroundProgram.addElement(this.backgroundElement);
				}
			}
			if(this.selectionStyle != null) {
				var y_offset1 = y_offset + this.topSpace;
				var addUpdate = this.selectionIsVisible;
				var selectX;
				var selectWidth;
				var selectY;
				var selectHeight;
				var mx;
				var my;
				var mw;
				var mh;
				var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
				var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
				var _selectFrom = this.selectFrom;
				var _selectTo = this.selectTo;
				if(from >= this.page.pageLines.length) {
					haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
				}
				if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
					_selectFrom = 0;
					++from;
				}
				if(_selectTo == 0 && to > from + 1) {
					if(to - 1 >= this.page.pageLines.length) {
						haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
					}
					--to;
					_selectTo = this.page.pageLines[to - 1].glyphes.length;
				}
				var _pageLine;
				var selectionElement;
				var stylePos = this.uiDisplay.usedStyleID.indexOf(this.selectionStyle.getUUID());
				if(stylePos < 0) {
					if(this.uiDisplay.autoAddStyles) {
						var _this = this.uiDisplay;
						var program = this.selectionProgram = this.selectionStyle.createStyleProgram();
						var styleId = this.selectionStyle.getUUID();
						_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
						if(_this.stylePosBeforeFont == 0) {
							_this.addProgram(program,null,true);
						} else {
							_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
						}
						_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
						_this.stylePosBeforeFont++;
					} else {
						var c = js_Boot.getClass(this.selectionStyle);
						throw haxe_Exception.thrown("Error by creating selection for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.selectionStyle.id) + " is not inside the availableStyle list of UIDisplay.");
					}
				} else {
					this.selectionProgram = this.uiDisplay.usedStyleProgram[stylePos];
					if(this.selectionProgram == null) {
						var _this = this.uiDisplay;
						var program = this.selectionProgram = this.selectionStyle.createStyleProgram();
						var stylePos1 = stylePos;
						_this.usedStyleProgram[stylePos1] = program;
						var afterProgram = null;
						while(stylePos1-- > 0) {
							afterProgram = _this.usedStyleProgram[stylePos1];
							if(afterProgram != null) {
								break;
							}
						}
						_this.addProgram(program,afterProgram,afterProgram == null);
					}
				}
				this.selectionElementArray = [];
				var selectionElementMaxOld = this.selectionElementMax;
				this.selectionElementMax = 0;
				var _g = from;
				var _g1 = to;
				while(_g < _g1) {
					var i = _g++;
					_pageLine = this.page.pageLines[i];
					if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
						var page = this.page;
						selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
						var page1 = this.page;
						selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
					} else if(i == this.selectLineFrom) {
						var page2 = this.page;
						selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
						selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
					} else if(i == this.selectLineTo - 1) {
						selectX = Math.round(this.page.x + this.page.xOffset);
						var page3 = this.page;
						selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
					} else {
						selectX = Math.round(this.page.x + this.page.xOffset);
						selectWidth = Math.round(_pageLine.textSize);
					}
					selectY = Math.round(_pageLine.y);
					selectHeight = Math.round(_pageLine.height);
					mx = 0;
					my = 0;
					mw = selectWidth;
					mh = selectHeight;
					if(selectX < _x) {
						mw -= _x - selectX;
						mx = _x - selectX;
						if(mw > _width) {
							mw = _width;
						}
					} else if(selectX + selectWidth > _x + _width) {
						mw = _x + _width - selectX;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(selectY < _y) {
						mh -= _y - selectY;
						my = _y - selectY;
						if(mh > _height) {
							mh = _height;
						}
					} else if(selectY + selectHeight > _y + _height) {
						mh = _y + _height - selectY;
					}
					if(mh < 0) {
						mh = 0;
					}
					selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
					if(addUpdate) {
						this.selectionProgram.addElement(selectionElement);
					}
					this.selectionElementArray.push(selectionElement);
					this.selectionElementMax++;
				}
			}
			if(this.cursorStyle != null) {
				var y_offset1 = y_offset + this.topSpace;
				var addUpdate = this.cursorIsVisible;
				var _width1 = _width;
				_width1 += 3;
				var page = this.page;
				var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
				var cw = 2;
				var cy = Math.round(this.pageLine.y);
				var ch = Math.round(this.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = cw;
				var mh = ch;
				if(cx < _x) {
					mw -= _x - cx;
					mx = _x - cx;
					if(mw > _width1) {
						mw = _width1;
					}
				} else if(cx + cw > _x + _width1) {
					mw = _x + _width1 - cx;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(cy < _y) {
					mh -= _y - cy;
					my = _y - cy;
					if(mh > _height) {
						mh = _height;
					}
				} else if(cy + ch > _y + _height) {
					mh = _y + _height - cy;
				}
				if(mh < 0) {
					mh = 0;
				}
				var z = this.z;
				var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
				if(stylePos < 0) {
					if(this.uiDisplay.autoAddStyles) {
						var _this = this.uiDisplay;
						var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
						var styleId = this.cursorStyle.getUUID();
						_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
						if(_this.stylePosBeforeFont == 0) {
							_this.addProgram(program,null,true);
						} else {
							_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
						}
						_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
						_this.stylePosBeforeFont++;
					} else {
						var c = js_Boot.getClass(this.cursorStyle);
						throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
					}
				} else {
					this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
					if(this.cursorProgram == null) {
						var _this = this.uiDisplay;
						var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
						var stylePos1 = stylePos;
						_this.usedStyleProgram[stylePos1] = program;
						var afterProgram = null;
						while(stylePos1-- > 0) {
							afterProgram = _this.usedStyleProgram[stylePos1];
							if(afterProgram != null) {
								break;
							}
						}
						_this.addProgram(program,afterProgram,afterProgram == null);
					}
				}
				this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
				if(addUpdate) {
					this.cursorProgram.addElement(this.cursorElement);
				}
			}
		}
	}
	,removeInputFocus: function() {
		if(this.uiDisplay != null) {
			this.uiDisplay.inputFocusElement = null;
		}
		if(this.page != null && this.cursorStyle != null) {
			if(this.cursorIsVisible && this.cursorElement != null && this.isVisible) {
				this.cursorProgram.removeElement(this.cursorElement);
			}
		}
		this.cursorIsVisible = false;
	}
	,keyDown: function(keyCode,modifier) {
		if(this.input2Action != null) {
			var this1 = this.input2Action.keyboardState;
			var keyState = this1[keyCode < 1073741881 ? keyCode : keyCode - 1073741881 + (127 + 1)];
			if(keyState != null) {
				var repeated = false;
				if(!keyState.isDown) {
					keyState.isDown = true;
				} else {
					repeated = true;
				}
				if(keyState.keyCombo != null) {
					var called = false;
					var actionState;
					var _g = 0;
					var _g1 = keyState.keyCombo;
					while(_g < _g1.length) {
						var keyCombo = _g1[_g];
						++_g;
						var tmp;
						if(keyCombo.keyCode != -1) {
							var keyState = this1[keyCombo.keyCode];
							tmp = keyState == null ? false : keyState.isDown;
						} else {
							tmp = true;
						}
						if(tmp) {
							actionState = keyCombo.actionState;
							if(!actionState.single || !called) {
								called = true;
								keyCombo.downBy = true;
								if(!repeated) {
									actionState.pressed++;
								}
								var actionState1 = [actionState];
								if(actionState1[0].repeatKeyboardDefault) {
									actionState1[0].action(true,actionState1[0].player);
								} else if(!repeated) {
									if(actionState1[0].each || actionState1[0].pressed == 1) {
										actionState1[0].action(true,actionState1[0].player);
									}
									if(actionState1[0].repeatRate != 0 && actionState1[0].timer == null) {
										if(actionState1[0].repeatDelay == 0) {
											actionState1[0].timer = new haxe_Timer(actionState1[0].repeatRate);
											actionState1[0].timer.run = ($_=actionState1[0],$bind($_,$_.callDownAction));
										} else {
											actionState1[0].timer = new haxe_Timer(actionState1[0].repeatDelay);
											actionState1[0].timer.run = (function(actionState) {
												return function() {
													actionState[0].action(true,actionState[0].player);
													actionState[0].timer.stop();
													actionState[0].timer = new haxe_Timer(actionState[0].repeatRate);
													actionState[0].timer.run = ($_=actionState[0],$bind($_,$_.callDownAction));
												};
											})(actionState1);
										}
									}
								}
								if(actionState.single) {
									break;
								}
							}
						}
					}
				}
			}
		} else {
			var this1 = peote_ui_interactive_input2action_InputTextPage.input2Action.keyboardState;
			var keyState = this1[keyCode < 1073741881 ? keyCode : keyCode - 1073741881 + (127 + 1)];
			if(keyState != null) {
				var repeated = false;
				if(!keyState.isDown) {
					keyState.isDown = true;
				} else {
					repeated = true;
				}
				if(keyState.keyCombo != null) {
					var called = false;
					var actionState;
					var _g = 0;
					var _g1 = keyState.keyCombo;
					while(_g < _g1.length) {
						var keyCombo = _g1[_g];
						++_g;
						var tmp;
						if(keyCombo.keyCode != -1) {
							var keyState = this1[keyCombo.keyCode];
							tmp = keyState == null ? false : keyState.isDown;
						} else {
							tmp = true;
						}
						if(tmp) {
							actionState = keyCombo.actionState;
							if(!actionState.single || !called) {
								called = true;
								keyCombo.downBy = true;
								if(!repeated) {
									actionState.pressed++;
								}
								var actionState2 = [actionState];
								if(actionState2[0].repeatKeyboardDefault) {
									actionState2[0].action(true,actionState2[0].player);
								} else if(!repeated) {
									if(actionState2[0].each || actionState2[0].pressed == 1) {
										actionState2[0].action(true,actionState2[0].player);
									}
									if(actionState2[0].repeatRate != 0 && actionState2[0].timer == null) {
										if(actionState2[0].repeatDelay == 0) {
											actionState2[0].timer = new haxe_Timer(actionState2[0].repeatRate);
											actionState2[0].timer.run = ($_=actionState2[0],$bind($_,$_.callDownAction));
										} else {
											actionState2[0].timer = new haxe_Timer(actionState2[0].repeatDelay);
											actionState2[0].timer.run = (function(actionState) {
												return function() {
													actionState[0].action(true,actionState[0].player);
													actionState[0].timer.stop();
													actionState[0].timer = new haxe_Timer(actionState[0].repeatRate);
													actionState[0].timer.run = ($_=actionState[0],$bind($_,$_.callDownAction));
												};
											})(actionState2);
										}
									}
								}
								if(actionState.single) {
									break;
								}
							}
						}
					}
				}
			}
		}
	}
	,keyUp: function(keyCode,modifier) {
		if(this.input2Action != null) {
			input2action_InputState.callUpActions(this.input2Action.keyboardState,keyCode < 1073741881 ? keyCode : keyCode - 1073741881 + (127 + 1),true);
		} else {
			input2action_InputState.callUpActions(peote_ui_interactive_input2action_InputTextPage.input2Action.keyboardState,keyCode < 1073741881 ? keyCode : keyCode - 1073741881 + (127 + 1),true);
		}
	}
	,startSelection: function(e) {
		if(this.uiDisplay != null) {
			this.uiDisplay.startSelection(this,e);
		}
	}
	,stopSelection: function(e) {
		if(this.uiDisplay != null) {
			this.uiDisplay.stopSelection(this,e);
		}
	}
	,onSelectStart: function(e) {
		this.selectLineFrom = this.selectLineTo = this.selectFrom = this.selectTo = 0;
		if(this.page != null && this.selectionStyle != null) {
			if(this.selectionIsVisible && this.selectionElementArray != null && this.isVisible) {
				var _g = 0;
				var _g1 = this.selectionElementMax;
				while(_g < _g1) {
					var i = _g++;
					this.selectionProgram.removeElement(this.selectionElementArray[i]);
				}
			}
		}
		this.selectionIsVisible = false;
		var pos = this.fontProgram.pageGetLineAtPosition(this.page,e.y);
		if(pos != this.cursorLine) {
			if(pos < 0) {
				this.cursorLine = 0;
			} else if(this.page != null && pos >= this.page.pageLines.length) {
				this.cursorLine = this.page.pageLines.length - 1;
			} else {
				this.cursorLine = pos;
			}
			if(this.page != null) {
				this.pageLine = this.page.pageLines[this.cursorLine];
				if(this.cursor > this.pageLine.glyphes.length) {
					if(this.cursorWant == -1) {
						this.cursorWant = this.cursor;
					}
					var pos = this.pageLine.glyphes.length;
					if(pos != this.cursor) {
						if(pos < 0) {
							this.cursor = 0;
						} else if(this.page != null && pos > this.pageLine.glyphes.length) {
							this.cursor = this.pageLine.glyphes.length;
						} else {
							this.cursor = pos;
						}
						if(this.page != null && this.cursorStyle != null) {
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var create = this.cursorElement == null;
							var _x = this.x + this.leftSpace;
							var _y = this.y + this.topSpace;
							var _width = this.width - this.leftSpace - this.rightSpace;
							var _height = this.height - this.topSpace - this.bottomSpace;
							if(this.masked) {
								if(this.maskX > this.leftSpace) {
									_x = this.x + this.maskX;
								}
								if(this.maskY > this.topSpace) {
									_y = this.y + this.maskY;
								}
								if(this.x + this.maskX + this.maskWidth < _x + _width) {
									_width = this.maskX + this.maskWidth + this.x - _x;
								}
								if(this.y + this.maskY + this.maskHeight < _y + _height) {
									_height = this.maskY + this.maskHeight + this.y - _y;
								}
							}
							var _width1 = _width;
							var _yOffset = this.yOffset;
							var y_offset;
							if((this.autoSize & 1) > 0) {
								y_offset = _yOffset;
							} else {
								switch(this.vAlign) {
								case 4:
									y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
									break;
								case 8:
									y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
									break;
								default:
									y_offset = _yOffset;
								}
							}
							var y_offset1 = y_offset + this.topSpace;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(create) {
								var z = this.z;
								var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
								if(stylePos < 0) {
									if(this.uiDisplay.autoAddStyles) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var styleId = this.cursorStyle.getUUID();
										_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
										if(_this.stylePosBeforeFont == 0) {
											_this.addProgram(program,null,true);
										} else {
											_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
										}
										_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
										_this.stylePosBeforeFont++;
									} else {
										var c = js_Boot.getClass(this.cursorStyle);
										throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
									}
								} else {
									this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
									if(this.cursorProgram == null) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var stylePos1 = stylePos;
										_this.usedStyleProgram[stylePos1] = program;
										var afterProgram = null;
										while(stylePos1-- > 0) {
											afterProgram = _this.usedStyleProgram[stylePos1];
											if(afterProgram != null) {
												break;
											}
										}
										_this.addProgram(program,afterProgram,afterProgram == null);
									}
								}
								this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
								if(addUpdate) {
									this.cursorProgram.addElement(this.cursorElement);
								}
							} else {
								this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
								if(addUpdate) {
									this.cursorProgram.update(this.cursorElement);
								}
							}
						}
					}
				} else if(this.cursorWant > 0) {
					var pos = this.cursorWant;
					if(pos != this.cursor) {
						if(pos < 0) {
							this.cursor = 0;
						} else if(this.page != null && pos > this.pageLine.glyphes.length) {
							this.cursor = this.pageLine.glyphes.length;
						} else {
							this.cursor = pos;
						}
						if(this.page != null && this.cursorStyle != null) {
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var create = this.cursorElement == null;
							var _x = this.x + this.leftSpace;
							var _y = this.y + this.topSpace;
							var _width = this.width - this.leftSpace - this.rightSpace;
							var _height = this.height - this.topSpace - this.bottomSpace;
							if(this.masked) {
								if(this.maskX > this.leftSpace) {
									_x = this.x + this.maskX;
								}
								if(this.maskY > this.topSpace) {
									_y = this.y + this.maskY;
								}
								if(this.x + this.maskX + this.maskWidth < _x + _width) {
									_width = this.maskX + this.maskWidth + this.x - _x;
								}
								if(this.y + this.maskY + this.maskHeight < _y + _height) {
									_height = this.maskY + this.maskHeight + this.y - _y;
								}
							}
							var _width1 = _width;
							var _yOffset = this.yOffset;
							var y_offset;
							if((this.autoSize & 1) > 0) {
								y_offset = _yOffset;
							} else {
								switch(this.vAlign) {
								case 4:
									y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
									break;
								case 8:
									y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
									break;
								default:
									y_offset = _yOffset;
								}
							}
							var y_offset1 = y_offset + this.topSpace;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(create) {
								var z = this.z;
								var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
								if(stylePos < 0) {
									if(this.uiDisplay.autoAddStyles) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var styleId = this.cursorStyle.getUUID();
										_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
										if(_this.stylePosBeforeFont == 0) {
											_this.addProgram(program,null,true);
										} else {
											_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
										}
										_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
										_this.stylePosBeforeFont++;
									} else {
										var c = js_Boot.getClass(this.cursorStyle);
										throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
									}
								} else {
									this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
									if(this.cursorProgram == null) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var stylePos1 = stylePos;
										_this.usedStyleProgram[stylePos1] = program;
										var afterProgram = null;
										while(stylePos1-- > 0) {
											afterProgram = _this.usedStyleProgram[stylePos1];
											if(afterProgram != null) {
												break;
											}
										}
										_this.addProgram(program,afterProgram,afterProgram == null);
									}
								}
								this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
								if(addUpdate) {
									this.cursorProgram.addElement(this.cursorElement);
								}
							} else {
								this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
								if(addUpdate) {
									this.cursorProgram.update(this.cursorElement);
								}
							}
						}
					}
				}
				if(this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var page = this.page;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.pageLine.y);
					var ch = Math.round(this.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
		}
		this.selectStartFromLine = this.cursorLine;
		var page = this.page;
		var pos = this.fontProgram.pageLineGetCharAtPosition(this.pageLine,page.x,page.width,page.xOffset,e.x,true);
		if(pos != this.cursor) {
			if(pos < 0) {
				this.cursor = 0;
			} else if(this.page != null && pos > this.pageLine.glyphes.length) {
				this.cursor = this.pageLine.glyphes.length;
			} else {
				this.cursor = pos;
			}
			if(this.page != null && this.cursorStyle != null) {
				var addUpdate = this.isVisible && this.cursorIsVisible;
				var create = this.cursorElement == null;
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var _width1 = _width;
				var _yOffset = this.yOffset;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = _yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
						break;
					default:
						y_offset = _yOffset;
					}
				}
				var y_offset1 = y_offset + this.topSpace;
				_width1 += 3;
				var page = this.page;
				var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
				var cw = 2;
				var cy = Math.round(this.pageLine.y);
				var ch = Math.round(this.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = cw;
				var mh = ch;
				if(cx < _x) {
					mw -= _x - cx;
					mx = _x - cx;
					if(mw > _width1) {
						mw = _width1;
					}
				} else if(cx + cw > _x + _width1) {
					mw = _x + _width1 - cx;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(cy < _y) {
					mh -= _y - cy;
					my = _y - cy;
					if(mh > _height) {
						mh = _height;
					}
				} else if(cy + ch > _y + _height) {
					mh = _y + _height - cy;
				}
				if(mh < 0) {
					mh = 0;
				}
				if(create) {
					var z = this.z;
					var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
					if(stylePos < 0) {
						if(this.uiDisplay.autoAddStyles) {
							var _this = this.uiDisplay;
							var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
							var styleId = this.cursorStyle.getUUID();
							_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
							if(_this.stylePosBeforeFont == 0) {
								_this.addProgram(program,null,true);
							} else {
								_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
							}
							_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
							_this.stylePosBeforeFont++;
						} else {
							var c = js_Boot.getClass(this.cursorStyle);
							throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
						}
					} else {
						this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
						if(this.cursorProgram == null) {
							var _this = this.uiDisplay;
							var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
							var stylePos1 = stylePos;
							_this.usedStyleProgram[stylePos1] = program;
							var afterProgram = null;
							while(stylePos1-- > 0) {
								afterProgram = _this.usedStyleProgram[stylePos1];
								if(afterProgram != null) {
									break;
								}
							}
							_this.addProgram(program,afterProgram,afterProgram == null);
						}
					}
					this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
					if(addUpdate) {
						this.cursorProgram.addElement(this.cursorElement);
					}
				} else {
					this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.cursorProgram.update(this.cursorElement);
					}
				}
			}
		}
		this.selectStartFrom = this.cursor;
		this.xOffsetAtSelectStart = this.xOffset;
		this.yOffsetAtSelectStart = this.yOffset;
		if(this.page != null && this.selectionStyle != null) {
			if(this.selectionIsVisible && this.selectionElementArray != null && this.isVisible) {
				var _g = 0;
				var _g1 = this.selectionElementMax;
				while(_g < _g1) {
					var i = _g++;
					this.selectionProgram.removeElement(this.selectionElementArray[i]);
				}
			}
		}
		this.selectionIsVisible = false;
	}
	,onSelectStop: function(e) {
	}
	,onSelect: function(e) {
		var globalX = e.x;
		if(this.uiDisplay == null) {
			throw haxe_Exception.thrown("Error, ui-element has to add to an UIDisplay instance first");
		}
		var _this = this.uiDisplay;
		var peoteView = null;
		if(peoteView == null) {
			peoteView = _this.peoteView;
		}
		if((peoteView != null ? (globalX / peoteView.xz - peoteView.xOffset - _this.xOffset - _this.x) / _this.xz : (globalX - _this.xOffset - _this.x) / _this.xz) - this.x < this.leftSpace) {
			var globalX = e.x;
			if(this.uiDisplay == null) {
				throw haxe_Exception.thrown("Error, ui-element has to add to an UIDisplay instance first");
			}
			var _this = this.uiDisplay;
			var peoteView = null;
			if(peoteView == null) {
				peoteView = _this.peoteView;
			}
			var tmp = (peoteView != null ? (globalX / peoteView.xz - peoteView.xOffset - _this.xOffset - _this.x) / _this.xz : (globalX - _this.xOffset - _this.x) / _this.xz) - this.x;
			var _xOffset = this.leftSpace;
			var tmp1;
			if((this.autoSize & 2) > 0) {
				tmp1 = _xOffset;
			} else {
				switch(this.hAlign) {
				case 1:
					tmp1 = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
					break;
				case 2:
					tmp1 = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
					break;
				default:
					tmp1 = _xOffset;
				}
			}
			if(tmp < tmp1 + this.xOffsetAtSelectStart) {
				var tmp;
				if((this.autoSize & 2) > 0) {
					tmp = 0;
				} else {
					switch(this.hAlign) {
					case 1:
						tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2;
						break;
					case 2:
						tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth;
						break;
					default:
						tmp = 0;
					}
				}
				this.xOffset = Math.max(-tmp,this.xOffsetAtSelectStart);
			} else {
				var tmp = this.leftSpace;
				var globalX = e.x;
				if(this.uiDisplay == null) {
					throw haxe_Exception.thrown("Error, ui-element has to add to an UIDisplay instance first");
				}
				var _this = this.uiDisplay;
				var peoteView = null;
				if(peoteView == null) {
					peoteView = _this.peoteView;
				}
				this.xOffset = tmp - ((peoteView != null ? (globalX / peoteView.xz - peoteView.xOffset - _this.xOffset - _this.x) / _this.xz : (globalX - _this.xOffset - _this.x) / _this.xz) - this.x) + this.xOffsetAtSelectStart;
			}
			if(this.autoSize > 0) {
				if((this.autoSize & 2) > 0) {
					var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
					if(w != this.width) {
						if(this.resizeWidth != null) {
							var oldWidth = this.width;
							this.resizeWidth(this.width = w,w - oldWidth);
						} else {
							this.width = w;
						}
					}
				}
				if((this.autoSize & 1) > 0) {
					var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
					if(h != this.height) {
						if(this.resizeHeight != null) {
							var oldHeight = this.height;
							this.resizeHeight(this.height = h,h - oldHeight);
						} else {
							this.height = h;
						}
					}
				}
				if(this.hasMoveEvent != 0) {
					var _this = this.pickableMove;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
					if(this.isVisible) {
						this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
					}
				}
				if(this.hasClickEvent != 0) {
					var _this = this.pickableClick;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
					if(this.isVisible) {
						this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
					}
				}
			}
			var _x = this.x + this.leftSpace;
			var _y = this.y + this.topSpace;
			var _width = this.width - this.leftSpace - this.rightSpace;
			var _height = this.height - this.topSpace - this.bottomSpace;
			var _yOffset = this.yOffset;
			var y_offset;
			if((this.autoSize & 1) > 0) {
				y_offset = _yOffset;
			} else {
				switch(this.vAlign) {
				case 4:
					y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
					break;
				case 8:
					y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
					break;
				default:
					y_offset = _yOffset;
				}
			}
			var _xOffset = this.xOffset;
			var tmp;
			if((this.autoSize & 2) > 0) {
				tmp = _xOffset;
			} else {
				switch(this.hAlign) {
				case 1:
					tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
					break;
				case 2:
					tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
					break;
				default:
					tmp = _xOffset;
				}
			}
			this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,y_offset,this.isVisible);
			if(this.isVisible) {
				this.fontProgram.pageUpdate(this.page);
			}
			if(this.masked) {
				if(this.maskX > this.leftSpace) {
					_x = this.x + this.maskX;
				}
				if(this.maskY > this.topSpace) {
					_y = this.y + this.maskY;
				}
				if(this.x + this.maskX + this.maskWidth < _x + _width) {
					_width = this.maskX + this.maskWidth + this.x - _x;
				}
				if(this.y + this.maskY + this.maskHeight < _y + _height) {
					_height = this.maskY + this.maskHeight + this.y - _y;
				}
			}
			var maskElement = this.maskElement;
			var autoUpdate = this.isVisible;
			if(autoUpdate == null) {
				autoUpdate = true;
			}
			maskElement.x = _x;
			maskElement.y = _y;
			maskElement.w = _width;
			maskElement.h = _height;
			if(autoUpdate) {
				this.fontProgram.maskBuffer.updateElement(maskElement);
			}
			if(this.backgroundElement != null) {
				this.backgroundElement.setLayout(this);
				if(this.isVisible && this.backgroundIsVisible) {
					this.backgroundProgram.update(this.backgroundElement);
				}
			}
			if(this.selectionElementArray != null) {
				var y_offset1 = y_offset + this.topSpace;
				var addUpdate = this.isVisible && this.selectionIsVisible;
				var selectX;
				var selectWidth;
				var selectY;
				var selectHeight;
				var mx;
				var my;
				var mw;
				var mh;
				var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
				var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
				var _selectFrom = this.selectFrom;
				var _selectTo = this.selectTo;
				if(from >= this.page.pageLines.length) {
					haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
				}
				if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
					_selectFrom = 0;
					++from;
				}
				if(_selectTo == 0 && to > from + 1) {
					if(to - 1 >= this.page.pageLines.length) {
						haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
					}
					--to;
					_selectTo = this.page.pageLines[to - 1].glyphes.length;
				}
				var _pageLine;
				var selectionElement;
				if(addUpdate) {
					var fromOld = to - from;
					if(fromOld < 0) {
						fromOld = 0;
					}
					var _g = fromOld;
					var _g1 = this.selectionElementMax;
					while(_g < _g1) {
						var i = _g++;
						this.selectionProgram.removeElement(this.selectionElementArray[i]);
					}
				}
				var selectionElementMaxOld = this.selectionElementMax;
				this.selectionElementMax = 0;
				var _g = from;
				var _g1 = to;
				while(_g < _g1) {
					var i = _g++;
					_pageLine = this.page.pageLines[i];
					if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
						var page = this.page;
						selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
						var page1 = this.page;
						selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
					} else if(i == this.selectLineFrom) {
						var page2 = this.page;
						selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
						selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
					} else if(i == this.selectLineTo - 1) {
						selectX = Math.round(this.page.x + this.page.xOffset);
						var page3 = this.page;
						selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
					} else {
						selectX = Math.round(this.page.x + this.page.xOffset);
						selectWidth = Math.round(_pageLine.textSize);
					}
					selectY = Math.round(_pageLine.y);
					selectHeight = Math.round(_pageLine.height);
					mx = 0;
					my = 0;
					mw = selectWidth;
					mh = selectHeight;
					if(selectX < _x) {
						mw -= _x - selectX;
						mx = _x - selectX;
						if(mw > _width) {
							mw = _width;
						}
					} else if(selectX + selectWidth > _x + _width) {
						mw = _x + _width - selectX;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(selectY < _y) {
						mh -= _y - selectY;
						my = _y - selectY;
						if(mh > _height) {
							mh = _height;
						}
					} else if(selectY + selectHeight > _y + _height) {
						mh = _y + _height - selectY;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(this.selectionElementMax >= this.selectionElementArray.length) {
						selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
						if(addUpdate) {
							this.selectionProgram.addElement(selectionElement);
						}
						this.selectionElementArray.push(selectionElement);
					} else {
						selectionElement = this.selectionElementArray[this.selectionElementMax];
						selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
						if(this.selectionElementMax >= selectionElementMaxOld) {
							selectionElement.setStyle(this.selectionStyle);
							if(addUpdate) {
								this.selectionProgram.addElement(selectionElement);
							}
						} else if(addUpdate) {
							this.selectionProgram.update(selectionElement);
						}
					}
					this.selectionElementMax++;
				}
			}
			if(this.cursorElement != null) {
				var y_offset1 = y_offset + this.topSpace;
				var addUpdate = this.isVisible && this.cursorIsVisible;
				var _width1 = _width;
				_width1 += 3;
				var page = this.page;
				var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
				var cw = 2;
				var cy = Math.round(this.pageLine.y);
				var ch = Math.round(this.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = cw;
				var mh = ch;
				if(cx < _x) {
					mw -= _x - cx;
					mx = _x - cx;
					if(mw > _width1) {
						mw = _width1;
					}
				} else if(cx + cw > _x + _width1) {
					mw = _x + _width1 - cx;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(cy < _y) {
					mh -= _y - cy;
					my = _y - cy;
					if(mh > _height) {
						mh = _height;
					}
				} else if(cy + ch > _y + _height) {
					mh = _y + _height - cy;
				}
				if(mh < 0) {
					mh = 0;
				}
				this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
				if(addUpdate) {
					this.cursorProgram.update(this.cursorElement);
				}
			}
		} else {
			var globalX = e.x;
			if(this.uiDisplay == null) {
				throw haxe_Exception.thrown("Error, ui-element has to add to an UIDisplay instance first");
			}
			var _this = this.uiDisplay;
			var peoteView = null;
			if(peoteView == null) {
				peoteView = _this.peoteView;
			}
			if((peoteView != null ? (globalX / peoteView.xz - peoteView.xOffset - _this.xOffset - _this.x) / _this.xz : (globalX - _this.xOffset - _this.x) / _this.xz) - this.x > this.width - this.rightSpace) {
				var globalX = e.x;
				if(this.uiDisplay == null) {
					throw haxe_Exception.thrown("Error, ui-element has to add to an UIDisplay instance first");
				}
				var _this = this.uiDisplay;
				var peoteView = null;
				if(peoteView == null) {
					peoteView = _this.peoteView;
				}
				var tmp = (peoteView != null ? (globalX / peoteView.xz - peoteView.xOffset - _this.xOffset - _this.x) / _this.xz : (globalX - _this.xOffset - _this.x) / _this.xz) - this.x;
				var _xOffset = this.page.textWidth + this.leftSpace + this.xOffsetAtSelectStart;
				var tmp1;
				if((this.autoSize & 2) > 0) {
					tmp1 = _xOffset;
				} else {
					switch(this.hAlign) {
					case 1:
						tmp1 = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
						break;
					case 2:
						tmp1 = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
						break;
					default:
						tmp1 = _xOffset;
					}
				}
				if(tmp > tmp1) {
					var _xOffset = Math.floor(this.page.textWidth) - this.width + this.leftSpace + this.rightSpace;
					var tmp;
					if((this.autoSize & 2) > 0) {
						tmp = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
							break;
						case 2:
							tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
							break;
						default:
							tmp = _xOffset;
						}
					}
					this.xOffset = Math.min(-tmp,this.xOffsetAtSelectStart);
				} else {
					var tmp = this.width;
					var globalX = e.x;
					if(this.uiDisplay == null) {
						throw haxe_Exception.thrown("Error, ui-element has to add to an UIDisplay instance first");
					}
					var _this = this.uiDisplay;
					var peoteView = null;
					if(peoteView == null) {
						peoteView = _this.peoteView;
					}
					this.xOffset = tmp - ((peoteView != null ? (globalX / peoteView.xz - peoteView.xOffset - _this.xOffset - _this.x) / _this.xz : (globalX - _this.xOffset - _this.x) / _this.xz) - this.x) - this.rightSpace + this.xOffsetAtSelectStart;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var _yOffset = this.yOffset;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = _yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
						break;
					default:
						y_offset = _yOffset;
					}
				}
				var _xOffset = this.xOffset;
				var tmp;
				if((this.autoSize & 2) > 0) {
					tmp = _xOffset;
				} else {
					switch(this.hAlign) {
					case 1:
						tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
						break;
					case 2:
						tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
						break;
					default:
						tmp = _xOffset;
					}
				}
				this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,y_offset,this.isVisible);
				if(this.isVisible) {
					this.fontProgram.pageUpdate(this.page);
				}
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var maskElement = this.maskElement;
				var autoUpdate = this.isVisible;
				if(autoUpdate == null) {
					autoUpdate = true;
				}
				maskElement.x = _x;
				maskElement.y = _y;
				maskElement.w = _width;
				maskElement.h = _height;
				if(autoUpdate) {
					this.fontProgram.maskBuffer.updateElement(maskElement);
				}
				if(this.backgroundElement != null) {
					this.backgroundElement.setLayout(this);
					if(this.isVisible && this.backgroundIsVisible) {
						this.backgroundProgram.update(this.backgroundElement);
					}
				}
				if(this.selectionElementArray != null) {
					var y_offset1 = y_offset + this.topSpace;
					var addUpdate = this.isVisible && this.selectionIsVisible;
					var selectX;
					var selectWidth;
					var selectY;
					var selectHeight;
					var mx;
					var my;
					var mw;
					var mh;
					var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
					var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
					var _selectFrom = this.selectFrom;
					var _selectTo = this.selectTo;
					if(from >= this.page.pageLines.length) {
						haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
					}
					if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
						_selectFrom = 0;
						++from;
					}
					if(_selectTo == 0 && to > from + 1) {
						if(to - 1 >= this.page.pageLines.length) {
							haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
						}
						--to;
						_selectTo = this.page.pageLines[to - 1].glyphes.length;
					}
					var _pageLine;
					var selectionElement;
					if(addUpdate) {
						var fromOld = to - from;
						if(fromOld < 0) {
							fromOld = 0;
						}
						var _g = fromOld;
						var _g1 = this.selectionElementMax;
						while(_g < _g1) {
							var i = _g++;
							this.selectionProgram.removeElement(this.selectionElementArray[i]);
						}
					}
					var selectionElementMaxOld = this.selectionElementMax;
					this.selectionElementMax = 0;
					var _g = from;
					var _g1 = to;
					while(_g < _g1) {
						var i = _g++;
						_pageLine = this.page.pageLines[i];
						if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
							var page = this.page;
							selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
							var page1 = this.page;
							selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
						} else if(i == this.selectLineFrom) {
							var page2 = this.page;
							selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
							selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
						} else if(i == this.selectLineTo - 1) {
							selectX = Math.round(this.page.x + this.page.xOffset);
							var page3 = this.page;
							selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
						} else {
							selectX = Math.round(this.page.x + this.page.xOffset);
							selectWidth = Math.round(_pageLine.textSize);
						}
						selectY = Math.round(_pageLine.y);
						selectHeight = Math.round(_pageLine.height);
						mx = 0;
						my = 0;
						mw = selectWidth;
						mh = selectHeight;
						if(selectX < _x) {
							mw -= _x - selectX;
							mx = _x - selectX;
							if(mw > _width) {
								mw = _width;
							}
						} else if(selectX + selectWidth > _x + _width) {
							mw = _x + _width - selectX;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(selectY < _y) {
							mh -= _y - selectY;
							my = _y - selectY;
							if(mh > _height) {
								mh = _height;
							}
						} else if(selectY + selectHeight > _y + _height) {
							mh = _y + _height - selectY;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(this.selectionElementMax >= this.selectionElementArray.length) {
							selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
							if(addUpdate) {
								this.selectionProgram.addElement(selectionElement);
							}
							this.selectionElementArray.push(selectionElement);
						} else {
							selectionElement = this.selectionElementArray[this.selectionElementMax];
							selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
							if(this.selectionElementMax >= selectionElementMaxOld) {
								selectionElement.setStyle(this.selectionStyle);
								if(addUpdate) {
									this.selectionProgram.addElement(selectionElement);
								}
							} else if(addUpdate) {
								this.selectionProgram.update(selectionElement);
							}
						}
						this.selectionElementMax++;
					}
				}
				if(this.cursorElement != null) {
					var y_offset1 = y_offset + this.topSpace;
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var _width1 = _width;
					_width1 += 3;
					var page = this.page;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.pageLine.y);
					var ch = Math.round(this.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.cursorProgram.update(this.cursorElement);
					}
				}
			} else if(this.xOffset != this.xOffsetAtSelectStart) {
				this.xOffset = this.xOffsetAtSelectStart;
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var _yOffset = this.yOffset;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = _yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
						break;
					default:
						y_offset = _yOffset;
					}
				}
				var _xOffset = this.xOffset;
				var tmp;
				if((this.autoSize & 2) > 0) {
					tmp = _xOffset;
				} else {
					switch(this.hAlign) {
					case 1:
						tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
						break;
					case 2:
						tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
						break;
					default:
						tmp = _xOffset;
					}
				}
				this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,y_offset,this.isVisible);
				if(this.isVisible) {
					this.fontProgram.pageUpdate(this.page);
				}
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var maskElement = this.maskElement;
				var autoUpdate = this.isVisible;
				if(autoUpdate == null) {
					autoUpdate = true;
				}
				maskElement.x = _x;
				maskElement.y = _y;
				maskElement.w = _width;
				maskElement.h = _height;
				if(autoUpdate) {
					this.fontProgram.maskBuffer.updateElement(maskElement);
				}
				if(this.backgroundElement != null) {
					this.backgroundElement.setLayout(this);
					if(this.isVisible && this.backgroundIsVisible) {
						this.backgroundProgram.update(this.backgroundElement);
					}
				}
				if(this.selectionElementArray != null) {
					var y_offset1 = y_offset + this.topSpace;
					var addUpdate = this.isVisible && this.selectionIsVisible;
					var selectX;
					var selectWidth;
					var selectY;
					var selectHeight;
					var mx;
					var my;
					var mw;
					var mh;
					var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
					var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
					var _selectFrom = this.selectFrom;
					var _selectTo = this.selectTo;
					if(from >= this.page.pageLines.length) {
						haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
					}
					if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
						_selectFrom = 0;
						++from;
					}
					if(_selectTo == 0 && to > from + 1) {
						if(to - 1 >= this.page.pageLines.length) {
							haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
						}
						--to;
						_selectTo = this.page.pageLines[to - 1].glyphes.length;
					}
					var _pageLine;
					var selectionElement;
					if(addUpdate) {
						var fromOld = to - from;
						if(fromOld < 0) {
							fromOld = 0;
						}
						var _g = fromOld;
						var _g1 = this.selectionElementMax;
						while(_g < _g1) {
							var i = _g++;
							this.selectionProgram.removeElement(this.selectionElementArray[i]);
						}
					}
					var selectionElementMaxOld = this.selectionElementMax;
					this.selectionElementMax = 0;
					var _g = from;
					var _g1 = to;
					while(_g < _g1) {
						var i = _g++;
						_pageLine = this.page.pageLines[i];
						if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
							var page = this.page;
							selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
							var page1 = this.page;
							selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
						} else if(i == this.selectLineFrom) {
							var page2 = this.page;
							selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
							selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
						} else if(i == this.selectLineTo - 1) {
							selectX = Math.round(this.page.x + this.page.xOffset);
							var page3 = this.page;
							selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
						} else {
							selectX = Math.round(this.page.x + this.page.xOffset);
							selectWidth = Math.round(_pageLine.textSize);
						}
						selectY = Math.round(_pageLine.y);
						selectHeight = Math.round(_pageLine.height);
						mx = 0;
						my = 0;
						mw = selectWidth;
						mh = selectHeight;
						if(selectX < _x) {
							mw -= _x - selectX;
							mx = _x - selectX;
							if(mw > _width) {
								mw = _width;
							}
						} else if(selectX + selectWidth > _x + _width) {
							mw = _x + _width - selectX;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(selectY < _y) {
							mh -= _y - selectY;
							my = _y - selectY;
							if(mh > _height) {
								mh = _height;
							}
						} else if(selectY + selectHeight > _y + _height) {
							mh = _y + _height - selectY;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(this.selectionElementMax >= this.selectionElementArray.length) {
							selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
							if(addUpdate) {
								this.selectionProgram.addElement(selectionElement);
							}
							this.selectionElementArray.push(selectionElement);
						} else {
							selectionElement = this.selectionElementArray[this.selectionElementMax];
							selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
							if(this.selectionElementMax >= selectionElementMaxOld) {
								selectionElement.setStyle(this.selectionStyle);
								if(addUpdate) {
									this.selectionProgram.addElement(selectionElement);
								}
							} else if(addUpdate) {
								this.selectionProgram.update(selectionElement);
							}
						}
						this.selectionElementMax++;
					}
				}
				if(this.cursorElement != null) {
					var y_offset1 = y_offset + this.topSpace;
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var _width1 = _width;
					_width1 += 3;
					var page = this.page;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.pageLine.y);
					var ch = Math.round(this.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.cursorProgram.update(this.cursorElement);
					}
				}
			}
		}
		var pos = this.fontProgram.pageGetLineAtPosition(this.page,e.y);
		if(pos != this.cursorLine) {
			if(pos < 0) {
				this.cursorLine = 0;
			} else if(this.page != null && pos >= this.page.pageLines.length) {
				this.cursorLine = this.page.pageLines.length - 1;
			} else {
				this.cursorLine = pos;
			}
			if(this.page != null) {
				this.pageLine = this.page.pageLines[this.cursorLine];
				if(this.cursor > this.pageLine.glyphes.length) {
					if(this.cursorWant == -1) {
						this.cursorWant = this.cursor;
					}
					var pos = this.pageLine.glyphes.length;
					if(pos != this.cursor) {
						if(pos < 0) {
							this.cursor = 0;
						} else if(this.page != null && pos > this.pageLine.glyphes.length) {
							this.cursor = this.pageLine.glyphes.length;
						} else {
							this.cursor = pos;
						}
						if(this.page != null && this.cursorStyle != null) {
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var create = this.cursorElement == null;
							var _x = this.x + this.leftSpace;
							var _y = this.y + this.topSpace;
							var _width = this.width - this.leftSpace - this.rightSpace;
							var _height = this.height - this.topSpace - this.bottomSpace;
							if(this.masked) {
								if(this.maskX > this.leftSpace) {
									_x = this.x + this.maskX;
								}
								if(this.maskY > this.topSpace) {
									_y = this.y + this.maskY;
								}
								if(this.x + this.maskX + this.maskWidth < _x + _width) {
									_width = this.maskX + this.maskWidth + this.x - _x;
								}
								if(this.y + this.maskY + this.maskHeight < _y + _height) {
									_height = this.maskY + this.maskHeight + this.y - _y;
								}
							}
							var _width1 = _width;
							var _yOffset = this.yOffset;
							var y_offset;
							if((this.autoSize & 1) > 0) {
								y_offset = _yOffset;
							} else {
								switch(this.vAlign) {
								case 4:
									y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
									break;
								case 8:
									y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
									break;
								default:
									y_offset = _yOffset;
								}
							}
							var y_offset1 = y_offset + this.topSpace;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(create) {
								var z = this.z;
								var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
								if(stylePos < 0) {
									if(this.uiDisplay.autoAddStyles) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var styleId = this.cursorStyle.getUUID();
										_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
										if(_this.stylePosBeforeFont == 0) {
											_this.addProgram(program,null,true);
										} else {
											_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
										}
										_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
										_this.stylePosBeforeFont++;
									} else {
										var c = js_Boot.getClass(this.cursorStyle);
										throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
									}
								} else {
									this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
									if(this.cursorProgram == null) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var stylePos1 = stylePos;
										_this.usedStyleProgram[stylePos1] = program;
										var afterProgram = null;
										while(stylePos1-- > 0) {
											afterProgram = _this.usedStyleProgram[stylePos1];
											if(afterProgram != null) {
												break;
											}
										}
										_this.addProgram(program,afterProgram,afterProgram == null);
									}
								}
								this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
								if(addUpdate) {
									this.cursorProgram.addElement(this.cursorElement);
								}
							} else {
								this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
								if(addUpdate) {
									this.cursorProgram.update(this.cursorElement);
								}
							}
						}
					}
				} else if(this.cursorWant > 0) {
					var pos = this.cursorWant;
					if(pos != this.cursor) {
						if(pos < 0) {
							this.cursor = 0;
						} else if(this.page != null && pos > this.pageLine.glyphes.length) {
							this.cursor = this.pageLine.glyphes.length;
						} else {
							this.cursor = pos;
						}
						if(this.page != null && this.cursorStyle != null) {
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var create = this.cursorElement == null;
							var _x = this.x + this.leftSpace;
							var _y = this.y + this.topSpace;
							var _width = this.width - this.leftSpace - this.rightSpace;
							var _height = this.height - this.topSpace - this.bottomSpace;
							if(this.masked) {
								if(this.maskX > this.leftSpace) {
									_x = this.x + this.maskX;
								}
								if(this.maskY > this.topSpace) {
									_y = this.y + this.maskY;
								}
								if(this.x + this.maskX + this.maskWidth < _x + _width) {
									_width = this.maskX + this.maskWidth + this.x - _x;
								}
								if(this.y + this.maskY + this.maskHeight < _y + _height) {
									_height = this.maskY + this.maskHeight + this.y - _y;
								}
							}
							var _width1 = _width;
							var _yOffset = this.yOffset;
							var y_offset;
							if((this.autoSize & 1) > 0) {
								y_offset = _yOffset;
							} else {
								switch(this.vAlign) {
								case 4:
									y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
									break;
								case 8:
									y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
									break;
								default:
									y_offset = _yOffset;
								}
							}
							var y_offset1 = y_offset + this.topSpace;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(create) {
								var z = this.z;
								var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
								if(stylePos < 0) {
									if(this.uiDisplay.autoAddStyles) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var styleId = this.cursorStyle.getUUID();
										_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
										if(_this.stylePosBeforeFont == 0) {
											_this.addProgram(program,null,true);
										} else {
											_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
										}
										_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
										_this.stylePosBeforeFont++;
									} else {
										var c = js_Boot.getClass(this.cursorStyle);
										throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
									}
								} else {
									this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
									if(this.cursorProgram == null) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var stylePos1 = stylePos;
										_this.usedStyleProgram[stylePos1] = program;
										var afterProgram = null;
										while(stylePos1-- > 0) {
											afterProgram = _this.usedStyleProgram[stylePos1];
											if(afterProgram != null) {
												break;
											}
										}
										_this.addProgram(program,afterProgram,afterProgram == null);
									}
								}
								this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
								if(addUpdate) {
									this.cursorProgram.addElement(this.cursorElement);
								}
							} else {
								this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
								if(addUpdate) {
									this.cursorProgram.update(this.cursorElement);
								}
							}
						}
					}
				}
				if(this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var page = this.page;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.pageLine.y);
					var ch = Math.round(this.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
		}
		var page = this.page;
		var pos = this.fontProgram.pageLineGetCharAtPosition(this.pageLine,page.x,page.width,page.xOffset,e.x,true);
		if(pos != this.cursor) {
			if(pos < 0) {
				this.cursor = 0;
			} else if(this.page != null && pos > this.pageLine.glyphes.length) {
				this.cursor = this.pageLine.glyphes.length;
			} else {
				this.cursor = pos;
			}
			if(this.page != null && this.cursorStyle != null) {
				var addUpdate = this.isVisible && this.cursorIsVisible;
				var create = this.cursorElement == null;
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var _width1 = _width;
				var _yOffset = this.yOffset;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = _yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
						break;
					default:
						y_offset = _yOffset;
					}
				}
				var y_offset1 = y_offset + this.topSpace;
				_width1 += 3;
				var page = this.page;
				var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
				var cw = 2;
				var cy = Math.round(this.pageLine.y);
				var ch = Math.round(this.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = cw;
				var mh = ch;
				if(cx < _x) {
					mw -= _x - cx;
					mx = _x - cx;
					if(mw > _width1) {
						mw = _width1;
					}
				} else if(cx + cw > _x + _width1) {
					mw = _x + _width1 - cx;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(cy < _y) {
					mh -= _y - cy;
					my = _y - cy;
					if(mh > _height) {
						mh = _height;
					}
				} else if(cy + ch > _y + _height) {
					mh = _y + _height - cy;
				}
				if(mh < 0) {
					mh = 0;
				}
				if(create) {
					var z = this.z;
					var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
					if(stylePos < 0) {
						if(this.uiDisplay.autoAddStyles) {
							var _this = this.uiDisplay;
							var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
							var styleId = this.cursorStyle.getUUID();
							_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
							if(_this.stylePosBeforeFont == 0) {
								_this.addProgram(program,null,true);
							} else {
								_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
							}
							_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
							_this.stylePosBeforeFont++;
						} else {
							var c = js_Boot.getClass(this.cursorStyle);
							throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
						}
					} else {
						this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
						if(this.cursorProgram == null) {
							var _this = this.uiDisplay;
							var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
							var stylePos1 = stylePos;
							_this.usedStyleProgram[stylePos1] = program;
							var afterProgram = null;
							while(stylePos1-- > 0) {
								afterProgram = _this.usedStyleProgram[stylePos1];
								if(afterProgram != null) {
									break;
								}
							}
							_this.addProgram(program,afterProgram,afterProgram == null);
						}
					}
					this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
					if(addUpdate) {
						this.cursorProgram.addElement(this.cursorElement);
					}
				} else {
					this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.cursorProgram.update(this.cursorElement);
					}
				}
			}
		}
		this.select(this.selectStartFrom,this.cursor,this.selectStartFromLine,this.cursorLine);
	}
	,setText: function(text,fontStyle,forceAutoWidth,forceAutoHeight,autoUpdate) {
		if(autoUpdate == null) {
			autoUpdate = false;
		}
		if(fontStyle != null) {
			this.fontStyle = fontStyle;
		}
		if(forceAutoWidth != null) {
			if(forceAutoWidth) {
				this.autoSize |= 2;
			} else {
				this.autoSize &= 1;
			}
		}
		if(forceAutoHeight != null) {
			if(forceAutoHeight) {
				this.autoSize |= 1;
			} else {
				this.autoSize &= 2;
			}
		}
		if(this.page != null) {
			this.fontProgram.pageSet(this.page,text,this.x,this.y,(this.autoSize & 2) > 0 ? null : this.width,(this.autoSize & 1) > 0 ? null : this.height,this.xOffset,this.yOffset,this.fontStyle,null,this.isVisible);
			if(this.cursorLine >= this.page.pageLines.length) {
				var pos = this.page.pageLines.length - 1;
				if(pos != this.cursorLine) {
					if(pos < 0) {
						this.cursorLine = 0;
					} else if(this.page != null && pos >= this.page.pageLines.length) {
						this.cursorLine = this.page.pageLines.length - 1;
					} else {
						this.cursorLine = pos;
					}
					if(this.page != null) {
						this.pageLine = this.page.pageLines[this.cursorLine];
						if(this.cursor > this.pageLine.glyphes.length) {
							if(this.cursorWant == -1) {
								this.cursorWant = this.cursor;
							}
							var pos = this.pageLine.glyphes.length;
							if(pos != this.cursor) {
								if(pos < 0) {
									this.cursor = 0;
								} else if(this.page != null && pos > this.pageLine.glyphes.length) {
									this.cursor = this.pageLine.glyphes.length;
								} else {
									this.cursor = pos;
								}
								if(this.page != null && this.cursorStyle != null) {
									var addUpdate = this.isVisible && this.cursorIsVisible;
									var create = this.cursorElement == null;
									var _x = this.x + this.leftSpace;
									var _y = this.y + this.topSpace;
									var _width = this.width - this.leftSpace - this.rightSpace;
									var _height = this.height - this.topSpace - this.bottomSpace;
									if(this.masked) {
										if(this.maskX > this.leftSpace) {
											_x = this.x + this.maskX;
										}
										if(this.maskY > this.topSpace) {
											_y = this.y + this.maskY;
										}
										if(this.x + this.maskX + this.maskWidth < _x + _width) {
											_width = this.maskX + this.maskWidth + this.x - _x;
										}
										if(this.y + this.maskY + this.maskHeight < _y + _height) {
											_height = this.maskY + this.maskHeight + this.y - _y;
										}
									}
									var _width1 = _width;
									var _yOffset = this.yOffset;
									var y_offset;
									if((this.autoSize & 1) > 0) {
										y_offset = _yOffset;
									} else {
										switch(this.vAlign) {
										case 4:
											y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
											break;
										case 8:
											y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
											break;
										default:
											y_offset = _yOffset;
										}
									}
									var y_offset1 = y_offset + this.topSpace;
									_width1 += 3;
									var page = this.page;
									var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
									var cw = 2;
									var cy = Math.round(this.pageLine.y);
									var ch = Math.round(this.pageLine.height);
									var mx = 0;
									var my = 0;
									var mw = cw;
									var mh = ch;
									if(cx < _x) {
										mw -= _x - cx;
										mx = _x - cx;
										if(mw > _width1) {
											mw = _width1;
										}
									} else if(cx + cw > _x + _width1) {
										mw = _x + _width1 - cx;
									}
									if(mw < 0) {
										mw = 0;
									}
									if(cy < _y) {
										mh -= _y - cy;
										my = _y - cy;
										if(mh > _height) {
											mh = _height;
										}
									} else if(cy + ch > _y + _height) {
										mh = _y + _height - cy;
									}
									if(mh < 0) {
										mh = 0;
									}
									if(create) {
										var z = this.z;
										var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
										if(stylePos < 0) {
											if(this.uiDisplay.autoAddStyles) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var styleId = this.cursorStyle.getUUID();
												_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
												if(_this.stylePosBeforeFont == 0) {
													_this.addProgram(program,null,true);
												} else {
													_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
												}
												_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
												_this.stylePosBeforeFont++;
											} else {
												var c = js_Boot.getClass(this.cursorStyle);
												throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
											}
										} else {
											this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
											if(this.cursorProgram == null) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var stylePos1 = stylePos;
												_this.usedStyleProgram[stylePos1] = program;
												var afterProgram = null;
												while(stylePos1-- > 0) {
													afterProgram = _this.usedStyleProgram[stylePos1];
													if(afterProgram != null) {
														break;
													}
												}
												_this.addProgram(program,afterProgram,afterProgram == null);
											}
										}
										this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
										if(addUpdate) {
											this.cursorProgram.addElement(this.cursorElement);
										}
									} else {
										this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
										if(addUpdate) {
											this.cursorProgram.update(this.cursorElement);
										}
									}
								}
							}
						} else if(this.cursorWant > 0) {
							var pos = this.cursorWant;
							if(pos != this.cursor) {
								if(pos < 0) {
									this.cursor = 0;
								} else if(this.page != null && pos > this.pageLine.glyphes.length) {
									this.cursor = this.pageLine.glyphes.length;
								} else {
									this.cursor = pos;
								}
								if(this.page != null && this.cursorStyle != null) {
									var addUpdate = this.isVisible && this.cursorIsVisible;
									var create = this.cursorElement == null;
									var _x = this.x + this.leftSpace;
									var _y = this.y + this.topSpace;
									var _width = this.width - this.leftSpace - this.rightSpace;
									var _height = this.height - this.topSpace - this.bottomSpace;
									if(this.masked) {
										if(this.maskX > this.leftSpace) {
											_x = this.x + this.maskX;
										}
										if(this.maskY > this.topSpace) {
											_y = this.y + this.maskY;
										}
										if(this.x + this.maskX + this.maskWidth < _x + _width) {
											_width = this.maskX + this.maskWidth + this.x - _x;
										}
										if(this.y + this.maskY + this.maskHeight < _y + _height) {
											_height = this.maskY + this.maskHeight + this.y - _y;
										}
									}
									var _width1 = _width;
									var _yOffset = this.yOffset;
									var y_offset;
									if((this.autoSize & 1) > 0) {
										y_offset = _yOffset;
									} else {
										switch(this.vAlign) {
										case 4:
											y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
											break;
										case 8:
											y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
											break;
										default:
											y_offset = _yOffset;
										}
									}
									var y_offset1 = y_offset + this.topSpace;
									_width1 += 3;
									var page = this.page;
									var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
									var cw = 2;
									var cy = Math.round(this.pageLine.y);
									var ch = Math.round(this.pageLine.height);
									var mx = 0;
									var my = 0;
									var mw = cw;
									var mh = ch;
									if(cx < _x) {
										mw -= _x - cx;
										mx = _x - cx;
										if(mw > _width1) {
											mw = _width1;
										}
									} else if(cx + cw > _x + _width1) {
										mw = _x + _width1 - cx;
									}
									if(mw < 0) {
										mw = 0;
									}
									if(cy < _y) {
										mh -= _y - cy;
										my = _y - cy;
										if(mh > _height) {
											mh = _height;
										}
									} else if(cy + ch > _y + _height) {
										mh = _y + _height - cy;
									}
									if(mh < 0) {
										mh = 0;
									}
									if(create) {
										var z = this.z;
										var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
										if(stylePos < 0) {
											if(this.uiDisplay.autoAddStyles) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var styleId = this.cursorStyle.getUUID();
												_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
												if(_this.stylePosBeforeFont == 0) {
													_this.addProgram(program,null,true);
												} else {
													_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
												}
												_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
												_this.stylePosBeforeFont++;
											} else {
												var c = js_Boot.getClass(this.cursorStyle);
												throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
											}
										} else {
											this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
											if(this.cursorProgram == null) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var stylePos1 = stylePos;
												_this.usedStyleProgram[stylePos1] = program;
												var afterProgram = null;
												while(stylePos1-- > 0) {
													afterProgram = _this.usedStyleProgram[stylePos1];
													if(afterProgram != null) {
														break;
													}
												}
												_this.addProgram(program,afterProgram,afterProgram == null);
											}
										}
										this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
										if(addUpdate) {
											this.cursorProgram.addElement(this.cursorElement);
										}
									} else {
										this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
										if(addUpdate) {
											this.cursorProgram.update(this.cursorElement);
										}
									}
								}
							}
						}
						if(this.cursorStyle != null) {
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var create = this.cursorElement == null;
							var _x = this.x + this.leftSpace;
							var _y = this.y + this.topSpace;
							var _width = this.width - this.leftSpace - this.rightSpace;
							var _height = this.height - this.topSpace - this.bottomSpace;
							if(this.masked) {
								if(this.maskX > this.leftSpace) {
									_x = this.x + this.maskX;
								}
								if(this.maskY > this.topSpace) {
									_y = this.y + this.maskY;
								}
								if(this.x + this.maskX + this.maskWidth < _x + _width) {
									_width = this.maskX + this.maskWidth + this.x - _x;
								}
								if(this.y + this.maskY + this.maskHeight < _y + _height) {
									_height = this.maskY + this.maskHeight + this.y - _y;
								}
							}
							var _width1 = _width;
							var _yOffset = this.yOffset;
							var y_offset;
							if((this.autoSize & 1) > 0) {
								y_offset = _yOffset;
							} else {
								switch(this.vAlign) {
								case 4:
									y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
									break;
								case 8:
									y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
									break;
								default:
									y_offset = _yOffset;
								}
							}
							var y_offset1 = y_offset + this.topSpace;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(create) {
								var z = this.z;
								var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
								if(stylePos < 0) {
									if(this.uiDisplay.autoAddStyles) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var styleId = this.cursorStyle.getUUID();
										_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
										if(_this.stylePosBeforeFont == 0) {
											_this.addProgram(program,null,true);
										} else {
											_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
										}
										_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
										_this.stylePosBeforeFont++;
									} else {
										var c = js_Boot.getClass(this.cursorStyle);
										throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
									}
								} else {
									this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
									if(this.cursorProgram == null) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var stylePos1 = stylePos;
										_this.usedStyleProgram[stylePos1] = program;
										var afterProgram = null;
										while(stylePos1-- > 0) {
											afterProgram = _this.usedStyleProgram[stylePos1];
											if(afterProgram != null) {
												break;
											}
										}
										_this.addProgram(program,afterProgram,afterProgram == null);
									}
								}
								this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
								if(addUpdate) {
									this.cursorProgram.addElement(this.cursorElement);
								}
							} else {
								this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
								if(addUpdate) {
									this.cursorProgram.update(this.cursorElement);
								}
							}
						}
					}
				}
			}
			this.pageLine = this.page.pageLines[this.cursorLine];
			if(this.cursor > this.pageLine.glyphes.length) {
				var pos = this.pageLine.glyphes.length;
				if(pos != this.cursor) {
					if(pos < 0) {
						this.cursor = 0;
					} else if(this.page != null && pos > this.pageLine.glyphes.length) {
						this.cursor = this.pageLine.glyphes.length;
					} else {
						this.cursor = pos;
					}
					if(this.page != null && this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
			if(autoUpdate) {
				if((this.autoSize & 2) > 0 && (this.autoSize & 1) > 0) {
					var updateBgMaskSelCursor = true;
					var pageUpdatePosition = false;
					var pageUpdateSize = true;
					var pageUpdateXOffset = false;
					var pageUpdateYOffset = false;
					if(pageUpdateYOffset == null) {
						pageUpdateYOffset = true;
					}
					if(pageUpdateXOffset == null) {
						pageUpdateXOffset = true;
					}
					if(pageUpdateSize == null) {
						pageUpdateSize = true;
					}
					if(pageUpdatePosition == null) {
						pageUpdatePosition = true;
					}
					if(updateBgMaskSelCursor == null) {
						updateBgMaskSelCursor = true;
					}
					if(this.autoSize > 0) {
						if((this.autoSize & 2) > 0) {
							var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
							if(w != this.width) {
								if(this.resizeWidth != null) {
									var oldWidth = this.width;
									this.resizeWidth(this.width = w,w - oldWidth);
								} else {
									this.width = w;
								}
							}
						}
						if((this.autoSize & 1) > 0) {
							var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
							if(h != this.height) {
								if(this.resizeHeight != null) {
									var oldHeight = this.height;
									this.resizeHeight(this.height = h,h - oldHeight);
								} else {
									this.height = h;
								}
							}
						}
						if(this.hasMoveEvent != 0) {
							var _this = this.pickableMove;
							_this.uiElement = this;
							_this.z = this.z;
							if(this.masked) {
								_this.x = this.x + this.maskX;
								_this.y = this.y + this.maskY;
								_this.w = this.maskWidth;
								_this.h = this.maskHeight;
							} else {
								_this.x = this.x;
								_this.y = this.y;
								_this.w = this.width;
								_this.h = this.height;
							}
							if(this.isVisible) {
								this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
							}
						}
						if(this.hasClickEvent != 0) {
							var _this = this.pickableClick;
							_this.uiElement = this;
							_this.z = this.z;
							if(this.masked) {
								_this.x = this.x + this.maskX;
								_this.y = this.y + this.maskY;
								_this.w = this.maskWidth;
								_this.h = this.maskHeight;
							} else {
								_this.x = this.x;
								_this.y = this.y;
								_this.w = this.width;
								_this.h = this.height;
							}
							if(this.isVisible) {
								this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
							}
						}
					}
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					if(pageUpdatePosition && pageUpdateSize) {
						var tmp;
						if(pageUpdateXOffset) {
							var _xOffset = this.xOffset;
							if((this.autoSize & 2) > 0) {
								tmp = _xOffset;
							} else {
								switch(this.hAlign) {
								case 1:
									tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
									break;
								case 2:
									tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
									break;
								default:
									tmp = _xOffset;
								}
							}
						} else {
							tmp = null;
						}
						this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
					} else if(pageUpdatePosition) {
						var tmp;
						if(pageUpdateXOffset) {
							var _xOffset = this.xOffset;
							if((this.autoSize & 2) > 0) {
								tmp = _xOffset;
							} else {
								switch(this.hAlign) {
								case 1:
									tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
									break;
								case 2:
									tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
									break;
								default:
									tmp = _xOffset;
								}
							}
						} else {
							tmp = null;
						}
						this.fontProgram.pageSetPosition(this.page,_x,_y,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
					} else if(pageUpdateSize) {
						var tmp;
						if(pageUpdateXOffset) {
							var _xOffset = this.xOffset;
							if((this.autoSize & 2) > 0) {
								tmp = _xOffset;
							} else {
								switch(this.hAlign) {
								case 1:
									tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
									break;
								case 2:
									tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
									break;
								default:
									tmp = _xOffset;
								}
							}
						} else {
							tmp = null;
						}
						this.fontProgram.pageSetSize(this.page,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
					} else {
						var tmp;
						if(pageUpdateXOffset) {
							var _xOffset = this.xOffset;
							if((this.autoSize & 2) > 0) {
								tmp = _xOffset;
							} else {
								switch(this.hAlign) {
								case 1:
									tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
									break;
								case 2:
									tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
									break;
								default:
									tmp = _xOffset;
								}
							}
						} else {
							tmp = null;
						}
						this.fontProgram.pageSetOffset(this.page,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
					}
					if(this.isVisible) {
						this.fontProgram.pageUpdate(this.page);
					}
					if(updateBgMaskSelCursor) {
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var maskElement = this.maskElement;
						var autoUpdate = this.isVisible;
						if(autoUpdate == null) {
							autoUpdate = true;
						}
						maskElement.x = _x;
						maskElement.y = _y;
						maskElement.w = _width;
						maskElement.h = _height;
						if(autoUpdate) {
							this.fontProgram.maskBuffer.updateElement(maskElement);
						}
						if(this.backgroundElement != null) {
							this.backgroundElement.setLayout(this);
							if(this.isVisible && this.backgroundIsVisible) {
								this.backgroundProgram.update(this.backgroundElement);
							}
						}
						if(this.selectionElementArray != null) {
							var y_offset1 = y_offset + this.topSpace;
							var addUpdate = this.isVisible && this.selectionIsVisible;
							var selectX;
							var selectWidth;
							var selectY;
							var selectHeight;
							var mx;
							var my;
							var mw;
							var mh;
							var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
							var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
							var _selectFrom = this.selectFrom;
							var _selectTo = this.selectTo;
							if(from >= this.page.pageLines.length) {
								haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
							}
							if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
								_selectFrom = 0;
								++from;
							}
							if(_selectTo == 0 && to > from + 1) {
								if(to - 1 >= this.page.pageLines.length) {
									haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
								}
								--to;
								_selectTo = this.page.pageLines[to - 1].glyphes.length;
							}
							var _pageLine;
							var selectionElement;
							if(addUpdate) {
								var fromOld = to - from;
								if(fromOld < 0) {
									fromOld = 0;
								}
								var _g = fromOld;
								var _g1 = this.selectionElementMax;
								while(_g < _g1) {
									var i = _g++;
									this.selectionProgram.removeElement(this.selectionElementArray[i]);
								}
							}
							var selectionElementMaxOld = this.selectionElementMax;
							this.selectionElementMax = 0;
							var _g = from;
							var _g1 = to;
							while(_g < _g1) {
								var i = _g++;
								_pageLine = this.page.pageLines[i];
								if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
									var page = this.page;
									selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
									var page1 = this.page;
									selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
								} else if(i == this.selectLineFrom) {
									var page2 = this.page;
									selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
									selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
								} else if(i == this.selectLineTo - 1) {
									selectX = Math.round(this.page.x + this.page.xOffset);
									var page3 = this.page;
									selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
								} else {
									selectX = Math.round(this.page.x + this.page.xOffset);
									selectWidth = Math.round(_pageLine.textSize);
								}
								selectY = Math.round(_pageLine.y);
								selectHeight = Math.round(_pageLine.height);
								mx = 0;
								my = 0;
								mw = selectWidth;
								mh = selectHeight;
								if(selectX < _x) {
									mw -= _x - selectX;
									mx = _x - selectX;
									if(mw > _width) {
										mw = _width;
									}
								} else if(selectX + selectWidth > _x + _width) {
									mw = _x + _width - selectX;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(selectY < _y) {
									mh -= _y - selectY;
									my = _y - selectY;
									if(mh > _height) {
										mh = _height;
									}
								} else if(selectY + selectHeight > _y + _height) {
									mh = _y + _height - selectY;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(this.selectionElementMax >= this.selectionElementArray.length) {
									selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
									if(addUpdate) {
										this.selectionProgram.addElement(selectionElement);
									}
									this.selectionElementArray.push(selectionElement);
								} else {
									selectionElement = this.selectionElementArray[this.selectionElementMax];
									selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
									if(this.selectionElementMax >= selectionElementMaxOld) {
										selectionElement.setStyle(this.selectionStyle);
										if(addUpdate) {
											this.selectionProgram.addElement(selectionElement);
										}
									} else if(addUpdate) {
										this.selectionProgram.update(selectionElement);
									}
								}
								this.selectionElementMax++;
							}
						}
						if(this.cursorElement != null) {
							var y_offset1 = y_offset + this.topSpace;
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var _width1 = _width;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				} else if((this.autoSize & 2) <= 0 && (this.autoSize & 1) <= 0 && this.hAlign == 0 && this.vAlign == 0 && this.isVisible) {
					this.fontProgram.pageUpdate(this.page);
				} else {
					var updateBgMaskSelCursor = (this.autoSize & 2) > 0 || (this.autoSize & 1) > 0;
					var pageUpdatePosition = false;
					var pageUpdateSize = (this.autoSize & 2) > 0 || (this.autoSize & 1) > 0;
					var pageUpdateXOffset = (this.autoSize & 2) <= 0;
					var pageUpdateYOffset = (this.autoSize & 1) <= 0;
					if(pageUpdateYOffset == null) {
						pageUpdateYOffset = true;
					}
					if(pageUpdateXOffset == null) {
						pageUpdateXOffset = true;
					}
					if(pageUpdateSize == null) {
						pageUpdateSize = true;
					}
					if(pageUpdatePosition == null) {
						pageUpdatePosition = true;
					}
					if(updateBgMaskSelCursor == null) {
						updateBgMaskSelCursor = true;
					}
					if(this.autoSize > 0) {
						if((this.autoSize & 2) > 0) {
							var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
							if(w != this.width) {
								if(this.resizeWidth != null) {
									var oldWidth = this.width;
									this.resizeWidth(this.width = w,w - oldWidth);
								} else {
									this.width = w;
								}
							}
						}
						if((this.autoSize & 1) > 0) {
							var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
							if(h != this.height) {
								if(this.resizeHeight != null) {
									var oldHeight = this.height;
									this.resizeHeight(this.height = h,h - oldHeight);
								} else {
									this.height = h;
								}
							}
						}
						if(this.hasMoveEvent != 0) {
							var _this = this.pickableMove;
							_this.uiElement = this;
							_this.z = this.z;
							if(this.masked) {
								_this.x = this.x + this.maskX;
								_this.y = this.y + this.maskY;
								_this.w = this.maskWidth;
								_this.h = this.maskHeight;
							} else {
								_this.x = this.x;
								_this.y = this.y;
								_this.w = this.width;
								_this.h = this.height;
							}
							if(this.isVisible) {
								this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
							}
						}
						if(this.hasClickEvent != 0) {
							var _this = this.pickableClick;
							_this.uiElement = this;
							_this.z = this.z;
							if(this.masked) {
								_this.x = this.x + this.maskX;
								_this.y = this.y + this.maskY;
								_this.w = this.maskWidth;
								_this.h = this.maskHeight;
							} else {
								_this.x = this.x;
								_this.y = this.y;
								_this.w = this.width;
								_this.h = this.height;
							}
							if(this.isVisible) {
								this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
							}
						}
					}
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					if(pageUpdatePosition && pageUpdateSize) {
						var tmp;
						if(pageUpdateXOffset) {
							var _xOffset = this.xOffset;
							if((this.autoSize & 2) > 0) {
								tmp = _xOffset;
							} else {
								switch(this.hAlign) {
								case 1:
									tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
									break;
								case 2:
									tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
									break;
								default:
									tmp = _xOffset;
								}
							}
						} else {
							tmp = null;
						}
						this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
					} else if(pageUpdatePosition) {
						var tmp;
						if(pageUpdateXOffset) {
							var _xOffset = this.xOffset;
							if((this.autoSize & 2) > 0) {
								tmp = _xOffset;
							} else {
								switch(this.hAlign) {
								case 1:
									tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
									break;
								case 2:
									tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
									break;
								default:
									tmp = _xOffset;
								}
							}
						} else {
							tmp = null;
						}
						this.fontProgram.pageSetPosition(this.page,_x,_y,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
					} else if(pageUpdateSize) {
						var tmp;
						if(pageUpdateXOffset) {
							var _xOffset = this.xOffset;
							if((this.autoSize & 2) > 0) {
								tmp = _xOffset;
							} else {
								switch(this.hAlign) {
								case 1:
									tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
									break;
								case 2:
									tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
									break;
								default:
									tmp = _xOffset;
								}
							}
						} else {
							tmp = null;
						}
						this.fontProgram.pageSetSize(this.page,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
					} else {
						var tmp;
						if(pageUpdateXOffset) {
							var _xOffset = this.xOffset;
							if((this.autoSize & 2) > 0) {
								tmp = _xOffset;
							} else {
								switch(this.hAlign) {
								case 1:
									tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
									break;
								case 2:
									tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
									break;
								default:
									tmp = _xOffset;
								}
							}
						} else {
							tmp = null;
						}
						this.fontProgram.pageSetOffset(this.page,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
					}
					if(this.isVisible) {
						this.fontProgram.pageUpdate(this.page);
					}
					if(updateBgMaskSelCursor) {
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var maskElement = this.maskElement;
						var autoUpdate = this.isVisible;
						if(autoUpdate == null) {
							autoUpdate = true;
						}
						maskElement.x = _x;
						maskElement.y = _y;
						maskElement.w = _width;
						maskElement.h = _height;
						if(autoUpdate) {
							this.fontProgram.maskBuffer.updateElement(maskElement);
						}
						if(this.backgroundElement != null) {
							this.backgroundElement.setLayout(this);
							if(this.isVisible && this.backgroundIsVisible) {
								this.backgroundProgram.update(this.backgroundElement);
							}
						}
						if(this.selectionElementArray != null) {
							var y_offset1 = y_offset + this.topSpace;
							var addUpdate = this.isVisible && this.selectionIsVisible;
							var selectX;
							var selectWidth;
							var selectY;
							var selectHeight;
							var mx;
							var my;
							var mw;
							var mh;
							var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
							var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
							var _selectFrom = this.selectFrom;
							var _selectTo = this.selectTo;
							if(from >= this.page.pageLines.length) {
								haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
							}
							if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
								_selectFrom = 0;
								++from;
							}
							if(_selectTo == 0 && to > from + 1) {
								if(to - 1 >= this.page.pageLines.length) {
									haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
								}
								--to;
								_selectTo = this.page.pageLines[to - 1].glyphes.length;
							}
							var _pageLine;
							var selectionElement;
							if(addUpdate) {
								var fromOld = to - from;
								if(fromOld < 0) {
									fromOld = 0;
								}
								var _g = fromOld;
								var _g1 = this.selectionElementMax;
								while(_g < _g1) {
									var i = _g++;
									this.selectionProgram.removeElement(this.selectionElementArray[i]);
								}
							}
							var selectionElementMaxOld = this.selectionElementMax;
							this.selectionElementMax = 0;
							var _g = from;
							var _g1 = to;
							while(_g < _g1) {
								var i = _g++;
								_pageLine = this.page.pageLines[i];
								if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
									var page = this.page;
									selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
									var page1 = this.page;
									selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
								} else if(i == this.selectLineFrom) {
									var page2 = this.page;
									selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
									selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
								} else if(i == this.selectLineTo - 1) {
									selectX = Math.round(this.page.x + this.page.xOffset);
									var page3 = this.page;
									selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
								} else {
									selectX = Math.round(this.page.x + this.page.xOffset);
									selectWidth = Math.round(_pageLine.textSize);
								}
								selectY = Math.round(_pageLine.y);
								selectHeight = Math.round(_pageLine.height);
								mx = 0;
								my = 0;
								mw = selectWidth;
								mh = selectHeight;
								if(selectX < _x) {
									mw -= _x - selectX;
									mx = _x - selectX;
									if(mw > _width) {
										mw = _width;
									}
								} else if(selectX + selectWidth > _x + _width) {
									mw = _x + _width - selectX;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(selectY < _y) {
									mh -= _y - selectY;
									my = _y - selectY;
									if(mh > _height) {
										mh = _height;
									}
								} else if(selectY + selectHeight > _y + _height) {
									mh = _y + _height - selectY;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(this.selectionElementMax >= this.selectionElementArray.length) {
									selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
									if(addUpdate) {
										this.selectionProgram.addElement(selectionElement);
									}
									this.selectionElementArray.push(selectionElement);
								} else {
									selectionElement = this.selectionElementArray[this.selectionElementMax];
									selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
									if(this.selectionElementMax >= selectionElementMaxOld) {
										selectionElement.setStyle(this.selectionStyle);
										if(addUpdate) {
											this.selectionProgram.addElement(selectionElement);
										}
									} else if(addUpdate) {
										this.selectionProgram.update(selectionElement);
									}
								}
								this.selectionElementMax++;
							}
						}
						if(this.cursorElement != null) {
							var y_offset1 = y_offset + this.topSpace;
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var _width1 = _width;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
		} else if(this.page == null || text == null) {
			this.text = text;
		} else {
			this.setText(text);
		}
	}
	,textInput: function(chars) {
		if(this.page == null) {
			return;
		}
		if(this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo) {
			this.fontProgram.pageDeleteChars(this.page,this.selectLineFrom,this.selectLineTo,this.selectFrom,this.selectTo,this.isVisible);
			var pos = this.selectLineFrom;
			if(pos != this.cursorLine) {
				if(pos < 0) {
					this.cursorLine = 0;
				} else if(this.page != null && pos >= this.page.pageLines.length) {
					this.cursorLine = this.page.pageLines.length - 1;
				} else {
					this.cursorLine = pos;
				}
				if(this.page != null) {
					this.pageLine = this.page.pageLines[this.cursorLine];
					if(this.cursor > this.pageLine.glyphes.length) {
						if(this.cursorWant == -1) {
							this.cursorWant = this.cursor;
						}
						var pos = this.pageLine.glyphes.length;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					} else if(this.cursorWant > 0) {
						var pos = this.cursorWant;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					}
					if(this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
			var pos = this.selectFrom;
			if(pos != this.cursor) {
				if(pos < 0) {
					this.cursor = 0;
				} else if(this.page != null && pos > this.pageLine.glyphes.length) {
					this.cursor = this.pageLine.glyphes.length;
				} else {
					this.cursor = pos;
				}
				if(this.page != null && this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var page = this.page;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.pageLine.y);
					var ch = Math.round(this.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
			this.selectLineFrom = this.selectLineTo = this.selectFrom = this.selectTo = 0;
			if(this.page != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElementArray != null && this.isVisible) {
					var _g = 0;
					var _g1 = this.selectionElementMax;
					while(_g < _g1) {
						var i = _g++;
						this.selectionProgram.removeElement(this.selectionElementArray[i]);
					}
				}
			}
			this.selectionIsVisible = false;
		}
		if(chars.length == 1 && chars != "\n") {
			var lineNumber = this.cursorLine;
			var position = this.cursor;
			if(position == null) {
				position = 0;
			}
			if(lineNumber == null) {
				lineNumber = 0;
			}
			this.fontProgram.pageInsertChars(this.page,chars,lineNumber,position,this.fontStyle,null,this.isVisible);
			var pos = this.cursor + 1;
			if(pos != this.cursor) {
				if(pos < 0) {
					this.cursor = 0;
				} else if(this.page != null && pos > this.pageLine.glyphes.length) {
					this.cursor = this.pageLine.glyphes.length;
				} else {
					this.cursor = pos;
				}
				if(this.page != null && this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var page = this.page;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.pageLine.y);
					var ch = Math.round(this.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
		} else {
			var restCharLength = this.pageLine.glyphes.length - this.cursor;
			var oldPageLength = this.page.pageLines.length;
			var lineNumber = this.cursorLine;
			var position = this.cursor;
			if(position == null) {
				position = 0;
			}
			if(lineNumber == null) {
				lineNumber = 0;
			}
			this.fontProgram.pageInsertChars(this.page,chars,lineNumber,position,this.fontStyle,null,this.isVisible);
			if(this.page.pageLines.length > oldPageLength) {
				var pos = this.cursorLine + (this.page.pageLines.length - oldPageLength);
				if(pos != this.cursorLine) {
					if(pos < 0) {
						this.cursorLine = 0;
					} else if(this.page != null && pos >= this.page.pageLines.length) {
						this.cursorLine = this.page.pageLines.length - 1;
					} else {
						this.cursorLine = pos;
					}
					if(this.page != null) {
						this.pageLine = this.page.pageLines[this.cursorLine];
						if(this.cursor > this.pageLine.glyphes.length) {
							if(this.cursorWant == -1) {
								this.cursorWant = this.cursor;
							}
							var pos = this.pageLine.glyphes.length;
							if(pos != this.cursor) {
								if(pos < 0) {
									this.cursor = 0;
								} else if(this.page != null && pos > this.pageLine.glyphes.length) {
									this.cursor = this.pageLine.glyphes.length;
								} else {
									this.cursor = pos;
								}
								if(this.page != null && this.cursorStyle != null) {
									var addUpdate = this.isVisible && this.cursorIsVisible;
									var create = this.cursorElement == null;
									var _x = this.x + this.leftSpace;
									var _y = this.y + this.topSpace;
									var _width = this.width - this.leftSpace - this.rightSpace;
									var _height = this.height - this.topSpace - this.bottomSpace;
									if(this.masked) {
										if(this.maskX > this.leftSpace) {
											_x = this.x + this.maskX;
										}
										if(this.maskY > this.topSpace) {
											_y = this.y + this.maskY;
										}
										if(this.x + this.maskX + this.maskWidth < _x + _width) {
											_width = this.maskX + this.maskWidth + this.x - _x;
										}
										if(this.y + this.maskY + this.maskHeight < _y + _height) {
											_height = this.maskY + this.maskHeight + this.y - _y;
										}
									}
									var _width1 = _width;
									var _yOffset = this.yOffset;
									var y_offset;
									if((this.autoSize & 1) > 0) {
										y_offset = _yOffset;
									} else {
										switch(this.vAlign) {
										case 4:
											y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
											break;
										case 8:
											y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
											break;
										default:
											y_offset = _yOffset;
										}
									}
									var y_offset1 = y_offset + this.topSpace;
									_width1 += 3;
									var page = this.page;
									var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
									var cw = 2;
									var cy = Math.round(this.pageLine.y);
									var ch = Math.round(this.pageLine.height);
									var mx = 0;
									var my = 0;
									var mw = cw;
									var mh = ch;
									if(cx < _x) {
										mw -= _x - cx;
										mx = _x - cx;
										if(mw > _width1) {
											mw = _width1;
										}
									} else if(cx + cw > _x + _width1) {
										mw = _x + _width1 - cx;
									}
									if(mw < 0) {
										mw = 0;
									}
									if(cy < _y) {
										mh -= _y - cy;
										my = _y - cy;
										if(mh > _height) {
											mh = _height;
										}
									} else if(cy + ch > _y + _height) {
										mh = _y + _height - cy;
									}
									if(mh < 0) {
										mh = 0;
									}
									if(create) {
										var z = this.z;
										var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
										if(stylePos < 0) {
											if(this.uiDisplay.autoAddStyles) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var styleId = this.cursorStyle.getUUID();
												_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
												if(_this.stylePosBeforeFont == 0) {
													_this.addProgram(program,null,true);
												} else {
													_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
												}
												_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
												_this.stylePosBeforeFont++;
											} else {
												var c = js_Boot.getClass(this.cursorStyle);
												throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
											}
										} else {
											this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
											if(this.cursorProgram == null) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var stylePos1 = stylePos;
												_this.usedStyleProgram[stylePos1] = program;
												var afterProgram = null;
												while(stylePos1-- > 0) {
													afterProgram = _this.usedStyleProgram[stylePos1];
													if(afterProgram != null) {
														break;
													}
												}
												_this.addProgram(program,afterProgram,afterProgram == null);
											}
										}
										this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
										if(addUpdate) {
											this.cursorProgram.addElement(this.cursorElement);
										}
									} else {
										this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
										if(addUpdate) {
											this.cursorProgram.update(this.cursorElement);
										}
									}
								}
							}
						} else if(this.cursorWant > 0) {
							var pos = this.cursorWant;
							if(pos != this.cursor) {
								if(pos < 0) {
									this.cursor = 0;
								} else if(this.page != null && pos > this.pageLine.glyphes.length) {
									this.cursor = this.pageLine.glyphes.length;
								} else {
									this.cursor = pos;
								}
								if(this.page != null && this.cursorStyle != null) {
									var addUpdate = this.isVisible && this.cursorIsVisible;
									var create = this.cursorElement == null;
									var _x = this.x + this.leftSpace;
									var _y = this.y + this.topSpace;
									var _width = this.width - this.leftSpace - this.rightSpace;
									var _height = this.height - this.topSpace - this.bottomSpace;
									if(this.masked) {
										if(this.maskX > this.leftSpace) {
											_x = this.x + this.maskX;
										}
										if(this.maskY > this.topSpace) {
											_y = this.y + this.maskY;
										}
										if(this.x + this.maskX + this.maskWidth < _x + _width) {
											_width = this.maskX + this.maskWidth + this.x - _x;
										}
										if(this.y + this.maskY + this.maskHeight < _y + _height) {
											_height = this.maskY + this.maskHeight + this.y - _y;
										}
									}
									var _width1 = _width;
									var _yOffset = this.yOffset;
									var y_offset;
									if((this.autoSize & 1) > 0) {
										y_offset = _yOffset;
									} else {
										switch(this.vAlign) {
										case 4:
											y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
											break;
										case 8:
											y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
											break;
										default:
											y_offset = _yOffset;
										}
									}
									var y_offset1 = y_offset + this.topSpace;
									_width1 += 3;
									var page = this.page;
									var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
									var cw = 2;
									var cy = Math.round(this.pageLine.y);
									var ch = Math.round(this.pageLine.height);
									var mx = 0;
									var my = 0;
									var mw = cw;
									var mh = ch;
									if(cx < _x) {
										mw -= _x - cx;
										mx = _x - cx;
										if(mw > _width1) {
											mw = _width1;
										}
									} else if(cx + cw > _x + _width1) {
										mw = _x + _width1 - cx;
									}
									if(mw < 0) {
										mw = 0;
									}
									if(cy < _y) {
										mh -= _y - cy;
										my = _y - cy;
										if(mh > _height) {
											mh = _height;
										}
									} else if(cy + ch > _y + _height) {
										mh = _y + _height - cy;
									}
									if(mh < 0) {
										mh = 0;
									}
									if(create) {
										var z = this.z;
										var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
										if(stylePos < 0) {
											if(this.uiDisplay.autoAddStyles) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var styleId = this.cursorStyle.getUUID();
												_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
												if(_this.stylePosBeforeFont == 0) {
													_this.addProgram(program,null,true);
												} else {
													_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
												}
												_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
												_this.stylePosBeforeFont++;
											} else {
												var c = js_Boot.getClass(this.cursorStyle);
												throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
											}
										} else {
											this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
											if(this.cursorProgram == null) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var stylePos1 = stylePos;
												_this.usedStyleProgram[stylePos1] = program;
												var afterProgram = null;
												while(stylePos1-- > 0) {
													afterProgram = _this.usedStyleProgram[stylePos1];
													if(afterProgram != null) {
														break;
													}
												}
												_this.addProgram(program,afterProgram,afterProgram == null);
											}
										}
										this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
										if(addUpdate) {
											this.cursorProgram.addElement(this.cursorElement);
										}
									} else {
										this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
										if(addUpdate) {
											this.cursorProgram.update(this.cursorElement);
										}
									}
								}
							}
						}
						if(this.cursorStyle != null) {
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var create = this.cursorElement == null;
							var _x = this.x + this.leftSpace;
							var _y = this.y + this.topSpace;
							var _width = this.width - this.leftSpace - this.rightSpace;
							var _height = this.height - this.topSpace - this.bottomSpace;
							if(this.masked) {
								if(this.maskX > this.leftSpace) {
									_x = this.x + this.maskX;
								}
								if(this.maskY > this.topSpace) {
									_y = this.y + this.maskY;
								}
								if(this.x + this.maskX + this.maskWidth < _x + _width) {
									_width = this.maskX + this.maskWidth + this.x - _x;
								}
								if(this.y + this.maskY + this.maskHeight < _y + _height) {
									_height = this.maskY + this.maskHeight + this.y - _y;
								}
							}
							var _width1 = _width;
							var _yOffset = this.yOffset;
							var y_offset;
							if((this.autoSize & 1) > 0) {
								y_offset = _yOffset;
							} else {
								switch(this.vAlign) {
								case 4:
									y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
									break;
								case 8:
									y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
									break;
								default:
									y_offset = _yOffset;
								}
							}
							var y_offset1 = y_offset + this.topSpace;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(create) {
								var z = this.z;
								var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
								if(stylePos < 0) {
									if(this.uiDisplay.autoAddStyles) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var styleId = this.cursorStyle.getUUID();
										_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
										if(_this.stylePosBeforeFont == 0) {
											_this.addProgram(program,null,true);
										} else {
											_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
										}
										_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
										_this.stylePosBeforeFont++;
									} else {
										var c = js_Boot.getClass(this.cursorStyle);
										throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
									}
								} else {
									this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
									if(this.cursorProgram == null) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var stylePos1 = stylePos;
										_this.usedStyleProgram[stylePos1] = program;
										var afterProgram = null;
										while(stylePos1-- > 0) {
											afterProgram = _this.usedStyleProgram[stylePos1];
											if(afterProgram != null) {
												break;
											}
										}
										_this.addProgram(program,afterProgram,afterProgram == null);
									}
								}
								this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
								if(addUpdate) {
									this.cursorProgram.addElement(this.cursorElement);
								}
							} else {
								this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
								if(addUpdate) {
									this.cursorProgram.update(this.cursorElement);
								}
							}
						}
					}
				}
				var pos = this.pageLine.glyphes.length - restCharLength;
				if(pos != this.cursor) {
					if(pos < 0) {
						this.cursor = 0;
					} else if(this.page != null && pos > this.pageLine.glyphes.length) {
						this.cursor = this.pageLine.glyphes.length;
					} else {
						this.cursor = pos;
					}
					if(this.page != null && this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			} else {
				var pos = this.cursor + chars.length;
				if(pos != this.cursor) {
					if(pos < 0) {
						this.cursor = 0;
					} else if(this.page != null && pos > this.pageLine.glyphes.length) {
						this.cursor = this.pageLine.glyphes.length;
					} else {
						this.cursor = pos;
					}
					if(this.page != null && this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
		}
		if((this.autoSize & 2) > 0 && (this.autoSize & 1) > 0) {
			var updateBgMaskSelCursor = true;
			var pageUpdatePosition = false;
			var pageUpdateSize = true;
			var pageUpdateXOffset = false;
			var pageUpdateYOffset = false;
			if(pageUpdateYOffset == null) {
				pageUpdateYOffset = true;
			}
			if(pageUpdateXOffset == null) {
				pageUpdateXOffset = true;
			}
			if(pageUpdateSize == null) {
				pageUpdateSize = true;
			}
			if(pageUpdatePosition == null) {
				pageUpdatePosition = true;
			}
			if(updateBgMaskSelCursor == null) {
				updateBgMaskSelCursor = true;
			}
			if(this.autoSize > 0) {
				if((this.autoSize & 2) > 0) {
					var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
					if(w != this.width) {
						if(this.resizeWidth != null) {
							var oldWidth = this.width;
							this.resizeWidth(this.width = w,w - oldWidth);
						} else {
							this.width = w;
						}
					}
				}
				if((this.autoSize & 1) > 0) {
					var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
					if(h != this.height) {
						if(this.resizeHeight != null) {
							var oldHeight = this.height;
							this.resizeHeight(this.height = h,h - oldHeight);
						} else {
							this.height = h;
						}
					}
				}
				if(this.hasMoveEvent != 0) {
					var _this = this.pickableMove;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
					if(this.isVisible) {
						this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
					}
				}
				if(this.hasClickEvent != 0) {
					var _this = this.pickableClick;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
					if(this.isVisible) {
						this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
					}
				}
			}
			var _x = this.x + this.leftSpace;
			var _y = this.y + this.topSpace;
			var _width = this.width - this.leftSpace - this.rightSpace;
			var _height = this.height - this.topSpace - this.bottomSpace;
			var _yOffset = this.yOffset;
			var y_offset;
			if((this.autoSize & 1) > 0) {
				y_offset = _yOffset;
			} else {
				switch(this.vAlign) {
				case 4:
					y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
					break;
				case 8:
					y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
					break;
				default:
					y_offset = _yOffset;
				}
			}
			if(pageUpdatePosition && pageUpdateSize) {
				var tmp;
				if(pageUpdateXOffset) {
					var _xOffset = this.xOffset;
					if((this.autoSize & 2) > 0) {
						tmp = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
							break;
						case 2:
							tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
							break;
						default:
							tmp = _xOffset;
						}
					}
				} else {
					tmp = null;
				}
				this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
			} else if(pageUpdatePosition) {
				var tmp;
				if(pageUpdateXOffset) {
					var _xOffset = this.xOffset;
					if((this.autoSize & 2) > 0) {
						tmp = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
							break;
						case 2:
							tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
							break;
						default:
							tmp = _xOffset;
						}
					}
				} else {
					tmp = null;
				}
				this.fontProgram.pageSetPosition(this.page,_x,_y,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
			} else if(pageUpdateSize) {
				var tmp;
				if(pageUpdateXOffset) {
					var _xOffset = this.xOffset;
					if((this.autoSize & 2) > 0) {
						tmp = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
							break;
						case 2:
							tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
							break;
						default:
							tmp = _xOffset;
						}
					}
				} else {
					tmp = null;
				}
				this.fontProgram.pageSetSize(this.page,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
			} else {
				var tmp;
				if(pageUpdateXOffset) {
					var _xOffset = this.xOffset;
					if((this.autoSize & 2) > 0) {
						tmp = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
							break;
						case 2:
							tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
							break;
						default:
							tmp = _xOffset;
						}
					}
				} else {
					tmp = null;
				}
				this.fontProgram.pageSetOffset(this.page,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
			}
			if(this.isVisible) {
				this.fontProgram.pageUpdate(this.page);
			}
			if(updateBgMaskSelCursor) {
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var maskElement = this.maskElement;
				var autoUpdate = this.isVisible;
				if(autoUpdate == null) {
					autoUpdate = true;
				}
				maskElement.x = _x;
				maskElement.y = _y;
				maskElement.w = _width;
				maskElement.h = _height;
				if(autoUpdate) {
					this.fontProgram.maskBuffer.updateElement(maskElement);
				}
				if(this.backgroundElement != null) {
					this.backgroundElement.setLayout(this);
					if(this.isVisible && this.backgroundIsVisible) {
						this.backgroundProgram.update(this.backgroundElement);
					}
				}
				if(this.selectionElementArray != null) {
					var y_offset1 = y_offset + this.topSpace;
					var addUpdate = this.isVisible && this.selectionIsVisible;
					var selectX;
					var selectWidth;
					var selectY;
					var selectHeight;
					var mx;
					var my;
					var mw;
					var mh;
					var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
					var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
					var _selectFrom = this.selectFrom;
					var _selectTo = this.selectTo;
					if(from >= this.page.pageLines.length) {
						haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
					}
					if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
						_selectFrom = 0;
						++from;
					}
					if(_selectTo == 0 && to > from + 1) {
						if(to - 1 >= this.page.pageLines.length) {
							haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
						}
						--to;
						_selectTo = this.page.pageLines[to - 1].glyphes.length;
					}
					var _pageLine;
					var selectionElement;
					if(addUpdate) {
						var fromOld = to - from;
						if(fromOld < 0) {
							fromOld = 0;
						}
						var _g = fromOld;
						var _g1 = this.selectionElementMax;
						while(_g < _g1) {
							var i = _g++;
							this.selectionProgram.removeElement(this.selectionElementArray[i]);
						}
					}
					var selectionElementMaxOld = this.selectionElementMax;
					this.selectionElementMax = 0;
					var _g = from;
					var _g1 = to;
					while(_g < _g1) {
						var i = _g++;
						_pageLine = this.page.pageLines[i];
						if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
							var page = this.page;
							selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
							var page1 = this.page;
							selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
						} else if(i == this.selectLineFrom) {
							var page2 = this.page;
							selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
							selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
						} else if(i == this.selectLineTo - 1) {
							selectX = Math.round(this.page.x + this.page.xOffset);
							var page3 = this.page;
							selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
						} else {
							selectX = Math.round(this.page.x + this.page.xOffset);
							selectWidth = Math.round(_pageLine.textSize);
						}
						selectY = Math.round(_pageLine.y);
						selectHeight = Math.round(_pageLine.height);
						mx = 0;
						my = 0;
						mw = selectWidth;
						mh = selectHeight;
						if(selectX < _x) {
							mw -= _x - selectX;
							mx = _x - selectX;
							if(mw > _width) {
								mw = _width;
							}
						} else if(selectX + selectWidth > _x + _width) {
							mw = _x + _width - selectX;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(selectY < _y) {
							mh -= _y - selectY;
							my = _y - selectY;
							if(mh > _height) {
								mh = _height;
							}
						} else if(selectY + selectHeight > _y + _height) {
							mh = _y + _height - selectY;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(this.selectionElementMax >= this.selectionElementArray.length) {
							selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
							if(addUpdate) {
								this.selectionProgram.addElement(selectionElement);
							}
							this.selectionElementArray.push(selectionElement);
						} else {
							selectionElement = this.selectionElementArray[this.selectionElementMax];
							selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
							if(this.selectionElementMax >= selectionElementMaxOld) {
								selectionElement.setStyle(this.selectionStyle);
								if(addUpdate) {
									this.selectionProgram.addElement(selectionElement);
								}
							} else if(addUpdate) {
								this.selectionProgram.update(selectionElement);
							}
						}
						this.selectionElementMax++;
					}
				}
				if(this.cursorElement != null) {
					var y_offset1 = y_offset + this.topSpace;
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var _width1 = _width;
					_width1 += 3;
					var page = this.page;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.pageLine.y);
					var ch = Math.round(this.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.cursorProgram.update(this.cursorElement);
					}
				}
			}
		} else if((this.autoSize & 2) <= 0 && (this.autoSize & 1) <= 0 && this.hAlign == 0 && this.vAlign == 0 && this.isVisible) {
			this.fontProgram.pageUpdate(this.page);
		} else {
			var updateBgMaskSelCursor = (this.autoSize & 2) > 0 || (this.autoSize & 1) > 0;
			var pageUpdatePosition = false;
			var pageUpdateSize = (this.autoSize & 2) > 0 || (this.autoSize & 1) > 0;
			var pageUpdateXOffset = (this.autoSize & 2) <= 0;
			var pageUpdateYOffset = (this.autoSize & 1) <= 0;
			if(pageUpdateYOffset == null) {
				pageUpdateYOffset = true;
			}
			if(pageUpdateXOffset == null) {
				pageUpdateXOffset = true;
			}
			if(pageUpdateSize == null) {
				pageUpdateSize = true;
			}
			if(pageUpdatePosition == null) {
				pageUpdatePosition = true;
			}
			if(updateBgMaskSelCursor == null) {
				updateBgMaskSelCursor = true;
			}
			if(this.autoSize > 0) {
				if((this.autoSize & 2) > 0) {
					var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
					if(w != this.width) {
						if(this.resizeWidth != null) {
							var oldWidth = this.width;
							this.resizeWidth(this.width = w,w - oldWidth);
						} else {
							this.width = w;
						}
					}
				}
				if((this.autoSize & 1) > 0) {
					var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
					if(h != this.height) {
						if(this.resizeHeight != null) {
							var oldHeight = this.height;
							this.resizeHeight(this.height = h,h - oldHeight);
						} else {
							this.height = h;
						}
					}
				}
				if(this.hasMoveEvent != 0) {
					var _this = this.pickableMove;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
					if(this.isVisible) {
						this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
					}
				}
				if(this.hasClickEvent != 0) {
					var _this = this.pickableClick;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
					if(this.isVisible) {
						this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
					}
				}
			}
			var _x = this.x + this.leftSpace;
			var _y = this.y + this.topSpace;
			var _width = this.width - this.leftSpace - this.rightSpace;
			var _height = this.height - this.topSpace - this.bottomSpace;
			var _yOffset = this.yOffset;
			var y_offset;
			if((this.autoSize & 1) > 0) {
				y_offset = _yOffset;
			} else {
				switch(this.vAlign) {
				case 4:
					y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
					break;
				case 8:
					y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
					break;
				default:
					y_offset = _yOffset;
				}
			}
			if(pageUpdatePosition && pageUpdateSize) {
				var tmp;
				if(pageUpdateXOffset) {
					var _xOffset = this.xOffset;
					if((this.autoSize & 2) > 0) {
						tmp = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
							break;
						case 2:
							tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
							break;
						default:
							tmp = _xOffset;
						}
					}
				} else {
					tmp = null;
				}
				this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
			} else if(pageUpdatePosition) {
				var tmp;
				if(pageUpdateXOffset) {
					var _xOffset = this.xOffset;
					if((this.autoSize & 2) > 0) {
						tmp = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
							break;
						case 2:
							tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
							break;
						default:
							tmp = _xOffset;
						}
					}
				} else {
					tmp = null;
				}
				this.fontProgram.pageSetPosition(this.page,_x,_y,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
			} else if(pageUpdateSize) {
				var tmp;
				if(pageUpdateXOffset) {
					var _xOffset = this.xOffset;
					if((this.autoSize & 2) > 0) {
						tmp = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
							break;
						case 2:
							tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
							break;
						default:
							tmp = _xOffset;
						}
					}
				} else {
					tmp = null;
				}
				this.fontProgram.pageSetSize(this.page,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
			} else {
				var tmp;
				if(pageUpdateXOffset) {
					var _xOffset = this.xOffset;
					if((this.autoSize & 2) > 0) {
						tmp = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
							break;
						case 2:
							tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
							break;
						default:
							tmp = _xOffset;
						}
					}
				} else {
					tmp = null;
				}
				this.fontProgram.pageSetOffset(this.page,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
			}
			if(this.isVisible) {
				this.fontProgram.pageUpdate(this.page);
			}
			if(updateBgMaskSelCursor) {
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var maskElement = this.maskElement;
				var autoUpdate = this.isVisible;
				if(autoUpdate == null) {
					autoUpdate = true;
				}
				maskElement.x = _x;
				maskElement.y = _y;
				maskElement.w = _width;
				maskElement.h = _height;
				if(autoUpdate) {
					this.fontProgram.maskBuffer.updateElement(maskElement);
				}
				if(this.backgroundElement != null) {
					this.backgroundElement.setLayout(this);
					if(this.isVisible && this.backgroundIsVisible) {
						this.backgroundProgram.update(this.backgroundElement);
					}
				}
				if(this.selectionElementArray != null) {
					var y_offset1 = y_offset + this.topSpace;
					var addUpdate = this.isVisible && this.selectionIsVisible;
					var selectX;
					var selectWidth;
					var selectY;
					var selectHeight;
					var mx;
					var my;
					var mw;
					var mh;
					var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
					var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
					var _selectFrom = this.selectFrom;
					var _selectTo = this.selectTo;
					if(from >= this.page.pageLines.length) {
						haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
					}
					if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
						_selectFrom = 0;
						++from;
					}
					if(_selectTo == 0 && to > from + 1) {
						if(to - 1 >= this.page.pageLines.length) {
							haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
						}
						--to;
						_selectTo = this.page.pageLines[to - 1].glyphes.length;
					}
					var _pageLine;
					var selectionElement;
					if(addUpdate) {
						var fromOld = to - from;
						if(fromOld < 0) {
							fromOld = 0;
						}
						var _g = fromOld;
						var _g1 = this.selectionElementMax;
						while(_g < _g1) {
							var i = _g++;
							this.selectionProgram.removeElement(this.selectionElementArray[i]);
						}
					}
					var selectionElementMaxOld = this.selectionElementMax;
					this.selectionElementMax = 0;
					var _g = from;
					var _g1 = to;
					while(_g < _g1) {
						var i = _g++;
						_pageLine = this.page.pageLines[i];
						if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
							var page = this.page;
							selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
							var page1 = this.page;
							selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
						} else if(i == this.selectLineFrom) {
							var page2 = this.page;
							selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
							selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
						} else if(i == this.selectLineTo - 1) {
							selectX = Math.round(this.page.x + this.page.xOffset);
							var page3 = this.page;
							selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
						} else {
							selectX = Math.round(this.page.x + this.page.xOffset);
							selectWidth = Math.round(_pageLine.textSize);
						}
						selectY = Math.round(_pageLine.y);
						selectHeight = Math.round(_pageLine.height);
						mx = 0;
						my = 0;
						mw = selectWidth;
						mh = selectHeight;
						if(selectX < _x) {
							mw -= _x - selectX;
							mx = _x - selectX;
							if(mw > _width) {
								mw = _width;
							}
						} else if(selectX + selectWidth > _x + _width) {
							mw = _x + _width - selectX;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(selectY < _y) {
							mh -= _y - selectY;
							my = _y - selectY;
							if(mh > _height) {
								mh = _height;
							}
						} else if(selectY + selectHeight > _y + _height) {
							mh = _y + _height - selectY;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(this.selectionElementMax >= this.selectionElementArray.length) {
							selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
							if(addUpdate) {
								this.selectionProgram.addElement(selectionElement);
							}
							this.selectionElementArray.push(selectionElement);
						} else {
							selectionElement = this.selectionElementArray[this.selectionElementMax];
							selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
							if(this.selectionElementMax >= selectionElementMaxOld) {
								selectionElement.setStyle(this.selectionStyle);
								if(addUpdate) {
									this.selectionProgram.addElement(selectionElement);
								}
							} else if(addUpdate) {
								this.selectionProgram.update(selectionElement);
							}
						}
						this.selectionElementMax++;
					}
				}
				if(this.cursorElement != null) {
					var y_offset1 = y_offset + this.topSpace;
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var _width1 = _width;
					_width1 += 3;
					var page = this.page;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.pageLine.y);
					var ch = Math.round(this.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.cursorProgram.update(this.cursorElement);
					}
				}
			}
		}
	}
	,deleteChar: function() {
		if(this.page == null) {
			return;
		}
		if(this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo) {
			this.fontProgram.pageDeleteChars(this.page,this.selectLineFrom,this.selectLineTo,this.selectFrom,this.selectTo,this.isVisible);
			var pos = this.selectLineFrom;
			if(pos != this.cursorLine) {
				if(pos < 0) {
					this.cursorLine = 0;
				} else if(this.page != null && pos >= this.page.pageLines.length) {
					this.cursorLine = this.page.pageLines.length - 1;
				} else {
					this.cursorLine = pos;
				}
				if(this.page != null) {
					this.pageLine = this.page.pageLines[this.cursorLine];
					if(this.cursor > this.pageLine.glyphes.length) {
						if(this.cursorWant == -1) {
							this.cursorWant = this.cursor;
						}
						var pos = this.pageLine.glyphes.length;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					} else if(this.cursorWant > 0) {
						var pos = this.cursorWant;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					}
					if(this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
			var pos = this.selectFrom;
			if(pos != this.cursor) {
				if(pos < 0) {
					this.cursor = 0;
				} else if(this.page != null && pos > this.pageLine.glyphes.length) {
					this.cursor = this.pageLine.glyphes.length;
				} else {
					this.cursor = pos;
				}
				if(this.page != null && this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var page = this.page;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.pageLine.y);
					var ch = Math.round(this.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
			this.cursorWant = -1;
			this.selectLineFrom = this.selectLineTo = this.selectFrom = this.selectTo = 0;
			if(this.page != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElementArray != null && this.isVisible) {
					var _g = 0;
					var _g1 = this.selectionElementMax;
					while(_g < _g1) {
						var i = _g++;
						this.selectionProgram.removeElement(this.selectionElementArray[i]);
					}
				}
			}
			this.selectionIsVisible = false;
			if((this.autoSize & 2) > 0 && (this.autoSize & 1) > 0) {
				var updateBgMaskSelCursor = true;
				var pageUpdatePosition = false;
				var pageUpdateSize = true;
				var pageUpdateXOffset = false;
				var pageUpdateYOffset = false;
				if(pageUpdateYOffset == null) {
					pageUpdateYOffset = true;
				}
				if(pageUpdateXOffset == null) {
					pageUpdateXOffset = true;
				}
				if(pageUpdateSize == null) {
					pageUpdateSize = true;
				}
				if(pageUpdatePosition == null) {
					pageUpdatePosition = true;
				}
				if(updateBgMaskSelCursor == null) {
					updateBgMaskSelCursor = true;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var _yOffset = this.yOffset;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = _yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
						break;
					default:
						y_offset = _yOffset;
					}
				}
				if(pageUpdatePosition && pageUpdateSize) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else if(pageUpdatePosition) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetPosition(this.page,_x,_y,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else if(pageUpdateSize) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetSize(this.page,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetOffset(this.page,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				}
				if(this.isVisible) {
					this.fontProgram.pageUpdate(this.page);
				}
				if(updateBgMaskSelCursor) {
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var maskElement = this.maskElement;
					var autoUpdate = this.isVisible;
					if(autoUpdate == null) {
						autoUpdate = true;
					}
					maskElement.x = _x;
					maskElement.y = _y;
					maskElement.w = _width;
					maskElement.h = _height;
					if(autoUpdate) {
						this.fontProgram.maskBuffer.updateElement(maskElement);
					}
					if(this.backgroundElement != null) {
						this.backgroundElement.setLayout(this);
						if(this.isVisible && this.backgroundIsVisible) {
							this.backgroundProgram.update(this.backgroundElement);
						}
					}
					if(this.selectionElementArray != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.selectionIsVisible;
						var selectX;
						var selectWidth;
						var selectY;
						var selectHeight;
						var mx;
						var my;
						var mw;
						var mh;
						var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
						var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
						var _selectFrom = this.selectFrom;
						var _selectTo = this.selectTo;
						if(from >= this.page.pageLines.length) {
							haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
						}
						if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
							_selectFrom = 0;
							++from;
						}
						if(_selectTo == 0 && to > from + 1) {
							if(to - 1 >= this.page.pageLines.length) {
								haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
							}
							--to;
							_selectTo = this.page.pageLines[to - 1].glyphes.length;
						}
						var _pageLine;
						var selectionElement;
						if(addUpdate) {
							var fromOld = to - from;
							if(fromOld < 0) {
								fromOld = 0;
							}
							var _g = fromOld;
							var _g1 = this.selectionElementMax;
							while(_g < _g1) {
								var i = _g++;
								this.selectionProgram.removeElement(this.selectionElementArray[i]);
							}
						}
						var selectionElementMaxOld = this.selectionElementMax;
						this.selectionElementMax = 0;
						var _g = from;
						var _g1 = to;
						while(_g < _g1) {
							var i = _g++;
							_pageLine = this.page.pageLines[i];
							if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
								var page = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
								var page1 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
							} else if(i == this.selectLineFrom) {
								var page2 = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
								selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
							} else if(i == this.selectLineTo - 1) {
								selectX = Math.round(this.page.x + this.page.xOffset);
								var page3 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
							} else {
								selectX = Math.round(this.page.x + this.page.xOffset);
								selectWidth = Math.round(_pageLine.textSize);
							}
							selectY = Math.round(_pageLine.y);
							selectHeight = Math.round(_pageLine.height);
							mx = 0;
							my = 0;
							mw = selectWidth;
							mh = selectHeight;
							if(selectX < _x) {
								mw -= _x - selectX;
								mx = _x - selectX;
								if(mw > _width) {
									mw = _width;
								}
							} else if(selectX + selectWidth > _x + _width) {
								mw = _x + _width - selectX;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(selectY < _y) {
								mh -= _y - selectY;
								my = _y - selectY;
								if(mh > _height) {
									mh = _height;
								}
							} else if(selectY + selectHeight > _y + _height) {
								mh = _y + _height - selectY;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(this.selectionElementMax >= this.selectionElementArray.length) {
								selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
								if(addUpdate) {
									this.selectionProgram.addElement(selectionElement);
								}
								this.selectionElementArray.push(selectionElement);
							} else {
								selectionElement = this.selectionElementArray[this.selectionElementMax];
								selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
								if(this.selectionElementMax >= selectionElementMaxOld) {
									selectionElement.setStyle(this.selectionStyle);
									if(addUpdate) {
										this.selectionProgram.addElement(selectionElement);
									}
								} else if(addUpdate) {
									this.selectionProgram.update(selectionElement);
								}
							}
							this.selectionElementMax++;
						}
					}
					if(this.cursorElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var _width1 = _width;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			} else if((this.autoSize & 2) <= 0 && (this.autoSize & 1) <= 0 && this.hAlign == 0 && this.vAlign == 0 && this.isVisible) {
				this.fontProgram.pageUpdate(this.page);
			} else {
				var updateBgMaskSelCursor = (this.autoSize & 2) > 0 || (this.autoSize & 1) > 0;
				var pageUpdatePosition = false;
				var pageUpdateSize = (this.autoSize & 2) > 0 || (this.autoSize & 1) > 0;
				var pageUpdateXOffset = (this.autoSize & 2) <= 0;
				var pageUpdateYOffset = (this.autoSize & 1) <= 0;
				if(pageUpdateYOffset == null) {
					pageUpdateYOffset = true;
				}
				if(pageUpdateXOffset == null) {
					pageUpdateXOffset = true;
				}
				if(pageUpdateSize == null) {
					pageUpdateSize = true;
				}
				if(pageUpdatePosition == null) {
					pageUpdatePosition = true;
				}
				if(updateBgMaskSelCursor == null) {
					updateBgMaskSelCursor = true;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var _yOffset = this.yOffset;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = _yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
						break;
					default:
						y_offset = _yOffset;
					}
				}
				if(pageUpdatePosition && pageUpdateSize) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else if(pageUpdatePosition) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetPosition(this.page,_x,_y,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else if(pageUpdateSize) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetSize(this.page,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetOffset(this.page,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				}
				if(this.isVisible) {
					this.fontProgram.pageUpdate(this.page);
				}
				if(updateBgMaskSelCursor) {
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var maskElement = this.maskElement;
					var autoUpdate = this.isVisible;
					if(autoUpdate == null) {
						autoUpdate = true;
					}
					maskElement.x = _x;
					maskElement.y = _y;
					maskElement.w = _width;
					maskElement.h = _height;
					if(autoUpdate) {
						this.fontProgram.maskBuffer.updateElement(maskElement);
					}
					if(this.backgroundElement != null) {
						this.backgroundElement.setLayout(this);
						if(this.isVisible && this.backgroundIsVisible) {
							this.backgroundProgram.update(this.backgroundElement);
						}
					}
					if(this.selectionElementArray != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.selectionIsVisible;
						var selectX;
						var selectWidth;
						var selectY;
						var selectHeight;
						var mx;
						var my;
						var mw;
						var mh;
						var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
						var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
						var _selectFrom = this.selectFrom;
						var _selectTo = this.selectTo;
						if(from >= this.page.pageLines.length) {
							haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
						}
						if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
							_selectFrom = 0;
							++from;
						}
						if(_selectTo == 0 && to > from + 1) {
							if(to - 1 >= this.page.pageLines.length) {
								haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
							}
							--to;
							_selectTo = this.page.pageLines[to - 1].glyphes.length;
						}
						var _pageLine;
						var selectionElement;
						if(addUpdate) {
							var fromOld = to - from;
							if(fromOld < 0) {
								fromOld = 0;
							}
							var _g = fromOld;
							var _g1 = this.selectionElementMax;
							while(_g < _g1) {
								var i = _g++;
								this.selectionProgram.removeElement(this.selectionElementArray[i]);
							}
						}
						var selectionElementMaxOld = this.selectionElementMax;
						this.selectionElementMax = 0;
						var _g = from;
						var _g1 = to;
						while(_g < _g1) {
							var i = _g++;
							_pageLine = this.page.pageLines[i];
							if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
								var page = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
								var page1 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
							} else if(i == this.selectLineFrom) {
								var page2 = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
								selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
							} else if(i == this.selectLineTo - 1) {
								selectX = Math.round(this.page.x + this.page.xOffset);
								var page3 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
							} else {
								selectX = Math.round(this.page.x + this.page.xOffset);
								selectWidth = Math.round(_pageLine.textSize);
							}
							selectY = Math.round(_pageLine.y);
							selectHeight = Math.round(_pageLine.height);
							mx = 0;
							my = 0;
							mw = selectWidth;
							mh = selectHeight;
							if(selectX < _x) {
								mw -= _x - selectX;
								mx = _x - selectX;
								if(mw > _width) {
									mw = _width;
								}
							} else if(selectX + selectWidth > _x + _width) {
								mw = _x + _width - selectX;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(selectY < _y) {
								mh -= _y - selectY;
								my = _y - selectY;
								if(mh > _height) {
									mh = _height;
								}
							} else if(selectY + selectHeight > _y + _height) {
								mh = _y + _height - selectY;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(this.selectionElementMax >= this.selectionElementArray.length) {
								selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
								if(addUpdate) {
									this.selectionProgram.addElement(selectionElement);
								}
								this.selectionElementArray.push(selectionElement);
							} else {
								selectionElement = this.selectionElementArray[this.selectionElementMax];
								selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
								if(this.selectionElementMax >= selectionElementMaxOld) {
									selectionElement.setStyle(this.selectionStyle);
									if(addUpdate) {
										this.selectionProgram.addElement(selectionElement);
									}
								} else if(addUpdate) {
									this.selectionProgram.update(selectionElement);
								}
							}
							this.selectionElementMax++;
						}
					}
					if(this.cursorElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var _width1 = _width;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
		} else if(this.cursorLine < this.page.pageLines.length || this.cursor < this.pageLine.glyphes.length) {
			this.fontProgram.pageDeleteChar(this.page,this.pageLine,this.cursorLine,this.cursor,this.isVisible);
			if(this.cursor == 0 && this.pageLine.glyphes.length == 0) {
				this.pageLine = this.page.pageLines[this.cursorLine];
			}
			if((this.autoSize & 2) > 0 && (this.autoSize & 1) > 0) {
				var updateBgMaskSelCursor = true;
				var pageUpdatePosition = false;
				var pageUpdateSize = true;
				var pageUpdateXOffset = false;
				var pageUpdateYOffset = false;
				if(pageUpdateYOffset == null) {
					pageUpdateYOffset = true;
				}
				if(pageUpdateXOffset == null) {
					pageUpdateXOffset = true;
				}
				if(pageUpdateSize == null) {
					pageUpdateSize = true;
				}
				if(pageUpdatePosition == null) {
					pageUpdatePosition = true;
				}
				if(updateBgMaskSelCursor == null) {
					updateBgMaskSelCursor = true;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var _yOffset = this.yOffset;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = _yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
						break;
					default:
						y_offset = _yOffset;
					}
				}
				if(pageUpdatePosition && pageUpdateSize) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else if(pageUpdatePosition) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetPosition(this.page,_x,_y,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else if(pageUpdateSize) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetSize(this.page,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetOffset(this.page,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				}
				if(this.isVisible) {
					this.fontProgram.pageUpdate(this.page);
				}
				if(updateBgMaskSelCursor) {
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var maskElement = this.maskElement;
					var autoUpdate = this.isVisible;
					if(autoUpdate == null) {
						autoUpdate = true;
					}
					maskElement.x = _x;
					maskElement.y = _y;
					maskElement.w = _width;
					maskElement.h = _height;
					if(autoUpdate) {
						this.fontProgram.maskBuffer.updateElement(maskElement);
					}
					if(this.backgroundElement != null) {
						this.backgroundElement.setLayout(this);
						if(this.isVisible && this.backgroundIsVisible) {
							this.backgroundProgram.update(this.backgroundElement);
						}
					}
					if(this.selectionElementArray != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.selectionIsVisible;
						var selectX;
						var selectWidth;
						var selectY;
						var selectHeight;
						var mx;
						var my;
						var mw;
						var mh;
						var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
						var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
						var _selectFrom = this.selectFrom;
						var _selectTo = this.selectTo;
						if(from >= this.page.pageLines.length) {
							haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
						}
						if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
							_selectFrom = 0;
							++from;
						}
						if(_selectTo == 0 && to > from + 1) {
							if(to - 1 >= this.page.pageLines.length) {
								haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
							}
							--to;
							_selectTo = this.page.pageLines[to - 1].glyphes.length;
						}
						var _pageLine;
						var selectionElement;
						if(addUpdate) {
							var fromOld = to - from;
							if(fromOld < 0) {
								fromOld = 0;
							}
							var _g = fromOld;
							var _g1 = this.selectionElementMax;
							while(_g < _g1) {
								var i = _g++;
								this.selectionProgram.removeElement(this.selectionElementArray[i]);
							}
						}
						var selectionElementMaxOld = this.selectionElementMax;
						this.selectionElementMax = 0;
						var _g = from;
						var _g1 = to;
						while(_g < _g1) {
							var i = _g++;
							_pageLine = this.page.pageLines[i];
							if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
								var page = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
								var page1 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
							} else if(i == this.selectLineFrom) {
								var page2 = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
								selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
							} else if(i == this.selectLineTo - 1) {
								selectX = Math.round(this.page.x + this.page.xOffset);
								var page3 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
							} else {
								selectX = Math.round(this.page.x + this.page.xOffset);
								selectWidth = Math.round(_pageLine.textSize);
							}
							selectY = Math.round(_pageLine.y);
							selectHeight = Math.round(_pageLine.height);
							mx = 0;
							my = 0;
							mw = selectWidth;
							mh = selectHeight;
							if(selectX < _x) {
								mw -= _x - selectX;
								mx = _x - selectX;
								if(mw > _width) {
									mw = _width;
								}
							} else if(selectX + selectWidth > _x + _width) {
								mw = _x + _width - selectX;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(selectY < _y) {
								mh -= _y - selectY;
								my = _y - selectY;
								if(mh > _height) {
									mh = _height;
								}
							} else if(selectY + selectHeight > _y + _height) {
								mh = _y + _height - selectY;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(this.selectionElementMax >= this.selectionElementArray.length) {
								selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
								if(addUpdate) {
									this.selectionProgram.addElement(selectionElement);
								}
								this.selectionElementArray.push(selectionElement);
							} else {
								selectionElement = this.selectionElementArray[this.selectionElementMax];
								selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
								if(this.selectionElementMax >= selectionElementMaxOld) {
									selectionElement.setStyle(this.selectionStyle);
									if(addUpdate) {
										this.selectionProgram.addElement(selectionElement);
									}
								} else if(addUpdate) {
									this.selectionProgram.update(selectionElement);
								}
							}
							this.selectionElementMax++;
						}
					}
					if(this.cursorElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var _width1 = _width;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			} else if((this.autoSize & 2) <= 0 && (this.autoSize & 1) <= 0 && this.hAlign == 0 && this.vAlign == 0 && this.isVisible) {
				this.fontProgram.pageUpdate(this.page);
			} else {
				var updateBgMaskSelCursor = (this.autoSize & 2) > 0 || (this.autoSize & 1) > 0;
				var pageUpdatePosition = false;
				var pageUpdateSize = (this.autoSize & 2) > 0 || (this.autoSize & 1) > 0;
				var pageUpdateXOffset = (this.autoSize & 2) <= 0;
				var pageUpdateYOffset = (this.autoSize & 1) <= 0;
				if(pageUpdateYOffset == null) {
					pageUpdateYOffset = true;
				}
				if(pageUpdateXOffset == null) {
					pageUpdateXOffset = true;
				}
				if(pageUpdateSize == null) {
					pageUpdateSize = true;
				}
				if(pageUpdatePosition == null) {
					pageUpdatePosition = true;
				}
				if(updateBgMaskSelCursor == null) {
					updateBgMaskSelCursor = true;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var _yOffset = this.yOffset;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = _yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
						break;
					default:
						y_offset = _yOffset;
					}
				}
				if(pageUpdatePosition && pageUpdateSize) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else if(pageUpdatePosition) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetPosition(this.page,_x,_y,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else if(pageUpdateSize) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetSize(this.page,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetOffset(this.page,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				}
				if(this.isVisible) {
					this.fontProgram.pageUpdate(this.page);
				}
				if(updateBgMaskSelCursor) {
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var maskElement = this.maskElement;
					var autoUpdate = this.isVisible;
					if(autoUpdate == null) {
						autoUpdate = true;
					}
					maskElement.x = _x;
					maskElement.y = _y;
					maskElement.w = _width;
					maskElement.h = _height;
					if(autoUpdate) {
						this.fontProgram.maskBuffer.updateElement(maskElement);
					}
					if(this.backgroundElement != null) {
						this.backgroundElement.setLayout(this);
						if(this.isVisible && this.backgroundIsVisible) {
							this.backgroundProgram.update(this.backgroundElement);
						}
					}
					if(this.selectionElementArray != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.selectionIsVisible;
						var selectX;
						var selectWidth;
						var selectY;
						var selectHeight;
						var mx;
						var my;
						var mw;
						var mh;
						var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
						var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
						var _selectFrom = this.selectFrom;
						var _selectTo = this.selectTo;
						if(from >= this.page.pageLines.length) {
							haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
						}
						if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
							_selectFrom = 0;
							++from;
						}
						if(_selectTo == 0 && to > from + 1) {
							if(to - 1 >= this.page.pageLines.length) {
								haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
							}
							--to;
							_selectTo = this.page.pageLines[to - 1].glyphes.length;
						}
						var _pageLine;
						var selectionElement;
						if(addUpdate) {
							var fromOld = to - from;
							if(fromOld < 0) {
								fromOld = 0;
							}
							var _g = fromOld;
							var _g1 = this.selectionElementMax;
							while(_g < _g1) {
								var i = _g++;
								this.selectionProgram.removeElement(this.selectionElementArray[i]);
							}
						}
						var selectionElementMaxOld = this.selectionElementMax;
						this.selectionElementMax = 0;
						var _g = from;
						var _g1 = to;
						while(_g < _g1) {
							var i = _g++;
							_pageLine = this.page.pageLines[i];
							if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
								var page = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
								var page1 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
							} else if(i == this.selectLineFrom) {
								var page2 = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
								selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
							} else if(i == this.selectLineTo - 1) {
								selectX = Math.round(this.page.x + this.page.xOffset);
								var page3 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
							} else {
								selectX = Math.round(this.page.x + this.page.xOffset);
								selectWidth = Math.round(_pageLine.textSize);
							}
							selectY = Math.round(_pageLine.y);
							selectHeight = Math.round(_pageLine.height);
							mx = 0;
							my = 0;
							mw = selectWidth;
							mh = selectHeight;
							if(selectX < _x) {
								mw -= _x - selectX;
								mx = _x - selectX;
								if(mw > _width) {
									mw = _width;
								}
							} else if(selectX + selectWidth > _x + _width) {
								mw = _x + _width - selectX;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(selectY < _y) {
								mh -= _y - selectY;
								my = _y - selectY;
								if(mh > _height) {
									mh = _height;
								}
							} else if(selectY + selectHeight > _y + _height) {
								mh = _y + _height - selectY;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(this.selectionElementMax >= this.selectionElementArray.length) {
								selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
								if(addUpdate) {
									this.selectionProgram.addElement(selectionElement);
								}
								this.selectionElementArray.push(selectionElement);
							} else {
								selectionElement = this.selectionElementArray[this.selectionElementMax];
								selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
								if(this.selectionElementMax >= selectionElementMaxOld) {
									selectionElement.setStyle(this.selectionStyle);
									if(addUpdate) {
										this.selectionProgram.addElement(selectionElement);
									}
								} else if(addUpdate) {
									this.selectionProgram.update(selectionElement);
								}
							}
							this.selectionElementMax++;
						}
					}
					if(this.cursorElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var _width1 = _width;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
		}
	}
	,backspace: function() {
		if(this.page == null) {
			return;
		}
		if(this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo) {
			this.fontProgram.pageDeleteChars(this.page,this.selectLineFrom,this.selectLineTo,this.selectFrom,this.selectTo,this.isVisible);
			var pos = this.selectLineFrom;
			if(pos != this.cursorLine) {
				if(pos < 0) {
					this.cursorLine = 0;
				} else if(this.page != null && pos >= this.page.pageLines.length) {
					this.cursorLine = this.page.pageLines.length - 1;
				} else {
					this.cursorLine = pos;
				}
				if(this.page != null) {
					this.pageLine = this.page.pageLines[this.cursorLine];
					if(this.cursor > this.pageLine.glyphes.length) {
						if(this.cursorWant == -1) {
							this.cursorWant = this.cursor;
						}
						var pos = this.pageLine.glyphes.length;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					} else if(this.cursorWant > 0) {
						var pos = this.cursorWant;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					}
					if(this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
			var pos = this.selectFrom;
			if(pos != this.cursor) {
				if(pos < 0) {
					this.cursor = 0;
				} else if(this.page != null && pos > this.pageLine.glyphes.length) {
					this.cursor = this.pageLine.glyphes.length;
				} else {
					this.cursor = pos;
				}
				if(this.page != null && this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var page = this.page;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.pageLine.y);
					var ch = Math.round(this.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
			this.cursorWant = -1;
			this.selectLineFrom = this.selectLineTo = this.selectFrom = this.selectTo = 0;
			if(this.page != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElementArray != null && this.isVisible) {
					var _g = 0;
					var _g1 = this.selectionElementMax;
					while(_g < _g1) {
						var i = _g++;
						this.selectionProgram.removeElement(this.selectionElementArray[i]);
					}
				}
			}
			this.selectionIsVisible = false;
			if((this.autoSize & 2) > 0 && (this.autoSize & 1) > 0) {
				var updateBgMaskSelCursor = true;
				var pageUpdatePosition = false;
				var pageUpdateSize = true;
				var pageUpdateXOffset = false;
				var pageUpdateYOffset = false;
				if(pageUpdateYOffset == null) {
					pageUpdateYOffset = true;
				}
				if(pageUpdateXOffset == null) {
					pageUpdateXOffset = true;
				}
				if(pageUpdateSize == null) {
					pageUpdateSize = true;
				}
				if(pageUpdatePosition == null) {
					pageUpdatePosition = true;
				}
				if(updateBgMaskSelCursor == null) {
					updateBgMaskSelCursor = true;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var _yOffset = this.yOffset;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = _yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
						break;
					default:
						y_offset = _yOffset;
					}
				}
				if(pageUpdatePosition && pageUpdateSize) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else if(pageUpdatePosition) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetPosition(this.page,_x,_y,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else if(pageUpdateSize) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetSize(this.page,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetOffset(this.page,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				}
				if(this.isVisible) {
					this.fontProgram.pageUpdate(this.page);
				}
				if(updateBgMaskSelCursor) {
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var maskElement = this.maskElement;
					var autoUpdate = this.isVisible;
					if(autoUpdate == null) {
						autoUpdate = true;
					}
					maskElement.x = _x;
					maskElement.y = _y;
					maskElement.w = _width;
					maskElement.h = _height;
					if(autoUpdate) {
						this.fontProgram.maskBuffer.updateElement(maskElement);
					}
					if(this.backgroundElement != null) {
						this.backgroundElement.setLayout(this);
						if(this.isVisible && this.backgroundIsVisible) {
							this.backgroundProgram.update(this.backgroundElement);
						}
					}
					if(this.selectionElementArray != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.selectionIsVisible;
						var selectX;
						var selectWidth;
						var selectY;
						var selectHeight;
						var mx;
						var my;
						var mw;
						var mh;
						var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
						var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
						var _selectFrom = this.selectFrom;
						var _selectTo = this.selectTo;
						if(from >= this.page.pageLines.length) {
							haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
						}
						if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
							_selectFrom = 0;
							++from;
						}
						if(_selectTo == 0 && to > from + 1) {
							if(to - 1 >= this.page.pageLines.length) {
								haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
							}
							--to;
							_selectTo = this.page.pageLines[to - 1].glyphes.length;
						}
						var _pageLine;
						var selectionElement;
						if(addUpdate) {
							var fromOld = to - from;
							if(fromOld < 0) {
								fromOld = 0;
							}
							var _g = fromOld;
							var _g1 = this.selectionElementMax;
							while(_g < _g1) {
								var i = _g++;
								this.selectionProgram.removeElement(this.selectionElementArray[i]);
							}
						}
						var selectionElementMaxOld = this.selectionElementMax;
						this.selectionElementMax = 0;
						var _g = from;
						var _g1 = to;
						while(_g < _g1) {
							var i = _g++;
							_pageLine = this.page.pageLines[i];
							if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
								var page = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
								var page1 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
							} else if(i == this.selectLineFrom) {
								var page2 = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
								selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
							} else if(i == this.selectLineTo - 1) {
								selectX = Math.round(this.page.x + this.page.xOffset);
								var page3 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
							} else {
								selectX = Math.round(this.page.x + this.page.xOffset);
								selectWidth = Math.round(_pageLine.textSize);
							}
							selectY = Math.round(_pageLine.y);
							selectHeight = Math.round(_pageLine.height);
							mx = 0;
							my = 0;
							mw = selectWidth;
							mh = selectHeight;
							if(selectX < _x) {
								mw -= _x - selectX;
								mx = _x - selectX;
								if(mw > _width) {
									mw = _width;
								}
							} else if(selectX + selectWidth > _x + _width) {
								mw = _x + _width - selectX;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(selectY < _y) {
								mh -= _y - selectY;
								my = _y - selectY;
								if(mh > _height) {
									mh = _height;
								}
							} else if(selectY + selectHeight > _y + _height) {
								mh = _y + _height - selectY;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(this.selectionElementMax >= this.selectionElementArray.length) {
								selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
								if(addUpdate) {
									this.selectionProgram.addElement(selectionElement);
								}
								this.selectionElementArray.push(selectionElement);
							} else {
								selectionElement = this.selectionElementArray[this.selectionElementMax];
								selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
								if(this.selectionElementMax >= selectionElementMaxOld) {
									selectionElement.setStyle(this.selectionStyle);
									if(addUpdate) {
										this.selectionProgram.addElement(selectionElement);
									}
								} else if(addUpdate) {
									this.selectionProgram.update(selectionElement);
								}
							}
							this.selectionElementMax++;
						}
					}
					if(this.cursorElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var _width1 = _width;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			} else if((this.autoSize & 2) <= 0 && (this.autoSize & 1) <= 0 && this.hAlign == 0 && this.vAlign == 0 && this.isVisible) {
				this.fontProgram.pageUpdate(this.page);
			} else {
				var updateBgMaskSelCursor = (this.autoSize & 2) > 0 || (this.autoSize & 1) > 0;
				var pageUpdatePosition = false;
				var pageUpdateSize = (this.autoSize & 2) > 0 || (this.autoSize & 1) > 0;
				var pageUpdateXOffset = (this.autoSize & 2) <= 0;
				var pageUpdateYOffset = (this.autoSize & 1) <= 0;
				if(pageUpdateYOffset == null) {
					pageUpdateYOffset = true;
				}
				if(pageUpdateXOffset == null) {
					pageUpdateXOffset = true;
				}
				if(pageUpdateSize == null) {
					pageUpdateSize = true;
				}
				if(pageUpdatePosition == null) {
					pageUpdatePosition = true;
				}
				if(updateBgMaskSelCursor == null) {
					updateBgMaskSelCursor = true;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var _yOffset = this.yOffset;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = _yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
						break;
					default:
						y_offset = _yOffset;
					}
				}
				if(pageUpdatePosition && pageUpdateSize) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else if(pageUpdatePosition) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetPosition(this.page,_x,_y,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else if(pageUpdateSize) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetSize(this.page,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetOffset(this.page,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				}
				if(this.isVisible) {
					this.fontProgram.pageUpdate(this.page);
				}
				if(updateBgMaskSelCursor) {
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var maskElement = this.maskElement;
					var autoUpdate = this.isVisible;
					if(autoUpdate == null) {
						autoUpdate = true;
					}
					maskElement.x = _x;
					maskElement.y = _y;
					maskElement.w = _width;
					maskElement.h = _height;
					if(autoUpdate) {
						this.fontProgram.maskBuffer.updateElement(maskElement);
					}
					if(this.backgroundElement != null) {
						this.backgroundElement.setLayout(this);
						if(this.isVisible && this.backgroundIsVisible) {
							this.backgroundProgram.update(this.backgroundElement);
						}
					}
					if(this.selectionElementArray != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.selectionIsVisible;
						var selectX;
						var selectWidth;
						var selectY;
						var selectHeight;
						var mx;
						var my;
						var mw;
						var mh;
						var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
						var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
						var _selectFrom = this.selectFrom;
						var _selectTo = this.selectTo;
						if(from >= this.page.pageLines.length) {
							haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
						}
						if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
							_selectFrom = 0;
							++from;
						}
						if(_selectTo == 0 && to > from + 1) {
							if(to - 1 >= this.page.pageLines.length) {
								haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
							}
							--to;
							_selectTo = this.page.pageLines[to - 1].glyphes.length;
						}
						var _pageLine;
						var selectionElement;
						if(addUpdate) {
							var fromOld = to - from;
							if(fromOld < 0) {
								fromOld = 0;
							}
							var _g = fromOld;
							var _g1 = this.selectionElementMax;
							while(_g < _g1) {
								var i = _g++;
								this.selectionProgram.removeElement(this.selectionElementArray[i]);
							}
						}
						var selectionElementMaxOld = this.selectionElementMax;
						this.selectionElementMax = 0;
						var _g = from;
						var _g1 = to;
						while(_g < _g1) {
							var i = _g++;
							_pageLine = this.page.pageLines[i];
							if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
								var page = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
								var page1 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
							} else if(i == this.selectLineFrom) {
								var page2 = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
								selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
							} else if(i == this.selectLineTo - 1) {
								selectX = Math.round(this.page.x + this.page.xOffset);
								var page3 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
							} else {
								selectX = Math.round(this.page.x + this.page.xOffset);
								selectWidth = Math.round(_pageLine.textSize);
							}
							selectY = Math.round(_pageLine.y);
							selectHeight = Math.round(_pageLine.height);
							mx = 0;
							my = 0;
							mw = selectWidth;
							mh = selectHeight;
							if(selectX < _x) {
								mw -= _x - selectX;
								mx = _x - selectX;
								if(mw > _width) {
									mw = _width;
								}
							} else if(selectX + selectWidth > _x + _width) {
								mw = _x + _width - selectX;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(selectY < _y) {
								mh -= _y - selectY;
								my = _y - selectY;
								if(mh > _height) {
									mh = _height;
								}
							} else if(selectY + selectHeight > _y + _height) {
								mh = _y + _height - selectY;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(this.selectionElementMax >= this.selectionElementArray.length) {
								selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
								if(addUpdate) {
									this.selectionProgram.addElement(selectionElement);
								}
								this.selectionElementArray.push(selectionElement);
							} else {
								selectionElement = this.selectionElementArray[this.selectionElementMax];
								selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
								if(this.selectionElementMax >= selectionElementMaxOld) {
									selectionElement.setStyle(this.selectionStyle);
									if(addUpdate) {
										this.selectionProgram.addElement(selectionElement);
									}
								} else if(addUpdate) {
									this.selectionProgram.update(selectionElement);
								}
							}
							this.selectionElementMax++;
						}
					}
					if(this.cursorElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var _width1 = _width;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
		} else if(this.cursor == 0) {
			if(this.cursorLine > 0) {
				var pos = this.cursorLine - 1;
				if(pos != this.cursorLine) {
					if(pos < 0) {
						this.cursorLine = 0;
					} else if(this.page != null && pos >= this.page.pageLines.length) {
						this.cursorLine = this.page.pageLines.length - 1;
					} else {
						this.cursorLine = pos;
					}
					if(this.page != null) {
						this.pageLine = this.page.pageLines[this.cursorLine];
						if(this.cursor > this.pageLine.glyphes.length) {
							if(this.cursorWant == -1) {
								this.cursorWant = this.cursor;
							}
							var pos = this.pageLine.glyphes.length;
							if(pos != this.cursor) {
								if(pos < 0) {
									this.cursor = 0;
								} else if(this.page != null && pos > this.pageLine.glyphes.length) {
									this.cursor = this.pageLine.glyphes.length;
								} else {
									this.cursor = pos;
								}
								if(this.page != null && this.cursorStyle != null) {
									var addUpdate = this.isVisible && this.cursorIsVisible;
									var create = this.cursorElement == null;
									var _x = this.x + this.leftSpace;
									var _y = this.y + this.topSpace;
									var _width = this.width - this.leftSpace - this.rightSpace;
									var _height = this.height - this.topSpace - this.bottomSpace;
									if(this.masked) {
										if(this.maskX > this.leftSpace) {
											_x = this.x + this.maskX;
										}
										if(this.maskY > this.topSpace) {
											_y = this.y + this.maskY;
										}
										if(this.x + this.maskX + this.maskWidth < _x + _width) {
											_width = this.maskX + this.maskWidth + this.x - _x;
										}
										if(this.y + this.maskY + this.maskHeight < _y + _height) {
											_height = this.maskY + this.maskHeight + this.y - _y;
										}
									}
									var _width1 = _width;
									var _yOffset = this.yOffset;
									var y_offset;
									if((this.autoSize & 1) > 0) {
										y_offset = _yOffset;
									} else {
										switch(this.vAlign) {
										case 4:
											y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
											break;
										case 8:
											y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
											break;
										default:
											y_offset = _yOffset;
										}
									}
									var y_offset1 = y_offset + this.topSpace;
									_width1 += 3;
									var page = this.page;
									var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
									var cw = 2;
									var cy = Math.round(this.pageLine.y);
									var ch = Math.round(this.pageLine.height);
									var mx = 0;
									var my = 0;
									var mw = cw;
									var mh = ch;
									if(cx < _x) {
										mw -= _x - cx;
										mx = _x - cx;
										if(mw > _width1) {
											mw = _width1;
										}
									} else if(cx + cw > _x + _width1) {
										mw = _x + _width1 - cx;
									}
									if(mw < 0) {
										mw = 0;
									}
									if(cy < _y) {
										mh -= _y - cy;
										my = _y - cy;
										if(mh > _height) {
											mh = _height;
										}
									} else if(cy + ch > _y + _height) {
										mh = _y + _height - cy;
									}
									if(mh < 0) {
										mh = 0;
									}
									if(create) {
										var z = this.z;
										var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
										if(stylePos < 0) {
											if(this.uiDisplay.autoAddStyles) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var styleId = this.cursorStyle.getUUID();
												_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
												if(_this.stylePosBeforeFont == 0) {
													_this.addProgram(program,null,true);
												} else {
													_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
												}
												_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
												_this.stylePosBeforeFont++;
											} else {
												var c = js_Boot.getClass(this.cursorStyle);
												throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
											}
										} else {
											this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
											if(this.cursorProgram == null) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var stylePos1 = stylePos;
												_this.usedStyleProgram[stylePos1] = program;
												var afterProgram = null;
												while(stylePos1-- > 0) {
													afterProgram = _this.usedStyleProgram[stylePos1];
													if(afterProgram != null) {
														break;
													}
												}
												_this.addProgram(program,afterProgram,afterProgram == null);
											}
										}
										this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
										if(addUpdate) {
											this.cursorProgram.addElement(this.cursorElement);
										}
									} else {
										this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
										if(addUpdate) {
											this.cursorProgram.update(this.cursorElement);
										}
									}
								}
							}
						} else if(this.cursorWant > 0) {
							var pos = this.cursorWant;
							if(pos != this.cursor) {
								if(pos < 0) {
									this.cursor = 0;
								} else if(this.page != null && pos > this.pageLine.glyphes.length) {
									this.cursor = this.pageLine.glyphes.length;
								} else {
									this.cursor = pos;
								}
								if(this.page != null && this.cursorStyle != null) {
									var addUpdate = this.isVisible && this.cursorIsVisible;
									var create = this.cursorElement == null;
									var _x = this.x + this.leftSpace;
									var _y = this.y + this.topSpace;
									var _width = this.width - this.leftSpace - this.rightSpace;
									var _height = this.height - this.topSpace - this.bottomSpace;
									if(this.masked) {
										if(this.maskX > this.leftSpace) {
											_x = this.x + this.maskX;
										}
										if(this.maskY > this.topSpace) {
											_y = this.y + this.maskY;
										}
										if(this.x + this.maskX + this.maskWidth < _x + _width) {
											_width = this.maskX + this.maskWidth + this.x - _x;
										}
										if(this.y + this.maskY + this.maskHeight < _y + _height) {
											_height = this.maskY + this.maskHeight + this.y - _y;
										}
									}
									var _width1 = _width;
									var _yOffset = this.yOffset;
									var y_offset;
									if((this.autoSize & 1) > 0) {
										y_offset = _yOffset;
									} else {
										switch(this.vAlign) {
										case 4:
											y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
											break;
										case 8:
											y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
											break;
										default:
											y_offset = _yOffset;
										}
									}
									var y_offset1 = y_offset + this.topSpace;
									_width1 += 3;
									var page = this.page;
									var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
									var cw = 2;
									var cy = Math.round(this.pageLine.y);
									var ch = Math.round(this.pageLine.height);
									var mx = 0;
									var my = 0;
									var mw = cw;
									var mh = ch;
									if(cx < _x) {
										mw -= _x - cx;
										mx = _x - cx;
										if(mw > _width1) {
											mw = _width1;
										}
									} else if(cx + cw > _x + _width1) {
										mw = _x + _width1 - cx;
									}
									if(mw < 0) {
										mw = 0;
									}
									if(cy < _y) {
										mh -= _y - cy;
										my = _y - cy;
										if(mh > _height) {
											mh = _height;
										}
									} else if(cy + ch > _y + _height) {
										mh = _y + _height - cy;
									}
									if(mh < 0) {
										mh = 0;
									}
									if(create) {
										var z = this.z;
										var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
										if(stylePos < 0) {
											if(this.uiDisplay.autoAddStyles) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var styleId = this.cursorStyle.getUUID();
												_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
												if(_this.stylePosBeforeFont == 0) {
													_this.addProgram(program,null,true);
												} else {
													_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
												}
												_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
												_this.stylePosBeforeFont++;
											} else {
												var c = js_Boot.getClass(this.cursorStyle);
												throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
											}
										} else {
											this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
											if(this.cursorProgram == null) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var stylePos1 = stylePos;
												_this.usedStyleProgram[stylePos1] = program;
												var afterProgram = null;
												while(stylePos1-- > 0) {
													afterProgram = _this.usedStyleProgram[stylePos1];
													if(afterProgram != null) {
														break;
													}
												}
												_this.addProgram(program,afterProgram,afterProgram == null);
											}
										}
										this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
										if(addUpdate) {
											this.cursorProgram.addElement(this.cursorElement);
										}
									} else {
										this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
										if(addUpdate) {
											this.cursorProgram.update(this.cursorElement);
										}
									}
								}
							}
						}
						if(this.cursorStyle != null) {
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var create = this.cursorElement == null;
							var _x = this.x + this.leftSpace;
							var _y = this.y + this.topSpace;
							var _width = this.width - this.leftSpace - this.rightSpace;
							var _height = this.height - this.topSpace - this.bottomSpace;
							if(this.masked) {
								if(this.maskX > this.leftSpace) {
									_x = this.x + this.maskX;
								}
								if(this.maskY > this.topSpace) {
									_y = this.y + this.maskY;
								}
								if(this.x + this.maskX + this.maskWidth < _x + _width) {
									_width = this.maskX + this.maskWidth + this.x - _x;
								}
								if(this.y + this.maskY + this.maskHeight < _y + _height) {
									_height = this.maskY + this.maskHeight + this.y - _y;
								}
							}
							var _width1 = _width;
							var _yOffset = this.yOffset;
							var y_offset;
							if((this.autoSize & 1) > 0) {
								y_offset = _yOffset;
							} else {
								switch(this.vAlign) {
								case 4:
									y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
									break;
								case 8:
									y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
									break;
								default:
									y_offset = _yOffset;
								}
							}
							var y_offset1 = y_offset + this.topSpace;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(create) {
								var z = this.z;
								var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
								if(stylePos < 0) {
									if(this.uiDisplay.autoAddStyles) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var styleId = this.cursorStyle.getUUID();
										_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
										if(_this.stylePosBeforeFont == 0) {
											_this.addProgram(program,null,true);
										} else {
											_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
										}
										_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
										_this.stylePosBeforeFont++;
									} else {
										var c = js_Boot.getClass(this.cursorStyle);
										throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
									}
								} else {
									this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
									if(this.cursorProgram == null) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var stylePos1 = stylePos;
										_this.usedStyleProgram[stylePos1] = program;
										var afterProgram = null;
										while(stylePos1-- > 0) {
											afterProgram = _this.usedStyleProgram[stylePos1];
											if(afterProgram != null) {
												break;
											}
										}
										_this.addProgram(program,afterProgram,afterProgram == null);
									}
								}
								this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
								if(addUpdate) {
									this.cursorProgram.addElement(this.cursorElement);
								}
							} else {
								this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
								if(addUpdate) {
									this.cursorProgram.update(this.cursorElement);
								}
							}
						}
					}
				}
				var pos = this.pageLine.glyphes.length;
				if(pos != this.cursor) {
					if(pos < 0) {
						this.cursor = 0;
					} else if(this.page != null && pos > this.pageLine.glyphes.length) {
						this.cursor = this.pageLine.glyphes.length;
					} else {
						this.cursor = pos;
					}
					if(this.page != null && this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
				this.cursorWant = -1;
				this.fontProgram.pageRemoveLinefeed(this.page,this.pageLine,this.cursorLine,this.isVisible);
				if(this.pageLine.glyphes.length == 0) {
					this.pageLine = this.page.pageLines[this.cursorLine];
				}
				if(this.cursorLine < this.selectLineFrom) {
					this.selectLineFrom--;
				}
				if(this.cursorLine < this.selectLineTo) {
					this.selectLineTo--;
				}
				if((this.autoSize & 2) > 0 && (this.autoSize & 1) > 0) {
					var updateBgMaskSelCursor = true;
					var pageUpdatePosition = false;
					var pageUpdateSize = true;
					var pageUpdateXOffset = false;
					var pageUpdateYOffset = false;
					if(pageUpdateYOffset == null) {
						pageUpdateYOffset = true;
					}
					if(pageUpdateXOffset == null) {
						pageUpdateXOffset = true;
					}
					if(pageUpdateSize == null) {
						pageUpdateSize = true;
					}
					if(pageUpdatePosition == null) {
						pageUpdatePosition = true;
					}
					if(updateBgMaskSelCursor == null) {
						updateBgMaskSelCursor = true;
					}
					if(this.autoSize > 0) {
						if((this.autoSize & 2) > 0) {
							var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
							if(w != this.width) {
								if(this.resizeWidth != null) {
									var oldWidth = this.width;
									this.resizeWidth(this.width = w,w - oldWidth);
								} else {
									this.width = w;
								}
							}
						}
						if((this.autoSize & 1) > 0) {
							var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
							if(h != this.height) {
								if(this.resizeHeight != null) {
									var oldHeight = this.height;
									this.resizeHeight(this.height = h,h - oldHeight);
								} else {
									this.height = h;
								}
							}
						}
						if(this.hasMoveEvent != 0) {
							var _this = this.pickableMove;
							_this.uiElement = this;
							_this.z = this.z;
							if(this.masked) {
								_this.x = this.x + this.maskX;
								_this.y = this.y + this.maskY;
								_this.w = this.maskWidth;
								_this.h = this.maskHeight;
							} else {
								_this.x = this.x;
								_this.y = this.y;
								_this.w = this.width;
								_this.h = this.height;
							}
							if(this.isVisible) {
								this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
							}
						}
						if(this.hasClickEvent != 0) {
							var _this = this.pickableClick;
							_this.uiElement = this;
							_this.z = this.z;
							if(this.masked) {
								_this.x = this.x + this.maskX;
								_this.y = this.y + this.maskY;
								_this.w = this.maskWidth;
								_this.h = this.maskHeight;
							} else {
								_this.x = this.x;
								_this.y = this.y;
								_this.w = this.width;
								_this.h = this.height;
							}
							if(this.isVisible) {
								this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
							}
						}
					}
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					if(pageUpdatePosition && pageUpdateSize) {
						var tmp;
						if(pageUpdateXOffset) {
							var _xOffset = this.xOffset;
							if((this.autoSize & 2) > 0) {
								tmp = _xOffset;
							} else {
								switch(this.hAlign) {
								case 1:
									tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
									break;
								case 2:
									tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
									break;
								default:
									tmp = _xOffset;
								}
							}
						} else {
							tmp = null;
						}
						this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
					} else if(pageUpdatePosition) {
						var tmp;
						if(pageUpdateXOffset) {
							var _xOffset = this.xOffset;
							if((this.autoSize & 2) > 0) {
								tmp = _xOffset;
							} else {
								switch(this.hAlign) {
								case 1:
									tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
									break;
								case 2:
									tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
									break;
								default:
									tmp = _xOffset;
								}
							}
						} else {
							tmp = null;
						}
						this.fontProgram.pageSetPosition(this.page,_x,_y,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
					} else if(pageUpdateSize) {
						var tmp;
						if(pageUpdateXOffset) {
							var _xOffset = this.xOffset;
							if((this.autoSize & 2) > 0) {
								tmp = _xOffset;
							} else {
								switch(this.hAlign) {
								case 1:
									tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
									break;
								case 2:
									tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
									break;
								default:
									tmp = _xOffset;
								}
							}
						} else {
							tmp = null;
						}
						this.fontProgram.pageSetSize(this.page,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
					} else {
						var tmp;
						if(pageUpdateXOffset) {
							var _xOffset = this.xOffset;
							if((this.autoSize & 2) > 0) {
								tmp = _xOffset;
							} else {
								switch(this.hAlign) {
								case 1:
									tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
									break;
								case 2:
									tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
									break;
								default:
									tmp = _xOffset;
								}
							}
						} else {
							tmp = null;
						}
						this.fontProgram.pageSetOffset(this.page,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
					}
					if(this.isVisible) {
						this.fontProgram.pageUpdate(this.page);
					}
					if(updateBgMaskSelCursor) {
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var maskElement = this.maskElement;
						var autoUpdate = this.isVisible;
						if(autoUpdate == null) {
							autoUpdate = true;
						}
						maskElement.x = _x;
						maskElement.y = _y;
						maskElement.w = _width;
						maskElement.h = _height;
						if(autoUpdate) {
							this.fontProgram.maskBuffer.updateElement(maskElement);
						}
						if(this.backgroundElement != null) {
							this.backgroundElement.setLayout(this);
							if(this.isVisible && this.backgroundIsVisible) {
								this.backgroundProgram.update(this.backgroundElement);
							}
						}
						if(this.selectionElementArray != null) {
							var y_offset1 = y_offset + this.topSpace;
							var addUpdate = this.isVisible && this.selectionIsVisible;
							var selectX;
							var selectWidth;
							var selectY;
							var selectHeight;
							var mx;
							var my;
							var mw;
							var mh;
							var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
							var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
							var _selectFrom = this.selectFrom;
							var _selectTo = this.selectTo;
							if(from >= this.page.pageLines.length) {
								haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
							}
							if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
								_selectFrom = 0;
								++from;
							}
							if(_selectTo == 0 && to > from + 1) {
								if(to - 1 >= this.page.pageLines.length) {
									haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
								}
								--to;
								_selectTo = this.page.pageLines[to - 1].glyphes.length;
							}
							var _pageLine;
							var selectionElement;
							if(addUpdate) {
								var fromOld = to - from;
								if(fromOld < 0) {
									fromOld = 0;
								}
								var _g = fromOld;
								var _g1 = this.selectionElementMax;
								while(_g < _g1) {
									var i = _g++;
									this.selectionProgram.removeElement(this.selectionElementArray[i]);
								}
							}
							var selectionElementMaxOld = this.selectionElementMax;
							this.selectionElementMax = 0;
							var _g = from;
							var _g1 = to;
							while(_g < _g1) {
								var i = _g++;
								_pageLine = this.page.pageLines[i];
								if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
									var page = this.page;
									selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
									var page1 = this.page;
									selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
								} else if(i == this.selectLineFrom) {
									var page2 = this.page;
									selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
									selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
								} else if(i == this.selectLineTo - 1) {
									selectX = Math.round(this.page.x + this.page.xOffset);
									var page3 = this.page;
									selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
								} else {
									selectX = Math.round(this.page.x + this.page.xOffset);
									selectWidth = Math.round(_pageLine.textSize);
								}
								selectY = Math.round(_pageLine.y);
								selectHeight = Math.round(_pageLine.height);
								mx = 0;
								my = 0;
								mw = selectWidth;
								mh = selectHeight;
								if(selectX < _x) {
									mw -= _x - selectX;
									mx = _x - selectX;
									if(mw > _width) {
										mw = _width;
									}
								} else if(selectX + selectWidth > _x + _width) {
									mw = _x + _width - selectX;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(selectY < _y) {
									mh -= _y - selectY;
									my = _y - selectY;
									if(mh > _height) {
										mh = _height;
									}
								} else if(selectY + selectHeight > _y + _height) {
									mh = _y + _height - selectY;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(this.selectionElementMax >= this.selectionElementArray.length) {
									selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
									if(addUpdate) {
										this.selectionProgram.addElement(selectionElement);
									}
									this.selectionElementArray.push(selectionElement);
								} else {
									selectionElement = this.selectionElementArray[this.selectionElementMax];
									selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
									if(this.selectionElementMax >= selectionElementMaxOld) {
										selectionElement.setStyle(this.selectionStyle);
										if(addUpdate) {
											this.selectionProgram.addElement(selectionElement);
										}
									} else if(addUpdate) {
										this.selectionProgram.update(selectionElement);
									}
								}
								this.selectionElementMax++;
							}
						}
						if(this.cursorElement != null) {
							var y_offset1 = y_offset + this.topSpace;
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var _width1 = _width;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				} else if((this.autoSize & 2) <= 0 && (this.autoSize & 1) <= 0 && this.hAlign == 0 && this.vAlign == 0 && this.isVisible) {
					this.fontProgram.pageUpdate(this.page);
				} else {
					var updateBgMaskSelCursor = (this.autoSize & 2) > 0 || (this.autoSize & 1) > 0;
					var pageUpdatePosition = false;
					var pageUpdateSize = (this.autoSize & 2) > 0 || (this.autoSize & 1) > 0;
					var pageUpdateXOffset = (this.autoSize & 2) <= 0;
					var pageUpdateYOffset = (this.autoSize & 1) <= 0;
					if(pageUpdateYOffset == null) {
						pageUpdateYOffset = true;
					}
					if(pageUpdateXOffset == null) {
						pageUpdateXOffset = true;
					}
					if(pageUpdateSize == null) {
						pageUpdateSize = true;
					}
					if(pageUpdatePosition == null) {
						pageUpdatePosition = true;
					}
					if(updateBgMaskSelCursor == null) {
						updateBgMaskSelCursor = true;
					}
					if(this.autoSize > 0) {
						if((this.autoSize & 2) > 0) {
							var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
							if(w != this.width) {
								if(this.resizeWidth != null) {
									var oldWidth = this.width;
									this.resizeWidth(this.width = w,w - oldWidth);
								} else {
									this.width = w;
								}
							}
						}
						if((this.autoSize & 1) > 0) {
							var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
							if(h != this.height) {
								if(this.resizeHeight != null) {
									var oldHeight = this.height;
									this.resizeHeight(this.height = h,h - oldHeight);
								} else {
									this.height = h;
								}
							}
						}
						if(this.hasMoveEvent != 0) {
							var _this = this.pickableMove;
							_this.uiElement = this;
							_this.z = this.z;
							if(this.masked) {
								_this.x = this.x + this.maskX;
								_this.y = this.y + this.maskY;
								_this.w = this.maskWidth;
								_this.h = this.maskHeight;
							} else {
								_this.x = this.x;
								_this.y = this.y;
								_this.w = this.width;
								_this.h = this.height;
							}
							if(this.isVisible) {
								this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
							}
						}
						if(this.hasClickEvent != 0) {
							var _this = this.pickableClick;
							_this.uiElement = this;
							_this.z = this.z;
							if(this.masked) {
								_this.x = this.x + this.maskX;
								_this.y = this.y + this.maskY;
								_this.w = this.maskWidth;
								_this.h = this.maskHeight;
							} else {
								_this.x = this.x;
								_this.y = this.y;
								_this.w = this.width;
								_this.h = this.height;
							}
							if(this.isVisible) {
								this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
							}
						}
					}
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					if(pageUpdatePosition && pageUpdateSize) {
						var tmp;
						if(pageUpdateXOffset) {
							var _xOffset = this.xOffset;
							if((this.autoSize & 2) > 0) {
								tmp = _xOffset;
							} else {
								switch(this.hAlign) {
								case 1:
									tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
									break;
								case 2:
									tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
									break;
								default:
									tmp = _xOffset;
								}
							}
						} else {
							tmp = null;
						}
						this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
					} else if(pageUpdatePosition) {
						var tmp;
						if(pageUpdateXOffset) {
							var _xOffset = this.xOffset;
							if((this.autoSize & 2) > 0) {
								tmp = _xOffset;
							} else {
								switch(this.hAlign) {
								case 1:
									tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
									break;
								case 2:
									tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
									break;
								default:
									tmp = _xOffset;
								}
							}
						} else {
							tmp = null;
						}
						this.fontProgram.pageSetPosition(this.page,_x,_y,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
					} else if(pageUpdateSize) {
						var tmp;
						if(pageUpdateXOffset) {
							var _xOffset = this.xOffset;
							if((this.autoSize & 2) > 0) {
								tmp = _xOffset;
							} else {
								switch(this.hAlign) {
								case 1:
									tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
									break;
								case 2:
									tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
									break;
								default:
									tmp = _xOffset;
								}
							}
						} else {
							tmp = null;
						}
						this.fontProgram.pageSetSize(this.page,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
					} else {
						var tmp;
						if(pageUpdateXOffset) {
							var _xOffset = this.xOffset;
							if((this.autoSize & 2) > 0) {
								tmp = _xOffset;
							} else {
								switch(this.hAlign) {
								case 1:
									tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
									break;
								case 2:
									tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
									break;
								default:
									tmp = _xOffset;
								}
							}
						} else {
							tmp = null;
						}
						this.fontProgram.pageSetOffset(this.page,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
					}
					if(this.isVisible) {
						this.fontProgram.pageUpdate(this.page);
					}
					if(updateBgMaskSelCursor) {
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var maskElement = this.maskElement;
						var autoUpdate = this.isVisible;
						if(autoUpdate == null) {
							autoUpdate = true;
						}
						maskElement.x = _x;
						maskElement.y = _y;
						maskElement.w = _width;
						maskElement.h = _height;
						if(autoUpdate) {
							this.fontProgram.maskBuffer.updateElement(maskElement);
						}
						if(this.backgroundElement != null) {
							this.backgroundElement.setLayout(this);
							if(this.isVisible && this.backgroundIsVisible) {
								this.backgroundProgram.update(this.backgroundElement);
							}
						}
						if(this.selectionElementArray != null) {
							var y_offset1 = y_offset + this.topSpace;
							var addUpdate = this.isVisible && this.selectionIsVisible;
							var selectX;
							var selectWidth;
							var selectY;
							var selectHeight;
							var mx;
							var my;
							var mw;
							var mh;
							var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
							var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
							var _selectFrom = this.selectFrom;
							var _selectTo = this.selectTo;
							if(from >= this.page.pageLines.length) {
								haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
							}
							if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
								_selectFrom = 0;
								++from;
							}
							if(_selectTo == 0 && to > from + 1) {
								if(to - 1 >= this.page.pageLines.length) {
									haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
								}
								--to;
								_selectTo = this.page.pageLines[to - 1].glyphes.length;
							}
							var _pageLine;
							var selectionElement;
							if(addUpdate) {
								var fromOld = to - from;
								if(fromOld < 0) {
									fromOld = 0;
								}
								var _g = fromOld;
								var _g1 = this.selectionElementMax;
								while(_g < _g1) {
									var i = _g++;
									this.selectionProgram.removeElement(this.selectionElementArray[i]);
								}
							}
							var selectionElementMaxOld = this.selectionElementMax;
							this.selectionElementMax = 0;
							var _g = from;
							var _g1 = to;
							while(_g < _g1) {
								var i = _g++;
								_pageLine = this.page.pageLines[i];
								if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
									var page = this.page;
									selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
									var page1 = this.page;
									selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
								} else if(i == this.selectLineFrom) {
									var page2 = this.page;
									selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
									selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
								} else if(i == this.selectLineTo - 1) {
									selectX = Math.round(this.page.x + this.page.xOffset);
									var page3 = this.page;
									selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
								} else {
									selectX = Math.round(this.page.x + this.page.xOffset);
									selectWidth = Math.round(_pageLine.textSize);
								}
								selectY = Math.round(_pageLine.y);
								selectHeight = Math.round(_pageLine.height);
								mx = 0;
								my = 0;
								mw = selectWidth;
								mh = selectHeight;
								if(selectX < _x) {
									mw -= _x - selectX;
									mx = _x - selectX;
									if(mw > _width) {
										mw = _width;
									}
								} else if(selectX + selectWidth > _x + _width) {
									mw = _x + _width - selectX;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(selectY < _y) {
									mh -= _y - selectY;
									my = _y - selectY;
									if(mh > _height) {
										mh = _height;
									}
								} else if(selectY + selectHeight > _y + _height) {
									mh = _y + _height - selectY;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(this.selectionElementMax >= this.selectionElementArray.length) {
									selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
									if(addUpdate) {
										this.selectionProgram.addElement(selectionElement);
									}
									this.selectionElementArray.push(selectionElement);
								} else {
									selectionElement = this.selectionElementArray[this.selectionElementMax];
									selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
									if(this.selectionElementMax >= selectionElementMaxOld) {
										selectionElement.setStyle(this.selectionStyle);
										if(addUpdate) {
											this.selectionProgram.addElement(selectionElement);
										}
									} else if(addUpdate) {
										this.selectionProgram.update(selectionElement);
									}
								}
								this.selectionElementMax++;
							}
						}
						if(this.cursorElement != null) {
							var y_offset1 = y_offset + this.topSpace;
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var _width1 = _width;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
		} else {
			var pos = this.cursor - 1;
			if(pos != this.cursor) {
				if(pos < 0) {
					this.cursor = 0;
				} else if(this.page != null && pos > this.pageLine.glyphes.length) {
					this.cursor = this.pageLine.glyphes.length;
				} else {
					this.cursor = pos;
				}
				if(this.page != null && this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var page = this.page;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.pageLine.y);
					var ch = Math.round(this.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
			this.cursorWant = -1;
			this.fontProgram.pageDeleteChar(this.page,this.pageLine,this.cursorLine,this.cursor,this.isVisible);
			if((this.autoSize & 2) > 0 && (this.autoSize & 1) > 0) {
				var updateBgMaskSelCursor = true;
				var pageUpdatePosition = false;
				var pageUpdateSize = true;
				var pageUpdateXOffset = false;
				var pageUpdateYOffset = false;
				if(pageUpdateYOffset == null) {
					pageUpdateYOffset = true;
				}
				if(pageUpdateXOffset == null) {
					pageUpdateXOffset = true;
				}
				if(pageUpdateSize == null) {
					pageUpdateSize = true;
				}
				if(pageUpdatePosition == null) {
					pageUpdatePosition = true;
				}
				if(updateBgMaskSelCursor == null) {
					updateBgMaskSelCursor = true;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var _yOffset = this.yOffset;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = _yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
						break;
					default:
						y_offset = _yOffset;
					}
				}
				if(pageUpdatePosition && pageUpdateSize) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else if(pageUpdatePosition) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetPosition(this.page,_x,_y,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else if(pageUpdateSize) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetSize(this.page,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetOffset(this.page,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				}
				if(this.isVisible) {
					this.fontProgram.pageUpdate(this.page);
				}
				if(updateBgMaskSelCursor) {
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var maskElement = this.maskElement;
					var autoUpdate = this.isVisible;
					if(autoUpdate == null) {
						autoUpdate = true;
					}
					maskElement.x = _x;
					maskElement.y = _y;
					maskElement.w = _width;
					maskElement.h = _height;
					if(autoUpdate) {
						this.fontProgram.maskBuffer.updateElement(maskElement);
					}
					if(this.backgroundElement != null) {
						this.backgroundElement.setLayout(this);
						if(this.isVisible && this.backgroundIsVisible) {
							this.backgroundProgram.update(this.backgroundElement);
						}
					}
					if(this.selectionElementArray != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.selectionIsVisible;
						var selectX;
						var selectWidth;
						var selectY;
						var selectHeight;
						var mx;
						var my;
						var mw;
						var mh;
						var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
						var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
						var _selectFrom = this.selectFrom;
						var _selectTo = this.selectTo;
						if(from >= this.page.pageLines.length) {
							haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
						}
						if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
							_selectFrom = 0;
							++from;
						}
						if(_selectTo == 0 && to > from + 1) {
							if(to - 1 >= this.page.pageLines.length) {
								haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
							}
							--to;
							_selectTo = this.page.pageLines[to - 1].glyphes.length;
						}
						var _pageLine;
						var selectionElement;
						if(addUpdate) {
							var fromOld = to - from;
							if(fromOld < 0) {
								fromOld = 0;
							}
							var _g = fromOld;
							var _g1 = this.selectionElementMax;
							while(_g < _g1) {
								var i = _g++;
								this.selectionProgram.removeElement(this.selectionElementArray[i]);
							}
						}
						var selectionElementMaxOld = this.selectionElementMax;
						this.selectionElementMax = 0;
						var _g = from;
						var _g1 = to;
						while(_g < _g1) {
							var i = _g++;
							_pageLine = this.page.pageLines[i];
							if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
								var page = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
								var page1 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
							} else if(i == this.selectLineFrom) {
								var page2 = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
								selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
							} else if(i == this.selectLineTo - 1) {
								selectX = Math.round(this.page.x + this.page.xOffset);
								var page3 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
							} else {
								selectX = Math.round(this.page.x + this.page.xOffset);
								selectWidth = Math.round(_pageLine.textSize);
							}
							selectY = Math.round(_pageLine.y);
							selectHeight = Math.round(_pageLine.height);
							mx = 0;
							my = 0;
							mw = selectWidth;
							mh = selectHeight;
							if(selectX < _x) {
								mw -= _x - selectX;
								mx = _x - selectX;
								if(mw > _width) {
									mw = _width;
								}
							} else if(selectX + selectWidth > _x + _width) {
								mw = _x + _width - selectX;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(selectY < _y) {
								mh -= _y - selectY;
								my = _y - selectY;
								if(mh > _height) {
									mh = _height;
								}
							} else if(selectY + selectHeight > _y + _height) {
								mh = _y + _height - selectY;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(this.selectionElementMax >= this.selectionElementArray.length) {
								selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
								if(addUpdate) {
									this.selectionProgram.addElement(selectionElement);
								}
								this.selectionElementArray.push(selectionElement);
							} else {
								selectionElement = this.selectionElementArray[this.selectionElementMax];
								selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
								if(this.selectionElementMax >= selectionElementMaxOld) {
									selectionElement.setStyle(this.selectionStyle);
									if(addUpdate) {
										this.selectionProgram.addElement(selectionElement);
									}
								} else if(addUpdate) {
									this.selectionProgram.update(selectionElement);
								}
							}
							this.selectionElementMax++;
						}
					}
					if(this.cursorElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var _width1 = _width;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			} else if((this.autoSize & 2) <= 0 && (this.autoSize & 1) <= 0 && this.hAlign == 0 && this.vAlign == 0 && this.isVisible) {
				this.fontProgram.pageUpdate(this.page);
			} else {
				var updateBgMaskSelCursor = (this.autoSize & 2) > 0 || (this.autoSize & 1) > 0;
				var pageUpdatePosition = false;
				var pageUpdateSize = (this.autoSize & 2) > 0 || (this.autoSize & 1) > 0;
				var pageUpdateXOffset = (this.autoSize & 2) <= 0;
				var pageUpdateYOffset = (this.autoSize & 1) <= 0;
				if(pageUpdateYOffset == null) {
					pageUpdateYOffset = true;
				}
				if(pageUpdateXOffset == null) {
					pageUpdateXOffset = true;
				}
				if(pageUpdateSize == null) {
					pageUpdateSize = true;
				}
				if(pageUpdatePosition == null) {
					pageUpdatePosition = true;
				}
				if(updateBgMaskSelCursor == null) {
					updateBgMaskSelCursor = true;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var _yOffset = this.yOffset;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = _yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
						break;
					default:
						y_offset = _yOffset;
					}
				}
				if(pageUpdatePosition && pageUpdateSize) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else if(pageUpdatePosition) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetPosition(this.page,_x,_y,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else if(pageUpdateSize) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetSize(this.page,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetOffset(this.page,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				}
				if(this.isVisible) {
					this.fontProgram.pageUpdate(this.page);
				}
				if(updateBgMaskSelCursor) {
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var maskElement = this.maskElement;
					var autoUpdate = this.isVisible;
					if(autoUpdate == null) {
						autoUpdate = true;
					}
					maskElement.x = _x;
					maskElement.y = _y;
					maskElement.w = _width;
					maskElement.h = _height;
					if(autoUpdate) {
						this.fontProgram.maskBuffer.updateElement(maskElement);
					}
					if(this.backgroundElement != null) {
						this.backgroundElement.setLayout(this);
						if(this.isVisible && this.backgroundIsVisible) {
							this.backgroundProgram.update(this.backgroundElement);
						}
					}
					if(this.selectionElementArray != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.selectionIsVisible;
						var selectX;
						var selectWidth;
						var selectY;
						var selectHeight;
						var mx;
						var my;
						var mw;
						var mh;
						var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
						var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
						var _selectFrom = this.selectFrom;
						var _selectTo = this.selectTo;
						if(from >= this.page.pageLines.length) {
							haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
						}
						if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
							_selectFrom = 0;
							++from;
						}
						if(_selectTo == 0 && to > from + 1) {
							if(to - 1 >= this.page.pageLines.length) {
								haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
							}
							--to;
							_selectTo = this.page.pageLines[to - 1].glyphes.length;
						}
						var _pageLine;
						var selectionElement;
						if(addUpdate) {
							var fromOld = to - from;
							if(fromOld < 0) {
								fromOld = 0;
							}
							var _g = fromOld;
							var _g1 = this.selectionElementMax;
							while(_g < _g1) {
								var i = _g++;
								this.selectionProgram.removeElement(this.selectionElementArray[i]);
							}
						}
						var selectionElementMaxOld = this.selectionElementMax;
						this.selectionElementMax = 0;
						var _g = from;
						var _g1 = to;
						while(_g < _g1) {
							var i = _g++;
							_pageLine = this.page.pageLines[i];
							if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
								var page = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
								var page1 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
							} else if(i == this.selectLineFrom) {
								var page2 = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
								selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
							} else if(i == this.selectLineTo - 1) {
								selectX = Math.round(this.page.x + this.page.xOffset);
								var page3 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
							} else {
								selectX = Math.round(this.page.x + this.page.xOffset);
								selectWidth = Math.round(_pageLine.textSize);
							}
							selectY = Math.round(_pageLine.y);
							selectHeight = Math.round(_pageLine.height);
							mx = 0;
							my = 0;
							mw = selectWidth;
							mh = selectHeight;
							if(selectX < _x) {
								mw -= _x - selectX;
								mx = _x - selectX;
								if(mw > _width) {
									mw = _width;
								}
							} else if(selectX + selectWidth > _x + _width) {
								mw = _x + _width - selectX;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(selectY < _y) {
								mh -= _y - selectY;
								my = _y - selectY;
								if(mh > _height) {
									mh = _height;
								}
							} else if(selectY + selectHeight > _y + _height) {
								mh = _y + _height - selectY;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(this.selectionElementMax >= this.selectionElementArray.length) {
								selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
								if(addUpdate) {
									this.selectionProgram.addElement(selectionElement);
								}
								this.selectionElementArray.push(selectionElement);
							} else {
								selectionElement = this.selectionElementArray[this.selectionElementMax];
								selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
								if(this.selectionElementMax >= selectionElementMaxOld) {
									selectionElement.setStyle(this.selectionStyle);
									if(addUpdate) {
										this.selectionProgram.addElement(selectionElement);
									}
								} else if(addUpdate) {
									this.selectionProgram.update(selectionElement);
								}
							}
							this.selectionElementMax++;
						}
					}
					if(this.cursorElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var _width1 = _width;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
		}
	}
	,tabulator: function() {
		if(this.page != null) {
			if(this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo) {
				this.fontProgram.pageDeleteChars(this.page,this.selectLineFrom,this.selectLineTo,this.selectFrom,this.selectTo,this.isVisible);
				var pos = this.selectLineFrom;
				if(pos != this.cursorLine) {
					if(pos < 0) {
						this.cursorLine = 0;
					} else if(this.page != null && pos >= this.page.pageLines.length) {
						this.cursorLine = this.page.pageLines.length - 1;
					} else {
						this.cursorLine = pos;
					}
					if(this.page != null) {
						this.pageLine = this.page.pageLines[this.cursorLine];
						if(this.cursor > this.pageLine.glyphes.length) {
							if(this.cursorWant == -1) {
								this.cursorWant = this.cursor;
							}
							var pos = this.pageLine.glyphes.length;
							if(pos != this.cursor) {
								if(pos < 0) {
									this.cursor = 0;
								} else if(this.page != null && pos > this.pageLine.glyphes.length) {
									this.cursor = this.pageLine.glyphes.length;
								} else {
									this.cursor = pos;
								}
								if(this.page != null && this.cursorStyle != null) {
									var addUpdate = this.isVisible && this.cursorIsVisible;
									var create = this.cursorElement == null;
									var _x = this.x + this.leftSpace;
									var _y = this.y + this.topSpace;
									var _width = this.width - this.leftSpace - this.rightSpace;
									var _height = this.height - this.topSpace - this.bottomSpace;
									if(this.masked) {
										if(this.maskX > this.leftSpace) {
											_x = this.x + this.maskX;
										}
										if(this.maskY > this.topSpace) {
											_y = this.y + this.maskY;
										}
										if(this.x + this.maskX + this.maskWidth < _x + _width) {
											_width = this.maskX + this.maskWidth + this.x - _x;
										}
										if(this.y + this.maskY + this.maskHeight < _y + _height) {
											_height = this.maskY + this.maskHeight + this.y - _y;
										}
									}
									var _width1 = _width;
									var _yOffset = this.yOffset;
									var y_offset;
									if((this.autoSize & 1) > 0) {
										y_offset = _yOffset;
									} else {
										switch(this.vAlign) {
										case 4:
											y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
											break;
										case 8:
											y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
											break;
										default:
											y_offset = _yOffset;
										}
									}
									var y_offset1 = y_offset + this.topSpace;
									_width1 += 3;
									var page = this.page;
									var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
									var cw = 2;
									var cy = Math.round(this.pageLine.y);
									var ch = Math.round(this.pageLine.height);
									var mx = 0;
									var my = 0;
									var mw = cw;
									var mh = ch;
									if(cx < _x) {
										mw -= _x - cx;
										mx = _x - cx;
										if(mw > _width1) {
											mw = _width1;
										}
									} else if(cx + cw > _x + _width1) {
										mw = _x + _width1 - cx;
									}
									if(mw < 0) {
										mw = 0;
									}
									if(cy < _y) {
										mh -= _y - cy;
										my = _y - cy;
										if(mh > _height) {
											mh = _height;
										}
									} else if(cy + ch > _y + _height) {
										mh = _y + _height - cy;
									}
									if(mh < 0) {
										mh = 0;
									}
									if(create) {
										var z = this.z;
										var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
										if(stylePos < 0) {
											if(this.uiDisplay.autoAddStyles) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var styleId = this.cursorStyle.getUUID();
												_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
												if(_this.stylePosBeforeFont == 0) {
													_this.addProgram(program,null,true);
												} else {
													_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
												}
												_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
												_this.stylePosBeforeFont++;
											} else {
												var c = js_Boot.getClass(this.cursorStyle);
												throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
											}
										} else {
											this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
											if(this.cursorProgram == null) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var stylePos1 = stylePos;
												_this.usedStyleProgram[stylePos1] = program;
												var afterProgram = null;
												while(stylePos1-- > 0) {
													afterProgram = _this.usedStyleProgram[stylePos1];
													if(afterProgram != null) {
														break;
													}
												}
												_this.addProgram(program,afterProgram,afterProgram == null);
											}
										}
										this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
										if(addUpdate) {
											this.cursorProgram.addElement(this.cursorElement);
										}
									} else {
										this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
										if(addUpdate) {
											this.cursorProgram.update(this.cursorElement);
										}
									}
								}
							}
						} else if(this.cursorWant > 0) {
							var pos = this.cursorWant;
							if(pos != this.cursor) {
								if(pos < 0) {
									this.cursor = 0;
								} else if(this.page != null && pos > this.pageLine.glyphes.length) {
									this.cursor = this.pageLine.glyphes.length;
								} else {
									this.cursor = pos;
								}
								if(this.page != null && this.cursorStyle != null) {
									var addUpdate = this.isVisible && this.cursorIsVisible;
									var create = this.cursorElement == null;
									var _x = this.x + this.leftSpace;
									var _y = this.y + this.topSpace;
									var _width = this.width - this.leftSpace - this.rightSpace;
									var _height = this.height - this.topSpace - this.bottomSpace;
									if(this.masked) {
										if(this.maskX > this.leftSpace) {
											_x = this.x + this.maskX;
										}
										if(this.maskY > this.topSpace) {
											_y = this.y + this.maskY;
										}
										if(this.x + this.maskX + this.maskWidth < _x + _width) {
											_width = this.maskX + this.maskWidth + this.x - _x;
										}
										if(this.y + this.maskY + this.maskHeight < _y + _height) {
											_height = this.maskY + this.maskHeight + this.y - _y;
										}
									}
									var _width1 = _width;
									var _yOffset = this.yOffset;
									var y_offset;
									if((this.autoSize & 1) > 0) {
										y_offset = _yOffset;
									} else {
										switch(this.vAlign) {
										case 4:
											y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
											break;
										case 8:
											y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
											break;
										default:
											y_offset = _yOffset;
										}
									}
									var y_offset1 = y_offset + this.topSpace;
									_width1 += 3;
									var page = this.page;
									var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
									var cw = 2;
									var cy = Math.round(this.pageLine.y);
									var ch = Math.round(this.pageLine.height);
									var mx = 0;
									var my = 0;
									var mw = cw;
									var mh = ch;
									if(cx < _x) {
										mw -= _x - cx;
										mx = _x - cx;
										if(mw > _width1) {
											mw = _width1;
										}
									} else if(cx + cw > _x + _width1) {
										mw = _x + _width1 - cx;
									}
									if(mw < 0) {
										mw = 0;
									}
									if(cy < _y) {
										mh -= _y - cy;
										my = _y - cy;
										if(mh > _height) {
											mh = _height;
										}
									} else if(cy + ch > _y + _height) {
										mh = _y + _height - cy;
									}
									if(mh < 0) {
										mh = 0;
									}
									if(create) {
										var z = this.z;
										var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
										if(stylePos < 0) {
											if(this.uiDisplay.autoAddStyles) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var styleId = this.cursorStyle.getUUID();
												_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
												if(_this.stylePosBeforeFont == 0) {
													_this.addProgram(program,null,true);
												} else {
													_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
												}
												_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
												_this.stylePosBeforeFont++;
											} else {
												var c = js_Boot.getClass(this.cursorStyle);
												throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
											}
										} else {
											this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
											if(this.cursorProgram == null) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var stylePos1 = stylePos;
												_this.usedStyleProgram[stylePos1] = program;
												var afterProgram = null;
												while(stylePos1-- > 0) {
													afterProgram = _this.usedStyleProgram[stylePos1];
													if(afterProgram != null) {
														break;
													}
												}
												_this.addProgram(program,afterProgram,afterProgram == null);
											}
										}
										this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
										if(addUpdate) {
											this.cursorProgram.addElement(this.cursorElement);
										}
									} else {
										this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
										if(addUpdate) {
											this.cursorProgram.update(this.cursorElement);
										}
									}
								}
							}
						}
						if(this.cursorStyle != null) {
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var create = this.cursorElement == null;
							var _x = this.x + this.leftSpace;
							var _y = this.y + this.topSpace;
							var _width = this.width - this.leftSpace - this.rightSpace;
							var _height = this.height - this.topSpace - this.bottomSpace;
							if(this.masked) {
								if(this.maskX > this.leftSpace) {
									_x = this.x + this.maskX;
								}
								if(this.maskY > this.topSpace) {
									_y = this.y + this.maskY;
								}
								if(this.x + this.maskX + this.maskWidth < _x + _width) {
									_width = this.maskX + this.maskWidth + this.x - _x;
								}
								if(this.y + this.maskY + this.maskHeight < _y + _height) {
									_height = this.maskY + this.maskHeight + this.y - _y;
								}
							}
							var _width1 = _width;
							var _yOffset = this.yOffset;
							var y_offset;
							if((this.autoSize & 1) > 0) {
								y_offset = _yOffset;
							} else {
								switch(this.vAlign) {
								case 4:
									y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
									break;
								case 8:
									y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
									break;
								default:
									y_offset = _yOffset;
								}
							}
							var y_offset1 = y_offset + this.topSpace;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(create) {
								var z = this.z;
								var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
								if(stylePos < 0) {
									if(this.uiDisplay.autoAddStyles) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var styleId = this.cursorStyle.getUUID();
										_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
										if(_this.stylePosBeforeFont == 0) {
											_this.addProgram(program,null,true);
										} else {
											_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
										}
										_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
										_this.stylePosBeforeFont++;
									} else {
										var c = js_Boot.getClass(this.cursorStyle);
										throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
									}
								} else {
									this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
									if(this.cursorProgram == null) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var stylePos1 = stylePos;
										_this.usedStyleProgram[stylePos1] = program;
										var afterProgram = null;
										while(stylePos1-- > 0) {
											afterProgram = _this.usedStyleProgram[stylePos1];
											if(afterProgram != null) {
												break;
											}
										}
										_this.addProgram(program,afterProgram,afterProgram == null);
									}
								}
								this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
								if(addUpdate) {
									this.cursorProgram.addElement(this.cursorElement);
								}
							} else {
								this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
								if(addUpdate) {
									this.cursorProgram.update(this.cursorElement);
								}
							}
						}
					}
				}
				var pos = this.selectFrom;
				if(pos != this.cursor) {
					if(pos < 0) {
						this.cursor = 0;
					} else if(this.page != null && pos > this.pageLine.glyphes.length) {
						this.cursor = this.pageLine.glyphes.length;
					} else {
						this.cursor = pos;
					}
					if(this.page != null && this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
				this.selectLineFrom = this.selectLineTo = this.selectFrom = this.selectTo = 0;
				if(this.page != null && this.selectionStyle != null) {
					if(this.selectionIsVisible && this.selectionElementArray != null && this.isVisible) {
						var _g = 0;
						var _g1 = this.selectionElementMax;
						while(_g < _g1) {
							var i = _g++;
							this.selectionProgram.removeElement(this.selectionElementArray[i]);
						}
					}
				}
				this.selectionIsVisible = false;
			}
			if("\t".length == 1) {
				var lineNumber = this.cursorLine;
				var position = this.cursor;
				if(position == null) {
					position = 0;
				}
				if(lineNumber == null) {
					lineNumber = 0;
				}
				this.fontProgram.pageInsertChars(this.page,"\t",lineNumber,position,this.fontStyle,null,this.isVisible);
				var pos = this.cursor + 1;
				if(pos != this.cursor) {
					if(pos < 0) {
						this.cursor = 0;
					} else if(this.page != null && pos > this.pageLine.glyphes.length) {
						this.cursor = this.pageLine.glyphes.length;
					} else {
						this.cursor = pos;
					}
					if(this.page != null && this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			} else {
				var restCharLength = this.pageLine.glyphes.length - this.cursor;
				var oldPageLength = this.page.pageLines.length;
				var lineNumber = this.cursorLine;
				var position = this.cursor;
				if(position == null) {
					position = 0;
				}
				if(lineNumber == null) {
					lineNumber = 0;
				}
				this.fontProgram.pageInsertChars(this.page,"\t",lineNumber,position,this.fontStyle,null,this.isVisible);
				if(this.page.pageLines.length > oldPageLength) {
					var pos = this.cursorLine + (this.page.pageLines.length - oldPageLength);
					if(pos != this.cursorLine) {
						if(pos < 0) {
							this.cursorLine = 0;
						} else if(this.page != null && pos >= this.page.pageLines.length) {
							this.cursorLine = this.page.pageLines.length - 1;
						} else {
							this.cursorLine = pos;
						}
						if(this.page != null) {
							this.pageLine = this.page.pageLines[this.cursorLine];
							if(this.cursor > this.pageLine.glyphes.length) {
								if(this.cursorWant == -1) {
									this.cursorWant = this.cursor;
								}
								var pos = this.pageLine.glyphes.length;
								if(pos != this.cursor) {
									if(pos < 0) {
										this.cursor = 0;
									} else if(this.page != null && pos > this.pageLine.glyphes.length) {
										this.cursor = this.pageLine.glyphes.length;
									} else {
										this.cursor = pos;
									}
									if(this.page != null && this.cursorStyle != null) {
										var addUpdate = this.isVisible && this.cursorIsVisible;
										var create = this.cursorElement == null;
										var _x = this.x + this.leftSpace;
										var _y = this.y + this.topSpace;
										var _width = this.width - this.leftSpace - this.rightSpace;
										var _height = this.height - this.topSpace - this.bottomSpace;
										if(this.masked) {
											if(this.maskX > this.leftSpace) {
												_x = this.x + this.maskX;
											}
											if(this.maskY > this.topSpace) {
												_y = this.y + this.maskY;
											}
											if(this.x + this.maskX + this.maskWidth < _x + _width) {
												_width = this.maskX + this.maskWidth + this.x - _x;
											}
											if(this.y + this.maskY + this.maskHeight < _y + _height) {
												_height = this.maskY + this.maskHeight + this.y - _y;
											}
										}
										var _width1 = _width;
										var _yOffset = this.yOffset;
										var y_offset;
										if((this.autoSize & 1) > 0) {
											y_offset = _yOffset;
										} else {
											switch(this.vAlign) {
											case 4:
												y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
												break;
											case 8:
												y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
												break;
											default:
												y_offset = _yOffset;
											}
										}
										var y_offset1 = y_offset + this.topSpace;
										_width1 += 3;
										var page = this.page;
										var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
										var cw = 2;
										var cy = Math.round(this.pageLine.y);
										var ch = Math.round(this.pageLine.height);
										var mx = 0;
										var my = 0;
										var mw = cw;
										var mh = ch;
										if(cx < _x) {
											mw -= _x - cx;
											mx = _x - cx;
											if(mw > _width1) {
												mw = _width1;
											}
										} else if(cx + cw > _x + _width1) {
											mw = _x + _width1 - cx;
										}
										if(mw < 0) {
											mw = 0;
										}
										if(cy < _y) {
											mh -= _y - cy;
											my = _y - cy;
											if(mh > _height) {
												mh = _height;
											}
										} else if(cy + ch > _y + _height) {
											mh = _y + _height - cy;
										}
										if(mh < 0) {
											mh = 0;
										}
										if(create) {
											var z = this.z;
											var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
											if(stylePos < 0) {
												if(this.uiDisplay.autoAddStyles) {
													var _this = this.uiDisplay;
													var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
													var styleId = this.cursorStyle.getUUID();
													_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
													if(_this.stylePosBeforeFont == 0) {
														_this.addProgram(program,null,true);
													} else {
														_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
													}
													_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
													_this.stylePosBeforeFont++;
												} else {
													var c = js_Boot.getClass(this.cursorStyle);
													throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
												}
											} else {
												this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
												if(this.cursorProgram == null) {
													var _this = this.uiDisplay;
													var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
													var stylePos1 = stylePos;
													_this.usedStyleProgram[stylePos1] = program;
													var afterProgram = null;
													while(stylePos1-- > 0) {
														afterProgram = _this.usedStyleProgram[stylePos1];
														if(afterProgram != null) {
															break;
														}
													}
													_this.addProgram(program,afterProgram,afterProgram == null);
												}
											}
											this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
											if(addUpdate) {
												this.cursorProgram.addElement(this.cursorElement);
											}
										} else {
											this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
											if(addUpdate) {
												this.cursorProgram.update(this.cursorElement);
											}
										}
									}
								}
							} else if(this.cursorWant > 0) {
								var pos = this.cursorWant;
								if(pos != this.cursor) {
									if(pos < 0) {
										this.cursor = 0;
									} else if(this.page != null && pos > this.pageLine.glyphes.length) {
										this.cursor = this.pageLine.glyphes.length;
									} else {
										this.cursor = pos;
									}
									if(this.page != null && this.cursorStyle != null) {
										var addUpdate = this.isVisible && this.cursorIsVisible;
										var create = this.cursorElement == null;
										var _x = this.x + this.leftSpace;
										var _y = this.y + this.topSpace;
										var _width = this.width - this.leftSpace - this.rightSpace;
										var _height = this.height - this.topSpace - this.bottomSpace;
										if(this.masked) {
											if(this.maskX > this.leftSpace) {
												_x = this.x + this.maskX;
											}
											if(this.maskY > this.topSpace) {
												_y = this.y + this.maskY;
											}
											if(this.x + this.maskX + this.maskWidth < _x + _width) {
												_width = this.maskX + this.maskWidth + this.x - _x;
											}
											if(this.y + this.maskY + this.maskHeight < _y + _height) {
												_height = this.maskY + this.maskHeight + this.y - _y;
											}
										}
										var _width1 = _width;
										var _yOffset = this.yOffset;
										var y_offset;
										if((this.autoSize & 1) > 0) {
											y_offset = _yOffset;
										} else {
											switch(this.vAlign) {
											case 4:
												y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
												break;
											case 8:
												y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
												break;
											default:
												y_offset = _yOffset;
											}
										}
										var y_offset1 = y_offset + this.topSpace;
										_width1 += 3;
										var page = this.page;
										var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
										var cw = 2;
										var cy = Math.round(this.pageLine.y);
										var ch = Math.round(this.pageLine.height);
										var mx = 0;
										var my = 0;
										var mw = cw;
										var mh = ch;
										if(cx < _x) {
											mw -= _x - cx;
											mx = _x - cx;
											if(mw > _width1) {
												mw = _width1;
											}
										} else if(cx + cw > _x + _width1) {
											mw = _x + _width1 - cx;
										}
										if(mw < 0) {
											mw = 0;
										}
										if(cy < _y) {
											mh -= _y - cy;
											my = _y - cy;
											if(mh > _height) {
												mh = _height;
											}
										} else if(cy + ch > _y + _height) {
											mh = _y + _height - cy;
										}
										if(mh < 0) {
											mh = 0;
										}
										if(create) {
											var z = this.z;
											var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
											if(stylePos < 0) {
												if(this.uiDisplay.autoAddStyles) {
													var _this = this.uiDisplay;
													var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
													var styleId = this.cursorStyle.getUUID();
													_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
													if(_this.stylePosBeforeFont == 0) {
														_this.addProgram(program,null,true);
													} else {
														_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
													}
													_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
													_this.stylePosBeforeFont++;
												} else {
													var c = js_Boot.getClass(this.cursorStyle);
													throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
												}
											} else {
												this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
												if(this.cursorProgram == null) {
													var _this = this.uiDisplay;
													var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
													var stylePos1 = stylePos;
													_this.usedStyleProgram[stylePos1] = program;
													var afterProgram = null;
													while(stylePos1-- > 0) {
														afterProgram = _this.usedStyleProgram[stylePos1];
														if(afterProgram != null) {
															break;
														}
													}
													_this.addProgram(program,afterProgram,afterProgram == null);
												}
											}
											this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
											if(addUpdate) {
												this.cursorProgram.addElement(this.cursorElement);
											}
										} else {
											this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
											if(addUpdate) {
												this.cursorProgram.update(this.cursorElement);
											}
										}
									}
								}
							}
							if(this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					}
					var pos = this.pageLine.glyphes.length - restCharLength;
					if(pos != this.cursor) {
						if(pos < 0) {
							this.cursor = 0;
						} else if(this.page != null && pos > this.pageLine.glyphes.length) {
							this.cursor = this.pageLine.glyphes.length;
						} else {
							this.cursor = pos;
						}
						if(this.page != null && this.cursorStyle != null) {
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var create = this.cursorElement == null;
							var _x = this.x + this.leftSpace;
							var _y = this.y + this.topSpace;
							var _width = this.width - this.leftSpace - this.rightSpace;
							var _height = this.height - this.topSpace - this.bottomSpace;
							if(this.masked) {
								if(this.maskX > this.leftSpace) {
									_x = this.x + this.maskX;
								}
								if(this.maskY > this.topSpace) {
									_y = this.y + this.maskY;
								}
								if(this.x + this.maskX + this.maskWidth < _x + _width) {
									_width = this.maskX + this.maskWidth + this.x - _x;
								}
								if(this.y + this.maskY + this.maskHeight < _y + _height) {
									_height = this.maskY + this.maskHeight + this.y - _y;
								}
							}
							var _width1 = _width;
							var _yOffset = this.yOffset;
							var y_offset;
							if((this.autoSize & 1) > 0) {
								y_offset = _yOffset;
							} else {
								switch(this.vAlign) {
								case 4:
									y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
									break;
								case 8:
									y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
									break;
								default:
									y_offset = _yOffset;
								}
							}
							var y_offset1 = y_offset + this.topSpace;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(create) {
								var z = this.z;
								var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
								if(stylePos < 0) {
									if(this.uiDisplay.autoAddStyles) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var styleId = this.cursorStyle.getUUID();
										_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
										if(_this.stylePosBeforeFont == 0) {
											_this.addProgram(program,null,true);
										} else {
											_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
										}
										_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
										_this.stylePosBeforeFont++;
									} else {
										var c = js_Boot.getClass(this.cursorStyle);
										throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
									}
								} else {
									this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
									if(this.cursorProgram == null) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var stylePos1 = stylePos;
										_this.usedStyleProgram[stylePos1] = program;
										var afterProgram = null;
										while(stylePos1-- > 0) {
											afterProgram = _this.usedStyleProgram[stylePos1];
											if(afterProgram != null) {
												break;
											}
										}
										_this.addProgram(program,afterProgram,afterProgram == null);
									}
								}
								this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
								if(addUpdate) {
									this.cursorProgram.addElement(this.cursorElement);
								}
							} else {
								this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
								if(addUpdate) {
									this.cursorProgram.update(this.cursorElement);
								}
							}
						}
					}
				} else {
					var pos = this.cursor + "\t".length;
					if(pos != this.cursor) {
						if(pos < 0) {
							this.cursor = 0;
						} else if(this.page != null && pos > this.pageLine.glyphes.length) {
							this.cursor = this.pageLine.glyphes.length;
						} else {
							this.cursor = pos;
						}
						if(this.page != null && this.cursorStyle != null) {
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var create = this.cursorElement == null;
							var _x = this.x + this.leftSpace;
							var _y = this.y + this.topSpace;
							var _width = this.width - this.leftSpace - this.rightSpace;
							var _height = this.height - this.topSpace - this.bottomSpace;
							if(this.masked) {
								if(this.maskX > this.leftSpace) {
									_x = this.x + this.maskX;
								}
								if(this.maskY > this.topSpace) {
									_y = this.y + this.maskY;
								}
								if(this.x + this.maskX + this.maskWidth < _x + _width) {
									_width = this.maskX + this.maskWidth + this.x - _x;
								}
								if(this.y + this.maskY + this.maskHeight < _y + _height) {
									_height = this.maskY + this.maskHeight + this.y - _y;
								}
							}
							var _width1 = _width;
							var _yOffset = this.yOffset;
							var y_offset;
							if((this.autoSize & 1) > 0) {
								y_offset = _yOffset;
							} else {
								switch(this.vAlign) {
								case 4:
									y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
									break;
								case 8:
									y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
									break;
								default:
									y_offset = _yOffset;
								}
							}
							var y_offset1 = y_offset + this.topSpace;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(create) {
								var z = this.z;
								var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
								if(stylePos < 0) {
									if(this.uiDisplay.autoAddStyles) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var styleId = this.cursorStyle.getUUID();
										_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
										if(_this.stylePosBeforeFont == 0) {
											_this.addProgram(program,null,true);
										} else {
											_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
										}
										_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
										_this.stylePosBeforeFont++;
									} else {
										var c = js_Boot.getClass(this.cursorStyle);
										throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
									}
								} else {
									this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
									if(this.cursorProgram == null) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var stylePos1 = stylePos;
										_this.usedStyleProgram[stylePos1] = program;
										var afterProgram = null;
										while(stylePos1-- > 0) {
											afterProgram = _this.usedStyleProgram[stylePos1];
											if(afterProgram != null) {
												break;
											}
										}
										_this.addProgram(program,afterProgram,afterProgram == null);
									}
								}
								this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
								if(addUpdate) {
									this.cursorProgram.addElement(this.cursorElement);
								}
							} else {
								this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
								if(addUpdate) {
									this.cursorProgram.update(this.cursorElement);
								}
							}
						}
					}
				}
			}
			if((this.autoSize & 2) > 0 && (this.autoSize & 1) > 0) {
				var updateBgMaskSelCursor = true;
				var pageUpdatePosition = false;
				var pageUpdateSize = true;
				var pageUpdateXOffset = false;
				var pageUpdateYOffset = false;
				if(pageUpdateYOffset == null) {
					pageUpdateYOffset = true;
				}
				if(pageUpdateXOffset == null) {
					pageUpdateXOffset = true;
				}
				if(pageUpdateSize == null) {
					pageUpdateSize = true;
				}
				if(pageUpdatePosition == null) {
					pageUpdatePosition = true;
				}
				if(updateBgMaskSelCursor == null) {
					updateBgMaskSelCursor = true;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var _yOffset = this.yOffset;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = _yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
						break;
					default:
						y_offset = _yOffset;
					}
				}
				if(pageUpdatePosition && pageUpdateSize) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else if(pageUpdatePosition) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetPosition(this.page,_x,_y,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else if(pageUpdateSize) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetSize(this.page,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetOffset(this.page,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				}
				if(this.isVisible) {
					this.fontProgram.pageUpdate(this.page);
				}
				if(updateBgMaskSelCursor) {
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var maskElement = this.maskElement;
					var autoUpdate = this.isVisible;
					if(autoUpdate == null) {
						autoUpdate = true;
					}
					maskElement.x = _x;
					maskElement.y = _y;
					maskElement.w = _width;
					maskElement.h = _height;
					if(autoUpdate) {
						this.fontProgram.maskBuffer.updateElement(maskElement);
					}
					if(this.backgroundElement != null) {
						this.backgroundElement.setLayout(this);
						if(this.isVisible && this.backgroundIsVisible) {
							this.backgroundProgram.update(this.backgroundElement);
						}
					}
					if(this.selectionElementArray != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.selectionIsVisible;
						var selectX;
						var selectWidth;
						var selectY;
						var selectHeight;
						var mx;
						var my;
						var mw;
						var mh;
						var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
						var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
						var _selectFrom = this.selectFrom;
						var _selectTo = this.selectTo;
						if(from >= this.page.pageLines.length) {
							haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
						}
						if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
							_selectFrom = 0;
							++from;
						}
						if(_selectTo == 0 && to > from + 1) {
							if(to - 1 >= this.page.pageLines.length) {
								haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
							}
							--to;
							_selectTo = this.page.pageLines[to - 1].glyphes.length;
						}
						var _pageLine;
						var selectionElement;
						if(addUpdate) {
							var fromOld = to - from;
							if(fromOld < 0) {
								fromOld = 0;
							}
							var _g = fromOld;
							var _g1 = this.selectionElementMax;
							while(_g < _g1) {
								var i = _g++;
								this.selectionProgram.removeElement(this.selectionElementArray[i]);
							}
						}
						var selectionElementMaxOld = this.selectionElementMax;
						this.selectionElementMax = 0;
						var _g = from;
						var _g1 = to;
						while(_g < _g1) {
							var i = _g++;
							_pageLine = this.page.pageLines[i];
							if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
								var page = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
								var page1 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
							} else if(i == this.selectLineFrom) {
								var page2 = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
								selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
							} else if(i == this.selectLineTo - 1) {
								selectX = Math.round(this.page.x + this.page.xOffset);
								var page3 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
							} else {
								selectX = Math.round(this.page.x + this.page.xOffset);
								selectWidth = Math.round(_pageLine.textSize);
							}
							selectY = Math.round(_pageLine.y);
							selectHeight = Math.round(_pageLine.height);
							mx = 0;
							my = 0;
							mw = selectWidth;
							mh = selectHeight;
							if(selectX < _x) {
								mw -= _x - selectX;
								mx = _x - selectX;
								if(mw > _width) {
									mw = _width;
								}
							} else if(selectX + selectWidth > _x + _width) {
								mw = _x + _width - selectX;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(selectY < _y) {
								mh -= _y - selectY;
								my = _y - selectY;
								if(mh > _height) {
									mh = _height;
								}
							} else if(selectY + selectHeight > _y + _height) {
								mh = _y + _height - selectY;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(this.selectionElementMax >= this.selectionElementArray.length) {
								selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
								if(addUpdate) {
									this.selectionProgram.addElement(selectionElement);
								}
								this.selectionElementArray.push(selectionElement);
							} else {
								selectionElement = this.selectionElementArray[this.selectionElementMax];
								selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
								if(this.selectionElementMax >= selectionElementMaxOld) {
									selectionElement.setStyle(this.selectionStyle);
									if(addUpdate) {
										this.selectionProgram.addElement(selectionElement);
									}
								} else if(addUpdate) {
									this.selectionProgram.update(selectionElement);
								}
							}
							this.selectionElementMax++;
						}
					}
					if(this.cursorElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var _width1 = _width;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			} else if((this.autoSize & 2) <= 0 && (this.autoSize & 1) <= 0 && this.hAlign == 0 && this.vAlign == 0 && this.isVisible) {
				this.fontProgram.pageUpdate(this.page);
			} else {
				var updateBgMaskSelCursor = (this.autoSize & 2) > 0 || (this.autoSize & 1) > 0;
				var pageUpdatePosition = false;
				var pageUpdateSize = (this.autoSize & 2) > 0 || (this.autoSize & 1) > 0;
				var pageUpdateXOffset = (this.autoSize & 2) <= 0;
				var pageUpdateYOffset = (this.autoSize & 1) <= 0;
				if(pageUpdateYOffset == null) {
					pageUpdateYOffset = true;
				}
				if(pageUpdateXOffset == null) {
					pageUpdateXOffset = true;
				}
				if(pageUpdateSize == null) {
					pageUpdateSize = true;
				}
				if(pageUpdatePosition == null) {
					pageUpdatePosition = true;
				}
				if(updateBgMaskSelCursor == null) {
					updateBgMaskSelCursor = true;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var _yOffset = this.yOffset;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = _yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
						break;
					default:
						y_offset = _yOffset;
					}
				}
				if(pageUpdatePosition && pageUpdateSize) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else if(pageUpdatePosition) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetPosition(this.page,_x,_y,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else if(pageUpdateSize) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetSize(this.page,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetOffset(this.page,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				}
				if(this.isVisible) {
					this.fontProgram.pageUpdate(this.page);
				}
				if(updateBgMaskSelCursor) {
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var maskElement = this.maskElement;
					var autoUpdate = this.isVisible;
					if(autoUpdate == null) {
						autoUpdate = true;
					}
					maskElement.x = _x;
					maskElement.y = _y;
					maskElement.w = _width;
					maskElement.h = _height;
					if(autoUpdate) {
						this.fontProgram.maskBuffer.updateElement(maskElement);
					}
					if(this.backgroundElement != null) {
						this.backgroundElement.setLayout(this);
						if(this.isVisible && this.backgroundIsVisible) {
							this.backgroundProgram.update(this.backgroundElement);
						}
					}
					if(this.selectionElementArray != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.selectionIsVisible;
						var selectX;
						var selectWidth;
						var selectY;
						var selectHeight;
						var mx;
						var my;
						var mw;
						var mh;
						var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
						var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
						var _selectFrom = this.selectFrom;
						var _selectTo = this.selectTo;
						if(from >= this.page.pageLines.length) {
							haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
						}
						if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
							_selectFrom = 0;
							++from;
						}
						if(_selectTo == 0 && to > from + 1) {
							if(to - 1 >= this.page.pageLines.length) {
								haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
							}
							--to;
							_selectTo = this.page.pageLines[to - 1].glyphes.length;
						}
						var _pageLine;
						var selectionElement;
						if(addUpdate) {
							var fromOld = to - from;
							if(fromOld < 0) {
								fromOld = 0;
							}
							var _g = fromOld;
							var _g1 = this.selectionElementMax;
							while(_g < _g1) {
								var i = _g++;
								this.selectionProgram.removeElement(this.selectionElementArray[i]);
							}
						}
						var selectionElementMaxOld = this.selectionElementMax;
						this.selectionElementMax = 0;
						var _g = from;
						var _g1 = to;
						while(_g < _g1) {
							var i = _g++;
							_pageLine = this.page.pageLines[i];
							if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
								var page = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
								var page1 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
							} else if(i == this.selectLineFrom) {
								var page2 = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
								selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
							} else if(i == this.selectLineTo - 1) {
								selectX = Math.round(this.page.x + this.page.xOffset);
								var page3 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
							} else {
								selectX = Math.round(this.page.x + this.page.xOffset);
								selectWidth = Math.round(_pageLine.textSize);
							}
							selectY = Math.round(_pageLine.y);
							selectHeight = Math.round(_pageLine.height);
							mx = 0;
							my = 0;
							mw = selectWidth;
							mh = selectHeight;
							if(selectX < _x) {
								mw -= _x - selectX;
								mx = _x - selectX;
								if(mw > _width) {
									mw = _width;
								}
							} else if(selectX + selectWidth > _x + _width) {
								mw = _x + _width - selectX;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(selectY < _y) {
								mh -= _y - selectY;
								my = _y - selectY;
								if(mh > _height) {
									mh = _height;
								}
							} else if(selectY + selectHeight > _y + _height) {
								mh = _y + _height - selectY;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(this.selectionElementMax >= this.selectionElementArray.length) {
								selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
								if(addUpdate) {
									this.selectionProgram.addElement(selectionElement);
								}
								this.selectionElementArray.push(selectionElement);
							} else {
								selectionElement = this.selectionElementArray[this.selectionElementMax];
								selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
								if(this.selectionElementMax >= selectionElementMaxOld) {
									selectionElement.setStyle(this.selectionStyle);
									if(addUpdate) {
										this.selectionProgram.addElement(selectionElement);
									}
								} else if(addUpdate) {
									this.selectionProgram.update(selectionElement);
								}
							}
							this.selectionElementMax++;
						}
					}
					if(this.cursorElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var _width1 = _width;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
		}
	}
	,enter: function() {
		if(this.page == null) {
			return;
		}
		if(this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo) {
			this.fontProgram.pageDeleteChars(this.page,this.selectLineFrom,this.selectLineTo,this.selectFrom,this.selectTo,this.isVisible);
			var pos = this.selectLineFrom;
			if(pos != this.cursorLine) {
				if(pos < 0) {
					this.cursorLine = 0;
				} else if(this.page != null && pos >= this.page.pageLines.length) {
					this.cursorLine = this.page.pageLines.length - 1;
				} else {
					this.cursorLine = pos;
				}
				if(this.page != null) {
					this.pageLine = this.page.pageLines[this.cursorLine];
					if(this.cursor > this.pageLine.glyphes.length) {
						if(this.cursorWant == -1) {
							this.cursorWant = this.cursor;
						}
						var pos = this.pageLine.glyphes.length;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					} else if(this.cursorWant > 0) {
						var pos = this.cursorWant;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					}
					if(this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
			this.fontProgram.pageAddLinefeedAt(this.page,null,this.selectLineFrom,this.selectFrom,null,null,this.isVisible);
			var pos = this.selectLineFrom + 1;
			if(pos != this.cursorLine) {
				if(pos < 0) {
					this.cursorLine = 0;
				} else if(this.page != null && pos >= this.page.pageLines.length) {
					this.cursorLine = this.page.pageLines.length - 1;
				} else {
					this.cursorLine = pos;
				}
				if(this.page != null) {
					this.pageLine = this.page.pageLines[this.cursorLine];
					if(this.cursor > this.pageLine.glyphes.length) {
						if(this.cursorWant == -1) {
							this.cursorWant = this.cursor;
						}
						var pos = this.pageLine.glyphes.length;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					} else if(this.cursorWant > 0) {
						var pos = this.cursorWant;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					}
					if(this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
			if(0 != this.cursor) {
				if(this.page != null && 0 > this.pageLine.glyphes.length) {
					this.cursor = this.pageLine.glyphes.length;
				} else {
					this.cursor = 0;
				}
				if(this.page != null && this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var page = this.page;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.pageLine.y);
					var ch = Math.round(this.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
			this.cursorWant = -1;
			this.selectLineFrom = this.selectLineTo = this.selectFrom = this.selectTo = 0;
			if(this.page != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElementArray != null && this.isVisible) {
					var _g = 0;
					var _g1 = this.selectionElementMax;
					while(_g < _g1) {
						var i = _g++;
						this.selectionProgram.removeElement(this.selectionElementArray[i]);
					}
				}
			}
			this.selectionIsVisible = false;
		} else {
			this.fontProgram.pageAddLinefeedAt(this.page,this.pageLine,this.cursorLine,this.cursor,null,null,this.isVisible);
			var pos = this.cursorLine + 1;
			if(pos != this.cursorLine) {
				if(pos < 0) {
					this.cursorLine = 0;
				} else if(this.page != null && pos >= this.page.pageLines.length) {
					this.cursorLine = this.page.pageLines.length - 1;
				} else {
					this.cursorLine = pos;
				}
				if(this.page != null) {
					this.pageLine = this.page.pageLines[this.cursorLine];
					if(this.cursor > this.pageLine.glyphes.length) {
						if(this.cursorWant == -1) {
							this.cursorWant = this.cursor;
						}
						var pos = this.pageLine.glyphes.length;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					} else if(this.cursorWant > 0) {
						var pos = this.cursorWant;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					}
					if(this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
			if(0 != this.cursor) {
				if(this.page != null && 0 > this.pageLine.glyphes.length) {
					this.cursor = this.pageLine.glyphes.length;
				} else {
					this.cursor = 0;
				}
				if(this.page != null && this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var page = this.page;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.pageLine.y);
					var ch = Math.round(this.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
			this.cursorWant = -1;
		}
		if((this.autoSize & 2) > 0 && (this.autoSize & 1) > 0) {
			var updateBgMaskSelCursor = true;
			var pageUpdatePosition = false;
			var pageUpdateSize = true;
			var pageUpdateXOffset = false;
			var pageUpdateYOffset = false;
			if(pageUpdateYOffset == null) {
				pageUpdateYOffset = true;
			}
			if(pageUpdateXOffset == null) {
				pageUpdateXOffset = true;
			}
			if(pageUpdateSize == null) {
				pageUpdateSize = true;
			}
			if(pageUpdatePosition == null) {
				pageUpdatePosition = true;
			}
			if(updateBgMaskSelCursor == null) {
				updateBgMaskSelCursor = true;
			}
			if(this.autoSize > 0) {
				if((this.autoSize & 2) > 0) {
					var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
					if(w != this.width) {
						if(this.resizeWidth != null) {
							var oldWidth = this.width;
							this.resizeWidth(this.width = w,w - oldWidth);
						} else {
							this.width = w;
						}
					}
				}
				if((this.autoSize & 1) > 0) {
					var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
					if(h != this.height) {
						if(this.resizeHeight != null) {
							var oldHeight = this.height;
							this.resizeHeight(this.height = h,h - oldHeight);
						} else {
							this.height = h;
						}
					}
				}
				if(this.hasMoveEvent != 0) {
					var _this = this.pickableMove;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
					if(this.isVisible) {
						this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
					}
				}
				if(this.hasClickEvent != 0) {
					var _this = this.pickableClick;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
					if(this.isVisible) {
						this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
					}
				}
			}
			var _x = this.x + this.leftSpace;
			var _y = this.y + this.topSpace;
			var _width = this.width - this.leftSpace - this.rightSpace;
			var _height = this.height - this.topSpace - this.bottomSpace;
			var _yOffset = this.yOffset;
			var y_offset;
			if((this.autoSize & 1) > 0) {
				y_offset = _yOffset;
			} else {
				switch(this.vAlign) {
				case 4:
					y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
					break;
				case 8:
					y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
					break;
				default:
					y_offset = _yOffset;
				}
			}
			if(pageUpdatePosition && pageUpdateSize) {
				var tmp;
				if(pageUpdateXOffset) {
					var _xOffset = this.xOffset;
					if((this.autoSize & 2) > 0) {
						tmp = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
							break;
						case 2:
							tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
							break;
						default:
							tmp = _xOffset;
						}
					}
				} else {
					tmp = null;
				}
				this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
			} else if(pageUpdatePosition) {
				var tmp;
				if(pageUpdateXOffset) {
					var _xOffset = this.xOffset;
					if((this.autoSize & 2) > 0) {
						tmp = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
							break;
						case 2:
							tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
							break;
						default:
							tmp = _xOffset;
						}
					}
				} else {
					tmp = null;
				}
				this.fontProgram.pageSetPosition(this.page,_x,_y,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
			} else if(pageUpdateSize) {
				var tmp;
				if(pageUpdateXOffset) {
					var _xOffset = this.xOffset;
					if((this.autoSize & 2) > 0) {
						tmp = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
							break;
						case 2:
							tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
							break;
						default:
							tmp = _xOffset;
						}
					}
				} else {
					tmp = null;
				}
				this.fontProgram.pageSetSize(this.page,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
			} else {
				var tmp;
				if(pageUpdateXOffset) {
					var _xOffset = this.xOffset;
					if((this.autoSize & 2) > 0) {
						tmp = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
							break;
						case 2:
							tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
							break;
						default:
							tmp = _xOffset;
						}
					}
				} else {
					tmp = null;
				}
				this.fontProgram.pageSetOffset(this.page,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
			}
			if(this.isVisible) {
				this.fontProgram.pageUpdate(this.page);
			}
			if(updateBgMaskSelCursor) {
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var maskElement = this.maskElement;
				var autoUpdate = this.isVisible;
				if(autoUpdate == null) {
					autoUpdate = true;
				}
				maskElement.x = _x;
				maskElement.y = _y;
				maskElement.w = _width;
				maskElement.h = _height;
				if(autoUpdate) {
					this.fontProgram.maskBuffer.updateElement(maskElement);
				}
				if(this.backgroundElement != null) {
					this.backgroundElement.setLayout(this);
					if(this.isVisible && this.backgroundIsVisible) {
						this.backgroundProgram.update(this.backgroundElement);
					}
				}
				if(this.selectionElementArray != null) {
					var y_offset1 = y_offset + this.topSpace;
					var addUpdate = this.isVisible && this.selectionIsVisible;
					var selectX;
					var selectWidth;
					var selectY;
					var selectHeight;
					var mx;
					var my;
					var mw;
					var mh;
					var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
					var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
					var _selectFrom = this.selectFrom;
					var _selectTo = this.selectTo;
					if(from >= this.page.pageLines.length) {
						haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
					}
					if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
						_selectFrom = 0;
						++from;
					}
					if(_selectTo == 0 && to > from + 1) {
						if(to - 1 >= this.page.pageLines.length) {
							haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
						}
						--to;
						_selectTo = this.page.pageLines[to - 1].glyphes.length;
					}
					var _pageLine;
					var selectionElement;
					if(addUpdate) {
						var fromOld = to - from;
						if(fromOld < 0) {
							fromOld = 0;
						}
						var _g = fromOld;
						var _g1 = this.selectionElementMax;
						while(_g < _g1) {
							var i = _g++;
							this.selectionProgram.removeElement(this.selectionElementArray[i]);
						}
					}
					var selectionElementMaxOld = this.selectionElementMax;
					this.selectionElementMax = 0;
					var _g = from;
					var _g1 = to;
					while(_g < _g1) {
						var i = _g++;
						_pageLine = this.page.pageLines[i];
						if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
							var page = this.page;
							selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
							var page1 = this.page;
							selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
						} else if(i == this.selectLineFrom) {
							var page2 = this.page;
							selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
							selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
						} else if(i == this.selectLineTo - 1) {
							selectX = Math.round(this.page.x + this.page.xOffset);
							var page3 = this.page;
							selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
						} else {
							selectX = Math.round(this.page.x + this.page.xOffset);
							selectWidth = Math.round(_pageLine.textSize);
						}
						selectY = Math.round(_pageLine.y);
						selectHeight = Math.round(_pageLine.height);
						mx = 0;
						my = 0;
						mw = selectWidth;
						mh = selectHeight;
						if(selectX < _x) {
							mw -= _x - selectX;
							mx = _x - selectX;
							if(mw > _width) {
								mw = _width;
							}
						} else if(selectX + selectWidth > _x + _width) {
							mw = _x + _width - selectX;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(selectY < _y) {
							mh -= _y - selectY;
							my = _y - selectY;
							if(mh > _height) {
								mh = _height;
							}
						} else if(selectY + selectHeight > _y + _height) {
							mh = _y + _height - selectY;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(this.selectionElementMax >= this.selectionElementArray.length) {
							selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
							if(addUpdate) {
								this.selectionProgram.addElement(selectionElement);
							}
							this.selectionElementArray.push(selectionElement);
						} else {
							selectionElement = this.selectionElementArray[this.selectionElementMax];
							selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
							if(this.selectionElementMax >= selectionElementMaxOld) {
								selectionElement.setStyle(this.selectionStyle);
								if(addUpdate) {
									this.selectionProgram.addElement(selectionElement);
								}
							} else if(addUpdate) {
								this.selectionProgram.update(selectionElement);
							}
						}
						this.selectionElementMax++;
					}
				}
				if(this.cursorElement != null) {
					var y_offset1 = y_offset + this.topSpace;
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var _width1 = _width;
					_width1 += 3;
					var page = this.page;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.pageLine.y);
					var ch = Math.round(this.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.cursorProgram.update(this.cursorElement);
					}
				}
			}
		} else if((this.autoSize & 2) <= 0 && (this.autoSize & 1) <= 0 && this.hAlign == 0 && this.vAlign == 0 && this.isVisible) {
			this.fontProgram.pageUpdate(this.page);
		} else {
			var updateBgMaskSelCursor = (this.autoSize & 2) > 0 || (this.autoSize & 1) > 0;
			var pageUpdatePosition = false;
			var pageUpdateSize = (this.autoSize & 2) > 0 || (this.autoSize & 1) > 0;
			var pageUpdateXOffset = (this.autoSize & 2) <= 0;
			var pageUpdateYOffset = (this.autoSize & 1) <= 0;
			if(pageUpdateYOffset == null) {
				pageUpdateYOffset = true;
			}
			if(pageUpdateXOffset == null) {
				pageUpdateXOffset = true;
			}
			if(pageUpdateSize == null) {
				pageUpdateSize = true;
			}
			if(pageUpdatePosition == null) {
				pageUpdatePosition = true;
			}
			if(updateBgMaskSelCursor == null) {
				updateBgMaskSelCursor = true;
			}
			if(this.autoSize > 0) {
				if((this.autoSize & 2) > 0) {
					var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
					if(w != this.width) {
						if(this.resizeWidth != null) {
							var oldWidth = this.width;
							this.resizeWidth(this.width = w,w - oldWidth);
						} else {
							this.width = w;
						}
					}
				}
				if((this.autoSize & 1) > 0) {
					var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
					if(h != this.height) {
						if(this.resizeHeight != null) {
							var oldHeight = this.height;
							this.resizeHeight(this.height = h,h - oldHeight);
						} else {
							this.height = h;
						}
					}
				}
				if(this.hasMoveEvent != 0) {
					var _this = this.pickableMove;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
					if(this.isVisible) {
						this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
					}
				}
				if(this.hasClickEvent != 0) {
					var _this = this.pickableClick;
					_this.uiElement = this;
					_this.z = this.z;
					if(this.masked) {
						_this.x = this.x + this.maskX;
						_this.y = this.y + this.maskY;
						_this.w = this.maskWidth;
						_this.h = this.maskHeight;
					} else {
						_this.x = this.x;
						_this.y = this.y;
						_this.w = this.width;
						_this.h = this.height;
					}
					if(this.isVisible) {
						this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
					}
				}
			}
			var _x = this.x + this.leftSpace;
			var _y = this.y + this.topSpace;
			var _width = this.width - this.leftSpace - this.rightSpace;
			var _height = this.height - this.topSpace - this.bottomSpace;
			var _yOffset = this.yOffset;
			var y_offset;
			if((this.autoSize & 1) > 0) {
				y_offset = _yOffset;
			} else {
				switch(this.vAlign) {
				case 4:
					y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
					break;
				case 8:
					y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
					break;
				default:
					y_offset = _yOffset;
				}
			}
			if(pageUpdatePosition && pageUpdateSize) {
				var tmp;
				if(pageUpdateXOffset) {
					var _xOffset = this.xOffset;
					if((this.autoSize & 2) > 0) {
						tmp = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
							break;
						case 2:
							tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
							break;
						default:
							tmp = _xOffset;
						}
					}
				} else {
					tmp = null;
				}
				this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
			} else if(pageUpdatePosition) {
				var tmp;
				if(pageUpdateXOffset) {
					var _xOffset = this.xOffset;
					if((this.autoSize & 2) > 0) {
						tmp = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
							break;
						case 2:
							tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
							break;
						default:
							tmp = _xOffset;
						}
					}
				} else {
					tmp = null;
				}
				this.fontProgram.pageSetPosition(this.page,_x,_y,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
			} else if(pageUpdateSize) {
				var tmp;
				if(pageUpdateXOffset) {
					var _xOffset = this.xOffset;
					if((this.autoSize & 2) > 0) {
						tmp = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
							break;
						case 2:
							tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
							break;
						default:
							tmp = _xOffset;
						}
					}
				} else {
					tmp = null;
				}
				this.fontProgram.pageSetSize(this.page,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
			} else {
				var tmp;
				if(pageUpdateXOffset) {
					var _xOffset = this.xOffset;
					if((this.autoSize & 2) > 0) {
						tmp = _xOffset;
					} else {
						switch(this.hAlign) {
						case 1:
							tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
							break;
						case 2:
							tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
							break;
						default:
							tmp = _xOffset;
						}
					}
				} else {
					tmp = null;
				}
				this.fontProgram.pageSetOffset(this.page,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
			}
			if(this.isVisible) {
				this.fontProgram.pageUpdate(this.page);
			}
			if(updateBgMaskSelCursor) {
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var maskElement = this.maskElement;
				var autoUpdate = this.isVisible;
				if(autoUpdate == null) {
					autoUpdate = true;
				}
				maskElement.x = _x;
				maskElement.y = _y;
				maskElement.w = _width;
				maskElement.h = _height;
				if(autoUpdate) {
					this.fontProgram.maskBuffer.updateElement(maskElement);
				}
				if(this.backgroundElement != null) {
					this.backgroundElement.setLayout(this);
					if(this.isVisible && this.backgroundIsVisible) {
						this.backgroundProgram.update(this.backgroundElement);
					}
				}
				if(this.selectionElementArray != null) {
					var y_offset1 = y_offset + this.topSpace;
					var addUpdate = this.isVisible && this.selectionIsVisible;
					var selectX;
					var selectWidth;
					var selectY;
					var selectHeight;
					var mx;
					var my;
					var mw;
					var mh;
					var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
					var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
					var _selectFrom = this.selectFrom;
					var _selectTo = this.selectTo;
					if(from >= this.page.pageLines.length) {
						haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
					}
					if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
						_selectFrom = 0;
						++from;
					}
					if(_selectTo == 0 && to > from + 1) {
						if(to - 1 >= this.page.pageLines.length) {
							haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
						}
						--to;
						_selectTo = this.page.pageLines[to - 1].glyphes.length;
					}
					var _pageLine;
					var selectionElement;
					if(addUpdate) {
						var fromOld = to - from;
						if(fromOld < 0) {
							fromOld = 0;
						}
						var _g = fromOld;
						var _g1 = this.selectionElementMax;
						while(_g < _g1) {
							var i = _g++;
							this.selectionProgram.removeElement(this.selectionElementArray[i]);
						}
					}
					var selectionElementMaxOld = this.selectionElementMax;
					this.selectionElementMax = 0;
					var _g = from;
					var _g1 = to;
					while(_g < _g1) {
						var i = _g++;
						_pageLine = this.page.pageLines[i];
						if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
							var page = this.page;
							selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
							var page1 = this.page;
							selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
						} else if(i == this.selectLineFrom) {
							var page2 = this.page;
							selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
							selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
						} else if(i == this.selectLineTo - 1) {
							selectX = Math.round(this.page.x + this.page.xOffset);
							var page3 = this.page;
							selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
						} else {
							selectX = Math.round(this.page.x + this.page.xOffset);
							selectWidth = Math.round(_pageLine.textSize);
						}
						selectY = Math.round(_pageLine.y);
						selectHeight = Math.round(_pageLine.height);
						mx = 0;
						my = 0;
						mw = selectWidth;
						mh = selectHeight;
						if(selectX < _x) {
							mw -= _x - selectX;
							mx = _x - selectX;
							if(mw > _width) {
								mw = _width;
							}
						} else if(selectX + selectWidth > _x + _width) {
							mw = _x + _width - selectX;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(selectY < _y) {
							mh -= _y - selectY;
							my = _y - selectY;
							if(mh > _height) {
								mh = _height;
							}
						} else if(selectY + selectHeight > _y + _height) {
							mh = _y + _height - selectY;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(this.selectionElementMax >= this.selectionElementArray.length) {
							selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
							if(addUpdate) {
								this.selectionProgram.addElement(selectionElement);
							}
							this.selectionElementArray.push(selectionElement);
						} else {
							selectionElement = this.selectionElementArray[this.selectionElementMax];
							selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
							if(this.selectionElementMax >= selectionElementMaxOld) {
								selectionElement.setStyle(this.selectionStyle);
								if(addUpdate) {
									this.selectionProgram.addElement(selectionElement);
								}
							} else if(addUpdate) {
								this.selectionProgram.update(selectionElement);
							}
						}
						this.selectionElementMax++;
					}
				}
				if(this.cursorElement != null) {
					var y_offset1 = y_offset + this.topSpace;
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var _width1 = _width;
					_width1 += 3;
					var page = this.page;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.pageLine.y);
					var ch = Math.round(this.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.cursorProgram.update(this.cursorElement);
					}
				}
			}
		}
	}
	,copyToClipboard: function() {
		if(this.page != null && (this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo)) {
			lime_system_Clipboard.set_text(this.fontProgram.pageGetChars(this.page,this.selectLineFrom,this.selectLineTo,this.selectFrom,this.selectTo));
		}
	}
	,cutToClipboard: function() {
		if(this.page != null && (this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo)) {
			var _this = this.fontProgram;
			var page = this.page;
			var fromLine = this.selectLineFrom;
			var toLine = this.selectLineTo;
			var fromChar = this.selectFrom;
			var toChar = this.selectTo;
			var addRemoveGlyphes = this.isVisible;
			if(addRemoveGlyphes == null) {
				addRemoveGlyphes = true;
			}
			if(fromChar == null) {
				fromChar = 0;
			}
			if(fromLine == null) {
				fromLine = 0;
			}
			var chars = _this.pageGetChars(page,fromLine,toLine,fromChar,toChar);
			_this.pageDeleteChars(page,fromLine,toLine,fromChar,toChar,addRemoveGlyphes);
			lime_system_Clipboard.set_text(chars);
			var pos = this.selectLineFrom;
			if(pos != this.cursorLine) {
				if(pos < 0) {
					this.cursorLine = 0;
				} else if(this.page != null && pos >= this.page.pageLines.length) {
					this.cursorLine = this.page.pageLines.length - 1;
				} else {
					this.cursorLine = pos;
				}
				if(this.page != null) {
					this.pageLine = this.page.pageLines[this.cursorLine];
					if(this.cursor > this.pageLine.glyphes.length) {
						if(this.cursorWant == -1) {
							this.cursorWant = this.cursor;
						}
						var pos = this.pageLine.glyphes.length;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					} else if(this.cursorWant > 0) {
						var pos = this.cursorWant;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					}
					if(this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
			var pos = this.selectFrom;
			if(pos != this.cursor) {
				if(pos < 0) {
					this.cursor = 0;
				} else if(this.page != null && pos > this.pageLine.glyphes.length) {
					this.cursor = this.pageLine.glyphes.length;
				} else {
					this.cursor = pos;
				}
				if(this.page != null && this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var page = this.page;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.pageLine.y);
					var ch = Math.round(this.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
			this.cursorWant = -1;
			this.selectLineFrom = this.selectLineTo = this.selectFrom = this.selectTo = 0;
			if(this.page != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElementArray != null && this.isVisible) {
					var _g = 0;
					var _g1 = this.selectionElementMax;
					while(_g < _g1) {
						var i = _g++;
						this.selectionProgram.removeElement(this.selectionElementArray[i]);
					}
				}
			}
			this.selectionIsVisible = false;
			if((this.autoSize & 2) > 0 && (this.autoSize & 1) > 0) {
				var updateBgMaskSelCursor = true;
				var pageUpdatePosition = false;
				var pageUpdateSize = true;
				var pageUpdateXOffset = false;
				var pageUpdateYOffset = false;
				if(pageUpdateYOffset == null) {
					pageUpdateYOffset = true;
				}
				if(pageUpdateXOffset == null) {
					pageUpdateXOffset = true;
				}
				if(pageUpdateSize == null) {
					pageUpdateSize = true;
				}
				if(pageUpdatePosition == null) {
					pageUpdatePosition = true;
				}
				if(updateBgMaskSelCursor == null) {
					updateBgMaskSelCursor = true;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var _yOffset = this.yOffset;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = _yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
						break;
					default:
						y_offset = _yOffset;
					}
				}
				if(pageUpdatePosition && pageUpdateSize) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else if(pageUpdatePosition) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetPosition(this.page,_x,_y,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else if(pageUpdateSize) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetSize(this.page,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetOffset(this.page,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				}
				if(this.isVisible) {
					this.fontProgram.pageUpdate(this.page);
				}
				if(updateBgMaskSelCursor) {
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var maskElement = this.maskElement;
					var autoUpdate = this.isVisible;
					if(autoUpdate == null) {
						autoUpdate = true;
					}
					maskElement.x = _x;
					maskElement.y = _y;
					maskElement.w = _width;
					maskElement.h = _height;
					if(autoUpdate) {
						this.fontProgram.maskBuffer.updateElement(maskElement);
					}
					if(this.backgroundElement != null) {
						this.backgroundElement.setLayout(this);
						if(this.isVisible && this.backgroundIsVisible) {
							this.backgroundProgram.update(this.backgroundElement);
						}
					}
					if(this.selectionElementArray != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.selectionIsVisible;
						var selectX;
						var selectWidth;
						var selectY;
						var selectHeight;
						var mx;
						var my;
						var mw;
						var mh;
						var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
						var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
						var _selectFrom = this.selectFrom;
						var _selectTo = this.selectTo;
						if(from >= this.page.pageLines.length) {
							haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
						}
						if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
							_selectFrom = 0;
							++from;
						}
						if(_selectTo == 0 && to > from + 1) {
							if(to - 1 >= this.page.pageLines.length) {
								haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
							}
							--to;
							_selectTo = this.page.pageLines[to - 1].glyphes.length;
						}
						var _pageLine;
						var selectionElement;
						if(addUpdate) {
							var fromOld = to - from;
							if(fromOld < 0) {
								fromOld = 0;
							}
							var _g = fromOld;
							var _g1 = this.selectionElementMax;
							while(_g < _g1) {
								var i = _g++;
								this.selectionProgram.removeElement(this.selectionElementArray[i]);
							}
						}
						var selectionElementMaxOld = this.selectionElementMax;
						this.selectionElementMax = 0;
						var _g = from;
						var _g1 = to;
						while(_g < _g1) {
							var i = _g++;
							_pageLine = this.page.pageLines[i];
							if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
								var page = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
								var page1 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
							} else if(i == this.selectLineFrom) {
								var page2 = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
								selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
							} else if(i == this.selectLineTo - 1) {
								selectX = Math.round(this.page.x + this.page.xOffset);
								var page3 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
							} else {
								selectX = Math.round(this.page.x + this.page.xOffset);
								selectWidth = Math.round(_pageLine.textSize);
							}
							selectY = Math.round(_pageLine.y);
							selectHeight = Math.round(_pageLine.height);
							mx = 0;
							my = 0;
							mw = selectWidth;
							mh = selectHeight;
							if(selectX < _x) {
								mw -= _x - selectX;
								mx = _x - selectX;
								if(mw > _width) {
									mw = _width;
								}
							} else if(selectX + selectWidth > _x + _width) {
								mw = _x + _width - selectX;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(selectY < _y) {
								mh -= _y - selectY;
								my = _y - selectY;
								if(mh > _height) {
									mh = _height;
								}
							} else if(selectY + selectHeight > _y + _height) {
								mh = _y + _height - selectY;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(this.selectionElementMax >= this.selectionElementArray.length) {
								selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
								if(addUpdate) {
									this.selectionProgram.addElement(selectionElement);
								}
								this.selectionElementArray.push(selectionElement);
							} else {
								selectionElement = this.selectionElementArray[this.selectionElementMax];
								selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
								if(this.selectionElementMax >= selectionElementMaxOld) {
									selectionElement.setStyle(this.selectionStyle);
									if(addUpdate) {
										this.selectionProgram.addElement(selectionElement);
									}
								} else if(addUpdate) {
									this.selectionProgram.update(selectionElement);
								}
							}
							this.selectionElementMax++;
						}
					}
					if(this.cursorElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var _width1 = _width;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			} else if((this.autoSize & 2) <= 0 && (this.autoSize & 1) <= 0 && this.hAlign == 0 && this.vAlign == 0 && this.isVisible) {
				this.fontProgram.pageUpdate(this.page);
			} else {
				var updateBgMaskSelCursor = (this.autoSize & 2) > 0 || (this.autoSize & 1) > 0;
				var pageUpdatePosition = false;
				var pageUpdateSize = (this.autoSize & 2) > 0 || (this.autoSize & 1) > 0;
				var pageUpdateXOffset = (this.autoSize & 2) <= 0;
				var pageUpdateYOffset = (this.autoSize & 1) <= 0;
				if(pageUpdateYOffset == null) {
					pageUpdateYOffset = true;
				}
				if(pageUpdateXOffset == null) {
					pageUpdateXOffset = true;
				}
				if(pageUpdateSize == null) {
					pageUpdateSize = true;
				}
				if(pageUpdatePosition == null) {
					pageUpdatePosition = true;
				}
				if(updateBgMaskSelCursor == null) {
					updateBgMaskSelCursor = true;
				}
				if(this.autoSize > 0) {
					if((this.autoSize & 2) > 0) {
						var w = (this.page.textWidth | 0) + this.leftSpace + this.rightSpace;
						if(w != this.width) {
							if(this.resizeWidth != null) {
								var oldWidth = this.width;
								this.resizeWidth(this.width = w,w - oldWidth);
							} else {
								this.width = w;
							}
						}
					}
					if((this.autoSize & 1) > 0) {
						var h = (this.page.textHeight | 0) + this.topSpace + this.bottomSpace;
						if(h != this.height) {
							if(this.resizeHeight != null) {
								var oldHeight = this.height;
								this.resizeHeight(this.height = h,h - oldHeight);
							} else {
								this.height = h;
							}
						}
					}
					if(this.hasMoveEvent != 0) {
						var _this = this.pickableMove;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.movePickBuffer.updateElement(this.pickableMove);
						}
					}
					if(this.hasClickEvent != 0) {
						var _this = this.pickableClick;
						_this.uiElement = this;
						_this.z = this.z;
						if(this.masked) {
							_this.x = this.x + this.maskX;
							_this.y = this.y + this.maskY;
							_this.w = this.maskWidth;
							_this.h = this.maskHeight;
						} else {
							_this.x = this.x;
							_this.y = this.y;
							_this.w = this.width;
							_this.h = this.height;
						}
						if(this.isVisible) {
							this.uiDisplay.clickPickBuffer.updateElement(this.pickableClick);
						}
					}
				}
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				var _yOffset = this.yOffset;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = _yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
						break;
					default:
						y_offset = _yOffset;
					}
				}
				if(pageUpdatePosition && pageUpdateSize) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetPositionSize(this.page,_x,_y,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else if(pageUpdatePosition) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetPosition(this.page,_x,_y,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else if(pageUpdateSize) {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetSize(this.page,_width,_height,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				} else {
					var tmp;
					if(pageUpdateXOffset) {
						var _xOffset = this.xOffset;
						if((this.autoSize & 2) > 0) {
							tmp = _xOffset;
						} else {
							switch(this.hAlign) {
							case 1:
								tmp = (this.width - this.leftSpace - this.rightSpace - this.page.textWidth) / 2 + _xOffset;
								break;
							case 2:
								tmp = this.width - this.leftSpace - this.rightSpace - this.page.textWidth + _xOffset;
								break;
							default:
								tmp = _xOffset;
							}
						}
					} else {
						tmp = null;
					}
					this.fontProgram.pageSetOffset(this.page,tmp,pageUpdateYOffset ? y_offset : null,this.isVisible);
				}
				if(this.isVisible) {
					this.fontProgram.pageUpdate(this.page);
				}
				if(updateBgMaskSelCursor) {
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var maskElement = this.maskElement;
					var autoUpdate = this.isVisible;
					if(autoUpdate == null) {
						autoUpdate = true;
					}
					maskElement.x = _x;
					maskElement.y = _y;
					maskElement.w = _width;
					maskElement.h = _height;
					if(autoUpdate) {
						this.fontProgram.maskBuffer.updateElement(maskElement);
					}
					if(this.backgroundElement != null) {
						this.backgroundElement.setLayout(this);
						if(this.isVisible && this.backgroundIsVisible) {
							this.backgroundProgram.update(this.backgroundElement);
						}
					}
					if(this.selectionElementArray != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.selectionIsVisible;
						var selectX;
						var selectWidth;
						var selectY;
						var selectHeight;
						var mx;
						var my;
						var mw;
						var mh;
						var from = this.page.visibleLineFrom > this.selectLineFrom ? this.page.visibleLineFrom : this.selectLineFrom;
						var to = this.page.visibleLineTo < this.selectLineTo ? this.page.visibleLineTo : this.selectLineTo;
						var _selectFrom = this.selectFrom;
						var _selectTo = this.selectTo;
						if(from >= this.page.pageLines.length) {
							haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 414, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [from,"out of max page-line"]});
						}
						if(this.selectFrom == this.page.pageLines[from].glyphes.length) {
							_selectFrom = 0;
							++from;
						}
						if(_selectTo == 0 && to > from + 1) {
							if(to - 1 >= this.page.pageLines.length) {
								haxe_Log.trace("bug into _setCreateSelection",{ fileName : "peote/ui/interactive/UITextPage.hx", lineNumber : 419, className : "peote.ui.interactive.UITextPage__Main_MyFontStyle", methodName : "_setCreateSelection", customParams : [to,"out of max page-line"]});
							}
							--to;
							_selectTo = this.page.pageLines[to - 1].glyphes.length;
						}
						var _pageLine;
						var selectionElement;
						if(addUpdate) {
							var fromOld = to - from;
							if(fromOld < 0) {
								fromOld = 0;
							}
							var _g = fromOld;
							var _g1 = this.selectionElementMax;
							while(_g < _g1) {
								var i = _g++;
								this.selectionProgram.removeElement(this.selectionElementArray[i]);
							}
						}
						var selectionElementMaxOld = this.selectionElementMax;
						this.selectionElementMax = 0;
						var _g = from;
						var _g1 = to;
						while(_g < _g1) {
							var i = _g++;
							_pageLine = this.page.pageLines[i];
							if(i == this.selectLineFrom && i == this.selectLineTo - 1) {
								var page = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page.x,page.xOffset,_selectFrom));
								var page1 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page1.x,page1.xOffset,_selectTo) - selectX);
							} else if(i == this.selectLineFrom) {
								var page2 = this.page;
								selectX = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page2.x,page2.xOffset,_selectFrom));
								selectWidth = Math.round(this.page.x + this.page.xOffset + _pageLine.textSize - selectX);
							} else if(i == this.selectLineTo - 1) {
								selectX = Math.round(this.page.x + this.page.xOffset);
								var page3 = this.page;
								selectWidth = Math.round(this.fontProgram.pageLineGetPositionAtChar(_pageLine,page3.x,page3.xOffset,_selectTo) - selectX);
							} else {
								selectX = Math.round(this.page.x + this.page.xOffset);
								selectWidth = Math.round(_pageLine.textSize);
							}
							selectY = Math.round(_pageLine.y);
							selectHeight = Math.round(_pageLine.height);
							mx = 0;
							my = 0;
							mw = selectWidth;
							mh = selectHeight;
							if(selectX < _x) {
								mw -= _x - selectX;
								mx = _x - selectX;
								if(mw > _width) {
									mw = _width;
								}
							} else if(selectX + selectWidth > _x + _width) {
								mw = _x + _width - selectX;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(selectY < _y) {
								mh -= _y - selectY;
								my = _y - selectY;
								if(mh > _height) {
									mh = _height;
								}
							} else if(selectY + selectHeight > _y + _height) {
								mh = _y + _height - selectY;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(this.selectionElementMax >= this.selectionElementArray.length) {
								selectionElement = this.selectionProgram.createElementAt(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z,this.selectionStyle);
								if(addUpdate) {
									this.selectionProgram.addElement(selectionElement);
								}
								this.selectionElementArray.push(selectionElement);
							} else {
								selectionElement = this.selectionElementArray[this.selectionElementMax];
								selectionElement.setMasked(this,selectX,selectY,selectWidth,selectHeight,mx,my,mw,mh,this.z);
								if(this.selectionElementMax >= selectionElementMaxOld) {
									selectionElement.setStyle(this.selectionStyle);
									if(addUpdate) {
										this.selectionProgram.addElement(selectionElement);
									}
								} else if(addUpdate) {
									this.selectionProgram.update(selectionElement);
								}
							}
							this.selectionElementMax++;
						}
					}
					if(this.cursorElement != null) {
						var y_offset1 = y_offset + this.topSpace;
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var _width1 = _width;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
		}
	}
	,pasteFromClipboard: function() {
	}
	,selectAll: function() {
		this.select(0,this.page.pageLines[this.page.pageLines.length - 1].glyphes.length,0,this.page.pageLines.length - 1);
		if(0 != this.cursorLine) {
			if(this.page != null && 0 >= this.page.pageLines.length) {
				this.cursorLine = this.page.pageLines.length - 1;
			} else {
				this.cursorLine = 0;
			}
			if(this.page != null) {
				this.pageLine = this.page.pageLines[this.cursorLine];
				if(this.cursor > this.pageLine.glyphes.length) {
					if(this.cursorWant == -1) {
						this.cursorWant = this.cursor;
					}
					var pos = this.pageLine.glyphes.length;
					if(pos != this.cursor) {
						if(pos < 0) {
							this.cursor = 0;
						} else if(this.page != null && pos > this.pageLine.glyphes.length) {
							this.cursor = this.pageLine.glyphes.length;
						} else {
							this.cursor = pos;
						}
						if(this.page != null && this.cursorStyle != null) {
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var create = this.cursorElement == null;
							var _x = this.x + this.leftSpace;
							var _y = this.y + this.topSpace;
							var _width = this.width - this.leftSpace - this.rightSpace;
							var _height = this.height - this.topSpace - this.bottomSpace;
							if(this.masked) {
								if(this.maskX > this.leftSpace) {
									_x = this.x + this.maskX;
								}
								if(this.maskY > this.topSpace) {
									_y = this.y + this.maskY;
								}
								if(this.x + this.maskX + this.maskWidth < _x + _width) {
									_width = this.maskX + this.maskWidth + this.x - _x;
								}
								if(this.y + this.maskY + this.maskHeight < _y + _height) {
									_height = this.maskY + this.maskHeight + this.y - _y;
								}
							}
							var _width1 = _width;
							var _yOffset = this.yOffset;
							var y_offset;
							if((this.autoSize & 1) > 0) {
								y_offset = _yOffset;
							} else {
								switch(this.vAlign) {
								case 4:
									y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
									break;
								case 8:
									y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
									break;
								default:
									y_offset = _yOffset;
								}
							}
							var y_offset1 = y_offset + this.topSpace;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(create) {
								var z = this.z;
								var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
								if(stylePos < 0) {
									if(this.uiDisplay.autoAddStyles) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var styleId = this.cursorStyle.getUUID();
										_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
										if(_this.stylePosBeforeFont == 0) {
											_this.addProgram(program,null,true);
										} else {
											_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
										}
										_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
										_this.stylePosBeforeFont++;
									} else {
										var c = js_Boot.getClass(this.cursorStyle);
										throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
									}
								} else {
									this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
									if(this.cursorProgram == null) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var stylePos1 = stylePos;
										_this.usedStyleProgram[stylePos1] = program;
										var afterProgram = null;
										while(stylePos1-- > 0) {
											afterProgram = _this.usedStyleProgram[stylePos1];
											if(afterProgram != null) {
												break;
											}
										}
										_this.addProgram(program,afterProgram,afterProgram == null);
									}
								}
								this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
								if(addUpdate) {
									this.cursorProgram.addElement(this.cursorElement);
								}
							} else {
								this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
								if(addUpdate) {
									this.cursorProgram.update(this.cursorElement);
								}
							}
						}
					}
				} else if(this.cursorWant > 0) {
					var pos = this.cursorWant;
					if(pos != this.cursor) {
						if(pos < 0) {
							this.cursor = 0;
						} else if(this.page != null && pos > this.pageLine.glyphes.length) {
							this.cursor = this.pageLine.glyphes.length;
						} else {
							this.cursor = pos;
						}
						if(this.page != null && this.cursorStyle != null) {
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var create = this.cursorElement == null;
							var _x = this.x + this.leftSpace;
							var _y = this.y + this.topSpace;
							var _width = this.width - this.leftSpace - this.rightSpace;
							var _height = this.height - this.topSpace - this.bottomSpace;
							if(this.masked) {
								if(this.maskX > this.leftSpace) {
									_x = this.x + this.maskX;
								}
								if(this.maskY > this.topSpace) {
									_y = this.y + this.maskY;
								}
								if(this.x + this.maskX + this.maskWidth < _x + _width) {
									_width = this.maskX + this.maskWidth + this.x - _x;
								}
								if(this.y + this.maskY + this.maskHeight < _y + _height) {
									_height = this.maskY + this.maskHeight + this.y - _y;
								}
							}
							var _width1 = _width;
							var _yOffset = this.yOffset;
							var y_offset;
							if((this.autoSize & 1) > 0) {
								y_offset = _yOffset;
							} else {
								switch(this.vAlign) {
								case 4:
									y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
									break;
								case 8:
									y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
									break;
								default:
									y_offset = _yOffset;
								}
							}
							var y_offset1 = y_offset + this.topSpace;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(create) {
								var z = this.z;
								var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
								if(stylePos < 0) {
									if(this.uiDisplay.autoAddStyles) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var styleId = this.cursorStyle.getUUID();
										_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
										if(_this.stylePosBeforeFont == 0) {
											_this.addProgram(program,null,true);
										} else {
											_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
										}
										_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
										_this.stylePosBeforeFont++;
									} else {
										var c = js_Boot.getClass(this.cursorStyle);
										throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
									}
								} else {
									this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
									if(this.cursorProgram == null) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var stylePos1 = stylePos;
										_this.usedStyleProgram[stylePos1] = program;
										var afterProgram = null;
										while(stylePos1-- > 0) {
											afterProgram = _this.usedStyleProgram[stylePos1];
											if(afterProgram != null) {
												break;
											}
										}
										_this.addProgram(program,afterProgram,afterProgram == null);
									}
								}
								this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
								if(addUpdate) {
									this.cursorProgram.addElement(this.cursorElement);
								}
							} else {
								this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
								if(addUpdate) {
									this.cursorProgram.update(this.cursorElement);
								}
							}
						}
					}
				}
				if(this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var page = this.page;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.pageLine.y);
					var ch = Math.round(this.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
		}
		if(0 != this.cursor) {
			if(this.page != null && 0 > this.pageLine.glyphes.length) {
				this.cursor = this.pageLine.glyphes.length;
			} else {
				this.cursor = 0;
			}
			if(this.page != null && this.cursorStyle != null) {
				var addUpdate = this.isVisible && this.cursorIsVisible;
				var create = this.cursorElement == null;
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var _width1 = _width;
				var _yOffset = this.yOffset;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = _yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
						break;
					default:
						y_offset = _yOffset;
					}
				}
				var y_offset1 = y_offset + this.topSpace;
				_width1 += 3;
				var page = this.page;
				var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
				var cw = 2;
				var cy = Math.round(this.pageLine.y);
				var ch = Math.round(this.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = cw;
				var mh = ch;
				if(cx < _x) {
					mw -= _x - cx;
					mx = _x - cx;
					if(mw > _width1) {
						mw = _width1;
					}
				} else if(cx + cw > _x + _width1) {
					mw = _x + _width1 - cx;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(cy < _y) {
					mh -= _y - cy;
					my = _y - cy;
					if(mh > _height) {
						mh = _height;
					}
				} else if(cy + ch > _y + _height) {
					mh = _y + _height - cy;
				}
				if(mh < 0) {
					mh = 0;
				}
				if(create) {
					var z = this.z;
					var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
					if(stylePos < 0) {
						if(this.uiDisplay.autoAddStyles) {
							var _this = this.uiDisplay;
							var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
							var styleId = this.cursorStyle.getUUID();
							_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
							if(_this.stylePosBeforeFont == 0) {
								_this.addProgram(program,null,true);
							} else {
								_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
							}
							_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
							_this.stylePosBeforeFont++;
						} else {
							var c = js_Boot.getClass(this.cursorStyle);
							throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
						}
					} else {
						this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
						if(this.cursorProgram == null) {
							var _this = this.uiDisplay;
							var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
							var stylePos1 = stylePos;
							_this.usedStyleProgram[stylePos1] = program;
							var afterProgram = null;
							while(stylePos1-- > 0) {
								afterProgram = _this.usedStyleProgram[stylePos1];
								if(afterProgram != null) {
									break;
								}
							}
							_this.addProgram(program,afterProgram,afterProgram == null);
						}
					}
					this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
					if(addUpdate) {
						this.cursorProgram.addElement(this.cursorElement);
					}
				} else {
					this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.cursorProgram.update(this.cursorElement);
					}
				}
			}
		}
		this.cursorWant = -1;
	}
	,cursorPageStart: function(addSelection) {
		if(addSelection == null) {
			addSelection = false;
		}
		if(!addSelection && (this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo)) {
			this.selectLineFrom = this.selectLineTo = this.selectFrom = this.selectTo = 0;
			if(this.page != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElementArray != null && this.isVisible) {
					var _g = 0;
					var _g1 = this.selectionElementMax;
					while(_g < _g1) {
						var i = _g++;
						this.selectionProgram.removeElement(this.selectionElementArray[i]);
					}
				}
			}
			this.selectionIsVisible = false;
		}
		var oldCursorLine = this.cursorLine;
		var oldCursor = this.cursor;
		if(0 != this.cursorLine) {
			if(this.page != null && 0 >= this.page.pageLines.length) {
				this.cursorLine = this.page.pageLines.length - 1;
			} else {
				this.cursorLine = 0;
			}
			if(this.page != null) {
				this.pageLine = this.page.pageLines[this.cursorLine];
				if(this.cursor > this.pageLine.glyphes.length) {
					if(this.cursorWant == -1) {
						this.cursorWant = this.cursor;
					}
					var pos = this.pageLine.glyphes.length;
					if(pos != this.cursor) {
						if(pos < 0) {
							this.cursor = 0;
						} else if(this.page != null && pos > this.pageLine.glyphes.length) {
							this.cursor = this.pageLine.glyphes.length;
						} else {
							this.cursor = pos;
						}
						if(this.page != null && this.cursorStyle != null) {
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var create = this.cursorElement == null;
							var _x = this.x + this.leftSpace;
							var _y = this.y + this.topSpace;
							var _width = this.width - this.leftSpace - this.rightSpace;
							var _height = this.height - this.topSpace - this.bottomSpace;
							if(this.masked) {
								if(this.maskX > this.leftSpace) {
									_x = this.x + this.maskX;
								}
								if(this.maskY > this.topSpace) {
									_y = this.y + this.maskY;
								}
								if(this.x + this.maskX + this.maskWidth < _x + _width) {
									_width = this.maskX + this.maskWidth + this.x - _x;
								}
								if(this.y + this.maskY + this.maskHeight < _y + _height) {
									_height = this.maskY + this.maskHeight + this.y - _y;
								}
							}
							var _width1 = _width;
							var _yOffset = this.yOffset;
							var y_offset;
							if((this.autoSize & 1) > 0) {
								y_offset = _yOffset;
							} else {
								switch(this.vAlign) {
								case 4:
									y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
									break;
								case 8:
									y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
									break;
								default:
									y_offset = _yOffset;
								}
							}
							var y_offset1 = y_offset + this.topSpace;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(create) {
								var z = this.z;
								var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
								if(stylePos < 0) {
									if(this.uiDisplay.autoAddStyles) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var styleId = this.cursorStyle.getUUID();
										_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
										if(_this.stylePosBeforeFont == 0) {
											_this.addProgram(program,null,true);
										} else {
											_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
										}
										_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
										_this.stylePosBeforeFont++;
									} else {
										var c = js_Boot.getClass(this.cursorStyle);
										throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
									}
								} else {
									this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
									if(this.cursorProgram == null) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var stylePos1 = stylePos;
										_this.usedStyleProgram[stylePos1] = program;
										var afterProgram = null;
										while(stylePos1-- > 0) {
											afterProgram = _this.usedStyleProgram[stylePos1];
											if(afterProgram != null) {
												break;
											}
										}
										_this.addProgram(program,afterProgram,afterProgram == null);
									}
								}
								this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
								if(addUpdate) {
									this.cursorProgram.addElement(this.cursorElement);
								}
							} else {
								this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
								if(addUpdate) {
									this.cursorProgram.update(this.cursorElement);
								}
							}
						}
					}
				} else if(this.cursorWant > 0) {
					var pos = this.cursorWant;
					if(pos != this.cursor) {
						if(pos < 0) {
							this.cursor = 0;
						} else if(this.page != null && pos > this.pageLine.glyphes.length) {
							this.cursor = this.pageLine.glyphes.length;
						} else {
							this.cursor = pos;
						}
						if(this.page != null && this.cursorStyle != null) {
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var create = this.cursorElement == null;
							var _x = this.x + this.leftSpace;
							var _y = this.y + this.topSpace;
							var _width = this.width - this.leftSpace - this.rightSpace;
							var _height = this.height - this.topSpace - this.bottomSpace;
							if(this.masked) {
								if(this.maskX > this.leftSpace) {
									_x = this.x + this.maskX;
								}
								if(this.maskY > this.topSpace) {
									_y = this.y + this.maskY;
								}
								if(this.x + this.maskX + this.maskWidth < _x + _width) {
									_width = this.maskX + this.maskWidth + this.x - _x;
								}
								if(this.y + this.maskY + this.maskHeight < _y + _height) {
									_height = this.maskY + this.maskHeight + this.y - _y;
								}
							}
							var _width1 = _width;
							var _yOffset = this.yOffset;
							var y_offset;
							if((this.autoSize & 1) > 0) {
								y_offset = _yOffset;
							} else {
								switch(this.vAlign) {
								case 4:
									y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
									break;
								case 8:
									y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
									break;
								default:
									y_offset = _yOffset;
								}
							}
							var y_offset1 = y_offset + this.topSpace;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(create) {
								var z = this.z;
								var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
								if(stylePos < 0) {
									if(this.uiDisplay.autoAddStyles) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var styleId = this.cursorStyle.getUUID();
										_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
										if(_this.stylePosBeforeFont == 0) {
											_this.addProgram(program,null,true);
										} else {
											_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
										}
										_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
										_this.stylePosBeforeFont++;
									} else {
										var c = js_Boot.getClass(this.cursorStyle);
										throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
									}
								} else {
									this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
									if(this.cursorProgram == null) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var stylePos1 = stylePos;
										_this.usedStyleProgram[stylePos1] = program;
										var afterProgram = null;
										while(stylePos1-- > 0) {
											afterProgram = _this.usedStyleProgram[stylePos1];
											if(afterProgram != null) {
												break;
											}
										}
										_this.addProgram(program,afterProgram,afterProgram == null);
									}
								}
								this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
								if(addUpdate) {
									this.cursorProgram.addElement(this.cursorElement);
								}
							} else {
								this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
								if(addUpdate) {
									this.cursorProgram.update(this.cursorElement);
								}
							}
						}
					}
				}
				if(this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var page = this.page;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.pageLine.y);
					var ch = Math.round(this.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
		}
		if(0 != this.cursor) {
			if(this.page != null && 0 > this.pageLine.glyphes.length) {
				this.cursor = this.pageLine.glyphes.length;
			} else {
				this.cursor = 0;
			}
			if(this.page != null && this.cursorStyle != null) {
				var addUpdate = this.isVisible && this.cursorIsVisible;
				var create = this.cursorElement == null;
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var _width1 = _width;
				var _yOffset = this.yOffset;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = _yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
						break;
					default:
						y_offset = _yOffset;
					}
				}
				var y_offset1 = y_offset + this.topSpace;
				_width1 += 3;
				var page = this.page;
				var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
				var cw = 2;
				var cy = Math.round(this.pageLine.y);
				var ch = Math.round(this.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = cw;
				var mh = ch;
				if(cx < _x) {
					mw -= _x - cx;
					mx = _x - cx;
					if(mw > _width1) {
						mw = _width1;
					}
				} else if(cx + cw > _x + _width1) {
					mw = _x + _width1 - cx;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(cy < _y) {
					mh -= _y - cy;
					my = _y - cy;
					if(mh > _height) {
						mh = _height;
					}
				} else if(cy + ch > _y + _height) {
					mh = _y + _height - cy;
				}
				if(mh < 0) {
					mh = 0;
				}
				if(create) {
					var z = this.z;
					var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
					if(stylePos < 0) {
						if(this.uiDisplay.autoAddStyles) {
							var _this = this.uiDisplay;
							var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
							var styleId = this.cursorStyle.getUUID();
							_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
							if(_this.stylePosBeforeFont == 0) {
								_this.addProgram(program,null,true);
							} else {
								_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
							}
							_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
							_this.stylePosBeforeFont++;
						} else {
							var c = js_Boot.getClass(this.cursorStyle);
							throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
						}
					} else {
						this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
						if(this.cursorProgram == null) {
							var _this = this.uiDisplay;
							var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
							var stylePos1 = stylePos;
							_this.usedStyleProgram[stylePos1] = program;
							var afterProgram = null;
							while(stylePos1-- > 0) {
								afterProgram = _this.usedStyleProgram[stylePos1];
								if(afterProgram != null) {
									break;
								}
							}
							_this.addProgram(program,afterProgram,afterProgram == null);
						}
					}
					this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
					if(addUpdate) {
						this.cursorProgram.addElement(this.cursorElement);
					}
				} else {
					this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.cursorProgram.update(this.cursorElement);
					}
				}
			}
		}
		if(addSelection) {
			if(this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo) {
				if(oldCursorLine == this.selectLineFrom && oldCursor == this.selectFrom) {
					this.select(this.cursor,this.selectTo,this.cursorLine,this.selectLineTo - 1);
				} else {
					this.select(this.selectFrom,this.cursor,this.selectLineFrom,this.cursorLine);
				}
			} else if(this.cursorLine < oldCursorLine) {
				this.select(this.cursor,oldCursor,this.cursorLine,oldCursorLine);
			} else {
				this.select(oldCursor,this.cursor,oldCursorLine,this.cursorLine);
			}
		}
		this.cursorWant = -1;
	}
	,cursorPageEnd: function(addSelection) {
		if(addSelection == null) {
			addSelection = false;
		}
		if(!addSelection && (this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo)) {
			this.selectLineFrom = this.selectLineTo = this.selectFrom = this.selectTo = 0;
			if(this.page != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElementArray != null && this.isVisible) {
					var _g = 0;
					var _g1 = this.selectionElementMax;
					while(_g < _g1) {
						var i = _g++;
						this.selectionProgram.removeElement(this.selectionElementArray[i]);
					}
				}
			}
			this.selectionIsVisible = false;
		}
		var newCursorLine = this.page.pageLines.length - 1;
		var newCursor = this.page.pageLines[this.page.pageLines.length - 1].glyphes.length;
		var oldCursorLine = this.cursorLine;
		var oldCursor = this.cursor;
		if(newCursorLine != null) {
			if(newCursorLine != this.cursorLine) {
				if(newCursorLine < 0) {
					this.cursorLine = 0;
				} else if(this.page != null && newCursorLine >= this.page.pageLines.length) {
					this.cursorLine = this.page.pageLines.length - 1;
				} else {
					this.cursorLine = newCursorLine;
				}
				if(this.page != null) {
					this.pageLine = this.page.pageLines[this.cursorLine];
					if(this.cursor > this.pageLine.glyphes.length) {
						if(this.cursorWant == -1) {
							this.cursorWant = this.cursor;
						}
						var pos = this.pageLine.glyphes.length;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					} else if(this.cursorWant > 0) {
						var pos = this.cursorWant;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					}
					if(this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
		}
		if(newCursor != null) {
			if(newCursor != this.cursor) {
				if(newCursor < 0) {
					this.cursor = 0;
				} else if(this.page != null && newCursor > this.pageLine.glyphes.length) {
					this.cursor = this.pageLine.glyphes.length;
				} else {
					this.cursor = newCursor;
				}
				if(this.page != null && this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var page = this.page;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.pageLine.y);
					var ch = Math.round(this.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
		}
		if(addSelection) {
			if(this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo) {
				if(oldCursorLine == this.selectLineFrom && oldCursor == this.selectFrom) {
					this.select(this.cursor,this.selectTo,this.cursorLine,this.selectLineTo - 1);
				} else {
					this.select(this.selectFrom,this.cursor,this.selectLineFrom,this.cursorLine);
				}
			} else if(this.cursorLine < oldCursorLine) {
				this.select(this.cursor,oldCursor,this.cursorLine,oldCursorLine);
			} else {
				this.select(oldCursor,this.cursor,oldCursorLine,this.cursorLine);
			}
		}
		this.cursorWant = -1;
	}
	,cursorStart: function(addSelection) {
		if(addSelection == null) {
			addSelection = false;
		}
		if(!addSelection && (this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo)) {
			this.selectLineFrom = this.selectLineTo = this.selectFrom = this.selectTo = 0;
			if(this.page != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElementArray != null && this.isVisible) {
					var _g = 0;
					var _g1 = this.selectionElementMax;
					while(_g < _g1) {
						var i = _g++;
						this.selectionProgram.removeElement(this.selectionElementArray[i]);
					}
				}
			}
			this.selectionIsVisible = false;
		}
		var newCursorLine = null;
		var oldCursorLine = this.cursorLine;
		var oldCursor = this.cursor;
		if(newCursorLine != null) {
			if(newCursorLine != this.cursorLine) {
				if(newCursorLine < 0) {
					this.cursorLine = 0;
				} else if(this.page != null && newCursorLine >= this.page.pageLines.length) {
					this.cursorLine = this.page.pageLines.length - 1;
				} else {
					this.cursorLine = newCursorLine;
				}
				if(this.page != null) {
					this.pageLine = this.page.pageLines[this.cursorLine];
					if(this.cursor > this.pageLine.glyphes.length) {
						if(this.cursorWant == -1) {
							this.cursorWant = this.cursor;
						}
						var pos = this.pageLine.glyphes.length;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					} else if(this.cursorWant > 0) {
						var pos = this.cursorWant;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					}
					if(this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
		}
		if(0 != this.cursor) {
			if(this.page != null && 0 > this.pageLine.glyphes.length) {
				this.cursor = this.pageLine.glyphes.length;
			} else {
				this.cursor = 0;
			}
			if(this.page != null && this.cursorStyle != null) {
				var addUpdate = this.isVisible && this.cursorIsVisible;
				var create = this.cursorElement == null;
				var _x = this.x + this.leftSpace;
				var _y = this.y + this.topSpace;
				var _width = this.width - this.leftSpace - this.rightSpace;
				var _height = this.height - this.topSpace - this.bottomSpace;
				if(this.masked) {
					if(this.maskX > this.leftSpace) {
						_x = this.x + this.maskX;
					}
					if(this.maskY > this.topSpace) {
						_y = this.y + this.maskY;
					}
					if(this.x + this.maskX + this.maskWidth < _x + _width) {
						_width = this.maskX + this.maskWidth + this.x - _x;
					}
					if(this.y + this.maskY + this.maskHeight < _y + _height) {
						_height = this.maskY + this.maskHeight + this.y - _y;
					}
				}
				var _width1 = _width;
				var _yOffset = this.yOffset;
				var y_offset;
				if((this.autoSize & 1) > 0) {
					y_offset = _yOffset;
				} else {
					switch(this.vAlign) {
					case 4:
						y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
						break;
					case 8:
						y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
						break;
					default:
						y_offset = _yOffset;
					}
				}
				var y_offset1 = y_offset + this.topSpace;
				_width1 += 3;
				var page = this.page;
				var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
				var cw = 2;
				var cy = Math.round(this.pageLine.y);
				var ch = Math.round(this.pageLine.height);
				var mx = 0;
				var my = 0;
				var mw = cw;
				var mh = ch;
				if(cx < _x) {
					mw -= _x - cx;
					mx = _x - cx;
					if(mw > _width1) {
						mw = _width1;
					}
				} else if(cx + cw > _x + _width1) {
					mw = _x + _width1 - cx;
				}
				if(mw < 0) {
					mw = 0;
				}
				if(cy < _y) {
					mh -= _y - cy;
					my = _y - cy;
					if(mh > _height) {
						mh = _height;
					}
				} else if(cy + ch > _y + _height) {
					mh = _y + _height - cy;
				}
				if(mh < 0) {
					mh = 0;
				}
				if(create) {
					var z = this.z;
					var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
					if(stylePos < 0) {
						if(this.uiDisplay.autoAddStyles) {
							var _this = this.uiDisplay;
							var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
							var styleId = this.cursorStyle.getUUID();
							_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
							if(_this.stylePosBeforeFont == 0) {
								_this.addProgram(program,null,true);
							} else {
								_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
							}
							_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
							_this.stylePosBeforeFont++;
						} else {
							var c = js_Boot.getClass(this.cursorStyle);
							throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
						}
					} else {
						this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
						if(this.cursorProgram == null) {
							var _this = this.uiDisplay;
							var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
							var stylePos1 = stylePos;
							_this.usedStyleProgram[stylePos1] = program;
							var afterProgram = null;
							while(stylePos1-- > 0) {
								afterProgram = _this.usedStyleProgram[stylePos1];
								if(afterProgram != null) {
									break;
								}
							}
							_this.addProgram(program,afterProgram,afterProgram == null);
						}
					}
					this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
					if(addUpdate) {
						this.cursorProgram.addElement(this.cursorElement);
					}
				} else {
					this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
					if(addUpdate) {
						this.cursorProgram.update(this.cursorElement);
					}
				}
			}
		}
		if(addSelection) {
			if(this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo) {
				if(oldCursorLine == this.selectLineFrom && oldCursor == this.selectFrom) {
					this.select(this.cursor,this.selectTo,this.cursorLine,this.selectLineTo - 1);
				} else {
					this.select(this.selectFrom,this.cursor,this.selectLineFrom,this.cursorLine);
				}
			} else if(this.cursorLine < oldCursorLine) {
				this.select(this.cursor,oldCursor,this.cursorLine,oldCursorLine);
			} else {
				this.select(oldCursor,this.cursor,oldCursorLine,this.cursorLine);
			}
		}
		this.cursorWant = -1;
	}
	,cursorEnd: function(addSelection) {
		if(addSelection == null) {
			addSelection = false;
		}
		if(!addSelection && (this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo)) {
			this.selectLineFrom = this.selectLineTo = this.selectFrom = this.selectTo = 0;
			if(this.page != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElementArray != null && this.isVisible) {
					var _g = 0;
					var _g1 = this.selectionElementMax;
					while(_g < _g1) {
						var i = _g++;
						this.selectionProgram.removeElement(this.selectionElementArray[i]);
					}
				}
			}
			this.selectionIsVisible = false;
		}
		var newCursorLine = null;
		var newCursor = this.pageLine.glyphes.length;
		var oldCursorLine = this.cursorLine;
		var oldCursor = this.cursor;
		if(newCursorLine != null) {
			if(newCursorLine != this.cursorLine) {
				if(newCursorLine < 0) {
					this.cursorLine = 0;
				} else if(this.page != null && newCursorLine >= this.page.pageLines.length) {
					this.cursorLine = this.page.pageLines.length - 1;
				} else {
					this.cursorLine = newCursorLine;
				}
				if(this.page != null) {
					this.pageLine = this.page.pageLines[this.cursorLine];
					if(this.cursor > this.pageLine.glyphes.length) {
						if(this.cursorWant == -1) {
							this.cursorWant = this.cursor;
						}
						var pos = this.pageLine.glyphes.length;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					} else if(this.cursorWant > 0) {
						var pos = this.cursorWant;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					}
					if(this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
		}
		if(newCursor != null) {
			if(newCursor != this.cursor) {
				if(newCursor < 0) {
					this.cursor = 0;
				} else if(this.page != null && newCursor > this.pageLine.glyphes.length) {
					this.cursor = this.pageLine.glyphes.length;
				} else {
					this.cursor = newCursor;
				}
				if(this.page != null && this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var page = this.page;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.pageLine.y);
					var ch = Math.round(this.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
		}
		if(addSelection) {
			if(this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo) {
				if(oldCursorLine == this.selectLineFrom && oldCursor == this.selectFrom) {
					this.select(this.cursor,this.selectTo,this.cursorLine,this.selectLineTo - 1);
				} else {
					this.select(this.selectFrom,this.cursor,this.selectLineFrom,this.cursorLine);
				}
			} else if(this.cursorLine < oldCursorLine) {
				this.select(this.cursor,oldCursor,this.cursorLine,oldCursorLine);
			} else {
				this.select(oldCursor,this.cursor,oldCursorLine,this.cursorLine);
			}
		}
		this.cursorWant = -1;
	}
	,cursorLeft: function(addSelection) {
		if(addSelection == null) {
			addSelection = false;
		}
		if(!addSelection && (this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo)) {
			var pos = this.selectLineFrom;
			if(pos != this.cursorLine) {
				if(pos < 0) {
					this.cursorLine = 0;
				} else if(this.page != null && pos >= this.page.pageLines.length) {
					this.cursorLine = this.page.pageLines.length - 1;
				} else {
					this.cursorLine = pos;
				}
				if(this.page != null) {
					this.pageLine = this.page.pageLines[this.cursorLine];
					if(this.cursor > this.pageLine.glyphes.length) {
						if(this.cursorWant == -1) {
							this.cursorWant = this.cursor;
						}
						var pos = this.pageLine.glyphes.length;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					} else if(this.cursorWant > 0) {
						var pos = this.cursorWant;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					}
					if(this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
			var pos = this.selectFrom;
			if(pos != this.cursor) {
				if(pos < 0) {
					this.cursor = 0;
				} else if(this.page != null && pos > this.pageLine.glyphes.length) {
					this.cursor = this.pageLine.glyphes.length;
				} else {
					this.cursor = pos;
				}
				if(this.page != null && this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var page = this.page;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.pageLine.y);
					var ch = Math.round(this.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
			this.selectLineFrom = this.selectLineTo = this.selectFrom = this.selectTo = 0;
			if(this.page != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElementArray != null && this.isVisible) {
					var _g = 0;
					var _g1 = this.selectionElementMax;
					while(_g < _g1) {
						var i = _g++;
						this.selectionProgram.removeElement(this.selectionElementArray[i]);
					}
				}
			}
			this.selectionIsVisible = false;
		} else if(this.cursor == 0) {
			if(this.cursorLine > 0) {
				var newCursorLine = this.cursorLine - 1;
				var newCursor = this.page.pageLines[this.cursorLine - 1].glyphes.length;
				var oldCursorLine = this.cursorLine;
				var oldCursor = this.cursor;
				if(newCursorLine != null) {
					if(newCursorLine != this.cursorLine) {
						if(newCursorLine < 0) {
							this.cursorLine = 0;
						} else if(this.page != null && newCursorLine >= this.page.pageLines.length) {
							this.cursorLine = this.page.pageLines.length - 1;
						} else {
							this.cursorLine = newCursorLine;
						}
						if(this.page != null) {
							this.pageLine = this.page.pageLines[this.cursorLine];
							if(this.cursor > this.pageLine.glyphes.length) {
								if(this.cursorWant == -1) {
									this.cursorWant = this.cursor;
								}
								var pos = this.pageLine.glyphes.length;
								if(pos != this.cursor) {
									if(pos < 0) {
										this.cursor = 0;
									} else if(this.page != null && pos > this.pageLine.glyphes.length) {
										this.cursor = this.pageLine.glyphes.length;
									} else {
										this.cursor = pos;
									}
									if(this.page != null && this.cursorStyle != null) {
										var addUpdate = this.isVisible && this.cursorIsVisible;
										var create = this.cursorElement == null;
										var _x = this.x + this.leftSpace;
										var _y = this.y + this.topSpace;
										var _width = this.width - this.leftSpace - this.rightSpace;
										var _height = this.height - this.topSpace - this.bottomSpace;
										if(this.masked) {
											if(this.maskX > this.leftSpace) {
												_x = this.x + this.maskX;
											}
											if(this.maskY > this.topSpace) {
												_y = this.y + this.maskY;
											}
											if(this.x + this.maskX + this.maskWidth < _x + _width) {
												_width = this.maskX + this.maskWidth + this.x - _x;
											}
											if(this.y + this.maskY + this.maskHeight < _y + _height) {
												_height = this.maskY + this.maskHeight + this.y - _y;
											}
										}
										var _width1 = _width;
										var _yOffset = this.yOffset;
										var y_offset;
										if((this.autoSize & 1) > 0) {
											y_offset = _yOffset;
										} else {
											switch(this.vAlign) {
											case 4:
												y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
												break;
											case 8:
												y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
												break;
											default:
												y_offset = _yOffset;
											}
										}
										var y_offset1 = y_offset + this.topSpace;
										_width1 += 3;
										var page = this.page;
										var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
										var cw = 2;
										var cy = Math.round(this.pageLine.y);
										var ch = Math.round(this.pageLine.height);
										var mx = 0;
										var my = 0;
										var mw = cw;
										var mh = ch;
										if(cx < _x) {
											mw -= _x - cx;
											mx = _x - cx;
											if(mw > _width1) {
												mw = _width1;
											}
										} else if(cx + cw > _x + _width1) {
											mw = _x + _width1 - cx;
										}
										if(mw < 0) {
											mw = 0;
										}
										if(cy < _y) {
											mh -= _y - cy;
											my = _y - cy;
											if(mh > _height) {
												mh = _height;
											}
										} else if(cy + ch > _y + _height) {
											mh = _y + _height - cy;
										}
										if(mh < 0) {
											mh = 0;
										}
										if(create) {
											var z = this.z;
											var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
											if(stylePos < 0) {
												if(this.uiDisplay.autoAddStyles) {
													var _this = this.uiDisplay;
													var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
													var styleId = this.cursorStyle.getUUID();
													_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
													if(_this.stylePosBeforeFont == 0) {
														_this.addProgram(program,null,true);
													} else {
														_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
													}
													_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
													_this.stylePosBeforeFont++;
												} else {
													var c = js_Boot.getClass(this.cursorStyle);
													throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
												}
											} else {
												this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
												if(this.cursorProgram == null) {
													var _this = this.uiDisplay;
													var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
													var stylePos1 = stylePos;
													_this.usedStyleProgram[stylePos1] = program;
													var afterProgram = null;
													while(stylePos1-- > 0) {
														afterProgram = _this.usedStyleProgram[stylePos1];
														if(afterProgram != null) {
															break;
														}
													}
													_this.addProgram(program,afterProgram,afterProgram == null);
												}
											}
											this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
											if(addUpdate) {
												this.cursorProgram.addElement(this.cursorElement);
											}
										} else {
											this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
											if(addUpdate) {
												this.cursorProgram.update(this.cursorElement);
											}
										}
									}
								}
							} else if(this.cursorWant > 0) {
								var pos = this.cursorWant;
								if(pos != this.cursor) {
									if(pos < 0) {
										this.cursor = 0;
									} else if(this.page != null && pos > this.pageLine.glyphes.length) {
										this.cursor = this.pageLine.glyphes.length;
									} else {
										this.cursor = pos;
									}
									if(this.page != null && this.cursorStyle != null) {
										var addUpdate = this.isVisible && this.cursorIsVisible;
										var create = this.cursorElement == null;
										var _x = this.x + this.leftSpace;
										var _y = this.y + this.topSpace;
										var _width = this.width - this.leftSpace - this.rightSpace;
										var _height = this.height - this.topSpace - this.bottomSpace;
										if(this.masked) {
											if(this.maskX > this.leftSpace) {
												_x = this.x + this.maskX;
											}
											if(this.maskY > this.topSpace) {
												_y = this.y + this.maskY;
											}
											if(this.x + this.maskX + this.maskWidth < _x + _width) {
												_width = this.maskX + this.maskWidth + this.x - _x;
											}
											if(this.y + this.maskY + this.maskHeight < _y + _height) {
												_height = this.maskY + this.maskHeight + this.y - _y;
											}
										}
										var _width1 = _width;
										var _yOffset = this.yOffset;
										var y_offset;
										if((this.autoSize & 1) > 0) {
											y_offset = _yOffset;
										} else {
											switch(this.vAlign) {
											case 4:
												y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
												break;
											case 8:
												y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
												break;
											default:
												y_offset = _yOffset;
											}
										}
										var y_offset1 = y_offset + this.topSpace;
										_width1 += 3;
										var page = this.page;
										var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
										var cw = 2;
										var cy = Math.round(this.pageLine.y);
										var ch = Math.round(this.pageLine.height);
										var mx = 0;
										var my = 0;
										var mw = cw;
										var mh = ch;
										if(cx < _x) {
											mw -= _x - cx;
											mx = _x - cx;
											if(mw > _width1) {
												mw = _width1;
											}
										} else if(cx + cw > _x + _width1) {
											mw = _x + _width1 - cx;
										}
										if(mw < 0) {
											mw = 0;
										}
										if(cy < _y) {
											mh -= _y - cy;
											my = _y - cy;
											if(mh > _height) {
												mh = _height;
											}
										} else if(cy + ch > _y + _height) {
											mh = _y + _height - cy;
										}
										if(mh < 0) {
											mh = 0;
										}
										if(create) {
											var z = this.z;
											var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
											if(stylePos < 0) {
												if(this.uiDisplay.autoAddStyles) {
													var _this = this.uiDisplay;
													var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
													var styleId = this.cursorStyle.getUUID();
													_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
													if(_this.stylePosBeforeFont == 0) {
														_this.addProgram(program,null,true);
													} else {
														_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
													}
													_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
													_this.stylePosBeforeFont++;
												} else {
													var c = js_Boot.getClass(this.cursorStyle);
													throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
												}
											} else {
												this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
												if(this.cursorProgram == null) {
													var _this = this.uiDisplay;
													var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
													var stylePos1 = stylePos;
													_this.usedStyleProgram[stylePos1] = program;
													var afterProgram = null;
													while(stylePos1-- > 0) {
														afterProgram = _this.usedStyleProgram[stylePos1];
														if(afterProgram != null) {
															break;
														}
													}
													_this.addProgram(program,afterProgram,afterProgram == null);
												}
											}
											this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
											if(addUpdate) {
												this.cursorProgram.addElement(this.cursorElement);
											}
										} else {
											this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
											if(addUpdate) {
												this.cursorProgram.update(this.cursorElement);
											}
										}
									}
								}
							}
							if(this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					}
				}
				if(newCursor != null) {
					if(newCursor != this.cursor) {
						if(newCursor < 0) {
							this.cursor = 0;
						} else if(this.page != null && newCursor > this.pageLine.glyphes.length) {
							this.cursor = this.pageLine.glyphes.length;
						} else {
							this.cursor = newCursor;
						}
						if(this.page != null && this.cursorStyle != null) {
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var create = this.cursorElement == null;
							var _x = this.x + this.leftSpace;
							var _y = this.y + this.topSpace;
							var _width = this.width - this.leftSpace - this.rightSpace;
							var _height = this.height - this.topSpace - this.bottomSpace;
							if(this.masked) {
								if(this.maskX > this.leftSpace) {
									_x = this.x + this.maskX;
								}
								if(this.maskY > this.topSpace) {
									_y = this.y + this.maskY;
								}
								if(this.x + this.maskX + this.maskWidth < _x + _width) {
									_width = this.maskX + this.maskWidth + this.x - _x;
								}
								if(this.y + this.maskY + this.maskHeight < _y + _height) {
									_height = this.maskY + this.maskHeight + this.y - _y;
								}
							}
							var _width1 = _width;
							var _yOffset = this.yOffset;
							var y_offset;
							if((this.autoSize & 1) > 0) {
								y_offset = _yOffset;
							} else {
								switch(this.vAlign) {
								case 4:
									y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
									break;
								case 8:
									y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
									break;
								default:
									y_offset = _yOffset;
								}
							}
							var y_offset1 = y_offset + this.topSpace;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(create) {
								var z = this.z;
								var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
								if(stylePos < 0) {
									if(this.uiDisplay.autoAddStyles) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var styleId = this.cursorStyle.getUUID();
										_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
										if(_this.stylePosBeforeFont == 0) {
											_this.addProgram(program,null,true);
										} else {
											_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
										}
										_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
										_this.stylePosBeforeFont++;
									} else {
										var c = js_Boot.getClass(this.cursorStyle);
										throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
									}
								} else {
									this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
									if(this.cursorProgram == null) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var stylePos1 = stylePos;
										_this.usedStyleProgram[stylePos1] = program;
										var afterProgram = null;
										while(stylePos1-- > 0) {
											afterProgram = _this.usedStyleProgram[stylePos1];
											if(afterProgram != null) {
												break;
											}
										}
										_this.addProgram(program,afterProgram,afterProgram == null);
									}
								}
								this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
								if(addUpdate) {
									this.cursorProgram.addElement(this.cursorElement);
								}
							} else {
								this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
								if(addUpdate) {
									this.cursorProgram.update(this.cursorElement);
								}
							}
						}
					}
				}
				if(addSelection) {
					if(this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo) {
						if(oldCursorLine == this.selectLineFrom && oldCursor == this.selectFrom) {
							this.select(this.cursor,this.selectTo,this.cursorLine,this.selectLineTo - 1);
						} else {
							this.select(this.selectFrom,this.cursor,this.selectLineFrom,this.cursorLine);
						}
					} else if(this.cursorLine < oldCursorLine) {
						this.select(this.cursor,oldCursor,this.cursorLine,oldCursorLine);
					} else {
						this.select(oldCursor,this.cursor,oldCursorLine,this.cursorLine);
					}
				}
			}
		} else {
			var newCursorLine = null;
			var newCursor = this.cursor - 1;
			var oldCursorLine = this.cursorLine;
			var oldCursor = this.cursor;
			if(newCursorLine != null) {
				if(newCursorLine != this.cursorLine) {
					if(newCursorLine < 0) {
						this.cursorLine = 0;
					} else if(this.page != null && newCursorLine >= this.page.pageLines.length) {
						this.cursorLine = this.page.pageLines.length - 1;
					} else {
						this.cursorLine = newCursorLine;
					}
					if(this.page != null) {
						this.pageLine = this.page.pageLines[this.cursorLine];
						if(this.cursor > this.pageLine.glyphes.length) {
							if(this.cursorWant == -1) {
								this.cursorWant = this.cursor;
							}
							var pos = this.pageLine.glyphes.length;
							if(pos != this.cursor) {
								if(pos < 0) {
									this.cursor = 0;
								} else if(this.page != null && pos > this.pageLine.glyphes.length) {
									this.cursor = this.pageLine.glyphes.length;
								} else {
									this.cursor = pos;
								}
								if(this.page != null && this.cursorStyle != null) {
									var addUpdate = this.isVisible && this.cursorIsVisible;
									var create = this.cursorElement == null;
									var _x = this.x + this.leftSpace;
									var _y = this.y + this.topSpace;
									var _width = this.width - this.leftSpace - this.rightSpace;
									var _height = this.height - this.topSpace - this.bottomSpace;
									if(this.masked) {
										if(this.maskX > this.leftSpace) {
											_x = this.x + this.maskX;
										}
										if(this.maskY > this.topSpace) {
											_y = this.y + this.maskY;
										}
										if(this.x + this.maskX + this.maskWidth < _x + _width) {
											_width = this.maskX + this.maskWidth + this.x - _x;
										}
										if(this.y + this.maskY + this.maskHeight < _y + _height) {
											_height = this.maskY + this.maskHeight + this.y - _y;
										}
									}
									var _width1 = _width;
									var _yOffset = this.yOffset;
									var y_offset;
									if((this.autoSize & 1) > 0) {
										y_offset = _yOffset;
									} else {
										switch(this.vAlign) {
										case 4:
											y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
											break;
										case 8:
											y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
											break;
										default:
											y_offset = _yOffset;
										}
									}
									var y_offset1 = y_offset + this.topSpace;
									_width1 += 3;
									var page = this.page;
									var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
									var cw = 2;
									var cy = Math.round(this.pageLine.y);
									var ch = Math.round(this.pageLine.height);
									var mx = 0;
									var my = 0;
									var mw = cw;
									var mh = ch;
									if(cx < _x) {
										mw -= _x - cx;
										mx = _x - cx;
										if(mw > _width1) {
											mw = _width1;
										}
									} else if(cx + cw > _x + _width1) {
										mw = _x + _width1 - cx;
									}
									if(mw < 0) {
										mw = 0;
									}
									if(cy < _y) {
										mh -= _y - cy;
										my = _y - cy;
										if(mh > _height) {
											mh = _height;
										}
									} else if(cy + ch > _y + _height) {
										mh = _y + _height - cy;
									}
									if(mh < 0) {
										mh = 0;
									}
									if(create) {
										var z = this.z;
										var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
										if(stylePos < 0) {
											if(this.uiDisplay.autoAddStyles) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var styleId = this.cursorStyle.getUUID();
												_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
												if(_this.stylePosBeforeFont == 0) {
													_this.addProgram(program,null,true);
												} else {
													_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
												}
												_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
												_this.stylePosBeforeFont++;
											} else {
												var c = js_Boot.getClass(this.cursorStyle);
												throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
											}
										} else {
											this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
											if(this.cursorProgram == null) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var stylePos1 = stylePos;
												_this.usedStyleProgram[stylePos1] = program;
												var afterProgram = null;
												while(stylePos1-- > 0) {
													afterProgram = _this.usedStyleProgram[stylePos1];
													if(afterProgram != null) {
														break;
													}
												}
												_this.addProgram(program,afterProgram,afterProgram == null);
											}
										}
										this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
										if(addUpdate) {
											this.cursorProgram.addElement(this.cursorElement);
										}
									} else {
										this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
										if(addUpdate) {
											this.cursorProgram.update(this.cursorElement);
										}
									}
								}
							}
						} else if(this.cursorWant > 0) {
							var pos = this.cursorWant;
							if(pos != this.cursor) {
								if(pos < 0) {
									this.cursor = 0;
								} else if(this.page != null && pos > this.pageLine.glyphes.length) {
									this.cursor = this.pageLine.glyphes.length;
								} else {
									this.cursor = pos;
								}
								if(this.page != null && this.cursorStyle != null) {
									var addUpdate = this.isVisible && this.cursorIsVisible;
									var create = this.cursorElement == null;
									var _x = this.x + this.leftSpace;
									var _y = this.y + this.topSpace;
									var _width = this.width - this.leftSpace - this.rightSpace;
									var _height = this.height - this.topSpace - this.bottomSpace;
									if(this.masked) {
										if(this.maskX > this.leftSpace) {
											_x = this.x + this.maskX;
										}
										if(this.maskY > this.topSpace) {
											_y = this.y + this.maskY;
										}
										if(this.x + this.maskX + this.maskWidth < _x + _width) {
											_width = this.maskX + this.maskWidth + this.x - _x;
										}
										if(this.y + this.maskY + this.maskHeight < _y + _height) {
											_height = this.maskY + this.maskHeight + this.y - _y;
										}
									}
									var _width1 = _width;
									var _yOffset = this.yOffset;
									var y_offset;
									if((this.autoSize & 1) > 0) {
										y_offset = _yOffset;
									} else {
										switch(this.vAlign) {
										case 4:
											y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
											break;
										case 8:
											y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
											break;
										default:
											y_offset = _yOffset;
										}
									}
									var y_offset1 = y_offset + this.topSpace;
									_width1 += 3;
									var page = this.page;
									var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
									var cw = 2;
									var cy = Math.round(this.pageLine.y);
									var ch = Math.round(this.pageLine.height);
									var mx = 0;
									var my = 0;
									var mw = cw;
									var mh = ch;
									if(cx < _x) {
										mw -= _x - cx;
										mx = _x - cx;
										if(mw > _width1) {
											mw = _width1;
										}
									} else if(cx + cw > _x + _width1) {
										mw = _x + _width1 - cx;
									}
									if(mw < 0) {
										mw = 0;
									}
									if(cy < _y) {
										mh -= _y - cy;
										my = _y - cy;
										if(mh > _height) {
											mh = _height;
										}
									} else if(cy + ch > _y + _height) {
										mh = _y + _height - cy;
									}
									if(mh < 0) {
										mh = 0;
									}
									if(create) {
										var z = this.z;
										var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
										if(stylePos < 0) {
											if(this.uiDisplay.autoAddStyles) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var styleId = this.cursorStyle.getUUID();
												_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
												if(_this.stylePosBeforeFont == 0) {
													_this.addProgram(program,null,true);
												} else {
													_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
												}
												_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
												_this.stylePosBeforeFont++;
											} else {
												var c = js_Boot.getClass(this.cursorStyle);
												throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
											}
										} else {
											this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
											if(this.cursorProgram == null) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var stylePos1 = stylePos;
												_this.usedStyleProgram[stylePos1] = program;
												var afterProgram = null;
												while(stylePos1-- > 0) {
													afterProgram = _this.usedStyleProgram[stylePos1];
													if(afterProgram != null) {
														break;
													}
												}
												_this.addProgram(program,afterProgram,afterProgram == null);
											}
										}
										this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
										if(addUpdate) {
											this.cursorProgram.addElement(this.cursorElement);
										}
									} else {
										this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
										if(addUpdate) {
											this.cursorProgram.update(this.cursorElement);
										}
									}
								}
							}
						}
						if(this.cursorStyle != null) {
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var create = this.cursorElement == null;
							var _x = this.x + this.leftSpace;
							var _y = this.y + this.topSpace;
							var _width = this.width - this.leftSpace - this.rightSpace;
							var _height = this.height - this.topSpace - this.bottomSpace;
							if(this.masked) {
								if(this.maskX > this.leftSpace) {
									_x = this.x + this.maskX;
								}
								if(this.maskY > this.topSpace) {
									_y = this.y + this.maskY;
								}
								if(this.x + this.maskX + this.maskWidth < _x + _width) {
									_width = this.maskX + this.maskWidth + this.x - _x;
								}
								if(this.y + this.maskY + this.maskHeight < _y + _height) {
									_height = this.maskY + this.maskHeight + this.y - _y;
								}
							}
							var _width1 = _width;
							var _yOffset = this.yOffset;
							var y_offset;
							if((this.autoSize & 1) > 0) {
								y_offset = _yOffset;
							} else {
								switch(this.vAlign) {
								case 4:
									y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
									break;
								case 8:
									y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
									break;
								default:
									y_offset = _yOffset;
								}
							}
							var y_offset1 = y_offset + this.topSpace;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(create) {
								var z = this.z;
								var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
								if(stylePos < 0) {
									if(this.uiDisplay.autoAddStyles) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var styleId = this.cursorStyle.getUUID();
										_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
										if(_this.stylePosBeforeFont == 0) {
											_this.addProgram(program,null,true);
										} else {
											_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
										}
										_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
										_this.stylePosBeforeFont++;
									} else {
										var c = js_Boot.getClass(this.cursorStyle);
										throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
									}
								} else {
									this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
									if(this.cursorProgram == null) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var stylePos1 = stylePos;
										_this.usedStyleProgram[stylePos1] = program;
										var afterProgram = null;
										while(stylePos1-- > 0) {
											afterProgram = _this.usedStyleProgram[stylePos1];
											if(afterProgram != null) {
												break;
											}
										}
										_this.addProgram(program,afterProgram,afterProgram == null);
									}
								}
								this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
								if(addUpdate) {
									this.cursorProgram.addElement(this.cursorElement);
								}
							} else {
								this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
								if(addUpdate) {
									this.cursorProgram.update(this.cursorElement);
								}
							}
						}
					}
				}
			}
			if(newCursor != null) {
				if(newCursor != this.cursor) {
					if(newCursor < 0) {
						this.cursor = 0;
					} else if(this.page != null && newCursor > this.pageLine.glyphes.length) {
						this.cursor = this.pageLine.glyphes.length;
					} else {
						this.cursor = newCursor;
					}
					if(this.page != null && this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
			if(addSelection) {
				if(this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo) {
					if(oldCursorLine == this.selectLineFrom && oldCursor == this.selectFrom) {
						this.select(this.cursor,this.selectTo,this.cursorLine,this.selectLineTo - 1);
					} else {
						this.select(this.selectFrom,this.cursor,this.selectLineFrom,this.cursorLine);
					}
				} else if(this.cursorLine < oldCursorLine) {
					this.select(this.cursor,oldCursor,this.cursorLine,oldCursorLine);
				} else {
					this.select(oldCursor,this.cursor,oldCursorLine,this.cursorLine);
				}
			}
		}
		this.cursorWant = -1;
	}
	,cursorRight: function(addSelection) {
		if(addSelection == null) {
			addSelection = false;
		}
		if(!addSelection && (this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo)) {
			var pos = this.selectLineTo - 1;
			if(pos != this.cursorLine) {
				if(pos < 0) {
					this.cursorLine = 0;
				} else if(this.page != null && pos >= this.page.pageLines.length) {
					this.cursorLine = this.page.pageLines.length - 1;
				} else {
					this.cursorLine = pos;
				}
				if(this.page != null) {
					this.pageLine = this.page.pageLines[this.cursorLine];
					if(this.cursor > this.pageLine.glyphes.length) {
						if(this.cursorWant == -1) {
							this.cursorWant = this.cursor;
						}
						var pos = this.pageLine.glyphes.length;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					} else if(this.cursorWant > 0) {
						var pos = this.cursorWant;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					}
					if(this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
			var pos = this.selectTo;
			if(pos != this.cursor) {
				if(pos < 0) {
					this.cursor = 0;
				} else if(this.page != null && pos > this.pageLine.glyphes.length) {
					this.cursor = this.pageLine.glyphes.length;
				} else {
					this.cursor = pos;
				}
				if(this.page != null && this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var page = this.page;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.pageLine.y);
					var ch = Math.round(this.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
			this.selectLineFrom = this.selectLineTo = this.selectFrom = this.selectTo = 0;
			if(this.page != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElementArray != null && this.isVisible) {
					var _g = 0;
					var _g1 = this.selectionElementMax;
					while(_g < _g1) {
						var i = _g++;
						this.selectionProgram.removeElement(this.selectionElementArray[i]);
					}
				}
			}
			this.selectionIsVisible = false;
		} else if(this.cursor == this.pageLine.glyphes.length) {
			if(this.cursorLine < this.page.pageLines.length - 1) {
				var newCursorLine = this.cursorLine + 1;
				var oldCursorLine = this.cursorLine;
				var oldCursor = this.cursor;
				if(newCursorLine != null) {
					if(newCursorLine != this.cursorLine) {
						if(newCursorLine < 0) {
							this.cursorLine = 0;
						} else if(this.page != null && newCursorLine >= this.page.pageLines.length) {
							this.cursorLine = this.page.pageLines.length - 1;
						} else {
							this.cursorLine = newCursorLine;
						}
						if(this.page != null) {
							this.pageLine = this.page.pageLines[this.cursorLine];
							if(this.cursor > this.pageLine.glyphes.length) {
								if(this.cursorWant == -1) {
									this.cursorWant = this.cursor;
								}
								var pos = this.pageLine.glyphes.length;
								if(pos != this.cursor) {
									if(pos < 0) {
										this.cursor = 0;
									} else if(this.page != null && pos > this.pageLine.glyphes.length) {
										this.cursor = this.pageLine.glyphes.length;
									} else {
										this.cursor = pos;
									}
									if(this.page != null && this.cursorStyle != null) {
										var addUpdate = this.isVisible && this.cursorIsVisible;
										var create = this.cursorElement == null;
										var _x = this.x + this.leftSpace;
										var _y = this.y + this.topSpace;
										var _width = this.width - this.leftSpace - this.rightSpace;
										var _height = this.height - this.topSpace - this.bottomSpace;
										if(this.masked) {
											if(this.maskX > this.leftSpace) {
												_x = this.x + this.maskX;
											}
											if(this.maskY > this.topSpace) {
												_y = this.y + this.maskY;
											}
											if(this.x + this.maskX + this.maskWidth < _x + _width) {
												_width = this.maskX + this.maskWidth + this.x - _x;
											}
											if(this.y + this.maskY + this.maskHeight < _y + _height) {
												_height = this.maskY + this.maskHeight + this.y - _y;
											}
										}
										var _width1 = _width;
										var _yOffset = this.yOffset;
										var y_offset;
										if((this.autoSize & 1) > 0) {
											y_offset = _yOffset;
										} else {
											switch(this.vAlign) {
											case 4:
												y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
												break;
											case 8:
												y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
												break;
											default:
												y_offset = _yOffset;
											}
										}
										var y_offset1 = y_offset + this.topSpace;
										_width1 += 3;
										var page = this.page;
										var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
										var cw = 2;
										var cy = Math.round(this.pageLine.y);
										var ch = Math.round(this.pageLine.height);
										var mx = 0;
										var my = 0;
										var mw = cw;
										var mh = ch;
										if(cx < _x) {
											mw -= _x - cx;
											mx = _x - cx;
											if(mw > _width1) {
												mw = _width1;
											}
										} else if(cx + cw > _x + _width1) {
											mw = _x + _width1 - cx;
										}
										if(mw < 0) {
											mw = 0;
										}
										if(cy < _y) {
											mh -= _y - cy;
											my = _y - cy;
											if(mh > _height) {
												mh = _height;
											}
										} else if(cy + ch > _y + _height) {
											mh = _y + _height - cy;
										}
										if(mh < 0) {
											mh = 0;
										}
										if(create) {
											var z = this.z;
											var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
											if(stylePos < 0) {
												if(this.uiDisplay.autoAddStyles) {
													var _this = this.uiDisplay;
													var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
													var styleId = this.cursorStyle.getUUID();
													_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
													if(_this.stylePosBeforeFont == 0) {
														_this.addProgram(program,null,true);
													} else {
														_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
													}
													_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
													_this.stylePosBeforeFont++;
												} else {
													var c = js_Boot.getClass(this.cursorStyle);
													throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
												}
											} else {
												this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
												if(this.cursorProgram == null) {
													var _this = this.uiDisplay;
													var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
													var stylePos1 = stylePos;
													_this.usedStyleProgram[stylePos1] = program;
													var afterProgram = null;
													while(stylePos1-- > 0) {
														afterProgram = _this.usedStyleProgram[stylePos1];
														if(afterProgram != null) {
															break;
														}
													}
													_this.addProgram(program,afterProgram,afterProgram == null);
												}
											}
											this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
											if(addUpdate) {
												this.cursorProgram.addElement(this.cursorElement);
											}
										} else {
											this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
											if(addUpdate) {
												this.cursorProgram.update(this.cursorElement);
											}
										}
									}
								}
							} else if(this.cursorWant > 0) {
								var pos = this.cursorWant;
								if(pos != this.cursor) {
									if(pos < 0) {
										this.cursor = 0;
									} else if(this.page != null && pos > this.pageLine.glyphes.length) {
										this.cursor = this.pageLine.glyphes.length;
									} else {
										this.cursor = pos;
									}
									if(this.page != null && this.cursorStyle != null) {
										var addUpdate = this.isVisible && this.cursorIsVisible;
										var create = this.cursorElement == null;
										var _x = this.x + this.leftSpace;
										var _y = this.y + this.topSpace;
										var _width = this.width - this.leftSpace - this.rightSpace;
										var _height = this.height - this.topSpace - this.bottomSpace;
										if(this.masked) {
											if(this.maskX > this.leftSpace) {
												_x = this.x + this.maskX;
											}
											if(this.maskY > this.topSpace) {
												_y = this.y + this.maskY;
											}
											if(this.x + this.maskX + this.maskWidth < _x + _width) {
												_width = this.maskX + this.maskWidth + this.x - _x;
											}
											if(this.y + this.maskY + this.maskHeight < _y + _height) {
												_height = this.maskY + this.maskHeight + this.y - _y;
											}
										}
										var _width1 = _width;
										var _yOffset = this.yOffset;
										var y_offset;
										if((this.autoSize & 1) > 0) {
											y_offset = _yOffset;
										} else {
											switch(this.vAlign) {
											case 4:
												y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
												break;
											case 8:
												y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
												break;
											default:
												y_offset = _yOffset;
											}
										}
										var y_offset1 = y_offset + this.topSpace;
										_width1 += 3;
										var page = this.page;
										var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
										var cw = 2;
										var cy = Math.round(this.pageLine.y);
										var ch = Math.round(this.pageLine.height);
										var mx = 0;
										var my = 0;
										var mw = cw;
										var mh = ch;
										if(cx < _x) {
											mw -= _x - cx;
											mx = _x - cx;
											if(mw > _width1) {
												mw = _width1;
											}
										} else if(cx + cw > _x + _width1) {
											mw = _x + _width1 - cx;
										}
										if(mw < 0) {
											mw = 0;
										}
										if(cy < _y) {
											mh -= _y - cy;
											my = _y - cy;
											if(mh > _height) {
												mh = _height;
											}
										} else if(cy + ch > _y + _height) {
											mh = _y + _height - cy;
										}
										if(mh < 0) {
											mh = 0;
										}
										if(create) {
											var z = this.z;
											var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
											if(stylePos < 0) {
												if(this.uiDisplay.autoAddStyles) {
													var _this = this.uiDisplay;
													var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
													var styleId = this.cursorStyle.getUUID();
													_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
													if(_this.stylePosBeforeFont == 0) {
														_this.addProgram(program,null,true);
													} else {
														_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
													}
													_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
													_this.stylePosBeforeFont++;
												} else {
													var c = js_Boot.getClass(this.cursorStyle);
													throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
												}
											} else {
												this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
												if(this.cursorProgram == null) {
													var _this = this.uiDisplay;
													var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
													var stylePos1 = stylePos;
													_this.usedStyleProgram[stylePos1] = program;
													var afterProgram = null;
													while(stylePos1-- > 0) {
														afterProgram = _this.usedStyleProgram[stylePos1];
														if(afterProgram != null) {
															break;
														}
													}
													_this.addProgram(program,afterProgram,afterProgram == null);
												}
											}
											this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
											if(addUpdate) {
												this.cursorProgram.addElement(this.cursorElement);
											}
										} else {
											this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
											if(addUpdate) {
												this.cursorProgram.update(this.cursorElement);
											}
										}
									}
								}
							}
							if(this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					}
				}
				if(0 != this.cursor) {
					if(this.page != null && 0 > this.pageLine.glyphes.length) {
						this.cursor = this.pageLine.glyphes.length;
					} else {
						this.cursor = 0;
					}
					if(this.page != null && this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
				if(addSelection) {
					if(this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo) {
						if(oldCursorLine == this.selectLineFrom && oldCursor == this.selectFrom) {
							this.select(this.cursor,this.selectTo,this.cursorLine,this.selectLineTo - 1);
						} else {
							this.select(this.selectFrom,this.cursor,this.selectLineFrom,this.cursorLine);
						}
					} else if(this.cursorLine < oldCursorLine) {
						this.select(this.cursor,oldCursor,this.cursorLine,oldCursorLine);
					} else {
						this.select(oldCursor,this.cursor,oldCursorLine,this.cursorLine);
					}
				}
			}
		} else {
			var newCursorLine = null;
			var newCursor = this.cursor + 1;
			var oldCursorLine = this.cursorLine;
			var oldCursor = this.cursor;
			if(newCursorLine != null) {
				if(newCursorLine != this.cursorLine) {
					if(newCursorLine < 0) {
						this.cursorLine = 0;
					} else if(this.page != null && newCursorLine >= this.page.pageLines.length) {
						this.cursorLine = this.page.pageLines.length - 1;
					} else {
						this.cursorLine = newCursorLine;
					}
					if(this.page != null) {
						this.pageLine = this.page.pageLines[this.cursorLine];
						if(this.cursor > this.pageLine.glyphes.length) {
							if(this.cursorWant == -1) {
								this.cursorWant = this.cursor;
							}
							var pos = this.pageLine.glyphes.length;
							if(pos != this.cursor) {
								if(pos < 0) {
									this.cursor = 0;
								} else if(this.page != null && pos > this.pageLine.glyphes.length) {
									this.cursor = this.pageLine.glyphes.length;
								} else {
									this.cursor = pos;
								}
								if(this.page != null && this.cursorStyle != null) {
									var addUpdate = this.isVisible && this.cursorIsVisible;
									var create = this.cursorElement == null;
									var _x = this.x + this.leftSpace;
									var _y = this.y + this.topSpace;
									var _width = this.width - this.leftSpace - this.rightSpace;
									var _height = this.height - this.topSpace - this.bottomSpace;
									if(this.masked) {
										if(this.maskX > this.leftSpace) {
											_x = this.x + this.maskX;
										}
										if(this.maskY > this.topSpace) {
											_y = this.y + this.maskY;
										}
										if(this.x + this.maskX + this.maskWidth < _x + _width) {
											_width = this.maskX + this.maskWidth + this.x - _x;
										}
										if(this.y + this.maskY + this.maskHeight < _y + _height) {
											_height = this.maskY + this.maskHeight + this.y - _y;
										}
									}
									var _width1 = _width;
									var _yOffset = this.yOffset;
									var y_offset;
									if((this.autoSize & 1) > 0) {
										y_offset = _yOffset;
									} else {
										switch(this.vAlign) {
										case 4:
											y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
											break;
										case 8:
											y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
											break;
										default:
											y_offset = _yOffset;
										}
									}
									var y_offset1 = y_offset + this.topSpace;
									_width1 += 3;
									var page = this.page;
									var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
									var cw = 2;
									var cy = Math.round(this.pageLine.y);
									var ch = Math.round(this.pageLine.height);
									var mx = 0;
									var my = 0;
									var mw = cw;
									var mh = ch;
									if(cx < _x) {
										mw -= _x - cx;
										mx = _x - cx;
										if(mw > _width1) {
											mw = _width1;
										}
									} else if(cx + cw > _x + _width1) {
										mw = _x + _width1 - cx;
									}
									if(mw < 0) {
										mw = 0;
									}
									if(cy < _y) {
										mh -= _y - cy;
										my = _y - cy;
										if(mh > _height) {
											mh = _height;
										}
									} else if(cy + ch > _y + _height) {
										mh = _y + _height - cy;
									}
									if(mh < 0) {
										mh = 0;
									}
									if(create) {
										var z = this.z;
										var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
										if(stylePos < 0) {
											if(this.uiDisplay.autoAddStyles) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var styleId = this.cursorStyle.getUUID();
												_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
												if(_this.stylePosBeforeFont == 0) {
													_this.addProgram(program,null,true);
												} else {
													_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
												}
												_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
												_this.stylePosBeforeFont++;
											} else {
												var c = js_Boot.getClass(this.cursorStyle);
												throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
											}
										} else {
											this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
											if(this.cursorProgram == null) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var stylePos1 = stylePos;
												_this.usedStyleProgram[stylePos1] = program;
												var afterProgram = null;
												while(stylePos1-- > 0) {
													afterProgram = _this.usedStyleProgram[stylePos1];
													if(afterProgram != null) {
														break;
													}
												}
												_this.addProgram(program,afterProgram,afterProgram == null);
											}
										}
										this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
										if(addUpdate) {
											this.cursorProgram.addElement(this.cursorElement);
										}
									} else {
										this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
										if(addUpdate) {
											this.cursorProgram.update(this.cursorElement);
										}
									}
								}
							}
						} else if(this.cursorWant > 0) {
							var pos = this.cursorWant;
							if(pos != this.cursor) {
								if(pos < 0) {
									this.cursor = 0;
								} else if(this.page != null && pos > this.pageLine.glyphes.length) {
									this.cursor = this.pageLine.glyphes.length;
								} else {
									this.cursor = pos;
								}
								if(this.page != null && this.cursorStyle != null) {
									var addUpdate = this.isVisible && this.cursorIsVisible;
									var create = this.cursorElement == null;
									var _x = this.x + this.leftSpace;
									var _y = this.y + this.topSpace;
									var _width = this.width - this.leftSpace - this.rightSpace;
									var _height = this.height - this.topSpace - this.bottomSpace;
									if(this.masked) {
										if(this.maskX > this.leftSpace) {
											_x = this.x + this.maskX;
										}
										if(this.maskY > this.topSpace) {
											_y = this.y + this.maskY;
										}
										if(this.x + this.maskX + this.maskWidth < _x + _width) {
											_width = this.maskX + this.maskWidth + this.x - _x;
										}
										if(this.y + this.maskY + this.maskHeight < _y + _height) {
											_height = this.maskY + this.maskHeight + this.y - _y;
										}
									}
									var _width1 = _width;
									var _yOffset = this.yOffset;
									var y_offset;
									if((this.autoSize & 1) > 0) {
										y_offset = _yOffset;
									} else {
										switch(this.vAlign) {
										case 4:
											y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
											break;
										case 8:
											y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
											break;
										default:
											y_offset = _yOffset;
										}
									}
									var y_offset1 = y_offset + this.topSpace;
									_width1 += 3;
									var page = this.page;
									var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
									var cw = 2;
									var cy = Math.round(this.pageLine.y);
									var ch = Math.round(this.pageLine.height);
									var mx = 0;
									var my = 0;
									var mw = cw;
									var mh = ch;
									if(cx < _x) {
										mw -= _x - cx;
										mx = _x - cx;
										if(mw > _width1) {
											mw = _width1;
										}
									} else if(cx + cw > _x + _width1) {
										mw = _x + _width1 - cx;
									}
									if(mw < 0) {
										mw = 0;
									}
									if(cy < _y) {
										mh -= _y - cy;
										my = _y - cy;
										if(mh > _height) {
											mh = _height;
										}
									} else if(cy + ch > _y + _height) {
										mh = _y + _height - cy;
									}
									if(mh < 0) {
										mh = 0;
									}
									if(create) {
										var z = this.z;
										var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
										if(stylePos < 0) {
											if(this.uiDisplay.autoAddStyles) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var styleId = this.cursorStyle.getUUID();
												_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
												if(_this.stylePosBeforeFont == 0) {
													_this.addProgram(program,null,true);
												} else {
													_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
												}
												_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
												_this.stylePosBeforeFont++;
											} else {
												var c = js_Boot.getClass(this.cursorStyle);
												throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
											}
										} else {
											this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
											if(this.cursorProgram == null) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var stylePos1 = stylePos;
												_this.usedStyleProgram[stylePos1] = program;
												var afterProgram = null;
												while(stylePos1-- > 0) {
													afterProgram = _this.usedStyleProgram[stylePos1];
													if(afterProgram != null) {
														break;
													}
												}
												_this.addProgram(program,afterProgram,afterProgram == null);
											}
										}
										this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
										if(addUpdate) {
											this.cursorProgram.addElement(this.cursorElement);
										}
									} else {
										this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
										if(addUpdate) {
											this.cursorProgram.update(this.cursorElement);
										}
									}
								}
							}
						}
						if(this.cursorStyle != null) {
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var create = this.cursorElement == null;
							var _x = this.x + this.leftSpace;
							var _y = this.y + this.topSpace;
							var _width = this.width - this.leftSpace - this.rightSpace;
							var _height = this.height - this.topSpace - this.bottomSpace;
							if(this.masked) {
								if(this.maskX > this.leftSpace) {
									_x = this.x + this.maskX;
								}
								if(this.maskY > this.topSpace) {
									_y = this.y + this.maskY;
								}
								if(this.x + this.maskX + this.maskWidth < _x + _width) {
									_width = this.maskX + this.maskWidth + this.x - _x;
								}
								if(this.y + this.maskY + this.maskHeight < _y + _height) {
									_height = this.maskY + this.maskHeight + this.y - _y;
								}
							}
							var _width1 = _width;
							var _yOffset = this.yOffset;
							var y_offset;
							if((this.autoSize & 1) > 0) {
								y_offset = _yOffset;
							} else {
								switch(this.vAlign) {
								case 4:
									y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
									break;
								case 8:
									y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
									break;
								default:
									y_offset = _yOffset;
								}
							}
							var y_offset1 = y_offset + this.topSpace;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(create) {
								var z = this.z;
								var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
								if(stylePos < 0) {
									if(this.uiDisplay.autoAddStyles) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var styleId = this.cursorStyle.getUUID();
										_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
										if(_this.stylePosBeforeFont == 0) {
											_this.addProgram(program,null,true);
										} else {
											_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
										}
										_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
										_this.stylePosBeforeFont++;
									} else {
										var c = js_Boot.getClass(this.cursorStyle);
										throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
									}
								} else {
									this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
									if(this.cursorProgram == null) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var stylePos1 = stylePos;
										_this.usedStyleProgram[stylePos1] = program;
										var afterProgram = null;
										while(stylePos1-- > 0) {
											afterProgram = _this.usedStyleProgram[stylePos1];
											if(afterProgram != null) {
												break;
											}
										}
										_this.addProgram(program,afterProgram,afterProgram == null);
									}
								}
								this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
								if(addUpdate) {
									this.cursorProgram.addElement(this.cursorElement);
								}
							} else {
								this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
								if(addUpdate) {
									this.cursorProgram.update(this.cursorElement);
								}
							}
						}
					}
				}
			}
			if(newCursor != null) {
				if(newCursor != this.cursor) {
					if(newCursor < 0) {
						this.cursor = 0;
					} else if(this.page != null && newCursor > this.pageLine.glyphes.length) {
						this.cursor = this.pageLine.glyphes.length;
					} else {
						this.cursor = newCursor;
					}
					if(this.page != null && this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
			if(addSelection) {
				if(this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo) {
					if(oldCursorLine == this.selectLineFrom && oldCursor == this.selectFrom) {
						this.select(this.cursor,this.selectTo,this.cursorLine,this.selectLineTo - 1);
					} else {
						this.select(this.selectFrom,this.cursor,this.selectLineFrom,this.cursorLine);
					}
				} else if(this.cursorLine < oldCursorLine) {
					this.select(this.cursor,oldCursor,this.cursorLine,oldCursorLine);
				} else {
					this.select(oldCursor,this.cursor,oldCursorLine,this.cursorLine);
				}
			}
		}
		this.cursorWant = -1;
	}
	,cursorLeftWord: function(addSelection) {
		if(addSelection == null) {
			addSelection = false;
		}
		if(!addSelection && (this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo)) {
			this.selectLineFrom = this.selectLineTo = this.selectFrom = this.selectTo = 0;
			if(this.page != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElementArray != null && this.isVisible) {
					var _g = 0;
					var _g1 = this.selectionElementMax;
					while(_g < _g1) {
						var i = _g++;
						this.selectionProgram.removeElement(this.selectionElementArray[i]);
					}
				}
			}
			this.selectionIsVisible = false;
		}
		if(this.cursor == 0) {
			if(this.cursorLine > 0) {
				var newCursorLine = this.cursorLine - 1;
				var newCursor = this.page.pageLines[this.cursorLine - 1].glyphes.length;
				var oldCursorLine = this.cursorLine;
				var oldCursor = this.cursor;
				if(newCursorLine != null) {
					if(newCursorLine != this.cursorLine) {
						if(newCursorLine < 0) {
							this.cursorLine = 0;
						} else if(this.page != null && newCursorLine >= this.page.pageLines.length) {
							this.cursorLine = this.page.pageLines.length - 1;
						} else {
							this.cursorLine = newCursorLine;
						}
						if(this.page != null) {
							this.pageLine = this.page.pageLines[this.cursorLine];
							if(this.cursor > this.pageLine.glyphes.length) {
								if(this.cursorWant == -1) {
									this.cursorWant = this.cursor;
								}
								var pos = this.pageLine.glyphes.length;
								if(pos != this.cursor) {
									if(pos < 0) {
										this.cursor = 0;
									} else if(this.page != null && pos > this.pageLine.glyphes.length) {
										this.cursor = this.pageLine.glyphes.length;
									} else {
										this.cursor = pos;
									}
									if(this.page != null && this.cursorStyle != null) {
										var addUpdate = this.isVisible && this.cursorIsVisible;
										var create = this.cursorElement == null;
										var _x = this.x + this.leftSpace;
										var _y = this.y + this.topSpace;
										var _width = this.width - this.leftSpace - this.rightSpace;
										var _height = this.height - this.topSpace - this.bottomSpace;
										if(this.masked) {
											if(this.maskX > this.leftSpace) {
												_x = this.x + this.maskX;
											}
											if(this.maskY > this.topSpace) {
												_y = this.y + this.maskY;
											}
											if(this.x + this.maskX + this.maskWidth < _x + _width) {
												_width = this.maskX + this.maskWidth + this.x - _x;
											}
											if(this.y + this.maskY + this.maskHeight < _y + _height) {
												_height = this.maskY + this.maskHeight + this.y - _y;
											}
										}
										var _width1 = _width;
										var _yOffset = this.yOffset;
										var y_offset;
										if((this.autoSize & 1) > 0) {
											y_offset = _yOffset;
										} else {
											switch(this.vAlign) {
											case 4:
												y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
												break;
											case 8:
												y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
												break;
											default:
												y_offset = _yOffset;
											}
										}
										var y_offset1 = y_offset + this.topSpace;
										_width1 += 3;
										var page = this.page;
										var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
										var cw = 2;
										var cy = Math.round(this.pageLine.y);
										var ch = Math.round(this.pageLine.height);
										var mx = 0;
										var my = 0;
										var mw = cw;
										var mh = ch;
										if(cx < _x) {
											mw -= _x - cx;
											mx = _x - cx;
											if(mw > _width1) {
												mw = _width1;
											}
										} else if(cx + cw > _x + _width1) {
											mw = _x + _width1 - cx;
										}
										if(mw < 0) {
											mw = 0;
										}
										if(cy < _y) {
											mh -= _y - cy;
											my = _y - cy;
											if(mh > _height) {
												mh = _height;
											}
										} else if(cy + ch > _y + _height) {
											mh = _y + _height - cy;
										}
										if(mh < 0) {
											mh = 0;
										}
										if(create) {
											var z = this.z;
											var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
											if(stylePos < 0) {
												if(this.uiDisplay.autoAddStyles) {
													var _this = this.uiDisplay;
													var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
													var styleId = this.cursorStyle.getUUID();
													_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
													if(_this.stylePosBeforeFont == 0) {
														_this.addProgram(program,null,true);
													} else {
														_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
													}
													_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
													_this.stylePosBeforeFont++;
												} else {
													var c = js_Boot.getClass(this.cursorStyle);
													throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
												}
											} else {
												this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
												if(this.cursorProgram == null) {
													var _this = this.uiDisplay;
													var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
													var stylePos1 = stylePos;
													_this.usedStyleProgram[stylePos1] = program;
													var afterProgram = null;
													while(stylePos1-- > 0) {
														afterProgram = _this.usedStyleProgram[stylePos1];
														if(afterProgram != null) {
															break;
														}
													}
													_this.addProgram(program,afterProgram,afterProgram == null);
												}
											}
											this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
											if(addUpdate) {
												this.cursorProgram.addElement(this.cursorElement);
											}
										} else {
											this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
											if(addUpdate) {
												this.cursorProgram.update(this.cursorElement);
											}
										}
									}
								}
							} else if(this.cursorWant > 0) {
								var pos = this.cursorWant;
								if(pos != this.cursor) {
									if(pos < 0) {
										this.cursor = 0;
									} else if(this.page != null && pos > this.pageLine.glyphes.length) {
										this.cursor = this.pageLine.glyphes.length;
									} else {
										this.cursor = pos;
									}
									if(this.page != null && this.cursorStyle != null) {
										var addUpdate = this.isVisible && this.cursorIsVisible;
										var create = this.cursorElement == null;
										var _x = this.x + this.leftSpace;
										var _y = this.y + this.topSpace;
										var _width = this.width - this.leftSpace - this.rightSpace;
										var _height = this.height - this.topSpace - this.bottomSpace;
										if(this.masked) {
											if(this.maskX > this.leftSpace) {
												_x = this.x + this.maskX;
											}
											if(this.maskY > this.topSpace) {
												_y = this.y + this.maskY;
											}
											if(this.x + this.maskX + this.maskWidth < _x + _width) {
												_width = this.maskX + this.maskWidth + this.x - _x;
											}
											if(this.y + this.maskY + this.maskHeight < _y + _height) {
												_height = this.maskY + this.maskHeight + this.y - _y;
											}
										}
										var _width1 = _width;
										var _yOffset = this.yOffset;
										var y_offset;
										if((this.autoSize & 1) > 0) {
											y_offset = _yOffset;
										} else {
											switch(this.vAlign) {
											case 4:
												y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
												break;
											case 8:
												y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
												break;
											default:
												y_offset = _yOffset;
											}
										}
										var y_offset1 = y_offset + this.topSpace;
										_width1 += 3;
										var page = this.page;
										var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
										var cw = 2;
										var cy = Math.round(this.pageLine.y);
										var ch = Math.round(this.pageLine.height);
										var mx = 0;
										var my = 0;
										var mw = cw;
										var mh = ch;
										if(cx < _x) {
											mw -= _x - cx;
											mx = _x - cx;
											if(mw > _width1) {
												mw = _width1;
											}
										} else if(cx + cw > _x + _width1) {
											mw = _x + _width1 - cx;
										}
										if(mw < 0) {
											mw = 0;
										}
										if(cy < _y) {
											mh -= _y - cy;
											my = _y - cy;
											if(mh > _height) {
												mh = _height;
											}
										} else if(cy + ch > _y + _height) {
											mh = _y + _height - cy;
										}
										if(mh < 0) {
											mh = 0;
										}
										if(create) {
											var z = this.z;
											var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
											if(stylePos < 0) {
												if(this.uiDisplay.autoAddStyles) {
													var _this = this.uiDisplay;
													var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
													var styleId = this.cursorStyle.getUUID();
													_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
													if(_this.stylePosBeforeFont == 0) {
														_this.addProgram(program,null,true);
													} else {
														_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
													}
													_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
													_this.stylePosBeforeFont++;
												} else {
													var c = js_Boot.getClass(this.cursorStyle);
													throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
												}
											} else {
												this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
												if(this.cursorProgram == null) {
													var _this = this.uiDisplay;
													var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
													var stylePos1 = stylePos;
													_this.usedStyleProgram[stylePos1] = program;
													var afterProgram = null;
													while(stylePos1-- > 0) {
														afterProgram = _this.usedStyleProgram[stylePos1];
														if(afterProgram != null) {
															break;
														}
													}
													_this.addProgram(program,afterProgram,afterProgram == null);
												}
											}
											this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
											if(addUpdate) {
												this.cursorProgram.addElement(this.cursorElement);
											}
										} else {
											this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
											if(addUpdate) {
												this.cursorProgram.update(this.cursorElement);
											}
										}
									}
								}
							}
							if(this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					}
				}
				if(newCursor != null) {
					if(newCursor != this.cursor) {
						if(newCursor < 0) {
							this.cursor = 0;
						} else if(this.page != null && newCursor > this.pageLine.glyphes.length) {
							this.cursor = this.pageLine.glyphes.length;
						} else {
							this.cursor = newCursor;
						}
						if(this.page != null && this.cursorStyle != null) {
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var create = this.cursorElement == null;
							var _x = this.x + this.leftSpace;
							var _y = this.y + this.topSpace;
							var _width = this.width - this.leftSpace - this.rightSpace;
							var _height = this.height - this.topSpace - this.bottomSpace;
							if(this.masked) {
								if(this.maskX > this.leftSpace) {
									_x = this.x + this.maskX;
								}
								if(this.maskY > this.topSpace) {
									_y = this.y + this.maskY;
								}
								if(this.x + this.maskX + this.maskWidth < _x + _width) {
									_width = this.maskX + this.maskWidth + this.x - _x;
								}
								if(this.y + this.maskY + this.maskHeight < _y + _height) {
									_height = this.maskY + this.maskHeight + this.y - _y;
								}
							}
							var _width1 = _width;
							var _yOffset = this.yOffset;
							var y_offset;
							if((this.autoSize & 1) > 0) {
								y_offset = _yOffset;
							} else {
								switch(this.vAlign) {
								case 4:
									y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
									break;
								case 8:
									y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
									break;
								default:
									y_offset = _yOffset;
								}
							}
							var y_offset1 = y_offset + this.topSpace;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(create) {
								var z = this.z;
								var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
								if(stylePos < 0) {
									if(this.uiDisplay.autoAddStyles) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var styleId = this.cursorStyle.getUUID();
										_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
										if(_this.stylePosBeforeFont == 0) {
											_this.addProgram(program,null,true);
										} else {
											_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
										}
										_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
										_this.stylePosBeforeFont++;
									} else {
										var c = js_Boot.getClass(this.cursorStyle);
										throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
									}
								} else {
									this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
									if(this.cursorProgram == null) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var stylePos1 = stylePos;
										_this.usedStyleProgram[stylePos1] = program;
										var afterProgram = null;
										while(stylePos1-- > 0) {
											afterProgram = _this.usedStyleProgram[stylePos1];
											if(afterProgram != null) {
												break;
											}
										}
										_this.addProgram(program,afterProgram,afterProgram == null);
									}
								}
								this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
								if(addUpdate) {
									this.cursorProgram.addElement(this.cursorElement);
								}
							} else {
								this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
								if(addUpdate) {
									this.cursorProgram.update(this.cursorElement);
								}
							}
						}
					}
				}
				if(addSelection) {
					if(this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo) {
						if(oldCursorLine == this.selectLineFrom && oldCursor == this.selectFrom) {
							this.select(this.cursor,this.selectTo,this.cursorLine,this.selectLineTo - 1);
						} else {
							this.select(this.selectFrom,this.cursor,this.selectLineFrom,this.cursorLine);
						}
					} else if(this.cursorLine < oldCursorLine) {
						this.select(this.cursor,oldCursor,this.cursorLine,oldCursorLine);
					} else {
						this.select(oldCursor,this.cursor,oldCursorLine,this.cursorLine);
					}
				}
			}
		} else {
			var newCursorLine = null;
			var _this = this.fontProgram;
			var pageLine = this.pageLine;
			var position = this.cursor;
			var newCursor;
			if(position <= 0) {
				newCursor = 0;
			} else {
				var newCursor1 = new EReg("\\s","");
				var code = pageLine.glyphes[position - 1].char;
				if(newCursor1.match(String.fromCodePoint(code))) {
					while(true) {
						var newCursor1;
						if(position > 0) {
							var newCursor2 = new EReg("\\s","");
							var code = pageLine.glyphes[position - 1].char;
							newCursor1 = newCursor2.match(String.fromCodePoint(code));
						} else {
							newCursor1 = false;
						}
						if(!newCursor1) {
							break;
						}
						--position;
					}
				}
				var newCursor1 = new EReg("\\w","");
				var code = pageLine.glyphes[position - 1].char;
				if(newCursor1.match(String.fromCodePoint(code))) {
					while(true) {
						var newCursor1;
						if(position > 0) {
							var newCursor2 = new EReg("\\w","");
							var code = pageLine.glyphes[position - 1].char;
							newCursor1 = newCursor2.match(String.fromCodePoint(code));
						} else {
							newCursor1 = false;
						}
						if(!newCursor1) {
							break;
						}
						--position;
					}
				} else {
					while(true) {
						var newCursor1;
						if(position > 0) {
							var newCursor2 = new EReg("\\w","");
							var code = pageLine.glyphes[position - 1].char;
							if(!newCursor2.match(String.fromCodePoint(code))) {
								var newCursor3 = new EReg("\\s","");
								var code1 = pageLine.glyphes[position - 1].char;
								newCursor1 = !newCursor3.match(String.fromCodePoint(code1));
							} else {
								newCursor1 = false;
							}
						} else {
							newCursor1 = false;
						}
						if(!newCursor1) {
							break;
						}
						--position;
					}
				}
				newCursor = position;
			}
			var oldCursorLine = this.cursorLine;
			var oldCursor = this.cursor;
			if(newCursorLine != null) {
				if(newCursorLine != this.cursorLine) {
					if(newCursorLine < 0) {
						this.cursorLine = 0;
					} else if(this.page != null && newCursorLine >= this.page.pageLines.length) {
						this.cursorLine = this.page.pageLines.length - 1;
					} else {
						this.cursorLine = newCursorLine;
					}
					if(this.page != null) {
						this.pageLine = this.page.pageLines[this.cursorLine];
						if(this.cursor > this.pageLine.glyphes.length) {
							if(this.cursorWant == -1) {
								this.cursorWant = this.cursor;
							}
							var pos = this.pageLine.glyphes.length;
							if(pos != this.cursor) {
								if(pos < 0) {
									this.cursor = 0;
								} else if(this.page != null && pos > this.pageLine.glyphes.length) {
									this.cursor = this.pageLine.glyphes.length;
								} else {
									this.cursor = pos;
								}
								if(this.page != null && this.cursorStyle != null) {
									var addUpdate = this.isVisible && this.cursorIsVisible;
									var create = this.cursorElement == null;
									var _x = this.x + this.leftSpace;
									var _y = this.y + this.topSpace;
									var _width = this.width - this.leftSpace - this.rightSpace;
									var _height = this.height - this.topSpace - this.bottomSpace;
									if(this.masked) {
										if(this.maskX > this.leftSpace) {
											_x = this.x + this.maskX;
										}
										if(this.maskY > this.topSpace) {
											_y = this.y + this.maskY;
										}
										if(this.x + this.maskX + this.maskWidth < _x + _width) {
											_width = this.maskX + this.maskWidth + this.x - _x;
										}
										if(this.y + this.maskY + this.maskHeight < _y + _height) {
											_height = this.maskY + this.maskHeight + this.y - _y;
										}
									}
									var _width1 = _width;
									var _yOffset = this.yOffset;
									var y_offset;
									if((this.autoSize & 1) > 0) {
										y_offset = _yOffset;
									} else {
										switch(this.vAlign) {
										case 4:
											y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
											break;
										case 8:
											y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
											break;
										default:
											y_offset = _yOffset;
										}
									}
									var y_offset1 = y_offset + this.topSpace;
									_width1 += 3;
									var page = this.page;
									var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
									var cw = 2;
									var cy = Math.round(this.pageLine.y);
									var ch = Math.round(this.pageLine.height);
									var mx = 0;
									var my = 0;
									var mw = cw;
									var mh = ch;
									if(cx < _x) {
										mw -= _x - cx;
										mx = _x - cx;
										if(mw > _width1) {
											mw = _width1;
										}
									} else if(cx + cw > _x + _width1) {
										mw = _x + _width1 - cx;
									}
									if(mw < 0) {
										mw = 0;
									}
									if(cy < _y) {
										mh -= _y - cy;
										my = _y - cy;
										if(mh > _height) {
											mh = _height;
										}
									} else if(cy + ch > _y + _height) {
										mh = _y + _height - cy;
									}
									if(mh < 0) {
										mh = 0;
									}
									if(create) {
										var z = this.z;
										var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
										if(stylePos < 0) {
											if(this.uiDisplay.autoAddStyles) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var styleId = this.cursorStyle.getUUID();
												_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
												if(_this.stylePosBeforeFont == 0) {
													_this.addProgram(program,null,true);
												} else {
													_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
												}
												_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
												_this.stylePosBeforeFont++;
											} else {
												var c = js_Boot.getClass(this.cursorStyle);
												throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
											}
										} else {
											this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
											if(this.cursorProgram == null) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var stylePos1 = stylePos;
												_this.usedStyleProgram[stylePos1] = program;
												var afterProgram = null;
												while(stylePos1-- > 0) {
													afterProgram = _this.usedStyleProgram[stylePos1];
													if(afterProgram != null) {
														break;
													}
												}
												_this.addProgram(program,afterProgram,afterProgram == null);
											}
										}
										this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
										if(addUpdate) {
											this.cursorProgram.addElement(this.cursorElement);
										}
									} else {
										this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
										if(addUpdate) {
											this.cursorProgram.update(this.cursorElement);
										}
									}
								}
							}
						} else if(this.cursorWant > 0) {
							var pos = this.cursorWant;
							if(pos != this.cursor) {
								if(pos < 0) {
									this.cursor = 0;
								} else if(this.page != null && pos > this.pageLine.glyphes.length) {
									this.cursor = this.pageLine.glyphes.length;
								} else {
									this.cursor = pos;
								}
								if(this.page != null && this.cursorStyle != null) {
									var addUpdate = this.isVisible && this.cursorIsVisible;
									var create = this.cursorElement == null;
									var _x = this.x + this.leftSpace;
									var _y = this.y + this.topSpace;
									var _width = this.width - this.leftSpace - this.rightSpace;
									var _height = this.height - this.topSpace - this.bottomSpace;
									if(this.masked) {
										if(this.maskX > this.leftSpace) {
											_x = this.x + this.maskX;
										}
										if(this.maskY > this.topSpace) {
											_y = this.y + this.maskY;
										}
										if(this.x + this.maskX + this.maskWidth < _x + _width) {
											_width = this.maskX + this.maskWidth + this.x - _x;
										}
										if(this.y + this.maskY + this.maskHeight < _y + _height) {
											_height = this.maskY + this.maskHeight + this.y - _y;
										}
									}
									var _width1 = _width;
									var _yOffset = this.yOffset;
									var y_offset;
									if((this.autoSize & 1) > 0) {
										y_offset = _yOffset;
									} else {
										switch(this.vAlign) {
										case 4:
											y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
											break;
										case 8:
											y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
											break;
										default:
											y_offset = _yOffset;
										}
									}
									var y_offset1 = y_offset + this.topSpace;
									_width1 += 3;
									var page = this.page;
									var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
									var cw = 2;
									var cy = Math.round(this.pageLine.y);
									var ch = Math.round(this.pageLine.height);
									var mx = 0;
									var my = 0;
									var mw = cw;
									var mh = ch;
									if(cx < _x) {
										mw -= _x - cx;
										mx = _x - cx;
										if(mw > _width1) {
											mw = _width1;
										}
									} else if(cx + cw > _x + _width1) {
										mw = _x + _width1 - cx;
									}
									if(mw < 0) {
										mw = 0;
									}
									if(cy < _y) {
										mh -= _y - cy;
										my = _y - cy;
										if(mh > _height) {
											mh = _height;
										}
									} else if(cy + ch > _y + _height) {
										mh = _y + _height - cy;
									}
									if(mh < 0) {
										mh = 0;
									}
									if(create) {
										var z = this.z;
										var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
										if(stylePos < 0) {
											if(this.uiDisplay.autoAddStyles) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var styleId = this.cursorStyle.getUUID();
												_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
												if(_this.stylePosBeforeFont == 0) {
													_this.addProgram(program,null,true);
												} else {
													_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
												}
												_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
												_this.stylePosBeforeFont++;
											} else {
												var c = js_Boot.getClass(this.cursorStyle);
												throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
											}
										} else {
											this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
											if(this.cursorProgram == null) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var stylePos1 = stylePos;
												_this.usedStyleProgram[stylePos1] = program;
												var afterProgram = null;
												while(stylePos1-- > 0) {
													afterProgram = _this.usedStyleProgram[stylePos1];
													if(afterProgram != null) {
														break;
													}
												}
												_this.addProgram(program,afterProgram,afterProgram == null);
											}
										}
										this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
										if(addUpdate) {
											this.cursorProgram.addElement(this.cursorElement);
										}
									} else {
										this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
										if(addUpdate) {
											this.cursorProgram.update(this.cursorElement);
										}
									}
								}
							}
						}
						if(this.cursorStyle != null) {
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var create = this.cursorElement == null;
							var _x = this.x + this.leftSpace;
							var _y = this.y + this.topSpace;
							var _width = this.width - this.leftSpace - this.rightSpace;
							var _height = this.height - this.topSpace - this.bottomSpace;
							if(this.masked) {
								if(this.maskX > this.leftSpace) {
									_x = this.x + this.maskX;
								}
								if(this.maskY > this.topSpace) {
									_y = this.y + this.maskY;
								}
								if(this.x + this.maskX + this.maskWidth < _x + _width) {
									_width = this.maskX + this.maskWidth + this.x - _x;
								}
								if(this.y + this.maskY + this.maskHeight < _y + _height) {
									_height = this.maskY + this.maskHeight + this.y - _y;
								}
							}
							var _width1 = _width;
							var _yOffset = this.yOffset;
							var y_offset;
							if((this.autoSize & 1) > 0) {
								y_offset = _yOffset;
							} else {
								switch(this.vAlign) {
								case 4:
									y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
									break;
								case 8:
									y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
									break;
								default:
									y_offset = _yOffset;
								}
							}
							var y_offset1 = y_offset + this.topSpace;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(create) {
								var z = this.z;
								var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
								if(stylePos < 0) {
									if(this.uiDisplay.autoAddStyles) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var styleId = this.cursorStyle.getUUID();
										_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
										if(_this.stylePosBeforeFont == 0) {
											_this.addProgram(program,null,true);
										} else {
											_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
										}
										_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
										_this.stylePosBeforeFont++;
									} else {
										var c = js_Boot.getClass(this.cursorStyle);
										throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
									}
								} else {
									this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
									if(this.cursorProgram == null) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var stylePos1 = stylePos;
										_this.usedStyleProgram[stylePos1] = program;
										var afterProgram = null;
										while(stylePos1-- > 0) {
											afterProgram = _this.usedStyleProgram[stylePos1];
											if(afterProgram != null) {
												break;
											}
										}
										_this.addProgram(program,afterProgram,afterProgram == null);
									}
								}
								this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
								if(addUpdate) {
									this.cursorProgram.addElement(this.cursorElement);
								}
							} else {
								this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
								if(addUpdate) {
									this.cursorProgram.update(this.cursorElement);
								}
							}
						}
					}
				}
			}
			if(newCursor != null) {
				if(newCursor != this.cursor) {
					if(newCursor < 0) {
						this.cursor = 0;
					} else if(this.page != null && newCursor > this.pageLine.glyphes.length) {
						this.cursor = this.pageLine.glyphes.length;
					} else {
						this.cursor = newCursor;
					}
					if(this.page != null && this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
			if(addSelection) {
				if(this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo) {
					if(oldCursorLine == this.selectLineFrom && oldCursor == this.selectFrom) {
						this.select(this.cursor,this.selectTo,this.cursorLine,this.selectLineTo - 1);
					} else {
						this.select(this.selectFrom,this.cursor,this.selectLineFrom,this.cursorLine);
					}
				} else if(this.cursorLine < oldCursorLine) {
					this.select(this.cursor,oldCursor,this.cursorLine,oldCursorLine);
				} else {
					this.select(oldCursor,this.cursor,oldCursorLine,this.cursorLine);
				}
			}
		}
		this.cursorWant = -1;
	}
	,cursorRightWord: function(addSelection) {
		if(addSelection == null) {
			addSelection = false;
		}
		if(!addSelection && (this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo)) {
			this.selectLineFrom = this.selectLineTo = this.selectFrom = this.selectTo = 0;
			if(this.page != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElementArray != null && this.isVisible) {
					var _g = 0;
					var _g1 = this.selectionElementMax;
					while(_g < _g1) {
						var i = _g++;
						this.selectionProgram.removeElement(this.selectionElementArray[i]);
					}
				}
			}
			this.selectionIsVisible = false;
		}
		if(this.cursor == this.pageLine.glyphes.length) {
			if(this.cursorLine < this.page.pageLines.length - 1) {
				var newCursorLine = this.cursorLine + 1;
				var oldCursorLine = this.cursorLine;
				var oldCursor = this.cursor;
				if(newCursorLine != null) {
					if(newCursorLine != this.cursorLine) {
						if(newCursorLine < 0) {
							this.cursorLine = 0;
						} else if(this.page != null && newCursorLine >= this.page.pageLines.length) {
							this.cursorLine = this.page.pageLines.length - 1;
						} else {
							this.cursorLine = newCursorLine;
						}
						if(this.page != null) {
							this.pageLine = this.page.pageLines[this.cursorLine];
							if(this.cursor > this.pageLine.glyphes.length) {
								if(this.cursorWant == -1) {
									this.cursorWant = this.cursor;
								}
								var pos = this.pageLine.glyphes.length;
								if(pos != this.cursor) {
									if(pos < 0) {
										this.cursor = 0;
									} else if(this.page != null && pos > this.pageLine.glyphes.length) {
										this.cursor = this.pageLine.glyphes.length;
									} else {
										this.cursor = pos;
									}
									if(this.page != null && this.cursorStyle != null) {
										var addUpdate = this.isVisible && this.cursorIsVisible;
										var create = this.cursorElement == null;
										var _x = this.x + this.leftSpace;
										var _y = this.y + this.topSpace;
										var _width = this.width - this.leftSpace - this.rightSpace;
										var _height = this.height - this.topSpace - this.bottomSpace;
										if(this.masked) {
											if(this.maskX > this.leftSpace) {
												_x = this.x + this.maskX;
											}
											if(this.maskY > this.topSpace) {
												_y = this.y + this.maskY;
											}
											if(this.x + this.maskX + this.maskWidth < _x + _width) {
												_width = this.maskX + this.maskWidth + this.x - _x;
											}
											if(this.y + this.maskY + this.maskHeight < _y + _height) {
												_height = this.maskY + this.maskHeight + this.y - _y;
											}
										}
										var _width1 = _width;
										var _yOffset = this.yOffset;
										var y_offset;
										if((this.autoSize & 1) > 0) {
											y_offset = _yOffset;
										} else {
											switch(this.vAlign) {
											case 4:
												y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
												break;
											case 8:
												y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
												break;
											default:
												y_offset = _yOffset;
											}
										}
										var y_offset1 = y_offset + this.topSpace;
										_width1 += 3;
										var page = this.page;
										var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
										var cw = 2;
										var cy = Math.round(this.pageLine.y);
										var ch = Math.round(this.pageLine.height);
										var mx = 0;
										var my = 0;
										var mw = cw;
										var mh = ch;
										if(cx < _x) {
											mw -= _x - cx;
											mx = _x - cx;
											if(mw > _width1) {
												mw = _width1;
											}
										} else if(cx + cw > _x + _width1) {
											mw = _x + _width1 - cx;
										}
										if(mw < 0) {
											mw = 0;
										}
										if(cy < _y) {
											mh -= _y - cy;
											my = _y - cy;
											if(mh > _height) {
												mh = _height;
											}
										} else if(cy + ch > _y + _height) {
											mh = _y + _height - cy;
										}
										if(mh < 0) {
											mh = 0;
										}
										if(create) {
											var z = this.z;
											var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
											if(stylePos < 0) {
												if(this.uiDisplay.autoAddStyles) {
													var _this = this.uiDisplay;
													var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
													var styleId = this.cursorStyle.getUUID();
													_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
													if(_this.stylePosBeforeFont == 0) {
														_this.addProgram(program,null,true);
													} else {
														_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
													}
													_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
													_this.stylePosBeforeFont++;
												} else {
													var c = js_Boot.getClass(this.cursorStyle);
													throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
												}
											} else {
												this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
												if(this.cursorProgram == null) {
													var _this = this.uiDisplay;
													var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
													var stylePos1 = stylePos;
													_this.usedStyleProgram[stylePos1] = program;
													var afterProgram = null;
													while(stylePos1-- > 0) {
														afterProgram = _this.usedStyleProgram[stylePos1];
														if(afterProgram != null) {
															break;
														}
													}
													_this.addProgram(program,afterProgram,afterProgram == null);
												}
											}
											this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
											if(addUpdate) {
												this.cursorProgram.addElement(this.cursorElement);
											}
										} else {
											this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
											if(addUpdate) {
												this.cursorProgram.update(this.cursorElement);
											}
										}
									}
								}
							} else if(this.cursorWant > 0) {
								var pos = this.cursorWant;
								if(pos != this.cursor) {
									if(pos < 0) {
										this.cursor = 0;
									} else if(this.page != null && pos > this.pageLine.glyphes.length) {
										this.cursor = this.pageLine.glyphes.length;
									} else {
										this.cursor = pos;
									}
									if(this.page != null && this.cursorStyle != null) {
										var addUpdate = this.isVisible && this.cursorIsVisible;
										var create = this.cursorElement == null;
										var _x = this.x + this.leftSpace;
										var _y = this.y + this.topSpace;
										var _width = this.width - this.leftSpace - this.rightSpace;
										var _height = this.height - this.topSpace - this.bottomSpace;
										if(this.masked) {
											if(this.maskX > this.leftSpace) {
												_x = this.x + this.maskX;
											}
											if(this.maskY > this.topSpace) {
												_y = this.y + this.maskY;
											}
											if(this.x + this.maskX + this.maskWidth < _x + _width) {
												_width = this.maskX + this.maskWidth + this.x - _x;
											}
											if(this.y + this.maskY + this.maskHeight < _y + _height) {
												_height = this.maskY + this.maskHeight + this.y - _y;
											}
										}
										var _width1 = _width;
										var _yOffset = this.yOffset;
										var y_offset;
										if((this.autoSize & 1) > 0) {
											y_offset = _yOffset;
										} else {
											switch(this.vAlign) {
											case 4:
												y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
												break;
											case 8:
												y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
												break;
											default:
												y_offset = _yOffset;
											}
										}
										var y_offset1 = y_offset + this.topSpace;
										_width1 += 3;
										var page = this.page;
										var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
										var cw = 2;
										var cy = Math.round(this.pageLine.y);
										var ch = Math.round(this.pageLine.height);
										var mx = 0;
										var my = 0;
										var mw = cw;
										var mh = ch;
										if(cx < _x) {
											mw -= _x - cx;
											mx = _x - cx;
											if(mw > _width1) {
												mw = _width1;
											}
										} else if(cx + cw > _x + _width1) {
											mw = _x + _width1 - cx;
										}
										if(mw < 0) {
											mw = 0;
										}
										if(cy < _y) {
											mh -= _y - cy;
											my = _y - cy;
											if(mh > _height) {
												mh = _height;
											}
										} else if(cy + ch > _y + _height) {
											mh = _y + _height - cy;
										}
										if(mh < 0) {
											mh = 0;
										}
										if(create) {
											var z = this.z;
											var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
											if(stylePos < 0) {
												if(this.uiDisplay.autoAddStyles) {
													var _this = this.uiDisplay;
													var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
													var styleId = this.cursorStyle.getUUID();
													_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
													if(_this.stylePosBeforeFont == 0) {
														_this.addProgram(program,null,true);
													} else {
														_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
													}
													_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
													_this.stylePosBeforeFont++;
												} else {
													var c = js_Boot.getClass(this.cursorStyle);
													throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
												}
											} else {
												this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
												if(this.cursorProgram == null) {
													var _this = this.uiDisplay;
													var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
													var stylePos1 = stylePos;
													_this.usedStyleProgram[stylePos1] = program;
													var afterProgram = null;
													while(stylePos1-- > 0) {
														afterProgram = _this.usedStyleProgram[stylePos1];
														if(afterProgram != null) {
															break;
														}
													}
													_this.addProgram(program,afterProgram,afterProgram == null);
												}
											}
											this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
											if(addUpdate) {
												this.cursorProgram.addElement(this.cursorElement);
											}
										} else {
											this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
											if(addUpdate) {
												this.cursorProgram.update(this.cursorElement);
											}
										}
									}
								}
							}
							if(this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					}
				}
				if(0 != this.cursor) {
					if(this.page != null && 0 > this.pageLine.glyphes.length) {
						this.cursor = this.pageLine.glyphes.length;
					} else {
						this.cursor = 0;
					}
					if(this.page != null && this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
				if(addSelection) {
					if(this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo) {
						if(oldCursorLine == this.selectLineFrom && oldCursor == this.selectFrom) {
							this.select(this.cursor,this.selectTo,this.cursorLine,this.selectLineTo - 1);
						} else {
							this.select(this.selectFrom,this.cursor,this.selectLineFrom,this.cursorLine);
						}
					} else if(this.cursorLine < oldCursorLine) {
						this.select(this.cursor,oldCursor,this.cursorLine,oldCursorLine);
					} else {
						this.select(oldCursor,this.cursor,oldCursorLine,this.cursorLine);
					}
				}
			}
		} else {
			var newCursorLine = null;
			var _this = this.fontProgram;
			var pageLine = this.pageLine;
			var position = this.cursor;
			var newCursor;
			if(position >= pageLine.glyphes.length) {
				newCursor = 0;
			} else {
				var newCursor1 = new EReg("\\s","");
				var code = pageLine.glyphes[position].char;
				if(newCursor1.match(String.fromCodePoint(code))) {
					while(true) {
						var newCursor1;
						if(position < pageLine.glyphes.length) {
							var newCursor2 = new EReg("\\s","");
							var code = pageLine.glyphes[position].char;
							newCursor1 = newCursor2.match(String.fromCodePoint(code));
						} else {
							newCursor1 = false;
						}
						if(!newCursor1) {
							break;
						}
						++position;
					}
				} else {
					var newCursor1 = new EReg("\\w","");
					var code = pageLine.glyphes[position].char;
					if(newCursor1.match(String.fromCodePoint(code))) {
						while(true) {
							var newCursor1;
							if(position < pageLine.glyphes.length) {
								var newCursor2 = new EReg("\\w","");
								var code = pageLine.glyphes[position].char;
								newCursor1 = newCursor2.match(String.fromCodePoint(code));
							} else {
								newCursor1 = false;
							}
							if(!newCursor1) {
								break;
							}
							++position;
						}
					} else {
						while(true) {
							var newCursor1;
							if(position < pageLine.glyphes.length) {
								var newCursor2 = new EReg("\\w","");
								var code = pageLine.glyphes[position].char;
								if(!newCursor2.match(String.fromCodePoint(code))) {
									var newCursor3 = new EReg("\\s","");
									var code1 = pageLine.glyphes[position].char;
									newCursor1 = !newCursor3.match(String.fromCodePoint(code1));
								} else {
									newCursor1 = false;
								}
							} else {
								newCursor1 = false;
							}
							if(!newCursor1) {
								break;
							}
							++position;
						}
					}
					while(true) {
						var newCursor1;
						if(position < pageLine.glyphes.length) {
							var newCursor2 = new EReg("\\s","");
							var code = pageLine.glyphes[position].char;
							newCursor1 = newCursor2.match(String.fromCodePoint(code));
						} else {
							newCursor1 = false;
						}
						if(!newCursor1) {
							break;
						}
						++position;
					}
				}
				newCursor = position;
			}
			var oldCursorLine = this.cursorLine;
			var oldCursor = this.cursor;
			if(newCursorLine != null) {
				if(newCursorLine != this.cursorLine) {
					if(newCursorLine < 0) {
						this.cursorLine = 0;
					} else if(this.page != null && newCursorLine >= this.page.pageLines.length) {
						this.cursorLine = this.page.pageLines.length - 1;
					} else {
						this.cursorLine = newCursorLine;
					}
					if(this.page != null) {
						this.pageLine = this.page.pageLines[this.cursorLine];
						if(this.cursor > this.pageLine.glyphes.length) {
							if(this.cursorWant == -1) {
								this.cursorWant = this.cursor;
							}
							var pos = this.pageLine.glyphes.length;
							if(pos != this.cursor) {
								if(pos < 0) {
									this.cursor = 0;
								} else if(this.page != null && pos > this.pageLine.glyphes.length) {
									this.cursor = this.pageLine.glyphes.length;
								} else {
									this.cursor = pos;
								}
								if(this.page != null && this.cursorStyle != null) {
									var addUpdate = this.isVisible && this.cursorIsVisible;
									var create = this.cursorElement == null;
									var _x = this.x + this.leftSpace;
									var _y = this.y + this.topSpace;
									var _width = this.width - this.leftSpace - this.rightSpace;
									var _height = this.height - this.topSpace - this.bottomSpace;
									if(this.masked) {
										if(this.maskX > this.leftSpace) {
											_x = this.x + this.maskX;
										}
										if(this.maskY > this.topSpace) {
											_y = this.y + this.maskY;
										}
										if(this.x + this.maskX + this.maskWidth < _x + _width) {
											_width = this.maskX + this.maskWidth + this.x - _x;
										}
										if(this.y + this.maskY + this.maskHeight < _y + _height) {
											_height = this.maskY + this.maskHeight + this.y - _y;
										}
									}
									var _width1 = _width;
									var _yOffset = this.yOffset;
									var y_offset;
									if((this.autoSize & 1) > 0) {
										y_offset = _yOffset;
									} else {
										switch(this.vAlign) {
										case 4:
											y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
											break;
										case 8:
											y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
											break;
										default:
											y_offset = _yOffset;
										}
									}
									var y_offset1 = y_offset + this.topSpace;
									_width1 += 3;
									var page = this.page;
									var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
									var cw = 2;
									var cy = Math.round(this.pageLine.y);
									var ch = Math.round(this.pageLine.height);
									var mx = 0;
									var my = 0;
									var mw = cw;
									var mh = ch;
									if(cx < _x) {
										mw -= _x - cx;
										mx = _x - cx;
										if(mw > _width1) {
											mw = _width1;
										}
									} else if(cx + cw > _x + _width1) {
										mw = _x + _width1 - cx;
									}
									if(mw < 0) {
										mw = 0;
									}
									if(cy < _y) {
										mh -= _y - cy;
										my = _y - cy;
										if(mh > _height) {
											mh = _height;
										}
									} else if(cy + ch > _y + _height) {
										mh = _y + _height - cy;
									}
									if(mh < 0) {
										mh = 0;
									}
									if(create) {
										var z = this.z;
										var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
										if(stylePos < 0) {
											if(this.uiDisplay.autoAddStyles) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var styleId = this.cursorStyle.getUUID();
												_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
												if(_this.stylePosBeforeFont == 0) {
													_this.addProgram(program,null,true);
												} else {
													_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
												}
												_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
												_this.stylePosBeforeFont++;
											} else {
												var c = js_Boot.getClass(this.cursorStyle);
												throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
											}
										} else {
											this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
											if(this.cursorProgram == null) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var stylePos1 = stylePos;
												_this.usedStyleProgram[stylePos1] = program;
												var afterProgram = null;
												while(stylePos1-- > 0) {
													afterProgram = _this.usedStyleProgram[stylePos1];
													if(afterProgram != null) {
														break;
													}
												}
												_this.addProgram(program,afterProgram,afterProgram == null);
											}
										}
										this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
										if(addUpdate) {
											this.cursorProgram.addElement(this.cursorElement);
										}
									} else {
										this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
										if(addUpdate) {
											this.cursorProgram.update(this.cursorElement);
										}
									}
								}
							}
						} else if(this.cursorWant > 0) {
							var pos = this.cursorWant;
							if(pos != this.cursor) {
								if(pos < 0) {
									this.cursor = 0;
								} else if(this.page != null && pos > this.pageLine.glyphes.length) {
									this.cursor = this.pageLine.glyphes.length;
								} else {
									this.cursor = pos;
								}
								if(this.page != null && this.cursorStyle != null) {
									var addUpdate = this.isVisible && this.cursorIsVisible;
									var create = this.cursorElement == null;
									var _x = this.x + this.leftSpace;
									var _y = this.y + this.topSpace;
									var _width = this.width - this.leftSpace - this.rightSpace;
									var _height = this.height - this.topSpace - this.bottomSpace;
									if(this.masked) {
										if(this.maskX > this.leftSpace) {
											_x = this.x + this.maskX;
										}
										if(this.maskY > this.topSpace) {
											_y = this.y + this.maskY;
										}
										if(this.x + this.maskX + this.maskWidth < _x + _width) {
											_width = this.maskX + this.maskWidth + this.x - _x;
										}
										if(this.y + this.maskY + this.maskHeight < _y + _height) {
											_height = this.maskY + this.maskHeight + this.y - _y;
										}
									}
									var _width1 = _width;
									var _yOffset = this.yOffset;
									var y_offset;
									if((this.autoSize & 1) > 0) {
										y_offset = _yOffset;
									} else {
										switch(this.vAlign) {
										case 4:
											y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
											break;
										case 8:
											y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
											break;
										default:
											y_offset = _yOffset;
										}
									}
									var y_offset1 = y_offset + this.topSpace;
									_width1 += 3;
									var page = this.page;
									var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
									var cw = 2;
									var cy = Math.round(this.pageLine.y);
									var ch = Math.round(this.pageLine.height);
									var mx = 0;
									var my = 0;
									var mw = cw;
									var mh = ch;
									if(cx < _x) {
										mw -= _x - cx;
										mx = _x - cx;
										if(mw > _width1) {
											mw = _width1;
										}
									} else if(cx + cw > _x + _width1) {
										mw = _x + _width1 - cx;
									}
									if(mw < 0) {
										mw = 0;
									}
									if(cy < _y) {
										mh -= _y - cy;
										my = _y - cy;
										if(mh > _height) {
											mh = _height;
										}
									} else if(cy + ch > _y + _height) {
										mh = _y + _height - cy;
									}
									if(mh < 0) {
										mh = 0;
									}
									if(create) {
										var z = this.z;
										var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
										if(stylePos < 0) {
											if(this.uiDisplay.autoAddStyles) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var styleId = this.cursorStyle.getUUID();
												_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
												if(_this.stylePosBeforeFont == 0) {
													_this.addProgram(program,null,true);
												} else {
													_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
												}
												_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
												_this.stylePosBeforeFont++;
											} else {
												var c = js_Boot.getClass(this.cursorStyle);
												throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
											}
										} else {
											this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
											if(this.cursorProgram == null) {
												var _this = this.uiDisplay;
												var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
												var stylePos1 = stylePos;
												_this.usedStyleProgram[stylePos1] = program;
												var afterProgram = null;
												while(stylePos1-- > 0) {
													afterProgram = _this.usedStyleProgram[stylePos1];
													if(afterProgram != null) {
														break;
													}
												}
												_this.addProgram(program,afterProgram,afterProgram == null);
											}
										}
										this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
										if(addUpdate) {
											this.cursorProgram.addElement(this.cursorElement);
										}
									} else {
										this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
										if(addUpdate) {
											this.cursorProgram.update(this.cursorElement);
										}
									}
								}
							}
						}
						if(this.cursorStyle != null) {
							var addUpdate = this.isVisible && this.cursorIsVisible;
							var create = this.cursorElement == null;
							var _x = this.x + this.leftSpace;
							var _y = this.y + this.topSpace;
							var _width = this.width - this.leftSpace - this.rightSpace;
							var _height = this.height - this.topSpace - this.bottomSpace;
							if(this.masked) {
								if(this.maskX > this.leftSpace) {
									_x = this.x + this.maskX;
								}
								if(this.maskY > this.topSpace) {
									_y = this.y + this.maskY;
								}
								if(this.x + this.maskX + this.maskWidth < _x + _width) {
									_width = this.maskX + this.maskWidth + this.x - _x;
								}
								if(this.y + this.maskY + this.maskHeight < _y + _height) {
									_height = this.maskY + this.maskHeight + this.y - _y;
								}
							}
							var _width1 = _width;
							var _yOffset = this.yOffset;
							var y_offset;
							if((this.autoSize & 1) > 0) {
								y_offset = _yOffset;
							} else {
								switch(this.vAlign) {
								case 4:
									y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
									break;
								case 8:
									y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
									break;
								default:
									y_offset = _yOffset;
								}
							}
							var y_offset1 = y_offset + this.topSpace;
							_width1 += 3;
							var page = this.page;
							var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
							var cw = 2;
							var cy = Math.round(this.pageLine.y);
							var ch = Math.round(this.pageLine.height);
							var mx = 0;
							var my = 0;
							var mw = cw;
							var mh = ch;
							if(cx < _x) {
								mw -= _x - cx;
								mx = _x - cx;
								if(mw > _width1) {
									mw = _width1;
								}
							} else if(cx + cw > _x + _width1) {
								mw = _x + _width1 - cx;
							}
							if(mw < 0) {
								mw = 0;
							}
							if(cy < _y) {
								mh -= _y - cy;
								my = _y - cy;
								if(mh > _height) {
									mh = _height;
								}
							} else if(cy + ch > _y + _height) {
								mh = _y + _height - cy;
							}
							if(mh < 0) {
								mh = 0;
							}
							if(create) {
								var z = this.z;
								var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
								if(stylePos < 0) {
									if(this.uiDisplay.autoAddStyles) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var styleId = this.cursorStyle.getUUID();
										_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
										if(_this.stylePosBeforeFont == 0) {
											_this.addProgram(program,null,true);
										} else {
											_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
										}
										_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
										_this.stylePosBeforeFont++;
									} else {
										var c = js_Boot.getClass(this.cursorStyle);
										throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
									}
								} else {
									this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
									if(this.cursorProgram == null) {
										var _this = this.uiDisplay;
										var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
										var stylePos1 = stylePos;
										_this.usedStyleProgram[stylePos1] = program;
										var afterProgram = null;
										while(stylePos1-- > 0) {
											afterProgram = _this.usedStyleProgram[stylePos1];
											if(afterProgram != null) {
												break;
											}
										}
										_this.addProgram(program,afterProgram,afterProgram == null);
									}
								}
								this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
								if(addUpdate) {
									this.cursorProgram.addElement(this.cursorElement);
								}
							} else {
								this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
								if(addUpdate) {
									this.cursorProgram.update(this.cursorElement);
								}
							}
						}
					}
				}
			}
			if(newCursor != null) {
				if(newCursor != this.cursor) {
					if(newCursor < 0) {
						this.cursor = 0;
					} else if(this.page != null && newCursor > this.pageLine.glyphes.length) {
						this.cursor = this.pageLine.glyphes.length;
					} else {
						this.cursor = newCursor;
					}
					if(this.page != null && this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
			if(addSelection) {
				if(this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo) {
					if(oldCursorLine == this.selectLineFrom && oldCursor == this.selectFrom) {
						this.select(this.cursor,this.selectTo,this.cursorLine,this.selectLineTo - 1);
					} else {
						this.select(this.selectFrom,this.cursor,this.selectLineFrom,this.cursorLine);
					}
				} else if(this.cursorLine < oldCursorLine) {
					this.select(this.cursor,oldCursor,this.cursorLine,oldCursorLine);
				} else {
					this.select(oldCursor,this.cursor,oldCursorLine,this.cursorLine);
				}
			}
		}
		this.cursorWant = -1;
	}
	,cursorUp: function(addSelection) {
		if(addSelection == null) {
			addSelection = false;
		}
		if(!addSelection && (this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo)) {
			this.selectLineFrom = this.selectLineTo = this.selectFrom = this.selectTo = 0;
			if(this.page != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElementArray != null && this.isVisible) {
					var _g = 0;
					var _g1 = this.selectionElementMax;
					while(_g < _g1) {
						var i = _g++;
						this.selectionProgram.removeElement(this.selectionElementArray[i]);
					}
				}
			}
			this.selectionIsVisible = false;
		}
		var newCursorLine = this.cursorLine - 1;
		var newCursor = null;
		var oldCursorLine = this.cursorLine;
		var oldCursor = this.cursor;
		if(newCursorLine != null) {
			if(newCursorLine != this.cursorLine) {
				if(newCursorLine < 0) {
					this.cursorLine = 0;
				} else if(this.page != null && newCursorLine >= this.page.pageLines.length) {
					this.cursorLine = this.page.pageLines.length - 1;
				} else {
					this.cursorLine = newCursorLine;
				}
				if(this.page != null) {
					this.pageLine = this.page.pageLines[this.cursorLine];
					if(this.cursor > this.pageLine.glyphes.length) {
						if(this.cursorWant == -1) {
							this.cursorWant = this.cursor;
						}
						var pos = this.pageLine.glyphes.length;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					} else if(this.cursorWant > 0) {
						var pos = this.cursorWant;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					}
					if(this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
		}
		if(newCursor != null) {
			if(newCursor != this.cursor) {
				if(newCursor < 0) {
					this.cursor = 0;
				} else if(this.page != null && newCursor > this.pageLine.glyphes.length) {
					this.cursor = this.pageLine.glyphes.length;
				} else {
					this.cursor = newCursor;
				}
				if(this.page != null && this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var page = this.page;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.pageLine.y);
					var ch = Math.round(this.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
		}
		if(addSelection) {
			if(this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo) {
				if(oldCursorLine == this.selectLineFrom && oldCursor == this.selectFrom) {
					this.select(this.cursor,this.selectTo,this.cursorLine,this.selectLineTo - 1);
				} else {
					this.select(this.selectFrom,this.cursor,this.selectLineFrom,this.cursorLine);
				}
			} else if(this.cursorLine < oldCursorLine) {
				this.select(this.cursor,oldCursor,this.cursorLine,oldCursorLine);
			} else {
				this.select(oldCursor,this.cursor,oldCursorLine,this.cursorLine);
			}
		}
	}
	,cursorDown: function(addSelection) {
		if(addSelection == null) {
			addSelection = false;
		}
		if(!addSelection && (this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo)) {
			this.selectLineFrom = this.selectLineTo = this.selectFrom = this.selectTo = 0;
			if(this.page != null && this.selectionStyle != null) {
				if(this.selectionIsVisible && this.selectionElementArray != null && this.isVisible) {
					var _g = 0;
					var _g1 = this.selectionElementMax;
					while(_g < _g1) {
						var i = _g++;
						this.selectionProgram.removeElement(this.selectionElementArray[i]);
					}
				}
			}
			this.selectionIsVisible = false;
		}
		var newCursorLine = this.cursorLine + 1;
		var newCursor = null;
		var oldCursorLine = this.cursorLine;
		var oldCursor = this.cursor;
		if(newCursorLine != null) {
			if(newCursorLine != this.cursorLine) {
				if(newCursorLine < 0) {
					this.cursorLine = 0;
				} else if(this.page != null && newCursorLine >= this.page.pageLines.length) {
					this.cursorLine = this.page.pageLines.length - 1;
				} else {
					this.cursorLine = newCursorLine;
				}
				if(this.page != null) {
					this.pageLine = this.page.pageLines[this.cursorLine];
					if(this.cursor > this.pageLine.glyphes.length) {
						if(this.cursorWant == -1) {
							this.cursorWant = this.cursor;
						}
						var pos = this.pageLine.glyphes.length;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					} else if(this.cursorWant > 0) {
						var pos = this.cursorWant;
						if(pos != this.cursor) {
							if(pos < 0) {
								this.cursor = 0;
							} else if(this.page != null && pos > this.pageLine.glyphes.length) {
								this.cursor = this.pageLine.glyphes.length;
							} else {
								this.cursor = pos;
							}
							if(this.page != null && this.cursorStyle != null) {
								var addUpdate = this.isVisible && this.cursorIsVisible;
								var create = this.cursorElement == null;
								var _x = this.x + this.leftSpace;
								var _y = this.y + this.topSpace;
								var _width = this.width - this.leftSpace - this.rightSpace;
								var _height = this.height - this.topSpace - this.bottomSpace;
								if(this.masked) {
									if(this.maskX > this.leftSpace) {
										_x = this.x + this.maskX;
									}
									if(this.maskY > this.topSpace) {
										_y = this.y + this.maskY;
									}
									if(this.x + this.maskX + this.maskWidth < _x + _width) {
										_width = this.maskX + this.maskWidth + this.x - _x;
									}
									if(this.y + this.maskY + this.maskHeight < _y + _height) {
										_height = this.maskY + this.maskHeight + this.y - _y;
									}
								}
								var _width1 = _width;
								var _yOffset = this.yOffset;
								var y_offset;
								if((this.autoSize & 1) > 0) {
									y_offset = _yOffset;
								} else {
									switch(this.vAlign) {
									case 4:
										y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
										break;
									case 8:
										y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
										break;
									default:
										y_offset = _yOffset;
									}
								}
								var y_offset1 = y_offset + this.topSpace;
								_width1 += 3;
								var page = this.page;
								var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
								var cw = 2;
								var cy = Math.round(this.pageLine.y);
								var ch = Math.round(this.pageLine.height);
								var mx = 0;
								var my = 0;
								var mw = cw;
								var mh = ch;
								if(cx < _x) {
									mw -= _x - cx;
									mx = _x - cx;
									if(mw > _width1) {
										mw = _width1;
									}
								} else if(cx + cw > _x + _width1) {
									mw = _x + _width1 - cx;
								}
								if(mw < 0) {
									mw = 0;
								}
								if(cy < _y) {
									mh -= _y - cy;
									my = _y - cy;
									if(mh > _height) {
										mh = _height;
									}
								} else if(cy + ch > _y + _height) {
									mh = _y + _height - cy;
								}
								if(mh < 0) {
									mh = 0;
								}
								if(create) {
									var z = this.z;
									var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
									if(stylePos < 0) {
										if(this.uiDisplay.autoAddStyles) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var styleId = this.cursorStyle.getUUID();
											_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
											if(_this.stylePosBeforeFont == 0) {
												_this.addProgram(program,null,true);
											} else {
												_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
											}
											_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
											_this.stylePosBeforeFont++;
										} else {
											var c = js_Boot.getClass(this.cursorStyle);
											throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
										}
									} else {
										this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
										if(this.cursorProgram == null) {
											var _this = this.uiDisplay;
											var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
											var stylePos1 = stylePos;
											_this.usedStyleProgram[stylePos1] = program;
											var afterProgram = null;
											while(stylePos1-- > 0) {
												afterProgram = _this.usedStyleProgram[stylePos1];
												if(afterProgram != null) {
													break;
												}
											}
											_this.addProgram(program,afterProgram,afterProgram == null);
										}
									}
									this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
									if(addUpdate) {
										this.cursorProgram.addElement(this.cursorElement);
									}
								} else {
									this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
									if(addUpdate) {
										this.cursorProgram.update(this.cursorElement);
									}
								}
							}
						}
					}
					if(this.cursorStyle != null) {
						var addUpdate = this.isVisible && this.cursorIsVisible;
						var create = this.cursorElement == null;
						var _x = this.x + this.leftSpace;
						var _y = this.y + this.topSpace;
						var _width = this.width - this.leftSpace - this.rightSpace;
						var _height = this.height - this.topSpace - this.bottomSpace;
						if(this.masked) {
							if(this.maskX > this.leftSpace) {
								_x = this.x + this.maskX;
							}
							if(this.maskY > this.topSpace) {
								_y = this.y + this.maskY;
							}
							if(this.x + this.maskX + this.maskWidth < _x + _width) {
								_width = this.maskX + this.maskWidth + this.x - _x;
							}
							if(this.y + this.maskY + this.maskHeight < _y + _height) {
								_height = this.maskY + this.maskHeight + this.y - _y;
							}
						}
						var _width1 = _width;
						var _yOffset = this.yOffset;
						var y_offset;
						if((this.autoSize & 1) > 0) {
							y_offset = _yOffset;
						} else {
							switch(this.vAlign) {
							case 4:
								y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
								break;
							case 8:
								y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
								break;
							default:
								y_offset = _yOffset;
							}
						}
						var y_offset1 = y_offset + this.topSpace;
						_width1 += 3;
						var page = this.page;
						var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
						var cw = 2;
						var cy = Math.round(this.pageLine.y);
						var ch = Math.round(this.pageLine.height);
						var mx = 0;
						var my = 0;
						var mw = cw;
						var mh = ch;
						if(cx < _x) {
							mw -= _x - cx;
							mx = _x - cx;
							if(mw > _width1) {
								mw = _width1;
							}
						} else if(cx + cw > _x + _width1) {
							mw = _x + _width1 - cx;
						}
						if(mw < 0) {
							mw = 0;
						}
						if(cy < _y) {
							mh -= _y - cy;
							my = _y - cy;
							if(mh > _height) {
								mh = _height;
							}
						} else if(cy + ch > _y + _height) {
							mh = _y + _height - cy;
						}
						if(mh < 0) {
							mh = 0;
						}
						if(create) {
							var z = this.z;
							var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
							if(stylePos < 0) {
								if(this.uiDisplay.autoAddStyles) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var styleId = this.cursorStyle.getUUID();
									_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
									if(_this.stylePosBeforeFont == 0) {
										_this.addProgram(program,null,true);
									} else {
										_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
									}
									_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
									_this.stylePosBeforeFont++;
								} else {
									var c = js_Boot.getClass(this.cursorStyle);
									throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
								}
							} else {
								this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
								if(this.cursorProgram == null) {
									var _this = this.uiDisplay;
									var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
									var stylePos1 = stylePos;
									_this.usedStyleProgram[stylePos1] = program;
									var afterProgram = null;
									while(stylePos1-- > 0) {
										afterProgram = _this.usedStyleProgram[stylePos1];
										if(afterProgram != null) {
											break;
										}
									}
									_this.addProgram(program,afterProgram,afterProgram == null);
								}
							}
							this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
							if(addUpdate) {
								this.cursorProgram.addElement(this.cursorElement);
							}
						} else {
							this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
							if(addUpdate) {
								this.cursorProgram.update(this.cursorElement);
							}
						}
					}
				}
			}
		}
		if(newCursor != null) {
			if(newCursor != this.cursor) {
				if(newCursor < 0) {
					this.cursor = 0;
				} else if(this.page != null && newCursor > this.pageLine.glyphes.length) {
					this.cursor = this.pageLine.glyphes.length;
				} else {
					this.cursor = newCursor;
				}
				if(this.page != null && this.cursorStyle != null) {
					var addUpdate = this.isVisible && this.cursorIsVisible;
					var create = this.cursorElement == null;
					var _x = this.x + this.leftSpace;
					var _y = this.y + this.topSpace;
					var _width = this.width - this.leftSpace - this.rightSpace;
					var _height = this.height - this.topSpace - this.bottomSpace;
					if(this.masked) {
						if(this.maskX > this.leftSpace) {
							_x = this.x + this.maskX;
						}
						if(this.maskY > this.topSpace) {
							_y = this.y + this.maskY;
						}
						if(this.x + this.maskX + this.maskWidth < _x + _width) {
							_width = this.maskX + this.maskWidth + this.x - _x;
						}
						if(this.y + this.maskY + this.maskHeight < _y + _height) {
							_height = this.maskY + this.maskHeight + this.y - _y;
						}
					}
					var _width1 = _width;
					var _yOffset = this.yOffset;
					var y_offset;
					if((this.autoSize & 1) > 0) {
						y_offset = _yOffset;
					} else {
						switch(this.vAlign) {
						case 4:
							y_offset = (this.height - this.topSpace - this.bottomSpace - this.page.textHeight) / 2 + _yOffset;
							break;
						case 8:
							y_offset = this.height - this.topSpace - this.bottomSpace - this.page.textHeight + _yOffset;
							break;
						default:
							y_offset = _yOffset;
						}
					}
					var y_offset1 = y_offset + this.topSpace;
					_width1 += 3;
					var page = this.page;
					var cx = Math.round(this.fontProgram.pageLineGetPositionAtChar(this.pageLine,page.x,page.xOffset,this.cursor));
					var cw = 2;
					var cy = Math.round(this.pageLine.y);
					var ch = Math.round(this.pageLine.height);
					var mx = 0;
					var my = 0;
					var mw = cw;
					var mh = ch;
					if(cx < _x) {
						mw -= _x - cx;
						mx = _x - cx;
						if(mw > _width1) {
							mw = _width1;
						}
					} else if(cx + cw > _x + _width1) {
						mw = _x + _width1 - cx;
					}
					if(mw < 0) {
						mw = 0;
					}
					if(cy < _y) {
						mh -= _y - cy;
						my = _y - cy;
						if(mh > _height) {
							mh = _height;
						}
					} else if(cy + ch > _y + _height) {
						mh = _y + _height - cy;
					}
					if(mh < 0) {
						mh = 0;
					}
					if(create) {
						var z = this.z;
						var stylePos = this.uiDisplay.usedStyleID.indexOf(this.cursorStyle.getUUID());
						if(stylePos < 0) {
							if(this.uiDisplay.autoAddStyles) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var styleId = this.cursorStyle.getUUID();
								_this.usedStyleID.splice(_this.stylePosBeforeFont,0,styleId);
								if(_this.stylePosBeforeFont == 0) {
									_this.addProgram(program,null,true);
								} else {
									_this.addProgram(program,_this.usedStyleProgram[_this.stylePosBeforeFont - 1]);
								}
								_this.usedStyleProgram.splice(_this.stylePosBeforeFont,0,program);
								_this.stylePosBeforeFont++;
							} else {
								var c = js_Boot.getClass(this.cursorStyle);
								throw haxe_Exception.thrown("Error by creating cursor for new UITextPage. The style \"" + c.__name__ + "\" id=" + Std.string(this.cursorStyle.id) + " is not inside the availableStyle list of UIDisplay.");
							}
						} else {
							this.cursorProgram = this.uiDisplay.usedStyleProgram[stylePos];
							if(this.cursorProgram == null) {
								var _this = this.uiDisplay;
								var program = this.cursorProgram = this.cursorStyle.createStyleProgram();
								var stylePos1 = stylePos;
								_this.usedStyleProgram[stylePos1] = program;
								var afterProgram = null;
								while(stylePos1-- > 0) {
									afterProgram = _this.usedStyleProgram[stylePos1];
									if(afterProgram != null) {
										break;
									}
								}
								_this.addProgram(program,afterProgram,afterProgram == null);
							}
						}
						this.cursorElement = this.cursorProgram.createElementAt(this,cx,cy,cw,ch,mx,my,mw,mh,z,this.cursorStyle);
						if(addUpdate) {
							this.cursorProgram.addElement(this.cursorElement);
						}
					} else {
						this.cursorElement.setMasked(this,cx,cy,cw,ch,mx,my,mw,mh,this.z);
						if(addUpdate) {
							this.cursorProgram.update(this.cursorElement);
						}
					}
				}
			}
		}
		if(addSelection) {
			if(this.selectLineFrom < this.selectLineTo - 1 || this.selectFrom != this.selectTo) {
				if(oldCursorLine == this.selectLineFrom && oldCursor == this.selectFrom) {
					this.select(this.cursor,this.selectTo,this.cursorLine,this.selectLineTo - 1);
				} else {
					this.select(this.selectFrom,this.cursor,this.selectLineFrom,this.cursorLine);
				}
			} else if(this.cursorLine < oldCursorLine) {
				this.select(this.cursor,oldCursor,this.cursorLine,oldCursorLine);
			} else {
				this.select(oldCursor,this.cursor,oldCursorLine,this.cursorLine);
			}
		}
	}
	,__class__: peote_ui_interactive_UITextPage_$_$Main_$MyFontStyle
});
var peote_ui_interactive_input2action_InputTextLine = function() { };
$hxClasses["peote.ui.interactive.input2action.InputTextLine"] = peote_ui_interactive_input2action_InputTextLine;
peote_ui_interactive_input2action_InputTextLine.__name__ = "peote.ui.interactive.input2action.InputTextLine";
peote_ui_interactive_input2action_InputTextLine.deleteChar = function(_,_1) {
	peote_ui_interactive_input2action_InputTextLine.focusElement.deleteChar();
};
peote_ui_interactive_input2action_InputTextLine.backspace = function(_,_1) {
	peote_ui_interactive_input2action_InputTextLine.focusElement.backspace();
};
peote_ui_interactive_input2action_InputTextLine.tabulator = function(_,_1) {
	peote_ui_interactive_input2action_InputTextLine.focusElement.tabulator();
};
peote_ui_interactive_input2action_InputTextLine.copyToClipboard = function(_,_1) {
	peote_ui_interactive_input2action_InputTextLine.focusElement.copyToClipboard();
};
peote_ui_interactive_input2action_InputTextLine.cutToClipboard = function(_,_1) {
	peote_ui_interactive_input2action_InputTextLine.focusElement.cutToClipboard();
};
peote_ui_interactive_input2action_InputTextLine.pasteFromClipboard = function(_,_1) {
	peote_ui_interactive_input2action_InputTextLine.focusElement.pasteFromClipboard();
};
peote_ui_interactive_input2action_InputTextLine.cursorLeft = function(_,_1) {
	peote_ui_interactive_input2action_InputTextLine.focusElement.cursorLeft();
};
peote_ui_interactive_input2action_InputTextLine.cursorRight = function(_,_1) {
	peote_ui_interactive_input2action_InputTextLine.focusElement.cursorRight();
};
peote_ui_interactive_input2action_InputTextLine.cursorLeftWord = function(_,_1) {
	peote_ui_interactive_input2action_InputTextLine.focusElement.cursorLeftWord();
};
peote_ui_interactive_input2action_InputTextLine.cursorRightWord = function(_,_1) {
	peote_ui_interactive_input2action_InputTextLine.focusElement.cursorRightWord();
};
var peote_ui_interactive_input2action_InputTextPage = function() { };
$hxClasses["peote.ui.interactive.input2action.InputTextPage"] = peote_ui_interactive_input2action_InputTextPage;
peote_ui_interactive_input2action_InputTextPage.__name__ = "peote.ui.interactive.input2action.InputTextPage";
peote_ui_interactive_input2action_InputTextPage.deleteChar = function(_,_1) {
	peote_ui_interactive_input2action_InputTextPage.focusElement.deleteChar();
};
peote_ui_interactive_input2action_InputTextPage.backspace = function(_,_1) {
	peote_ui_interactive_input2action_InputTextPage.focusElement.backspace();
};
peote_ui_interactive_input2action_InputTextPage.tabulator = function(_,_1) {
	peote_ui_interactive_input2action_InputTextPage.focusElement.tabulator();
};
peote_ui_interactive_input2action_InputTextPage.copyToClipboard = function(_,_1) {
	peote_ui_interactive_input2action_InputTextPage.focusElement.copyToClipboard();
};
peote_ui_interactive_input2action_InputTextPage.cutToClipboard = function(_,_1) {
	peote_ui_interactive_input2action_InputTextPage.focusElement.cutToClipboard();
};
peote_ui_interactive_input2action_InputTextPage.pasteFromClipboard = function(_,_1) {
	peote_ui_interactive_input2action_InputTextPage.focusElement.pasteFromClipboard();
};
peote_ui_interactive_input2action_InputTextPage.selectModifier = function(isDown,_) {
	peote_ui_interactive_input2action_InputTextPage.addSelection = isDown;
};
peote_ui_interactive_input2action_InputTextPage.selectAll = function(_,_1) {
	peote_ui_interactive_input2action_InputTextPage.focusElement.selectAll();
};
peote_ui_interactive_input2action_InputTextPage.cursorStart = function(_,_1) {
	peote_ui_interactive_input2action_InputTextPage.focusElement.cursorStart(peote_ui_interactive_input2action_InputTextPage.addSelection);
};
peote_ui_interactive_input2action_InputTextPage.cursorEnd = function(_,_1) {
	peote_ui_interactive_input2action_InputTextPage.focusElement.cursorEnd(peote_ui_interactive_input2action_InputTextPage.addSelection);
};
peote_ui_interactive_input2action_InputTextPage.cursorLeft = function(_,_1) {
	peote_ui_interactive_input2action_InputTextPage.focusElement.cursorLeft(peote_ui_interactive_input2action_InputTextPage.addSelection);
};
peote_ui_interactive_input2action_InputTextPage.cursorRight = function(_,_1) {
	peote_ui_interactive_input2action_InputTextPage.focusElement.cursorRight(peote_ui_interactive_input2action_InputTextPage.addSelection);
};
peote_ui_interactive_input2action_InputTextPage.cursorLeftWord = function(_,_1) {
	peote_ui_interactive_input2action_InputTextPage.focusElement.cursorLeftWord(peote_ui_interactive_input2action_InputTextPage.addSelection);
};
peote_ui_interactive_input2action_InputTextPage.cursorRightWord = function(_,_1) {
	peote_ui_interactive_input2action_InputTextPage.focusElement.cursorRightWord(peote_ui_interactive_input2action_InputTextPage.addSelection);
};
peote_ui_interactive_input2action_InputTextPage.cursorUp = function(_,_1) {
	peote_ui_interactive_input2action_InputTextPage.focusElement.cursorUp(peote_ui_interactive_input2action_InputTextPage.addSelection);
};
peote_ui_interactive_input2action_InputTextPage.cursorDown = function(_,_1) {
	peote_ui_interactive_input2action_InputTextPage.focusElement.cursorDown(peote_ui_interactive_input2action_InputTextPage.addSelection);
};
peote_ui_interactive_input2action_InputTextPage.cursorPageStart = function(_,_1) {
	peote_ui_interactive_input2action_InputTextPage.focusElement.cursorPageStart(peote_ui_interactive_input2action_InputTextPage.addSelection);
};
peote_ui_interactive_input2action_InputTextPage.cursorPageEnd = function(_,_1) {
	peote_ui_interactive_input2action_InputTextPage.focusElement.cursorPageEnd(peote_ui_interactive_input2action_InputTextPage.addSelection);
};
peote_ui_interactive_input2action_InputTextPage.enter = function(_,_1) {
	peote_ui_interactive_input2action_InputTextPage.focusElement.enter();
};
var peote_ui_style_interfaces_Style = function() { };
$hxClasses["peote.ui.style.interfaces.Style"] = peote_ui_style_interfaces_Style;
peote_ui_style_interfaces_Style.__name__ = "peote.ui.style.interfaces.Style";
peote_ui_style_interfaces_Style.__isInterface__ = true;
peote_ui_style_interfaces_Style.__interfaces__ = [peote_ui_style_interfaces_StyleID];
var peote_ui_style_BoxStyle = function(color) {
	this.id = 0;
	this.color = 1145324799;
	if(color != null) {
		this.color = color;
	}
};
$hxClasses["peote.ui.style.BoxStyle"] = peote_ui_style_BoxStyle;
peote_ui_style_BoxStyle.__name__ = "peote.ui.style.BoxStyle";
peote_ui_style_BoxStyle.__interfaces__ = [peote_ui_style_interfaces_Style];
peote_ui_style_BoxStyle.createById = function(id,style,color) {
	var newStyle = style != null ? style.copy(color) : new peote_ui_style_BoxStyle(color);
	newStyle.id = id;
	return newStyle;
};
peote_ui_style_BoxStyle.prototype = {
	createStyleProgram: function() {
		return new peote_ui_style_BoxStyleProgram();
	}
	,copy: function(color) {
		var newStyle = new peote_ui_style_BoxStyle(color != null ? color : this.color);
		newStyle.id = this.id;
		return newStyle;
	}
	,getUUID: function() {
		return peote_ui_style_BoxStyle.ID | this.id;
	}
	,isFontStyle: function() {
		return peote_ui_style_BoxStyle.ID >= 2097152;
	}
	,__class__: peote_ui_style_BoxStyle
};
var peote_ui_style_interfaces_StyleElement = function() { };
$hxClasses["peote.ui.style.interfaces.StyleElement"] = peote_ui_style_interfaces_StyleElement;
peote_ui_style_interfaces_StyleElement.__name__ = "peote.ui.style.interfaces.StyleElement";
peote_ui_style_interfaces_StyleElement.__isInterface__ = true;
peote_ui_style_interfaces_StyleElement.prototype = {
	__class__: peote_ui_style_interfaces_StyleElement
};
var peote_ui_style_BoxStyleElement = function(style,uiElement) {
	this.bytePos = -1;
	this.z = 0;
	this.h = 100;
	this.w = 100;
	this.y = 0;
	this.x = 0;
	this.color = -16776961;
	this.color = style.color;
	if(uiElement != null) {
		this.z = uiElement.z;
		if(uiElement.masked) {
			this.x = uiElement.x + uiElement.maskX;
			this.y = uiElement.y + uiElement.maskY;
			this.w = uiElement.maskWidth;
			this.h = uiElement.maskHeight;
		} else {
			this.x = uiElement.x;
			this.y = uiElement.y;
			this.w = uiElement.width;
			this.h = uiElement.height;
		}
	}
};
$hxClasses["peote.ui.style.BoxStyleElement"] = peote_ui_style_BoxStyleElement;
peote_ui_style_BoxStyleElement.__name__ = "peote.ui.style.BoxStyleElement";
peote_ui_style_BoxStyleElement.__interfaces__ = [peote_ui_style_interfaces_StyleElement];
peote_ui_style_BoxStyleElement.prototype = {
	setStyle: function(style) {
		this.color = style.color;
	}
	,setLayout: function(uiElement) {
		this.z = uiElement.z;
		if(uiElement.masked) {
			this.x = uiElement.x + uiElement.maskX;
			this.y = uiElement.y + uiElement.maskY;
			this.w = uiElement.maskWidth;
			this.h = uiElement.maskHeight;
		} else {
			this.x = uiElement.x;
			this.y = uiElement.y;
			this.w = uiElement.width;
			this.h = uiElement.height;
		}
	}
	,setMasked: function(uiElement,_x,_y,_w,_h,_mx,_my,_mw,_mh,_z) {
		this.z = _z;
		this.x = _x + _mx;
		this.y = _y + _my;
		this.w = _mw;
		this.h = _mh;
	}
	,__class__: peote_ui_style_BoxStyleElement
};
var peote_ui_style_interfaces_StyleProgram = function() { };
$hxClasses["peote.ui.style.interfaces.StyleProgram"] = peote_ui_style_interfaces_StyleProgram;
peote_ui_style_interfaces_StyleProgram.__name__ = "peote.ui.style.interfaces.StyleProgram";
peote_ui_style_interfaces_StyleProgram.__isInterface__ = true;
peote_ui_style_interfaces_StyleProgram.prototype = {
	__class__: peote_ui_style_interfaces_StyleProgram
};
var peote_ui_style_BoxStyleProgram = function() {
	peote_view_Program.call(this,new peote_view_Buffer_$BoxStyleElement(1024,1024));
};
$hxClasses["peote.ui.style.BoxStyleProgram"] = peote_ui_style_BoxStyleProgram;
peote_ui_style_BoxStyleProgram.__name__ = "peote.ui.style.BoxStyleProgram";
peote_ui_style_BoxStyleProgram.__interfaces__ = [peote_ui_style_interfaces_StyleProgram];
peote_ui_style_BoxStyleProgram.__super__ = peote_view_Program;
peote_ui_style_BoxStyleProgram.prototype = $extend(peote_view_Program.prototype,{
	createElement: function(uiElement,style) {
		return new peote_ui_style_BoxStyleElement(style,uiElement);
	}
	,createElementAt: function(uiElement,x,y,w,h,mx,my,mw,mh,z,style) {
		var e = new peote_ui_style_BoxStyleElement(style);
		e.z = z;
		e.x = x + mx;
		e.y = y + my;
		e.w = mw;
		e.h = mh;
		return e;
	}
	,addElement: function(styleElement) {
		this.buffer.addElement(styleElement);
	}
	,update: function(styleElement) {
		this.buffer.updateElement(styleElement);
	}
	,removeElement: function(styleElement) {
		this.buffer.removeElement(styleElement);
	}
	,__class__: peote_ui_style_BoxStyleProgram
});
var peote_ui_style_RoundBorderStyle = function(color,borderColor,borderSize,borderRadius) {
	this.id = 0;
	this.borderRadius = 6.0;
	this.borderSize = 1.0;
	this.borderColor = -2004317953;
	this.color = 1717987071;
	if(color != null) {
		this.color = color;
	}
	if(borderColor != null) {
		this.borderColor = borderColor;
	}
	if(borderSize != null) {
		this.borderSize = borderSize;
	}
	if(borderRadius != null) {
		this.borderRadius = borderRadius;
	}
};
$hxClasses["peote.ui.style.RoundBorderStyle"] = peote_ui_style_RoundBorderStyle;
peote_ui_style_RoundBorderStyle.__name__ = "peote.ui.style.RoundBorderStyle";
peote_ui_style_RoundBorderStyle.__interfaces__ = [peote_ui_style_interfaces_Style];
peote_ui_style_RoundBorderStyle.prototype = {
	createStyleProgram: function() {
		return new peote_ui_style_RoundBorderStyleProgram();
	}
	,getUUID: function() {
		return peote_ui_style_RoundBorderStyle.ID | this.id;
	}
	,isFontStyle: function() {
		return peote_ui_style_RoundBorderStyle.ID >= 2097152;
	}
	,__class__: peote_ui_style_RoundBorderStyle
};
var peote_ui_style_RoundBorderStyleElement = function(style,uiElement) {
	this.bytePos = -1;
	this.mh = 0;
	this.mw = 0;
	this.my = 0;
	this.mx = 0;
	this.z = 0;
	this.h = 100;
	this.w = 100;
	this.y = 0;
	this.x = 0;
	this.borderRadius = 0;
	this.borderSize = 0;
	this.borderColor = -16776961;
	this.color = -16776961;
	this.color = style.color;
	this.borderColor = style.borderColor;
	this.borderSize = style.borderSize;
	this.borderRadius = style.borderRadius;
	if(uiElement != null) {
		this.x = uiElement.x;
		this.y = uiElement.y;
		this.w = uiElement.width;
		this.h = uiElement.height;
		this.z = uiElement.z;
		if(uiElement.masked) {
			this.mx = uiElement.maskX;
			this.my = uiElement.maskY;
			this.mw = this.mx + uiElement.maskWidth;
			this.mh = this.my + uiElement.maskHeight;
		} else {
			this.mx = 0;
			this.my = 0;
			this.mw = this.w;
			this.mh = this.h;
		}
	}
};
$hxClasses["peote.ui.style.RoundBorderStyleElement"] = peote_ui_style_RoundBorderStyleElement;
peote_ui_style_RoundBorderStyleElement.__name__ = "peote.ui.style.RoundBorderStyleElement";
peote_ui_style_RoundBorderStyleElement.__interfaces__ = [peote_ui_style_interfaces_StyleElement];
peote_ui_style_RoundBorderStyleElement.prototype = {
	setStyle: function(style) {
		this.color = style.color;
		this.borderColor = style.borderColor;
		this.borderSize = style.borderSize;
		this.borderRadius = style.borderRadius;
	}
	,setLayout: function(uiElement) {
		this.x = uiElement.x;
		this.y = uiElement.y;
		this.w = uiElement.width;
		this.h = uiElement.height;
		this.z = uiElement.z;
		if(uiElement.masked) {
			this.mx = uiElement.maskX;
			this.my = uiElement.maskY;
			this.mw = this.mx + uiElement.maskWidth;
			this.mh = this.my + uiElement.maskHeight;
		} else {
			this.mx = 0;
			this.my = 0;
			this.mw = this.w;
			this.mh = this.h;
		}
	}
	,setMasked: function(uiElement,_x,_y,_w,_h,_mx,_my,_mw,_mh,_z) {
		this.z = _z;
		this.x = _x;
		this.y = _y;
		this.w = _w;
		this.h = _h;
		this.mx = _mx;
		this.my = _my;
		this.mw = this.mx + _mw;
		this.mh = this.my + _mh;
	}
	,__class__: peote_ui_style_RoundBorderStyleElement
};
var peote_ui_style_RoundBorderStyleProgram = function() {
	peote_view_Program.call(this,new peote_view_Buffer_$RoundBorderStyleElement(1024,1024));
	this.injectIntoFragmentShader("\n\t\t\tfloat roundedBox (vec2 pos, vec2 size, float padding, float radius)\n\t\t\t{\n\t\t\t\tradius -= padding;\n\t\t\t\tpos = (pos - 0.5) * size;\n\t\t\t\tsize = 0.5 * size - vec2(radius, radius) - vec2(padding, padding);\n\t\t\t\t\n\t\t\t\tfloat d = length(max(abs(pos), size) - size) - radius;\n\t\t\t\t//return d;\n\t\t\t\t//return step(0.5, d );\n\t\t\t\treturn smoothstep( 0.0, 1.0,  d );\n\t\t\t}\n\t\t\t\n\t\t\tfloat roundedBorder (vec2 pos, vec2 size, float thickness, float radius)\n\t\t\t{\n\t\t\t\t\n\t\t\t\tradius -= thickness / 2.0;\n\t\t\t\tpos = (pos - 0.5) * size;\n\t\t\t\tsize = 0.5 * (size - vec2(thickness, thickness)) - vec2(radius, radius);\n\t\t\t\t\n\t\t\t\tfloat s = 0.5 / thickness * 2.0;\n\t\t\t\t\n\t\t\t\tfloat d = length(max(abs(pos), size) - size) - radius;\t\t\t\t\n\t\t\t\t//return 1.0 - abs( d / thickness );\n\t\t\t\t//return 1.0 - step(0.5, abs( d / thickness ));\n\t\t\t\treturn smoothstep( 0.5+s, 0.5-s, abs(d / thickness)  );\n\t\t\t\t//return smoothstep( 0.5+s, 0.5-s, abs( d / thickness ) * (1.0 + s) );\n\t\t\t}\n\t\t\t" + "\n\t\t\tfloat rectMask (vec2 pos, vec2 size, vec4 mask)\n\t\t\t{\n\t\t\t\tpos = pos * size;\n\t\t\t\tif (pos.x < mask.x || pos.x > mask.z || pos.y < mask.y || pos.y > mask.w) return 0.0;\n\t\t\t\telse return 1.0;\n\t\t\t}\n\t\t\t" + "vec4 compose (vec4 c, vec4 borderColor, float borderSize, float borderRadius, vec4 mask)" + "\n\t\t\t{\n\t\t\t\tfloat radius =  max(borderSize+1.0, min(borderRadius, min(vSize.x, vSize.y) / 2.0));\n\t\t\t\t\n\t\t\t\t// rounded rectangle\n\t\t\t\t//c = mix(c, vec4(0.0, 0.0, 0.0, 0.0), roundedBox(vTexCoord, vSize, borderSize, radius));\t\t\t\t\n\t\t\t\tc = mix(c, vec4(borderColor.rgb, 0.0), roundedBox(vTexCoord, vSize, borderSize, radius));\t\t\t\t\n\t\t\t\t// border\n\t\t\t\tc = mix(c, borderColor, roundedBorder(vTexCoord, vSize, borderSize, radius));\n\t\t\t" + "c = c * rectMask(vTexCoord, vSize, mask);" + "\n\t\t\t\treturn c;\n\t\t\t}\n\t\t\t");
	this.setColorFormula("compose(color, borderColor, borderSize, borderRadius, vec4(mx, my, mw, mh))");
	this.alphaEnabled = true;
};
$hxClasses["peote.ui.style.RoundBorderStyleProgram"] = peote_ui_style_RoundBorderStyleProgram;
peote_ui_style_RoundBorderStyleProgram.__name__ = "peote.ui.style.RoundBorderStyleProgram";
peote_ui_style_RoundBorderStyleProgram.__interfaces__ = [peote_ui_style_interfaces_StyleProgram];
peote_ui_style_RoundBorderStyleProgram.__super__ = peote_view_Program;
peote_ui_style_RoundBorderStyleProgram.prototype = $extend(peote_view_Program.prototype,{
	createElement: function(uiElement,style) {
		return new peote_ui_style_RoundBorderStyleElement(style,uiElement);
	}
	,createElementAt: function(uiElement,x,y,w,h,mx,my,mw,mh,z,style) {
		var e = new peote_ui_style_RoundBorderStyleElement(style);
		e.z = z;
		e.x = x;
		e.y = y;
		e.w = w;
		e.h = h;
		e.mx = mx;
		e.my = my;
		e.mw = e.mx + mw;
		e.mh = e.my + mh;
		return e;
	}
	,addElement: function(styleElement) {
		this.buffer.addElement(styleElement);
	}
	,update: function(styleElement) {
		this.buffer.updateElement(styleElement);
	}
	,removeElement: function(styleElement) {
		this.buffer.removeElement(styleElement);
	}
	,__class__: peote_ui_style_RoundBorderStyleProgram
});
var peote_ui_style_TextStyleImpl = function(backgroundStyle,selectionStyle,cursorStyle) {
	this.cursorStyle = null;
	this.selectionStyle = null;
	this.backgroundStyle = null;
	if(backgroundStyle != null) {
		this.backgroundStyle = backgroundStyle;
	}
	if(selectionStyle != null) {
		this.selectionStyle = selectionStyle;
	}
	if(cursorStyle != null) {
		this.cursorStyle = cursorStyle;
	}
};
$hxClasses["peote.ui.style.TextStyleImpl"] = peote_ui_style_TextStyleImpl;
peote_ui_style_TextStyleImpl.__name__ = "peote.ui.style.TextStyleImpl";
peote_ui_style_TextStyleImpl.prototype = {
	__class__: peote_ui_style_TextStyleImpl
};
var peote_view_BufferInterface = function() { };
$hxClasses["peote.view.BufferInterface"] = peote_view_BufferInterface;
peote_view_BufferInterface.__name__ = "peote.view.BufferInterface";
peote_view_BufferInterface.__isInterface__ = true;
peote_view_BufferInterface.prototype = {
	__class__: peote_view_BufferInterface
};
var peote_view_Buffer_$BoxStyleElement = function(minSize,growSize,autoShrink) {
	if(autoShrink == null) {
		autoShrink = false;
	}
	if(growSize == null) {
		growSize = 0;
	}
	this._shrinkAtSize = 0;
	this._growSize = 0;
	this._maxElements = 0;
	this._glVAO = null;
	this._glInstanceBuffer = null;
	this._gl = null;
	if(minSize <= 0) {
		throw haxe_Exception.thrown("Error: Buffer need a minimum size of 1 to store an Element.");
	}
	this._minSize = minSize;
	this._growSize = growSize < 0 ? 0 : growSize;
	if(autoShrink) {
		this._shrinkAtSize = growSize + (growSize / 2 | 0);
	}
	var this1 = new Array(this._minSize);
	this._elements = this1;
	if(peote_view_Version.isINSTANCED) {
		if(peote_ui_style_BoxStyleElement.instanceBytes == null) {
			peote_ui_style_BoxStyleElement.instanceBytes = new peote_view_utils_BufferBytes(new ArrayBuffer(12));
			peote_ui_style_BoxStyleElement.instanceBytes.b[0] = 1;
			peote_ui_style_BoxStyleElement.instanceBytes.b[1] = 1;
			peote_ui_style_BoxStyleElement.instanceBytes.b[2] = 1;
			peote_ui_style_BoxStyleElement.instanceBytes.b[3] = 1;
			peote_ui_style_BoxStyleElement.instanceBytes.b[4] = 0;
			peote_ui_style_BoxStyleElement.instanceBytes.b[5] = 1;
			peote_ui_style_BoxStyleElement.instanceBytes.b[6] = 1;
			peote_ui_style_BoxStyleElement.instanceBytes.b[7] = 0;
			peote_ui_style_BoxStyleElement.instanceBytes.b[8] = 0;
			peote_ui_style_BoxStyleElement.instanceBytes.b[9] = 0;
			peote_ui_style_BoxStyleElement.instanceBytes.b[10] = 0;
			peote_ui_style_BoxStyleElement.instanceBytes.b[11] = 0;
		}
		this._elemBuffSize = 16;
	} else {
		this._elemBuffSize = 120;
	}
	this._bytes = new peote_view_utils_BufferBytes(new ArrayBuffer(this._elemBuffSize * this._minSize));
	this._bytes.fill(0,this._elemBuffSize * this._minSize,0);
};
$hxClasses["peote.view.Buffer_BoxStyleElement"] = peote_view_Buffer_$BoxStyleElement;
peote_view_Buffer_$BoxStyleElement.__name__ = "peote.view.Buffer_BoxStyleElement";
peote_view_Buffer_$BoxStyleElement.__interfaces__ = [peote_view_BufferInterface];
peote_view_Buffer_$BoxStyleElement.prototype = {
	setNewGLContext: function(newGl) {
		if(newGl != null && newGl != this._gl) {
			if(this._gl != null) {
				this._gl.deleteBuffer(this._glBuffer);
				if(peote_view_Version.isINSTANCED) {
					this._gl.deleteBuffer(this._glInstanceBuffer);
				}
				if(peote_view_Version.isVAO) {
					this._gl.deleteVertexArray(this._glVAO);
				}
			}
			this._gl = newGl;
			this._glBuffer = this._gl.createBuffer();
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,this._glBuffer);
			var size = this._bytes.length;
			var bytes = this._bytes;
			var this1 = new Uint8Array(bytes.b.bufferValue,0);
			this._gl.bufferData(this._gl.ARRAY_BUFFER,this1,this._gl.STREAM_DRAW);
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
			if(peote_view_Version.isINSTANCED) {
				this._glInstanceBuffer = this._gl.createBuffer();
				var gl = this._gl;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
				var size = peote_ui_style_BoxStyleElement.instanceBytes.length;
				var bytes = peote_ui_style_BoxStyleElement.instanceBytes;
				var this1 = new Uint8Array(bytes.b.bufferValue,0);
				gl.bufferData(gl.ARRAY_BUFFER,this1,gl.STATIC_DRAW);
				gl.bindBuffer(gl.ARRAY_BUFFER,null);
			}
			if(peote_view_Version.isVAO) {
				this._glVAO = this._gl.createVertexArray();
				this._gl.bindVertexArray(this._glVAO);
				if(peote_view_Version.isINSTANCED) {
					var gl = this._gl;
					var glBuffer = this._glBuffer;
					gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
					gl.enableVertexAttribArray(0);
					gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,2,0);
					gl.bindBuffer(gl.ARRAY_BUFFER,glBuffer);
					gl.enableVertexAttribArray(4);
					gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,16,0);
					gl.vertexAttribDivisor(4,1);
					gl.enableVertexAttribArray(3);
					gl.vertexAttribPointer(3,1,gl.FLOAT,false,16,4);
					gl.vertexAttribDivisor(3,1);
					gl.enableVertexAttribArray(1);
					gl.vertexAttribPointer(1,2,gl.SHORT,false,16,8);
					gl.vertexAttribDivisor(1,1);
					gl.enableVertexAttribArray(2);
					gl.vertexAttribPointer(2,2,gl.SHORT,false,16,12);
					gl.vertexAttribDivisor(2,1);
				} else {
					var gl = this._gl;
					gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
					gl.enableVertexAttribArray(4);
					gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,20,0);
					gl.enableVertexAttribArray(3);
					gl.vertexAttribPointer(3,1,gl.FLOAT,false,20,4);
					gl.enableVertexAttribArray(1);
					gl.vertexAttribPointer(1,2,gl.SHORT,false,20,8);
					gl.enableVertexAttribArray(2);
					gl.vertexAttribPointer(2,2,gl.SHORT,false,20,12);
					gl.enableVertexAttribArray(0);
					gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,20,16);
				}
				this._gl.bindVertexArray(null);
			}
		}
	}
	,updateElement: function(element) {
		if(peote_view_Version.isINSTANCED) {
			var bytes = this._bytes;
			bytes.b_Int32[element.bytePos >> 2] = element.color;
			bytes.b_UFloat32[element.bytePos + 4 >> 2] = Math.min(1.0,Math.max(-1.0,element.z / 2097151));
			bytes.b_Uint16[element.bytePos + 8 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 10 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 12 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 14 >> 1] = element.h & 65535;
		} else {
			var bytes = this._bytes;
			bytes.b_Int32[element.bytePos >> 2] = element.color;
			bytes.b_UFloat32[element.bytePos + 4 >> 2] = Math.min(1.0,Math.max(-1.0,element.z / 2097151));
			bytes.b_Uint16[element.bytePos + 8 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 10 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 12 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 14 >> 1] = element.h & 65535;
			bytes.b[element.bytePos + 16] = 1;
			bytes.b[element.bytePos + 17] = 1;
			bytes.b_Int32[element.bytePos + 20 >> 2] = element.color;
			bytes.b_UFloat32[element.bytePos + 24 >> 2] = Math.min(1.0,Math.max(-1.0,element.z / 2097151));
			bytes.b_Uint16[element.bytePos + 28 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 30 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 32 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 34 >> 1] = element.h & 65535;
			bytes.b[element.bytePos + 36] = 1;
			bytes.b[element.bytePos + 37] = 1;
			bytes.b_Int32[element.bytePos + 40 >> 2] = element.color;
			bytes.b_UFloat32[element.bytePos + 44 >> 2] = Math.min(1.0,Math.max(-1.0,element.z / 2097151));
			bytes.b_Uint16[element.bytePos + 48 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 50 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 52 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 54 >> 1] = element.h & 65535;
			bytes.b[element.bytePos + 56] = 0;
			bytes.b[element.bytePos + 57] = 1;
			bytes.b_Int32[element.bytePos + 60 >> 2] = element.color;
			bytes.b_UFloat32[element.bytePos + 64 >> 2] = Math.min(1.0,Math.max(-1.0,element.z / 2097151));
			bytes.b_Uint16[element.bytePos + 68 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 70 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 72 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 74 >> 1] = element.h & 65535;
			bytes.b[element.bytePos + 76] = 1;
			bytes.b[element.bytePos + 77] = 0;
			bytes.b_Int32[element.bytePos + 80 >> 2] = element.color;
			bytes.b_UFloat32[element.bytePos + 84 >> 2] = Math.min(1.0,Math.max(-1.0,element.z / 2097151));
			bytes.b_Uint16[element.bytePos + 88 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 90 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 92 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 94 >> 1] = element.h & 65535;
			bytes.b[element.bytePos + 96] = 0;
			bytes.b[element.bytePos + 97] = 0;
			bytes.b_Int32[element.bytePos + 100 >> 2] = element.color;
			bytes.b_UFloat32[element.bytePos + 104 >> 2] = Math.min(1.0,Math.max(-1.0,element.z / 2097151));
			bytes.b_Uint16[element.bytePos + 108 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 110 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 112 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 114 >> 1] = element.h & 65535;
			bytes.b[element.bytePos + 116] = 0;
			bytes.b[element.bytePos + 117] = 0;
		}
		if(element.bytePos == -1) {
			throw haxe_Exception.thrown("Error, Element is not added to Buffer");
		}
		if(this._gl != null) {
			var gl = this._gl;
			var elemBuffSize = this._elemBuffSize;
			gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
			gl.bufferSubData(gl.ARRAY_BUFFER,element.bytePos,element.bufferPointer);
			gl.bindBuffer(gl.ARRAY_BUFFER,null);
		}
	}
	,addElement: function(element) {
		if(element.bytePos == -1) {
			if(this._maxElements == this._elements.length) {
				if(this._growSize == 0) {
					throw haxe_Exception.thrown("Error: Can't add new Element. Buffer is full and automatic growing Buffersize is disabled.");
				}
				var newSize = this._maxElements + this._growSize;
				var _newBytes = new peote_view_utils_BufferBytes(new ArrayBuffer(this._elemBuffSize * newSize));
				_newBytes.blit(0,this._bytes,0,this._elemBuffSize * this._maxElements);
				this._bytes = _newBytes;
				var this1 = new Array(newSize);
				var _newElements = this1;
				var _g = 0;
				var _g1 = this._maxElements;
				while(_g < _g1) {
					var i = _g++;
					var element1 = this._elements[i];
					var bytes = this._bytes;
					var offset = element1.bytePos;
					var size = this._elemBuffSize;
					if(size == null) {
						size = 0;
					}
					if(offset == null) {
						offset = 0;
					}
					var this1;
					if(size > 0) {
						this1 = new Uint8Array(bytes.b.bufferValue,offset,size);
					} else {
						this1 = new Uint8Array(bytes.b.bufferValue,offset);
					}
					element1.bufferPointer = this1;
					_newElements[i] = element1;
				}
				this._elements = _newElements;
				if(this._gl != null) {
					this._gl.deleteBuffer(this._glBuffer);
					this._glBuffer = this._gl.createBuffer();
					this._gl.bindBuffer(this._gl.ARRAY_BUFFER,this._glBuffer);
					var size = this._bytes.length;
					var bytes = this._bytes;
					var this1 = new Uint8Array(bytes.b.bufferValue,0);
					this._gl.bufferData(this._gl.ARRAY_BUFFER,this1,this._gl.STREAM_DRAW);
					this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
					if(peote_view_Version.isVAO) {
						this._gl.bindVertexArray(this._glVAO);
						if(peote_view_Version.isINSTANCED) {
							var gl = this._gl;
							var glBuffer = this._glBuffer;
							gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
							gl.enableVertexAttribArray(0);
							gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,2,0);
							gl.bindBuffer(gl.ARRAY_BUFFER,glBuffer);
							gl.enableVertexAttribArray(4);
							gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,16,0);
							gl.vertexAttribDivisor(4,1);
							gl.enableVertexAttribArray(3);
							gl.vertexAttribPointer(3,1,gl.FLOAT,false,16,4);
							gl.vertexAttribDivisor(3,1);
							gl.enableVertexAttribArray(1);
							gl.vertexAttribPointer(1,2,gl.SHORT,false,16,8);
							gl.vertexAttribDivisor(1,1);
							gl.enableVertexAttribArray(2);
							gl.vertexAttribPointer(2,2,gl.SHORT,false,16,12);
							gl.vertexAttribDivisor(2,1);
						} else {
							var gl = this._gl;
							gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
							gl.enableVertexAttribArray(4);
							gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,20,0);
							gl.enableVertexAttribArray(3);
							gl.vertexAttribPointer(3,1,gl.FLOAT,false,20,4);
							gl.enableVertexAttribArray(1);
							gl.vertexAttribPointer(1,2,gl.SHORT,false,20,8);
							gl.enableVertexAttribArray(2);
							gl.vertexAttribPointer(2,2,gl.SHORT,false,20,12);
							gl.enableVertexAttribArray(0);
							gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,20,16);
						}
						this._gl.bindVertexArray(null);
					}
				}
			}
			element.bytePos = this._maxElements * this._elemBuffSize;
			var bytes = this._bytes;
			var offset = element.bytePos;
			var size = this._elemBuffSize;
			if(size == null) {
				size = 0;
			}
			if(offset == null) {
				offset = 0;
			}
			var this1;
			if(size > 0) {
				this1 = new Uint8Array(bytes.b.bufferValue,offset,size);
			} else {
				this1 = new Uint8Array(bytes.b.bufferValue,offset);
			}
			element.bufferPointer = this1;
			this._elements[this._maxElements++] = element;
			this.updateElement(element);
		} else {
			throw haxe_Exception.thrown("Error: Element is already inside a Buffer");
		}
	}
	,removeElement: function(element) {
		if(element.bytePos != -1) {
			if(this._maxElements > 1 && element.bytePos < (this._maxElements - 1) * this._elemBuffSize) {
				var lastElement = this._elements[--this._maxElements];
				lastElement.bytePos = element.bytePos;
				var bytes = this._bytes;
				var offset = element.bytePos;
				var size = this._elemBuffSize;
				if(size == null) {
					size = 0;
				}
				if(offset == null) {
					offset = 0;
				}
				var this1;
				if(size > 0) {
					this1 = new Uint8Array(bytes.b.bufferValue,offset,size);
				} else {
					this1 = new Uint8Array(bytes.b.bufferValue,offset);
				}
				lastElement.bufferPointer = this1;
				this.updateElement(lastElement);
				this._elements[element.bytePos / this._elemBuffSize | 0] = lastElement;
			} else {
				this._maxElements--;
			}
			element.bytePos = -1;
			if(this._shrinkAtSize > 0 && this._elements.length - this._growSize >= this._minSize && this._maxElements <= this._elements.length - this._shrinkAtSize) {
				var newSize = this._elements.length - this._growSize;
				var _newBytes = new peote_view_utils_BufferBytes(new ArrayBuffer(this._elemBuffSize * newSize));
				_newBytes.blit(0,this._bytes,0,this._elemBuffSize * this._maxElements);
				this._bytes = _newBytes;
				var this1 = new Array(newSize);
				var _newElements = this1;
				var _g = 0;
				var _g1 = this._maxElements;
				while(_g < _g1) {
					var i = _g++;
					var element = this._elements[i];
					var bytes = this._bytes;
					var offset = element.bytePos;
					var size = this._elemBuffSize;
					if(size == null) {
						size = 0;
					}
					if(offset == null) {
						offset = 0;
					}
					var this1;
					if(size > 0) {
						this1 = new Uint8Array(bytes.b.bufferValue,offset,size);
					} else {
						this1 = new Uint8Array(bytes.b.bufferValue,offset);
					}
					element.bufferPointer = this1;
					_newElements[i] = element;
				}
				this._elements = _newElements;
				if(this._gl != null) {
					this._gl.deleteBuffer(this._glBuffer);
					this._glBuffer = this._gl.createBuffer();
					this._gl.bindBuffer(this._gl.ARRAY_BUFFER,this._glBuffer);
					var size = this._bytes.length;
					var bytes = this._bytes;
					var this1 = new Uint8Array(bytes.b.bufferValue,0);
					this._gl.bufferData(this._gl.ARRAY_BUFFER,this1,this._gl.STREAM_DRAW);
					this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
					if(peote_view_Version.isVAO) {
						this._gl.bindVertexArray(this._glVAO);
						if(peote_view_Version.isINSTANCED) {
							var gl = this._gl;
							var glBuffer = this._glBuffer;
							gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
							gl.enableVertexAttribArray(0);
							gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,2,0);
							gl.bindBuffer(gl.ARRAY_BUFFER,glBuffer);
							gl.enableVertexAttribArray(4);
							gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,16,0);
							gl.vertexAttribDivisor(4,1);
							gl.enableVertexAttribArray(3);
							gl.vertexAttribPointer(3,1,gl.FLOAT,false,16,4);
							gl.vertexAttribDivisor(3,1);
							gl.enableVertexAttribArray(1);
							gl.vertexAttribPointer(1,2,gl.SHORT,false,16,8);
							gl.vertexAttribDivisor(1,1);
							gl.enableVertexAttribArray(2);
							gl.vertexAttribPointer(2,2,gl.SHORT,false,16,12);
							gl.vertexAttribDivisor(2,1);
						} else {
							var gl = this._gl;
							gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
							gl.enableVertexAttribArray(4);
							gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,20,0);
							gl.enableVertexAttribArray(3);
							gl.vertexAttribPointer(3,1,gl.FLOAT,false,20,4);
							gl.enableVertexAttribArray(1);
							gl.vertexAttribPointer(1,2,gl.SHORT,false,20,8);
							gl.enableVertexAttribArray(2);
							gl.vertexAttribPointer(2,2,gl.SHORT,false,20,12);
							gl.enableVertexAttribArray(0);
							gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,20,16);
						}
						this._gl.bindVertexArray(null);
					}
				}
			}
		} else {
			throw haxe_Exception.thrown("Error: Element is not inside a Buffer");
		}
	}
	,getVertexShader: function() {
		return "\n\t::if isES3::#version 300 es::end::\n\t::if VERTEX_INT_PRECISION::precision ::VERTEX_INT_PRECISION:: int; ::end::\n\t::if VERTEX_FLOAT_PRECISION::precision ::VERTEX_FLOAT_PRECISION:: float; ::end::\n\t::if VERTEX_SAMPLER_PRECISION::precision ::VERTEX_SAMPLER_PRECISION:: sampler2D; ::end::\n\t\n\t// Uniforms -------------------------\n\t::if (!isPICKING && isUBO)::\n\t//layout(std140) uniform uboView\n\tuniform uboView\n\t{\n\t\tvec2 uResolution;\n\t\tvec2 uViewOffset;\n\t\tvec2 uViewZoom;\n\t};\n\t//layout(std140) uniform uboDisplay\n\tuniform uboDisplay\n\t{\n\t\tvec2 uOffset;\n\t\tvec2 uZoom;\n\t};\n\t::else::\n\tuniform vec2 uResolution;\n\tuniform vec2 uOffset;\n\tuniform vec2 uZoom;\n\t::end::\n\t\n\t\n\t\n\t// Attributes -------------------------\n\t::IN:: vec2 aPosition;\n\t\n\t::if isPICKING::\n\t\t::if !isINSTANCED::\n\t\t\t::IN:: vec4 aElement;\n\t\t::end::\n\t::end::\n\t\n\t::IN:: vec2 aPos;\n\t::IN:: vec2 aSize;\n\t\n\t::IN:: float aRotZ;\n\t\n\t\n\t::IN:: vec4 aColorStart0;\n\t\n\t\n\t\n\t// Varyings ---------------------------\n\t::if isPICKING::\n\t\t::if isINSTANCED::\n\t\t\tflat ::VAROUT:: int vElement;\n\t\t::else::\n\t\t\t::VAROUT:: vec4 vElement;\n\t\t::end::\n\t::end::\n\t\n\t::if isES3::flat ::end::::VAROUT:: vec4 vColor0;\n\t::if isES3::flat ::end::::VAROUT:: vec2 vSize; \n\t\n\t::if (hasTEXTURES || hasFRAGMENT_INJECTION)::\n\t\t::VAROUT:: vec2 vTexCoord;\n\t\t\n\t::end::\t\n\n\t// custom functions -------------------\n\t::VERTEX_INJECTION::\n\n\t// --------- vertex main --------------\n\tvoid main(void)\n\t{\n\t\t\n\t\tvec2 size = ::if SIZE_FORMULA::::SIZE_FORMULA::::else::aSize::end::;vSize = size;\n\t\t\t\t\n\t\tvec2 rotZ = ::if ROTZ_FORMULA::::ROTZ_FORMULA::::else::vec2( 0.0, aRotZ )::end::;\n\t\tvec2 pos = ::if POS_FORMULA::::POS_FORMULA::::else::aPos::end::;\npos = pos + aPosition * size;\n\t\tvColor0 = aColorStart0.wzyx; \n\n\t\t\n\n\t\t::if (hasTEXTURES || hasFRAGMENT_INJECTION)::\n\t\t\tvTexCoord = aPosition;\t\t\t\n\t\t\t\n\t\t::end::\n\t\t\n\t\t::if isPICKING::\n\t\t\t::if isINSTANCED::\n\t\t\t\tvElement = gl_InstanceID + 1;\n\t\t\t::else::\n\t\t\t\tvElement = aElement;\n\t\t\t::end::\n\t\t::end::\n\t\t\n\t\tfloat width = uResolution.x;\n\t\tfloat height = uResolution.y;\n\t\t::if (!isPICKING && isUBO)::\n\t\tfloat deltaX = (uOffset.x  + uViewOffset.x) / uZoom.x;\n\t\tfloat deltaY = (uOffset.y  + uViewOffset.y) / uZoom.y;\n\t\tvec2 zoom = uZoom * uViewZoom;\n\t\t::else::\n\t\tfloat deltaX = uOffset.x;\n\t\tfloat deltaY = uOffset.y;\n\t\tvec2 zoom = uZoom;\n\t\t::end::\n\t\t\n\t\t::if isPIXELSNAPPING::\n\t\tpos = floor( pos * ::PIXELDIVISOR:: * zoom ) / ::PIXELDIVISOR:: / zoom;\n\t\t::end::\n\t\t\n\t\tgl_Position = vec4 (\n\t\t\t 2.0 * zoom.x/width  * (pos.x + deltaX) - 1.0,\n\t\t\t-2.0 * zoom.y/height * (pos.y + deltaY) + 1.0,\n\t\t\t- rotZ.y,\n\t\t\t1.0\n\t\t);\t\t\n\t\t\n\t}\n\t";
	}
	,getFragmentShader: function() {
		return "\n\t::if isES3::#version 300 es::end::\n\t::foreach FRAGMENT_EXTENSIONS::#extension ::EXTENSION:: : enable\n\t::end::\n\t\n\t::if FRAGMENT_INT_PRECISION::precision ::FRAGMENT_INT_PRECISION:: int; ::end::\n\t::if FRAGMENT_FLOAT_PRECISION::precision ::FRAGMENT_FLOAT_PRECISION:: float; ::end::\n\t::if FRAGMENT_SAMPLER_PRECISION::precision ::FRAGMENT_SAMPLER_PRECISION:: sampler2D; ::end::\n\t\n\t// Uniforms -------------------------\t\n\t::FRAGMENT_PROGRAM_UNIFORMS::\n\t\n\t// Varyings ---------------------------\n\t::if isPICKING::\n\t\t::if isINSTANCED::\n\t\t\tflat ::VARIN:: int vElement;\n\t\t::else::\n\t\t\t::VARIN:: vec4 vElement;\n\t\t::end::\n\t::end::\n\n\t::if isES3::flat ::end::::VARIN:: vec4 vColor0; \n\t::if isES3::flat ::end::::VARIN:: vec2 vSize; \n\t\t\t\n\t::if (hasTEXTURES || hasFRAGMENT_INJECTION)::\n\t\t::VARIN:: vec2 vTexCoord;\n\t\t\n\t::end::\t\n\t\n\t\n\t::if isES3::\n\t\t::if (isPICKING && isINSTANCED)::\n\t\t\tout int Color;\n\t\t::else::\n\t\t\tout vec4 Color;\n\t\t::end::\n\t::end::\n\n\t::if hasTEXTURE_FUNCTIONS::\n\t\t// function to get texture color\n\t\tvec4 getTextureColor(int TXTNUM, vec2 vTexCoord) {\n\t\t::foreach TEXTURES::\n\t\t\t\n\t\t\t::if (LAYER >= 0)::\n\t\t\t::if USED_ID::\n\t\t\t\tif (TXTNUM == ::LAYER::) {\n\t\t\t\t\t::foreach UNITS::\n\t\t\t\t\t::if !FIRST ::else ::end::::if !LAST ::if (0.0 < ::UNIT_VALUE::)::end::\n\t\t\t\t\t\treturn(texture::if !isES3::2D::end::(::TEXTURE::, vec2(vTexCoord.x * ::SLOTS_WIDTH::, vTexCoord.y * ::SLOTS_HEIGHT::)));\n\t\t\t\t\t::end::\n\t\t\t\t}\n\t\t\t::end::\n\t\t\t::end::\n\t\t\t\n\t\t::end::\n\t\t// default values:\n\t\t::foreach TEXTURE_DEFAULTS::\n\t\t\tif (TXTNUM == ::LAYER::) {return(::DEFAULT_VALUE::);}\t\t\n\t\t::end::\n\t\t}\n\t::else:: \n\t\t::if hasFRAGMENT_INJECTION::#define getTextureColor(a,b) vec4(0.0,0.0,0.0,0.0)::end::\n\t::end::\n\n\t::if hasTEXTURE_FUNCTIONS::\n\t\t// function to get full texture size\n\t\tvec2 getTextureResolution(int TXTNUM) {\n\t\t::foreach TEXTURES::\n\t\t\t\n\t\t\t::if (LAYER >= 0)::\n\t\t\t::if USED_ID::\n\t\t\t\tif (TXTNUM == ::LAYER::) {\n\t\t\t\t\t::foreach UNITS::\n\t\t\t\t\t::if !FIRST ::else ::end::::if !LAST ::if (0.0 < ::UNIT_VALUE::)::end::\n\t\t\t\t\t\treturn( vec2(::TEXTURE_WIDTH::, ::TEXTURE_HEIGHT::) );\n\t\t\t\t\t::end::\n\t\t\t\t}\n\t\t\t::end::\n\t\t\t::end::\n\t\t\t\n\t\t::end::\n\t\t// default values:\n\t\t::foreach TEXTURE_DEFAULTS::\n\t\t\tif (TXTNUM == ::LAYER::) {return(vec2(0.0,0.0));}\t\t\n\t\t::end::\n\t\t}\n\t::else:: \n\t\t::if hasFRAGMENT_INJECTION::#define getTextureResolution(a) vec2(0.0,0.0)::end::\n\t::end::\n\n\t// custom functions -------------------\n\t::FRAGMENT_INJECTION::\n\t\n\t// --------- fragment main ------------\n\tvoid main(void)\n\t{\t\n\t\tvec4 c0 = vColor0; \n\t\t\n\t\t::if hasTEXTURES::\n\t\t\t::foreach TEXTURES::\n\t\t\t\t// ------------- LAYER ::LAYER:: --------------\n\t\t\t\t\n\t\t\t\t::if (LAYER >= 0)::\n\t\t\t\t::if USED::\n\t\t\t\t\tvec4 t::LAYER::;\n\t\t\t\t\t::foreach UNITS::\n\t\t\t\t\t::if !FIRST ::else ::end::::if !LAST ::if (0.0 < ::UNIT_VALUE::)::end::\n\t\t\t\t\t\tt::LAYER:: = texture::if !isES3::2D::end::(::TEXTURE::, vec2(vTexCoord.x * ::SLOTS_WIDTH::, vTexCoord.y * ::SLOTS_HEIGHT::));\n\t\t\t\t\t::end::\n\t\t\t\t::end::\n\t\t\t\t::end::\n\t\t\t\t\n\t\t\t::end::\n\t\t::end::\n\t\t\n\t\t// calc final color from all layers\n\t\tvec4 col = ::FRAGMENT_CALC_LAYER::;\n\t\t\n\t\t::if isDISCARD:: \n\t\t\tif (col.a <= ::DISCARD::) discard;\n\t\t::end::\n\t\t\n\t\t::if isPICKING::\n\t\t\t::if !isES3::gl_Frag::end::Color = vElement;\n\t\t::else::\n\t\t\t::if !isES3::gl_Frag::end::Color = col;\n\t\t\t// this fixing problem on old FF if alpha goes zero\n\t\t\t::if !isES3::gl_Frag::end::Color.w = clamp(::if !isES3::gl_Frag::end::Color.w, 0.003, 1.0);\n\t\t::end::\n\t}\n\t";
	}
	,getTextureIdentifiers: function() {
		return [];
	}
	,getColorIdentifiers: function() {
		return "color".split(",");
	}
	,getCustomIdentifiers: function() {
		return [];
	}
	,getCustomVaryings: function() {
		return [];
	}
	,getDefaultColorFormula: function() {
		return "";
	}
	,getDefaultFormulaVars: function() {
		return peote_ui_style_BoxStyleElement.DEFAULT_FORMULA_VARS;
	}
	,getFormulas: function() {
		return peote_ui_style_BoxStyleElement.FORMULAS;
	}
	,getAttributes: function() {
		return peote_ui_style_BoxStyleElement.ATTRIBUTES;
	}
	,getFormulaNames: function() {
		return peote_ui_style_BoxStyleElement.FORMULA_NAMES;
	}
	,getFormulaVaryings: function() {
		if(peote_ui_style_BoxStyleElement.FORMULA_VARYINGS == "") {
			return [];
		} else {
			return peote_ui_style_BoxStyleElement.FORMULA_VARYINGS.split(",");
		}
	}
	,getFormulaConstants: function() {
		if(peote_ui_style_BoxStyleElement.FORMULA_CONSTANTS == "") {
			return [];
		} else {
			return peote_ui_style_BoxStyleElement.FORMULA_CONSTANTS.split(",");
		}
	}
	,getFormulaCustoms: function() {
		if(peote_ui_style_BoxStyleElement.FORMULA_CUSTOMS == "") {
			return [];
		} else {
			return peote_ui_style_BoxStyleElement.FORMULA_CUSTOMS.split(",");
		}
	}
	,getMaxZindex: function() {
		return 2097151;
	}
	,hasAlpha: function() {
		return false;
	}
	,hasZindex: function() {
		return true;
	}
	,hasPicking: function() {
		return false;
	}
	,needFragmentPrecision: function() {
		return false;
	}
	,bindAttribLocations: function(gl,glProgram) {
		if(peote_view_Version.isINSTANCED) {
			gl.bindAttribLocation(glProgram,4,"aColorStart0");
			gl.bindAttribLocation(glProgram,3,"aRotZ");
			gl.bindAttribLocation(glProgram,1,"aPos");
			gl.bindAttribLocation(glProgram,2,"aSize");
			gl.bindAttribLocation(glProgram,0,"aPosition");
		} else {
			gl.bindAttribLocation(glProgram,4,"aColorStart0");
			gl.bindAttribLocation(glProgram,3,"aRotZ");
			gl.bindAttribLocation(glProgram,1,"aPos");
			gl.bindAttribLocation(glProgram,2,"aSize");
			gl.bindAttribLocation(glProgram,0,"aPosition");
		}
	}
	,render: function(peoteView,display,program) {
		var toElement = this._maxElements;
		if(peote_view_Version.isINSTANCED) {
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(this._glVAO);
			} else {
				var gl = this._gl;
				var glBuffer = this._glBuffer;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
				gl.enableVertexAttribArray(0);
				gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,2,0);
				gl.bindBuffer(gl.ARRAY_BUFFER,glBuffer);
				gl.enableVertexAttribArray(4);
				gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,16,0);
				gl.vertexAttribDivisor(4,1);
				gl.enableVertexAttribArray(3);
				gl.vertexAttribPointer(3,1,gl.FLOAT,false,16,4);
				gl.vertexAttribDivisor(3,1);
				gl.enableVertexAttribArray(1);
				gl.vertexAttribPointer(1,2,gl.SHORT,false,16,8);
				gl.vertexAttribDivisor(1,1);
				gl.enableVertexAttribArray(2);
				gl.vertexAttribPointer(2,2,gl.SHORT,false,16,12);
				gl.vertexAttribDivisor(2,1);
			}
			this._gl.drawArraysInstanced(this._gl.TRIANGLE_STRIP,0,6,toElement);
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(null);
			} else {
				var gl = this._gl;
				gl.disableVertexAttribArray(0);
				gl.disableVertexAttribArray(4);
				gl.disableVertexAttribArray(3);
				gl.disableVertexAttribArray(1);
				gl.disableVertexAttribArray(2);
			}
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
		} else {
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(this._glVAO);
			} else {
				var gl = this._gl;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
				gl.enableVertexAttribArray(4);
				gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,20,0);
				gl.enableVertexAttribArray(3);
				gl.vertexAttribPointer(3,1,gl.FLOAT,false,20,4);
				gl.enableVertexAttribArray(1);
				gl.vertexAttribPointer(1,2,gl.SHORT,false,20,8);
				gl.enableVertexAttribArray(2);
				gl.vertexAttribPointer(2,2,gl.SHORT,false,20,12);
				gl.enableVertexAttribArray(0);
				gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,20,16);
			}
			this._gl.drawArrays(this._gl.TRIANGLE_STRIP,0,toElement * 6);
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(null);
			} else {
				var gl = this._gl;
				gl.disableVertexAttribArray(0);
				gl.disableVertexAttribArray(4);
				gl.disableVertexAttribArray(3);
				gl.disableVertexAttribArray(1);
				gl.disableVertexAttribArray(2);
			}
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
		}
	}
	,pick: function(peoteView,display,program,toElement) {
		var toElement1 = toElement < 0 ? this._maxElements : toElement;
		if(peote_view_Version.isINSTANCED) {
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(this._glVAO);
			} else {
				var gl = this._gl;
				var glBuffer = this._glBuffer;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
				gl.enableVertexAttribArray(0);
				gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,2,0);
				gl.bindBuffer(gl.ARRAY_BUFFER,glBuffer);
				gl.enableVertexAttribArray(4);
				gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,16,0);
				gl.vertexAttribDivisor(4,1);
				gl.enableVertexAttribArray(3);
				gl.vertexAttribPointer(3,1,gl.FLOAT,false,16,4);
				gl.vertexAttribDivisor(3,1);
				gl.enableVertexAttribArray(1);
				gl.vertexAttribPointer(1,2,gl.SHORT,false,16,8);
				gl.vertexAttribDivisor(1,1);
				gl.enableVertexAttribArray(2);
				gl.vertexAttribPointer(2,2,gl.SHORT,false,16,12);
				gl.vertexAttribDivisor(2,1);
			}
			this._gl.drawArraysInstanced(this._gl.TRIANGLE_STRIP,0,6,toElement1);
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(null);
			} else {
				var gl = this._gl;
				gl.disableVertexAttribArray(0);
				gl.disableVertexAttribArray(4);
				gl.disableVertexAttribArray(3);
				gl.disableVertexAttribArray(1);
				gl.disableVertexAttribArray(2);
			}
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
		} else {
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(this._glVAO);
			} else {
				var gl = this._gl;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
				gl.enableVertexAttribArray(4);
				gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,20,0);
				gl.enableVertexAttribArray(3);
				gl.vertexAttribPointer(3,1,gl.FLOAT,false,20,4);
				gl.enableVertexAttribArray(1);
				gl.vertexAttribPointer(1,2,gl.SHORT,false,20,8);
				gl.enableVertexAttribArray(2);
				gl.vertexAttribPointer(2,2,gl.SHORT,false,20,12);
				gl.enableVertexAttribArray(0);
				gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,20,16);
			}
			this._gl.drawArrays(this._gl.TRIANGLE_STRIP,0,toElement1 * 6);
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(null);
			} else {
				var gl = this._gl;
				gl.disableVertexAttribArray(0);
				gl.disableVertexAttribArray(4);
				gl.disableVertexAttribArray(3);
				gl.disableVertexAttribArray(1);
				gl.disableVertexAttribArray(2);
			}
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
		}
	}
	,__class__: peote_view_Buffer_$BoxStyleElement
};
var peote_view_Buffer_$Glyph_$_$Main_$MyFontStyle = function(minSize,growSize,autoShrink) {
	if(autoShrink == null) {
		autoShrink = false;
	}
	if(growSize == null) {
		growSize = 0;
	}
	this._shrinkAtSize = 0;
	this._growSize = 0;
	this._maxElements = 0;
	this._glVAO = null;
	this._glInstanceBuffer = null;
	this._gl = null;
	if(minSize <= 0) {
		throw haxe_Exception.thrown("Error: Buffer need a minimum size of 1 to store an Element.");
	}
	this._minSize = minSize;
	this._growSize = growSize < 0 ? 0 : growSize;
	if(autoShrink) {
		this._shrinkAtSize = growSize + (growSize / 2 | 0);
	}
	var this1 = new Array(this._minSize);
	this._elements = this1;
	if(peote_view_Version.isINSTANCED) {
		if(peote_text_Glyph_$_$Main_$MyFontStyle.instanceBytes == null) {
			peote_text_Glyph_$_$Main_$MyFontStyle.instanceBytes = new peote_view_utils_BufferBytes(new ArrayBuffer(12));
			peote_text_Glyph_$_$Main_$MyFontStyle.instanceBytes.b[0] = 1;
			peote_text_Glyph_$_$Main_$MyFontStyle.instanceBytes.b[1] = 1;
			peote_text_Glyph_$_$Main_$MyFontStyle.instanceBytes.b[2] = 1;
			peote_text_Glyph_$_$Main_$MyFontStyle.instanceBytes.b[3] = 1;
			peote_text_Glyph_$_$Main_$MyFontStyle.instanceBytes.b[4] = 0;
			peote_text_Glyph_$_$Main_$MyFontStyle.instanceBytes.b[5] = 1;
			peote_text_Glyph_$_$Main_$MyFontStyle.instanceBytes.b[6] = 1;
			peote_text_Glyph_$_$Main_$MyFontStyle.instanceBytes.b[7] = 0;
			peote_text_Glyph_$_$Main_$MyFontStyle.instanceBytes.b[8] = 0;
			peote_text_Glyph_$_$Main_$MyFontStyle.instanceBytes.b[9] = 0;
			peote_text_Glyph_$_$Main_$MyFontStyle.instanceBytes.b[10] = 0;
			peote_text_Glyph_$_$Main_$MyFontStyle.instanceBytes.b[11] = 0;
		}
		this._elemBuffSize = 36;
	} else {
		this._elemBuffSize = 240;
	}
	this._bytes = new peote_view_utils_BufferBytes(new ArrayBuffer(this._elemBuffSize * this._minSize));
	this._bytes.fill(0,this._elemBuffSize * this._minSize,0);
};
$hxClasses["peote.view.Buffer_Glyph__Main_MyFontStyle"] = peote_view_Buffer_$Glyph_$_$Main_$MyFontStyle;
peote_view_Buffer_$Glyph_$_$Main_$MyFontStyle.__name__ = "peote.view.Buffer_Glyph__Main_MyFontStyle";
peote_view_Buffer_$Glyph_$_$Main_$MyFontStyle.__interfaces__ = [peote_view_BufferInterface];
peote_view_Buffer_$Glyph_$_$Main_$MyFontStyle.prototype = {
	setNewGLContext: function(newGl) {
		if(newGl != null && newGl != this._gl) {
			if(this._gl != null) {
				this._gl.deleteBuffer(this._glBuffer);
				if(peote_view_Version.isINSTANCED) {
					this._gl.deleteBuffer(this._glInstanceBuffer);
				}
				if(peote_view_Version.isVAO) {
					this._gl.deleteVertexArray(this._glVAO);
				}
			}
			this._gl = newGl;
			this._glBuffer = this._gl.createBuffer();
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,this._glBuffer);
			var size = this._bytes.length;
			var bytes = this._bytes;
			var this1 = new Uint8Array(bytes.b.bufferValue,0);
			this._gl.bufferData(this._gl.ARRAY_BUFFER,this1,this._gl.STREAM_DRAW);
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
			if(peote_view_Version.isINSTANCED) {
				this._glInstanceBuffer = this._gl.createBuffer();
				var gl = this._gl;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
				var size = peote_text_Glyph_$_$Main_$MyFontStyle.instanceBytes.length;
				var bytes = peote_text_Glyph_$_$Main_$MyFontStyle.instanceBytes;
				var this1 = new Uint8Array(bytes.b.bufferValue,0);
				gl.bufferData(gl.ARRAY_BUFFER,this1,gl.STATIC_DRAW);
				gl.bindBuffer(gl.ARRAY_BUFFER,null);
			}
			if(peote_view_Version.isVAO) {
				this._glVAO = this._gl.createVertexArray();
				this._gl.bindVertexArray(this._glVAO);
				if(peote_view_Version.isINSTANCED) {
					var gl = this._gl;
					var glBuffer = this._glBuffer;
					gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
					gl.enableVertexAttribArray(0);
					gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,2,0);
					gl.bindBuffer(gl.ARRAY_BUFFER,glBuffer);
					gl.enableVertexAttribArray(3);
					gl.vertexAttribPointer(3,4,gl.UNSIGNED_BYTE,true,36,0);
					gl.vertexAttribDivisor(3,1);
					gl.enableVertexAttribArray(1);
					gl.vertexAttribPointer(1,2,gl.FLOAT,false,36,4);
					gl.vertexAttribDivisor(1,1);
					gl.enableVertexAttribArray(2);
					gl.vertexAttribPointer(2,2,gl.FLOAT,false,36,12);
					gl.vertexAttribDivisor(2,1);
					gl.enableVertexAttribArray(4);
					gl.vertexAttribPointer(4,4,gl.FLOAT,false,36,20);
					gl.vertexAttribDivisor(4,1);
				} else {
					var gl = this._gl;
					gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
					gl.enableVertexAttribArray(3);
					gl.vertexAttribPointer(3,4,gl.UNSIGNED_BYTE,true,40,0);
					gl.enableVertexAttribArray(1);
					gl.vertexAttribPointer(1,2,gl.FLOAT,false,40,4);
					gl.enableVertexAttribArray(2);
					gl.vertexAttribPointer(2,2,gl.FLOAT,false,40,12);
					gl.enableVertexAttribArray(4);
					gl.vertexAttribPointer(4,4,gl.FLOAT,false,40,20);
					gl.enableVertexAttribArray(0);
					gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,40,36);
				}
				this._gl.bindVertexArray(null);
			}
		}
	}
	,updateElement: function(element) {
		if(peote_view_Version.isINSTANCED) {
			var bytes = this._bytes;
			bytes.b_Int32[element.bytePos >> 2] = element.color;
			bytes.b_UFloat32[element.bytePos + 4 >> 2] = element.x;
			bytes.b_UFloat32[element.bytePos + 8 >> 2] = element.y;
			bytes.b_UFloat32[element.bytePos + 12 >> 2] = element.w;
			bytes.b_UFloat32[element.bytePos + 16 >> 2] = element.h;
			bytes.b_UFloat32[element.bytePos + 20 >> 2] = element.tx;
			bytes.b_UFloat32[element.bytePos + 24 >> 2] = element.ty;
			bytes.b_UFloat32[element.bytePos + 28 >> 2] = element.tw;
			bytes.b_UFloat32[element.bytePos + 32 >> 2] = element.th;
		} else {
			var bytes = this._bytes;
			bytes.b_Int32[element.bytePos >> 2] = element.color;
			bytes.b_UFloat32[element.bytePos + 4 >> 2] = element.x;
			bytes.b_UFloat32[element.bytePos + 8 >> 2] = element.y;
			bytes.b_UFloat32[element.bytePos + 12 >> 2] = element.w;
			bytes.b_UFloat32[element.bytePos + 16 >> 2] = element.h;
			bytes.b_UFloat32[element.bytePos + 20 >> 2] = element.tx;
			bytes.b_UFloat32[element.bytePos + 24 >> 2] = element.ty;
			bytes.b_UFloat32[element.bytePos + 28 >> 2] = element.tw;
			bytes.b_UFloat32[element.bytePos + 32 >> 2] = element.th;
			bytes.b[element.bytePos + 36] = 1;
			bytes.b[element.bytePos + 37] = 1;
			bytes.b_Int32[element.bytePos + 40 >> 2] = element.color;
			bytes.b_UFloat32[element.bytePos + 44 >> 2] = element.x;
			bytes.b_UFloat32[element.bytePos + 48 >> 2] = element.y;
			bytes.b_UFloat32[element.bytePos + 52 >> 2] = element.w;
			bytes.b_UFloat32[element.bytePos + 56 >> 2] = element.h;
			bytes.b_UFloat32[element.bytePos + 60 >> 2] = element.tx;
			bytes.b_UFloat32[element.bytePos + 64 >> 2] = element.ty;
			bytes.b_UFloat32[element.bytePos + 68 >> 2] = element.tw;
			bytes.b_UFloat32[element.bytePos + 72 >> 2] = element.th;
			bytes.b[element.bytePos + 76] = 1;
			bytes.b[element.bytePos + 77] = 1;
			bytes.b_Int32[element.bytePos + 80 >> 2] = element.color;
			bytes.b_UFloat32[element.bytePos + 84 >> 2] = element.x;
			bytes.b_UFloat32[element.bytePos + 88 >> 2] = element.y;
			bytes.b_UFloat32[element.bytePos + 92 >> 2] = element.w;
			bytes.b_UFloat32[element.bytePos + 96 >> 2] = element.h;
			bytes.b_UFloat32[element.bytePos + 100 >> 2] = element.tx;
			bytes.b_UFloat32[element.bytePos + 104 >> 2] = element.ty;
			bytes.b_UFloat32[element.bytePos + 108 >> 2] = element.tw;
			bytes.b_UFloat32[element.bytePos + 112 >> 2] = element.th;
			bytes.b[element.bytePos + 116] = 0;
			bytes.b[element.bytePos + 117] = 1;
			bytes.b_Int32[element.bytePos + 120 >> 2] = element.color;
			bytes.b_UFloat32[element.bytePos + 124 >> 2] = element.x;
			bytes.b_UFloat32[element.bytePos + 128 >> 2] = element.y;
			bytes.b_UFloat32[element.bytePos + 132 >> 2] = element.w;
			bytes.b_UFloat32[element.bytePos + 136 >> 2] = element.h;
			bytes.b_UFloat32[element.bytePos + 140 >> 2] = element.tx;
			bytes.b_UFloat32[element.bytePos + 144 >> 2] = element.ty;
			bytes.b_UFloat32[element.bytePos + 148 >> 2] = element.tw;
			bytes.b_UFloat32[element.bytePos + 152 >> 2] = element.th;
			bytes.b[element.bytePos + 156] = 1;
			bytes.b[element.bytePos + 157] = 0;
			bytes.b_Int32[element.bytePos + 160 >> 2] = element.color;
			bytes.b_UFloat32[element.bytePos + 164 >> 2] = element.x;
			bytes.b_UFloat32[element.bytePos + 168 >> 2] = element.y;
			bytes.b_UFloat32[element.bytePos + 172 >> 2] = element.w;
			bytes.b_UFloat32[element.bytePos + 176 >> 2] = element.h;
			bytes.b_UFloat32[element.bytePos + 180 >> 2] = element.tx;
			bytes.b_UFloat32[element.bytePos + 184 >> 2] = element.ty;
			bytes.b_UFloat32[element.bytePos + 188 >> 2] = element.tw;
			bytes.b_UFloat32[element.bytePos + 192 >> 2] = element.th;
			bytes.b[element.bytePos + 196] = 0;
			bytes.b[element.bytePos + 197] = 0;
			bytes.b_Int32[element.bytePos + 200 >> 2] = element.color;
			bytes.b_UFloat32[element.bytePos + 204 >> 2] = element.x;
			bytes.b_UFloat32[element.bytePos + 208 >> 2] = element.y;
			bytes.b_UFloat32[element.bytePos + 212 >> 2] = element.w;
			bytes.b_UFloat32[element.bytePos + 216 >> 2] = element.h;
			bytes.b_UFloat32[element.bytePos + 220 >> 2] = element.tx;
			bytes.b_UFloat32[element.bytePos + 224 >> 2] = element.ty;
			bytes.b_UFloat32[element.bytePos + 228 >> 2] = element.tw;
			bytes.b_UFloat32[element.bytePos + 232 >> 2] = element.th;
			bytes.b[element.bytePos + 236] = 0;
			bytes.b[element.bytePos + 237] = 0;
		}
		if(element.bytePos == -1) {
			throw haxe_Exception.thrown("Error, Element is not added to Buffer");
		}
		if(this._gl != null) {
			var gl = this._gl;
			var elemBuffSize = this._elemBuffSize;
			gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
			gl.bufferSubData(gl.ARRAY_BUFFER,element.bytePos,element.bufferPointer);
			gl.bindBuffer(gl.ARRAY_BUFFER,null);
		}
	}
	,addElement: function(element) {
		if(element.bytePos == -1) {
			if(this._maxElements == this._elements.length) {
				if(this._growSize == 0) {
					throw haxe_Exception.thrown("Error: Can't add new Element. Buffer is full and automatic growing Buffersize is disabled.");
				}
				var newSize = this._maxElements + this._growSize;
				var _newBytes = new peote_view_utils_BufferBytes(new ArrayBuffer(this._elemBuffSize * newSize));
				_newBytes.blit(0,this._bytes,0,this._elemBuffSize * this._maxElements);
				this._bytes = _newBytes;
				var this1 = new Array(newSize);
				var _newElements = this1;
				var _g = 0;
				var _g1 = this._maxElements;
				while(_g < _g1) {
					var i = _g++;
					var element1 = this._elements[i];
					var bytes = this._bytes;
					var offset = element1.bytePos;
					var size = this._elemBuffSize;
					if(size == null) {
						size = 0;
					}
					if(offset == null) {
						offset = 0;
					}
					var this1;
					if(size > 0) {
						this1 = new Uint8Array(bytes.b.bufferValue,offset,size);
					} else {
						this1 = new Uint8Array(bytes.b.bufferValue,offset);
					}
					element1.bufferPointer = this1;
					_newElements[i] = element1;
				}
				this._elements = _newElements;
				if(this._gl != null) {
					this._gl.deleteBuffer(this._glBuffer);
					this._glBuffer = this._gl.createBuffer();
					this._gl.bindBuffer(this._gl.ARRAY_BUFFER,this._glBuffer);
					var size = this._bytes.length;
					var bytes = this._bytes;
					var this1 = new Uint8Array(bytes.b.bufferValue,0);
					this._gl.bufferData(this._gl.ARRAY_BUFFER,this1,this._gl.STREAM_DRAW);
					this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
					if(peote_view_Version.isVAO) {
						this._gl.bindVertexArray(this._glVAO);
						if(peote_view_Version.isINSTANCED) {
							var gl = this._gl;
							var glBuffer = this._glBuffer;
							gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
							gl.enableVertexAttribArray(0);
							gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,2,0);
							gl.bindBuffer(gl.ARRAY_BUFFER,glBuffer);
							gl.enableVertexAttribArray(3);
							gl.vertexAttribPointer(3,4,gl.UNSIGNED_BYTE,true,36,0);
							gl.vertexAttribDivisor(3,1);
							gl.enableVertexAttribArray(1);
							gl.vertexAttribPointer(1,2,gl.FLOAT,false,36,4);
							gl.vertexAttribDivisor(1,1);
							gl.enableVertexAttribArray(2);
							gl.vertexAttribPointer(2,2,gl.FLOAT,false,36,12);
							gl.vertexAttribDivisor(2,1);
							gl.enableVertexAttribArray(4);
							gl.vertexAttribPointer(4,4,gl.FLOAT,false,36,20);
							gl.vertexAttribDivisor(4,1);
						} else {
							var gl = this._gl;
							gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
							gl.enableVertexAttribArray(3);
							gl.vertexAttribPointer(3,4,gl.UNSIGNED_BYTE,true,40,0);
							gl.enableVertexAttribArray(1);
							gl.vertexAttribPointer(1,2,gl.FLOAT,false,40,4);
							gl.enableVertexAttribArray(2);
							gl.vertexAttribPointer(2,2,gl.FLOAT,false,40,12);
							gl.enableVertexAttribArray(4);
							gl.vertexAttribPointer(4,4,gl.FLOAT,false,40,20);
							gl.enableVertexAttribArray(0);
							gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,40,36);
						}
						this._gl.bindVertexArray(null);
					}
				}
			}
			element.bytePos = this._maxElements * this._elemBuffSize;
			var bytes = this._bytes;
			var offset = element.bytePos;
			var size = this._elemBuffSize;
			if(size == null) {
				size = 0;
			}
			if(offset == null) {
				offset = 0;
			}
			var this1;
			if(size > 0) {
				this1 = new Uint8Array(bytes.b.bufferValue,offset,size);
			} else {
				this1 = new Uint8Array(bytes.b.bufferValue,offset);
			}
			element.bufferPointer = this1;
			this._elements[this._maxElements++] = element;
			this.updateElement(element);
		} else {
			throw haxe_Exception.thrown("Error: Element is already inside a Buffer");
		}
	}
	,removeElement: function(element) {
		if(element.bytePos != -1) {
			if(this._maxElements > 1 && element.bytePos < (this._maxElements - 1) * this._elemBuffSize) {
				var lastElement = this._elements[--this._maxElements];
				lastElement.bytePos = element.bytePos;
				var bytes = this._bytes;
				var offset = element.bytePos;
				var size = this._elemBuffSize;
				if(size == null) {
					size = 0;
				}
				if(offset == null) {
					offset = 0;
				}
				var this1;
				if(size > 0) {
					this1 = new Uint8Array(bytes.b.bufferValue,offset,size);
				} else {
					this1 = new Uint8Array(bytes.b.bufferValue,offset);
				}
				lastElement.bufferPointer = this1;
				this.updateElement(lastElement);
				this._elements[element.bytePos / this._elemBuffSize | 0] = lastElement;
			} else {
				this._maxElements--;
			}
			element.bytePos = -1;
			if(this._shrinkAtSize > 0 && this._elements.length - this._growSize >= this._minSize && this._maxElements <= this._elements.length - this._shrinkAtSize) {
				var newSize = this._elements.length - this._growSize;
				var _newBytes = new peote_view_utils_BufferBytes(new ArrayBuffer(this._elemBuffSize * newSize));
				_newBytes.blit(0,this._bytes,0,this._elemBuffSize * this._maxElements);
				this._bytes = _newBytes;
				var this1 = new Array(newSize);
				var _newElements = this1;
				var _g = 0;
				var _g1 = this._maxElements;
				while(_g < _g1) {
					var i = _g++;
					var element = this._elements[i];
					var bytes = this._bytes;
					var offset = element.bytePos;
					var size = this._elemBuffSize;
					if(size == null) {
						size = 0;
					}
					if(offset == null) {
						offset = 0;
					}
					var this1;
					if(size > 0) {
						this1 = new Uint8Array(bytes.b.bufferValue,offset,size);
					} else {
						this1 = new Uint8Array(bytes.b.bufferValue,offset);
					}
					element.bufferPointer = this1;
					_newElements[i] = element;
				}
				this._elements = _newElements;
				if(this._gl != null) {
					this._gl.deleteBuffer(this._glBuffer);
					this._glBuffer = this._gl.createBuffer();
					this._gl.bindBuffer(this._gl.ARRAY_BUFFER,this._glBuffer);
					var size = this._bytes.length;
					var bytes = this._bytes;
					var this1 = new Uint8Array(bytes.b.bufferValue,0);
					this._gl.bufferData(this._gl.ARRAY_BUFFER,this1,this._gl.STREAM_DRAW);
					this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
					if(peote_view_Version.isVAO) {
						this._gl.bindVertexArray(this._glVAO);
						if(peote_view_Version.isINSTANCED) {
							var gl = this._gl;
							var glBuffer = this._glBuffer;
							gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
							gl.enableVertexAttribArray(0);
							gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,2,0);
							gl.bindBuffer(gl.ARRAY_BUFFER,glBuffer);
							gl.enableVertexAttribArray(3);
							gl.vertexAttribPointer(3,4,gl.UNSIGNED_BYTE,true,36,0);
							gl.vertexAttribDivisor(3,1);
							gl.enableVertexAttribArray(1);
							gl.vertexAttribPointer(1,2,gl.FLOAT,false,36,4);
							gl.vertexAttribDivisor(1,1);
							gl.enableVertexAttribArray(2);
							gl.vertexAttribPointer(2,2,gl.FLOAT,false,36,12);
							gl.vertexAttribDivisor(2,1);
							gl.enableVertexAttribArray(4);
							gl.vertexAttribPointer(4,4,gl.FLOAT,false,36,20);
							gl.vertexAttribDivisor(4,1);
						} else {
							var gl = this._gl;
							gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
							gl.enableVertexAttribArray(3);
							gl.vertexAttribPointer(3,4,gl.UNSIGNED_BYTE,true,40,0);
							gl.enableVertexAttribArray(1);
							gl.vertexAttribPointer(1,2,gl.FLOAT,false,40,4);
							gl.enableVertexAttribArray(2);
							gl.vertexAttribPointer(2,2,gl.FLOAT,false,40,12);
							gl.enableVertexAttribArray(4);
							gl.vertexAttribPointer(4,4,gl.FLOAT,false,40,20);
							gl.enableVertexAttribArray(0);
							gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,40,36);
						}
						this._gl.bindVertexArray(null);
					}
				}
			}
		} else {
			throw haxe_Exception.thrown("Error: Element is not inside a Buffer");
		}
	}
	,getVertexShader: function() {
		return "\n\t::if isES3::#version 300 es::end::\n\t::if VERTEX_INT_PRECISION::precision ::VERTEX_INT_PRECISION:: int; ::end::\n\t::if VERTEX_FLOAT_PRECISION::precision ::VERTEX_FLOAT_PRECISION:: float; ::end::\n\t::if VERTEX_SAMPLER_PRECISION::precision ::VERTEX_SAMPLER_PRECISION:: sampler2D; ::end::\n\t\n\t// Uniforms -------------------------\n\t::if (!isPICKING && isUBO)::\n\t//layout(std140) uniform uboView\n\tuniform uboView\n\t{\n\t\tvec2 uResolution;\n\t\tvec2 uViewOffset;\n\t\tvec2 uViewZoom;\n\t};\n\t//layout(std140) uniform uboDisplay\n\tuniform uboDisplay\n\t{\n\t\tvec2 uOffset;\n\t\tvec2 uZoom;\n\t};\n\t::else::\n\tuniform vec2 uResolution;\n\tuniform vec2 uOffset;\n\tuniform vec2 uZoom;\n\t::end::\n\t\n\t\n\t\n\t// Attributes -------------------------\n\t::IN:: vec2 aPosition;\n\t\n\t::if isPICKING::\n\t\t::if !isINSTANCED::\n\t\t\t::IN:: vec4 aElement;\n\t\t::end::\n\t::end::\n\t\n\t::IN:: vec2 aPos;\n\t::IN:: vec2 aSize;\n\t\n\t\n\t\n\t\n\t::IN:: vec4 aColorStart0;\n\t\n\t::IN:: vec4 aFloat0;\n\t\n\t// Varyings ---------------------------\n\t::if isPICKING::\n\t\t::if isINSTANCED::\n\t\t\tflat ::VAROUT:: int vElement;\n\t\t::else::\n\t\t\t::VAROUT:: vec4 vElement;\n\t\t::end::\n\t::end::\n\t\n\t::if isES3::flat ::end::::VAROUT:: vec4 vColor0;\n\t\n\t\n\t::if (hasTEXTURES || hasFRAGMENT_INJECTION)::\n\t\t::VAROUT:: vec2 vTexCoord;\n\t\t::if isES3::flat ::end:: ::VAROUT:: vec4 vTexPack0;\n\t::end::\t\n\n\t// custom functions -------------------\n\t::VERTEX_INJECTION::\n\n\t// --------- vertex main --------------\n\tvoid main(void)\n\t{\n\t\t\n\t\tvec2 size = ::if SIZE_FORMULA::::SIZE_FORMULA::::else::aSize::end::;\n\t\t\t\t\n\t\t\n\t\tvec2 pos = ::if POS_FORMULA::::POS_FORMULA::::else::aPos::end::;\npos = pos + aPosition * size;\n\t\tvColor0 = aColorStart0.wzyx; \n\n\t\t\n\n\t\t::if (hasTEXTURES || hasFRAGMENT_INJECTION)::\n\t\t\tvTexCoord = aPosition;\t\t\t\n\t\t\tvTexPack0.x = ::if FORMULA_VARYINGS.tx::::FORMULA_VARYINGS.tx::::else::aFloat0.x::end::;vTexPack0.y = ::if FORMULA_VARYINGS.ty::::FORMULA_VARYINGS.ty::::else::aFloat0.y::end::;vTexPack0.z = ::if FORMULA_VARYINGS.tw::::FORMULA_VARYINGS.tw::::else::aFloat0.z::end::;vTexPack0.w = ::if FORMULA_VARYINGS.th::::FORMULA_VARYINGS.th::::else::aFloat0.w::end::;\n\t\t::end::\n\t\t\n\t\t::if isPICKING::\n\t\t\t::if isINSTANCED::\n\t\t\t\tvElement = gl_InstanceID + 1;\n\t\t\t::else::\n\t\t\t\tvElement = aElement;\n\t\t\t::end::\n\t\t::end::\n\t\t\n\t\tfloat width = uResolution.x;\n\t\tfloat height = uResolution.y;\n\t\t::if (!isPICKING && isUBO)::\n\t\tfloat deltaX = (uOffset.x  + uViewOffset.x) / uZoom.x;\n\t\tfloat deltaY = (uOffset.y  + uViewOffset.y) / uZoom.y;\n\t\tvec2 zoom = uZoom * uViewZoom;\n\t\t::else::\n\t\tfloat deltaX = uOffset.x;\n\t\tfloat deltaY = uOffset.y;\n\t\tvec2 zoom = uZoom;\n\t\t::end::\n\t\t\n\t\t::if isPIXELSNAPPING::\n\t\tpos = floor( pos * ::PIXELDIVISOR:: * zoom ) / ::PIXELDIVISOR:: / zoom;\n\t\t::end::\n\t\t\n\t\tgl_Position = vec4 (\n\t\t\t 2.0 * zoom.x/width  * (pos.x + deltaX) - 1.0,\n\t\t\t-2.0 * zoom.y/height * (pos.y + deltaY) + 1.0,\n\t\t\t- 0.0,\n\t\t\t1.0\n\t\t);\t\t\n\t\t\n\t}\n\t";
	}
	,getFragmentShader: function() {
		return "\n\t::if isES3::#version 300 es::end::\n\t::foreach FRAGMENT_EXTENSIONS::#extension ::EXTENSION:: : enable\n\t::end::\n\t\n\t::if FRAGMENT_INT_PRECISION::precision ::FRAGMENT_INT_PRECISION:: int; ::end::\n\t::if FRAGMENT_FLOAT_PRECISION::precision ::FRAGMENT_FLOAT_PRECISION:: float; ::end::\n\t::if FRAGMENT_SAMPLER_PRECISION::precision ::FRAGMENT_SAMPLER_PRECISION:: sampler2D; ::end::\n\t\n\t// Uniforms -------------------------\t\n\t::FRAGMENT_PROGRAM_UNIFORMS::\n\t\n\t// Varyings ---------------------------\n\t::if isPICKING::\n\t\t::if isINSTANCED::\n\t\t\tflat ::VARIN:: int vElement;\n\t\t::else::\n\t\t\t::VARIN:: vec4 vElement;\n\t\t::end::\n\t::end::\n\n\t::if isES3::flat ::end::::VARIN:: vec4 vColor0; \n\t\n\t\t\t\n\t::if (hasTEXTURES || hasFRAGMENT_INJECTION)::\n\t\t::VARIN:: vec2 vTexCoord;\n\t\t::if isES3::flat ::end:: ::VARIN:: vec4 vTexPack0;\n\t::end::\t\n\t\n\t\n\t::if isES3::\n\t\t::if (isPICKING && isINSTANCED)::\n\t\t\tout int Color;\n\t\t::else::\n\t\t\tout vec4 Color;\n\t\t::end::\n\t::end::\n\n\t::if hasTEXTURE_FUNCTIONS::\n\t\t// function to get texture color\n\t\tvec4 getTextureColor(int TXTNUM, vec2 vTexCoord) {\n\t\t::foreach TEXTURES::\n\t\t\t\n\t\t\t::if (LAYER >= 0)::\n\t\t\t::if USED_ID::\n\t\t\t\tif (TXTNUM == ::LAYER::) {\n\t\t\t\t\t::foreach UNITS::\n\t\t\t\t\t::if !FIRST ::else ::end::::if !LAST ::if (0.0 < ::UNIT_VALUE::)::end::\n\t\t\t\t\t\treturn(texture::if !isES3::2D::end::(::TEXTURE::, vec2(vTexCoord.x * (vTexPack0.z / ::TEXTURE_WIDTH::) + (vTexPack0.x / ::TEXTURE_WIDTH::), vTexCoord.y * (vTexPack0.w / ::TEXTURE_HEIGHT::) + (vTexPack0.y / ::TEXTURE_HEIGHT::))));\n\t\t\t\t\t::end::\n\t\t\t\t}\n\t\t\t::end::\n\t\t\t::end::\n\t\t\t\n\t\t::end::\n\t\t// default values:\n\t\t::foreach TEXTURE_DEFAULTS::\n\t\t\tif (TXTNUM == ::LAYER::) {return(::DEFAULT_VALUE::);}\t\t\n\t\t::end::\n\t\t}\n\t::else:: \n\t\t::if hasFRAGMENT_INJECTION::#define getTextureColor(a,b) vec4(0.0,0.0,0.0,0.0)::end::\n\t::end::\n\n\t::if hasTEXTURE_FUNCTIONS::\n\t\t// function to get full texture size\n\t\tvec2 getTextureResolution(int TXTNUM) {\n\t\t::foreach TEXTURES::\n\t\t\t\n\t\t\t::if (LAYER >= 0)::\n\t\t\t::if USED_ID::\n\t\t\t\tif (TXTNUM == ::LAYER::) {\n\t\t\t\t\t::foreach UNITS::\n\t\t\t\t\t::if !FIRST ::else ::end::::if !LAST ::if (0.0 < ::UNIT_VALUE::)::end::\n\t\t\t\t\t\treturn( vec2(::TEXTURE_WIDTH::, ::TEXTURE_HEIGHT::) );\n\t\t\t\t\t::end::\n\t\t\t\t}\n\t\t\t::end::\n\t\t\t::end::\n\t\t\t\n\t\t::end::\n\t\t// default values:\n\t\t::foreach TEXTURE_DEFAULTS::\n\t\t\tif (TXTNUM == ::LAYER::) {return(vec2(0.0,0.0));}\t\t\n\t\t::end::\n\t\t}\n\t::else:: \n\t\t::if hasFRAGMENT_INJECTION::#define getTextureResolution(a) vec2(0.0,0.0)::end::\n\t::end::\n\n\t// custom functions -------------------\n\t::FRAGMENT_INJECTION::\n\t\n\t// --------- fragment main ------------\n\tvoid main(void)\n\t{\t\n\t\tvec4 c0 = vColor0; \n\t\t\n\t\t::if hasTEXTURES::\n\t\t\t::foreach TEXTURES::\n\t\t\t\t// ------------- LAYER ::LAYER:: --------------\n\t\t\t\t\n\t\t\t\t::if (LAYER >= 0)::\n\t\t\t\t::if USED::\n\t\t\t\t\tvec4 t::LAYER::;\n\t\t\t\t\t::foreach UNITS::\n\t\t\t\t\t::if !FIRST ::else ::end::::if !LAST ::if (0.0 < ::UNIT_VALUE::)::end::\n\t\t\t\t\t\tt::LAYER:: = texture::if !isES3::2D::end::(::TEXTURE::, vec2(vTexCoord.x * (vTexPack0.z / ::TEXTURE_WIDTH::) + (vTexPack0.x / ::TEXTURE_WIDTH::), vTexCoord.y * (vTexPack0.w / ::TEXTURE_HEIGHT::) + (vTexPack0.y / ::TEXTURE_HEIGHT::)));\n\t\t\t\t\t::end::\n\t\t\t\t::end::\n\t\t\t\t::end::\n\t\t\t\t\n\t\t\t::end::\n\t\t::end::\n\t\t\n\t\t// calc final color from all layers\n\t\tvec4 col = ::FRAGMENT_CALC_LAYER::;\n\t\t\n\t\t::if isDISCARD:: \n\t\t\tif (col.a <= ::DISCARD::) discard;\n\t\t::end::\n\t\t\n\t\t::if isPICKING::\n\t\t\t::if !isES3::gl_Frag::end::Color = vElement;\n\t\t::else::\n\t\t\t::if !isES3::gl_Frag::end::Color = col;\n\t\t\t// this fixing problem on old FF if alpha goes zero\n\t\t\t::if !isES3::gl_Frag::end::Color.w = clamp(::if !isES3::gl_Frag::end::Color.w, 0.003, 1.0);\n\t\t::end::\n\t}\n\t";
	}
	,getTextureIdentifiers: function() {
		return [];
	}
	,getColorIdentifiers: function() {
		return "color".split(",");
	}
	,getCustomIdentifiers: function() {
		return [];
	}
	,getCustomVaryings: function() {
		return [];
	}
	,getDefaultColorFormula: function() {
		return "";
	}
	,getDefaultFormulaVars: function() {
		return peote_text_Glyph_$_$Main_$MyFontStyle.DEFAULT_FORMULA_VARS;
	}
	,getFormulas: function() {
		return peote_text_Glyph_$_$Main_$MyFontStyle.FORMULAS;
	}
	,getAttributes: function() {
		return peote_text_Glyph_$_$Main_$MyFontStyle.ATTRIBUTES;
	}
	,getFormulaNames: function() {
		return peote_text_Glyph_$_$Main_$MyFontStyle.FORMULA_NAMES;
	}
	,getFormulaVaryings: function() {
		if(peote_text_Glyph_$_$Main_$MyFontStyle.FORMULA_VARYINGS == "") {
			return [];
		} else {
			return peote_text_Glyph_$_$Main_$MyFontStyle.FORMULA_VARYINGS.split(",");
		}
	}
	,getFormulaConstants: function() {
		if(peote_text_Glyph_$_$Main_$MyFontStyle.FORMULA_CONSTANTS == "") {
			return [];
		} else {
			return peote_text_Glyph_$_$Main_$MyFontStyle.FORMULA_CONSTANTS.split(",");
		}
	}
	,getFormulaCustoms: function() {
		if(peote_text_Glyph_$_$Main_$MyFontStyle.FORMULA_CUSTOMS == "") {
			return [];
		} else {
			return peote_text_Glyph_$_$Main_$MyFontStyle.FORMULA_CUSTOMS.split(",");
		}
	}
	,getMaxZindex: function() {
		return 2097151;
	}
	,hasAlpha: function() {
		return false;
	}
	,hasZindex: function() {
		return false;
	}
	,hasPicking: function() {
		return false;
	}
	,needFragmentPrecision: function() {
		return false;
	}
	,bindAttribLocations: function(gl,glProgram) {
		if(peote_view_Version.isINSTANCED) {
			gl.bindAttribLocation(glProgram,3,"aColorStart0");
			gl.bindAttribLocation(glProgram,1,"aPos");
			gl.bindAttribLocation(glProgram,2,"aSize");
			gl.bindAttribLocation(glProgram,4,"aFloat0");
			gl.bindAttribLocation(glProgram,0,"aPosition");
		} else {
			gl.bindAttribLocation(glProgram,3,"aColorStart0");
			gl.bindAttribLocation(glProgram,1,"aPos");
			gl.bindAttribLocation(glProgram,2,"aSize");
			gl.bindAttribLocation(glProgram,4,"aFloat0");
			gl.bindAttribLocation(glProgram,0,"aPosition");
		}
	}
	,render: function(peoteView,display,program) {
		var toElement = this._maxElements;
		if(peote_view_Version.isINSTANCED) {
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(this._glVAO);
			} else {
				var gl = this._gl;
				var glBuffer = this._glBuffer;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
				gl.enableVertexAttribArray(0);
				gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,2,0);
				gl.bindBuffer(gl.ARRAY_BUFFER,glBuffer);
				gl.enableVertexAttribArray(3);
				gl.vertexAttribPointer(3,4,gl.UNSIGNED_BYTE,true,36,0);
				gl.vertexAttribDivisor(3,1);
				gl.enableVertexAttribArray(1);
				gl.vertexAttribPointer(1,2,gl.FLOAT,false,36,4);
				gl.vertexAttribDivisor(1,1);
				gl.enableVertexAttribArray(2);
				gl.vertexAttribPointer(2,2,gl.FLOAT,false,36,12);
				gl.vertexAttribDivisor(2,1);
				gl.enableVertexAttribArray(4);
				gl.vertexAttribPointer(4,4,gl.FLOAT,false,36,20);
				gl.vertexAttribDivisor(4,1);
			}
			this._gl.drawArraysInstanced(this._gl.TRIANGLE_STRIP,0,6,toElement);
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(null);
			} else {
				var gl = this._gl;
				gl.disableVertexAttribArray(0);
				gl.disableVertexAttribArray(3);
				gl.disableVertexAttribArray(1);
				gl.disableVertexAttribArray(2);
				gl.disableVertexAttribArray(4);
			}
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
		} else {
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(this._glVAO);
			} else {
				var gl = this._gl;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
				gl.enableVertexAttribArray(3);
				gl.vertexAttribPointer(3,4,gl.UNSIGNED_BYTE,true,40,0);
				gl.enableVertexAttribArray(1);
				gl.vertexAttribPointer(1,2,gl.FLOAT,false,40,4);
				gl.enableVertexAttribArray(2);
				gl.vertexAttribPointer(2,2,gl.FLOAT,false,40,12);
				gl.enableVertexAttribArray(4);
				gl.vertexAttribPointer(4,4,gl.FLOAT,false,40,20);
				gl.enableVertexAttribArray(0);
				gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,40,36);
			}
			this._gl.drawArrays(this._gl.TRIANGLE_STRIP,0,toElement * 6);
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(null);
			} else {
				var gl = this._gl;
				gl.disableVertexAttribArray(0);
				gl.disableVertexAttribArray(3);
				gl.disableVertexAttribArray(1);
				gl.disableVertexAttribArray(2);
				gl.disableVertexAttribArray(4);
			}
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
		}
	}
	,pick: function(peoteView,display,program,toElement) {
		var toElement1 = toElement < 0 ? this._maxElements : toElement;
		if(peote_view_Version.isINSTANCED) {
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(this._glVAO);
			} else {
				var gl = this._gl;
				var glBuffer = this._glBuffer;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
				gl.enableVertexAttribArray(0);
				gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,2,0);
				gl.bindBuffer(gl.ARRAY_BUFFER,glBuffer);
				gl.enableVertexAttribArray(3);
				gl.vertexAttribPointer(3,4,gl.UNSIGNED_BYTE,true,36,0);
				gl.vertexAttribDivisor(3,1);
				gl.enableVertexAttribArray(1);
				gl.vertexAttribPointer(1,2,gl.FLOAT,false,36,4);
				gl.vertexAttribDivisor(1,1);
				gl.enableVertexAttribArray(2);
				gl.vertexAttribPointer(2,2,gl.FLOAT,false,36,12);
				gl.vertexAttribDivisor(2,1);
				gl.enableVertexAttribArray(4);
				gl.vertexAttribPointer(4,4,gl.FLOAT,false,36,20);
				gl.vertexAttribDivisor(4,1);
			}
			this._gl.drawArraysInstanced(this._gl.TRIANGLE_STRIP,0,6,toElement1);
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(null);
			} else {
				var gl = this._gl;
				gl.disableVertexAttribArray(0);
				gl.disableVertexAttribArray(3);
				gl.disableVertexAttribArray(1);
				gl.disableVertexAttribArray(2);
				gl.disableVertexAttribArray(4);
			}
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
		} else {
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(this._glVAO);
			} else {
				var gl = this._gl;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
				gl.enableVertexAttribArray(3);
				gl.vertexAttribPointer(3,4,gl.UNSIGNED_BYTE,true,40,0);
				gl.enableVertexAttribArray(1);
				gl.vertexAttribPointer(1,2,gl.FLOAT,false,40,4);
				gl.enableVertexAttribArray(2);
				gl.vertexAttribPointer(2,2,gl.FLOAT,false,40,12);
				gl.enableVertexAttribArray(4);
				gl.vertexAttribPointer(4,4,gl.FLOAT,false,40,20);
				gl.enableVertexAttribArray(0);
				gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,40,36);
			}
			this._gl.drawArrays(this._gl.TRIANGLE_STRIP,0,toElement1 * 6);
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(null);
			} else {
				var gl = this._gl;
				gl.disableVertexAttribArray(0);
				gl.disableVertexAttribArray(3);
				gl.disableVertexAttribArray(1);
				gl.disableVertexAttribArray(2);
				gl.disableVertexAttribArray(4);
			}
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
		}
	}
	,__class__: peote_view_Buffer_$Glyph_$_$Main_$MyFontStyle
};
var peote_view_Buffer_$MaskElement = function(minSize,growSize,autoShrink) {
	if(autoShrink == null) {
		autoShrink = false;
	}
	if(growSize == null) {
		growSize = 0;
	}
	this._shrinkAtSize = 0;
	this._growSize = 0;
	this._maxElements = 0;
	this._glVAO = null;
	this._glInstanceBuffer = null;
	this._gl = null;
	if(minSize <= 0) {
		throw haxe_Exception.thrown("Error: Buffer need a minimum size of 1 to store an Element.");
	}
	this._minSize = minSize;
	this._growSize = growSize < 0 ? 0 : growSize;
	if(autoShrink) {
		this._shrinkAtSize = growSize + (growSize / 2 | 0);
	}
	var this1 = new Array(this._minSize);
	this._elements = this1;
	if(peote_view_Version.isINSTANCED) {
		if(peote_text_MaskElement.instanceBytes == null) {
			peote_text_MaskElement.instanceBytes = new peote_view_utils_BufferBytes(new ArrayBuffer(12));
			peote_text_MaskElement.instanceBytes.b[0] = 1;
			peote_text_MaskElement.instanceBytes.b[1] = 1;
			peote_text_MaskElement.instanceBytes.b[2] = 1;
			peote_text_MaskElement.instanceBytes.b[3] = 1;
			peote_text_MaskElement.instanceBytes.b[4] = 0;
			peote_text_MaskElement.instanceBytes.b[5] = 1;
			peote_text_MaskElement.instanceBytes.b[6] = 1;
			peote_text_MaskElement.instanceBytes.b[7] = 0;
			peote_text_MaskElement.instanceBytes.b[8] = 0;
			peote_text_MaskElement.instanceBytes.b[9] = 0;
			peote_text_MaskElement.instanceBytes.b[10] = 0;
			peote_text_MaskElement.instanceBytes.b[11] = 0;
		}
		this._elemBuffSize = 8;
	} else {
		this._elemBuffSize = 72;
	}
	this._bytes = new peote_view_utils_BufferBytes(new ArrayBuffer(this._elemBuffSize * this._minSize));
	this._bytes.fill(0,this._elemBuffSize * this._minSize,0);
};
$hxClasses["peote.view.Buffer_MaskElement"] = peote_view_Buffer_$MaskElement;
peote_view_Buffer_$MaskElement.__name__ = "peote.view.Buffer_MaskElement";
peote_view_Buffer_$MaskElement.__interfaces__ = [peote_view_BufferInterface];
peote_view_Buffer_$MaskElement.prototype = {
	setNewGLContext: function(newGl) {
		if(newGl != null && newGl != this._gl) {
			if(this._gl != null) {
				this._gl.deleteBuffer(this._glBuffer);
				if(peote_view_Version.isINSTANCED) {
					this._gl.deleteBuffer(this._glInstanceBuffer);
				}
				if(peote_view_Version.isVAO) {
					this._gl.deleteVertexArray(this._glVAO);
				}
			}
			this._gl = newGl;
			this._glBuffer = this._gl.createBuffer();
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,this._glBuffer);
			var size = this._bytes.length;
			var bytes = this._bytes;
			var this1 = new Uint8Array(bytes.b.bufferValue,0);
			this._gl.bufferData(this._gl.ARRAY_BUFFER,this1,this._gl.STREAM_DRAW);
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
			if(peote_view_Version.isINSTANCED) {
				this._glInstanceBuffer = this._gl.createBuffer();
				var gl = this._gl;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
				var size = peote_text_MaskElement.instanceBytes.length;
				var bytes = peote_text_MaskElement.instanceBytes;
				var this1 = new Uint8Array(bytes.b.bufferValue,0);
				gl.bufferData(gl.ARRAY_BUFFER,this1,gl.STATIC_DRAW);
				gl.bindBuffer(gl.ARRAY_BUFFER,null);
			}
			if(peote_view_Version.isVAO) {
				this._glVAO = this._gl.createVertexArray();
				this._gl.bindVertexArray(this._glVAO);
				if(peote_view_Version.isINSTANCED) {
					var gl = this._gl;
					var glBuffer = this._glBuffer;
					gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
					gl.enableVertexAttribArray(0);
					gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,2,0);
					gl.bindBuffer(gl.ARRAY_BUFFER,glBuffer);
					gl.enableVertexAttribArray(1);
					gl.vertexAttribPointer(1,2,gl.SHORT,false,8,0);
					gl.vertexAttribDivisor(1,1);
					gl.enableVertexAttribArray(2);
					gl.vertexAttribPointer(2,2,gl.SHORT,false,8,4);
					gl.vertexAttribDivisor(2,1);
				} else {
					var gl = this._gl;
					gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
					gl.enableVertexAttribArray(1);
					gl.vertexAttribPointer(1,2,gl.SHORT,false,12,0);
					gl.enableVertexAttribArray(2);
					gl.vertexAttribPointer(2,2,gl.SHORT,false,12,4);
					gl.enableVertexAttribArray(0);
					gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,12,8);
				}
				this._gl.bindVertexArray(null);
			}
		}
	}
	,updateElement: function(element) {
		if(peote_view_Version.isINSTANCED) {
			var bytes = this._bytes;
			bytes.b_Uint16[element.bytePos >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 2 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 4 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 6 >> 1] = element.h & 65535;
		} else {
			var bytes = this._bytes;
			bytes.b_Uint16[element.bytePos >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 2 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 4 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 6 >> 1] = element.h & 65535;
			bytes.b[element.bytePos + 8] = 1;
			bytes.b[element.bytePos + 9] = 1;
			bytes.b_Uint16[element.bytePos + 12 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 14 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 16 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 18 >> 1] = element.h & 65535;
			bytes.b[element.bytePos + 20] = 1;
			bytes.b[element.bytePos + 21] = 1;
			bytes.b_Uint16[element.bytePos + 24 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 26 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 28 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 30 >> 1] = element.h & 65535;
			bytes.b[element.bytePos + 32] = 0;
			bytes.b[element.bytePos + 33] = 1;
			bytes.b_Uint16[element.bytePos + 36 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 38 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 40 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 42 >> 1] = element.h & 65535;
			bytes.b[element.bytePos + 44] = 1;
			bytes.b[element.bytePos + 45] = 0;
			bytes.b_Uint16[element.bytePos + 48 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 50 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 52 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 54 >> 1] = element.h & 65535;
			bytes.b[element.bytePos + 56] = 0;
			bytes.b[element.bytePos + 57] = 0;
			bytes.b_Uint16[element.bytePos + 60 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 62 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 64 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 66 >> 1] = element.h & 65535;
			bytes.b[element.bytePos + 68] = 0;
			bytes.b[element.bytePos + 69] = 0;
		}
		if(element.bytePos == -1) {
			throw haxe_Exception.thrown("Error, Element is not added to Buffer");
		}
		if(this._gl != null) {
			var gl = this._gl;
			var elemBuffSize = this._elemBuffSize;
			gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
			gl.bufferSubData(gl.ARRAY_BUFFER,element.bytePos,element.bufferPointer);
			gl.bindBuffer(gl.ARRAY_BUFFER,null);
		}
	}
	,addElement: function(element) {
		if(element.bytePos == -1) {
			if(this._maxElements == this._elements.length) {
				if(this._growSize == 0) {
					throw haxe_Exception.thrown("Error: Can't add new Element. Buffer is full and automatic growing Buffersize is disabled.");
				}
				var newSize = this._maxElements + this._growSize;
				var _newBytes = new peote_view_utils_BufferBytes(new ArrayBuffer(this._elemBuffSize * newSize));
				_newBytes.blit(0,this._bytes,0,this._elemBuffSize * this._maxElements);
				this._bytes = _newBytes;
				var this1 = new Array(newSize);
				var _newElements = this1;
				var _g = 0;
				var _g1 = this._maxElements;
				while(_g < _g1) {
					var i = _g++;
					var element1 = this._elements[i];
					var bytes = this._bytes;
					var offset = element1.bytePos;
					var size = this._elemBuffSize;
					if(size == null) {
						size = 0;
					}
					if(offset == null) {
						offset = 0;
					}
					var this1;
					if(size > 0) {
						this1 = new Uint8Array(bytes.b.bufferValue,offset,size);
					} else {
						this1 = new Uint8Array(bytes.b.bufferValue,offset);
					}
					element1.bufferPointer = this1;
					_newElements[i] = element1;
				}
				this._elements = _newElements;
				if(this._gl != null) {
					this._gl.deleteBuffer(this._glBuffer);
					this._glBuffer = this._gl.createBuffer();
					this._gl.bindBuffer(this._gl.ARRAY_BUFFER,this._glBuffer);
					var size = this._bytes.length;
					var bytes = this._bytes;
					var this1 = new Uint8Array(bytes.b.bufferValue,0);
					this._gl.bufferData(this._gl.ARRAY_BUFFER,this1,this._gl.STREAM_DRAW);
					this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
					if(peote_view_Version.isVAO) {
						this._gl.bindVertexArray(this._glVAO);
						if(peote_view_Version.isINSTANCED) {
							var gl = this._gl;
							var glBuffer = this._glBuffer;
							gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
							gl.enableVertexAttribArray(0);
							gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,2,0);
							gl.bindBuffer(gl.ARRAY_BUFFER,glBuffer);
							gl.enableVertexAttribArray(1);
							gl.vertexAttribPointer(1,2,gl.SHORT,false,8,0);
							gl.vertexAttribDivisor(1,1);
							gl.enableVertexAttribArray(2);
							gl.vertexAttribPointer(2,2,gl.SHORT,false,8,4);
							gl.vertexAttribDivisor(2,1);
						} else {
							var gl = this._gl;
							gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
							gl.enableVertexAttribArray(1);
							gl.vertexAttribPointer(1,2,gl.SHORT,false,12,0);
							gl.enableVertexAttribArray(2);
							gl.vertexAttribPointer(2,2,gl.SHORT,false,12,4);
							gl.enableVertexAttribArray(0);
							gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,12,8);
						}
						this._gl.bindVertexArray(null);
					}
				}
			}
			element.bytePos = this._maxElements * this._elemBuffSize;
			var bytes = this._bytes;
			var offset = element.bytePos;
			var size = this._elemBuffSize;
			if(size == null) {
				size = 0;
			}
			if(offset == null) {
				offset = 0;
			}
			var this1;
			if(size > 0) {
				this1 = new Uint8Array(bytes.b.bufferValue,offset,size);
			} else {
				this1 = new Uint8Array(bytes.b.bufferValue,offset);
			}
			element.bufferPointer = this1;
			this._elements[this._maxElements++] = element;
			this.updateElement(element);
		} else {
			throw haxe_Exception.thrown("Error: Element is already inside a Buffer");
		}
	}
	,getVertexShader: function() {
		return "\n\t::if isES3::#version 300 es::end::\n\t::if VERTEX_INT_PRECISION::precision ::VERTEX_INT_PRECISION:: int; ::end::\n\t::if VERTEX_FLOAT_PRECISION::precision ::VERTEX_FLOAT_PRECISION:: float; ::end::\n\t::if VERTEX_SAMPLER_PRECISION::precision ::VERTEX_SAMPLER_PRECISION:: sampler2D; ::end::\n\t\n\t// Uniforms -------------------------\n\t::if (!isPICKING && isUBO)::\n\t//layout(std140) uniform uboView\n\tuniform uboView\n\t{\n\t\tvec2 uResolution;\n\t\tvec2 uViewOffset;\n\t\tvec2 uViewZoom;\n\t};\n\t//layout(std140) uniform uboDisplay\n\tuniform uboDisplay\n\t{\n\t\tvec2 uOffset;\n\t\tvec2 uZoom;\n\t};\n\t::else::\n\tuniform vec2 uResolution;\n\tuniform vec2 uOffset;\n\tuniform vec2 uZoom;\n\t::end::\n\t\n\t\n\t\n\t// Attributes -------------------------\n\t::IN:: vec2 aPosition;\n\t\n\t::if isPICKING::\n\t\t::if !isINSTANCED::\n\t\t\t::IN:: vec4 aElement;\n\t\t::end::\n\t::end::\n\t\n\t::IN:: vec2 aPos;\n\t::IN:: vec2 aSize;\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t// Varyings ---------------------------\n\t::if isPICKING::\n\t\t::if isINSTANCED::\n\t\t\tflat ::VAROUT:: int vElement;\n\t\t::else::\n\t\t\t::VAROUT:: vec4 vElement;\n\t\t::end::\n\t::end::\n\t\n\t\n\t\n\t\n\t::if (hasTEXTURES || hasFRAGMENT_INJECTION)::\n\t\t::VAROUT:: vec2 vTexCoord;\n\t\t\n\t::end::\t\n\n\t// custom functions -------------------\n\t::VERTEX_INJECTION::\n\n\t// --------- vertex main --------------\n\tvoid main(void)\n\t{\n\t\t\n\t\tvec2 size = ::if SIZE_FORMULA::::SIZE_FORMULA::::else::aSize::end::;\n\t\t\t\t\n\t\t\n\t\tvec2 pos = ::if POS_FORMULA::::POS_FORMULA::::else::aPos::end::;\npos = pos + aPosition * size;\n\t\t\n\n\t\t\n\n\t\t::if (hasTEXTURES || hasFRAGMENT_INJECTION)::\n\t\t\tvTexCoord = aPosition;\t\t\t\n\t\t\t\n\t\t::end::\n\t\t\n\t\t::if isPICKING::\n\t\t\t::if isINSTANCED::\n\t\t\t\tvElement = gl_InstanceID + 1;\n\t\t\t::else::\n\t\t\t\tvElement = aElement;\n\t\t\t::end::\n\t\t::end::\n\t\t\n\t\tfloat width = uResolution.x;\n\t\tfloat height = uResolution.y;\n\t\t::if (!isPICKING && isUBO)::\n\t\tfloat deltaX = (uOffset.x  + uViewOffset.x) / uZoom.x;\n\t\tfloat deltaY = (uOffset.y  + uViewOffset.y) / uZoom.y;\n\t\tvec2 zoom = uZoom * uViewZoom;\n\t\t::else::\n\t\tfloat deltaX = uOffset.x;\n\t\tfloat deltaY = uOffset.y;\n\t\tvec2 zoom = uZoom;\n\t\t::end::\n\t\t\n\t\t::if isPIXELSNAPPING::\n\t\tpos = floor( pos * ::PIXELDIVISOR:: * zoom ) / ::PIXELDIVISOR:: / zoom;\n\t\t::end::\n\t\t\n\t\tgl_Position = vec4 (\n\t\t\t 2.0 * zoom.x/width  * (pos.x + deltaX) - 1.0,\n\t\t\t-2.0 * zoom.y/height * (pos.y + deltaY) + 1.0,\n\t\t\t- 0.0,\n\t\t\t1.0\n\t\t);\t\t\n\t\t\n\t}\n\t";
	}
	,getFragmentShader: function() {
		return "\n\t::if isES3::#version 300 es::end::\n\t::foreach FRAGMENT_EXTENSIONS::#extension ::EXTENSION:: : enable\n\t::end::\n\t\n\t::if FRAGMENT_INT_PRECISION::precision ::FRAGMENT_INT_PRECISION:: int; ::end::\n\t::if FRAGMENT_FLOAT_PRECISION::precision ::FRAGMENT_FLOAT_PRECISION:: float; ::end::\n\t::if FRAGMENT_SAMPLER_PRECISION::precision ::FRAGMENT_SAMPLER_PRECISION:: sampler2D; ::end::\n\t\n\t// Uniforms -------------------------\t\n\t::FRAGMENT_PROGRAM_UNIFORMS::\n\t\n\t// Varyings ---------------------------\n\t::if isPICKING::\n\t\t::if isINSTANCED::\n\t\t\tflat ::VARIN:: int vElement;\n\t\t::else::\n\t\t\t::VARIN:: vec4 vElement;\n\t\t::end::\n\t::end::\n\n\t\n\t\n\t\t\t\n\t::if (hasTEXTURES || hasFRAGMENT_INJECTION)::\n\t\t::VARIN:: vec2 vTexCoord;\n\t\t\n\t::end::\t\n\t\n\t\n\t::if isES3::\n\t\t::if (isPICKING && isINSTANCED)::\n\t\t\tout int Color;\n\t\t::else::\n\t\t\tout vec4 Color;\n\t\t::end::\n\t::end::\n\n\t::if hasTEXTURE_FUNCTIONS::\n\t\t// function to get texture color\n\t\tvec4 getTextureColor(int TXTNUM, vec2 vTexCoord) {\n\t\t::foreach TEXTURES::\n\t\t\t\n\t\t\t::if (LAYER >= 0)::\n\t\t\t::if USED_ID::\n\t\t\t\tif (TXTNUM == ::LAYER::) {\n\t\t\t\t\t::foreach UNITS::\n\t\t\t\t\t::if !FIRST ::else ::end::::if !LAST ::if (0.0 < ::UNIT_VALUE::)::end::\n\t\t\t\t\t\treturn(texture::if !isES3::2D::end::(::TEXTURE::, vec2(vTexCoord.x * ::SLOTS_WIDTH::, vTexCoord.y * ::SLOTS_HEIGHT::)));\n\t\t\t\t\t::end::\n\t\t\t\t}\n\t\t\t::end::\n\t\t\t::end::\n\t\t\t\n\t\t::end::\n\t\t// default values:\n\t\t::foreach TEXTURE_DEFAULTS::\n\t\t\tif (TXTNUM == ::LAYER::) {return(::DEFAULT_VALUE::);}\t\t\n\t\t::end::\n\t\t}\n\t::else:: \n\t\t::if hasFRAGMENT_INJECTION::#define getTextureColor(a,b) vec4(0.0,0.0,0.0,0.0)::end::\n\t::end::\n\n\t::if hasTEXTURE_FUNCTIONS::\n\t\t// function to get full texture size\n\t\tvec2 getTextureResolution(int TXTNUM) {\n\t\t::foreach TEXTURES::\n\t\t\t\n\t\t\t::if (LAYER >= 0)::\n\t\t\t::if USED_ID::\n\t\t\t\tif (TXTNUM == ::LAYER::) {\n\t\t\t\t\t::foreach UNITS::\n\t\t\t\t\t::if !FIRST ::else ::end::::if !LAST ::if (0.0 < ::UNIT_VALUE::)::end::\n\t\t\t\t\t\treturn( vec2(::TEXTURE_WIDTH::, ::TEXTURE_HEIGHT::) );\n\t\t\t\t\t::end::\n\t\t\t\t}\n\t\t\t::end::\n\t\t\t::end::\n\t\t\t\n\t\t::end::\n\t\t// default values:\n\t\t::foreach TEXTURE_DEFAULTS::\n\t\t\tif (TXTNUM == ::LAYER::) {return(vec2(0.0,0.0));}\t\t\n\t\t::end::\n\t\t}\n\t::else:: \n\t\t::if hasFRAGMENT_INJECTION::#define getTextureResolution(a) vec2(0.0,0.0)::end::\n\t::end::\n\n\t// custom functions -------------------\n\t::FRAGMENT_INJECTION::\n\t\n\t// --------- fragment main ------------\n\tvoid main(void)\n\t{\t\n\t\t\n\t\t\n\t\t::if hasTEXTURES::\n\t\t\t::foreach TEXTURES::\n\t\t\t\t// ------------- LAYER ::LAYER:: --------------\n\t\t\t\t\n\t\t\t\t::if (LAYER >= 0)::\n\t\t\t\t::if USED::\n\t\t\t\t\tvec4 t::LAYER::;\n\t\t\t\t\t::foreach UNITS::\n\t\t\t\t\t::if !FIRST ::else ::end::::if !LAST ::if (0.0 < ::UNIT_VALUE::)::end::\n\t\t\t\t\t\tt::LAYER:: = texture::if !isES3::2D::end::(::TEXTURE::, vec2(vTexCoord.x * ::SLOTS_WIDTH::, vTexCoord.y * ::SLOTS_HEIGHT::));\n\t\t\t\t\t::end::\n\t\t\t\t::end::\n\t\t\t\t::end::\n\t\t\t\t\n\t\t\t::end::\n\t\t::end::\n\t\t\n\t\t// calc final color from all layers\n\t\tvec4 col = ::FRAGMENT_CALC_LAYER::;\n\t\t\n\t\t::if isDISCARD:: \n\t\t\tif (col.a <= ::DISCARD::) discard;\n\t\t::end::\n\t\t\n\t\t::if isPICKING::\n\t\t\t::if !isES3::gl_Frag::end::Color = vElement;\n\t\t::else::\n\t\t\t::if !isES3::gl_Frag::end::Color = col;\n\t\t\t// this fixing problem on old FF if alpha goes zero\n\t\t\t::if !isES3::gl_Frag::end::Color.w = clamp(::if !isES3::gl_Frag::end::Color.w, 0.003, 1.0);\n\t\t::end::\n\t}\n\t";
	}
	,getTextureIdentifiers: function() {
		return [];
	}
	,getColorIdentifiers: function() {
		return [];
	}
	,getCustomIdentifiers: function() {
		return [];
	}
	,getCustomVaryings: function() {
		return [];
	}
	,getDefaultColorFormula: function() {
		return "";
	}
	,getDefaultFormulaVars: function() {
		return peote_text_MaskElement.DEFAULT_FORMULA_VARS;
	}
	,getFormulas: function() {
		return peote_text_MaskElement.FORMULAS;
	}
	,getAttributes: function() {
		return peote_text_MaskElement.ATTRIBUTES;
	}
	,getFormulaNames: function() {
		return peote_text_MaskElement.FORMULA_NAMES;
	}
	,getFormulaVaryings: function() {
		if(peote_text_MaskElement.FORMULA_VARYINGS == "") {
			return [];
		} else {
			return peote_text_MaskElement.FORMULA_VARYINGS.split(",");
		}
	}
	,getFormulaConstants: function() {
		if(peote_text_MaskElement.FORMULA_CONSTANTS == "") {
			return [];
		} else {
			return peote_text_MaskElement.FORMULA_CONSTANTS.split(",");
		}
	}
	,getFormulaCustoms: function() {
		if(peote_text_MaskElement.FORMULA_CUSTOMS == "") {
			return [];
		} else {
			return peote_text_MaskElement.FORMULA_CUSTOMS.split(",");
		}
	}
	,getMaxZindex: function() {
		return 2097151;
	}
	,hasAlpha: function() {
		return false;
	}
	,hasZindex: function() {
		return false;
	}
	,hasPicking: function() {
		return false;
	}
	,needFragmentPrecision: function() {
		return false;
	}
	,bindAttribLocations: function(gl,glProgram) {
		if(peote_view_Version.isINSTANCED) {
			gl.bindAttribLocation(glProgram,1,"aPos");
			gl.bindAttribLocation(glProgram,2,"aSize");
			gl.bindAttribLocation(glProgram,0,"aPosition");
		} else {
			gl.bindAttribLocation(glProgram,1,"aPos");
			gl.bindAttribLocation(glProgram,2,"aSize");
			gl.bindAttribLocation(glProgram,0,"aPosition");
		}
	}
	,render: function(peoteView,display,program) {
		var toElement = this._maxElements;
		if(peote_view_Version.isINSTANCED) {
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(this._glVAO);
			} else {
				var gl = this._gl;
				var glBuffer = this._glBuffer;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
				gl.enableVertexAttribArray(0);
				gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,2,0);
				gl.bindBuffer(gl.ARRAY_BUFFER,glBuffer);
				gl.enableVertexAttribArray(1);
				gl.vertexAttribPointer(1,2,gl.SHORT,false,8,0);
				gl.vertexAttribDivisor(1,1);
				gl.enableVertexAttribArray(2);
				gl.vertexAttribPointer(2,2,gl.SHORT,false,8,4);
				gl.vertexAttribDivisor(2,1);
			}
			this._gl.drawArraysInstanced(this._gl.TRIANGLE_STRIP,0,6,toElement);
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(null);
			} else {
				var gl = this._gl;
				gl.disableVertexAttribArray(0);
				gl.disableVertexAttribArray(1);
				gl.disableVertexAttribArray(2);
			}
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
		} else {
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(this._glVAO);
			} else {
				var gl = this._gl;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
				gl.enableVertexAttribArray(1);
				gl.vertexAttribPointer(1,2,gl.SHORT,false,12,0);
				gl.enableVertexAttribArray(2);
				gl.vertexAttribPointer(2,2,gl.SHORT,false,12,4);
				gl.enableVertexAttribArray(0);
				gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,12,8);
			}
			this._gl.drawArrays(this._gl.TRIANGLE_STRIP,0,toElement * 6);
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(null);
			} else {
				var gl = this._gl;
				gl.disableVertexAttribArray(0);
				gl.disableVertexAttribArray(1);
				gl.disableVertexAttribArray(2);
			}
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
		}
	}
	,pick: function(peoteView,display,program,toElement) {
		var toElement1 = toElement < 0 ? this._maxElements : toElement;
		if(peote_view_Version.isINSTANCED) {
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(this._glVAO);
			} else {
				var gl = this._gl;
				var glBuffer = this._glBuffer;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
				gl.enableVertexAttribArray(0);
				gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,2,0);
				gl.bindBuffer(gl.ARRAY_BUFFER,glBuffer);
				gl.enableVertexAttribArray(1);
				gl.vertexAttribPointer(1,2,gl.SHORT,false,8,0);
				gl.vertexAttribDivisor(1,1);
				gl.enableVertexAttribArray(2);
				gl.vertexAttribPointer(2,2,gl.SHORT,false,8,4);
				gl.vertexAttribDivisor(2,1);
			}
			this._gl.drawArraysInstanced(this._gl.TRIANGLE_STRIP,0,6,toElement1);
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(null);
			} else {
				var gl = this._gl;
				gl.disableVertexAttribArray(0);
				gl.disableVertexAttribArray(1);
				gl.disableVertexAttribArray(2);
			}
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
		} else {
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(this._glVAO);
			} else {
				var gl = this._gl;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
				gl.enableVertexAttribArray(1);
				gl.vertexAttribPointer(1,2,gl.SHORT,false,12,0);
				gl.enableVertexAttribArray(2);
				gl.vertexAttribPointer(2,2,gl.SHORT,false,12,4);
				gl.enableVertexAttribArray(0);
				gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,12,8);
			}
			this._gl.drawArrays(this._gl.TRIANGLE_STRIP,0,toElement1 * 6);
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(null);
			} else {
				var gl = this._gl;
				gl.disableVertexAttribArray(0);
				gl.disableVertexAttribArray(1);
				gl.disableVertexAttribArray(2);
			}
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
		}
	}
	,__class__: peote_view_Buffer_$MaskElement
};
var peote_view_Buffer_$Pickable = function(minSize,growSize,autoShrink) {
	if(autoShrink == null) {
		autoShrink = false;
	}
	if(growSize == null) {
		growSize = 0;
	}
	this._shrinkAtSize = 0;
	this._growSize = 0;
	this._maxElements = 0;
	this._glVAO = null;
	this._glInstanceBuffer = null;
	this._gl = null;
	if(minSize <= 0) {
		throw haxe_Exception.thrown("Error: Buffer need a minimum size of 1 to store an Element.");
	}
	this._minSize = minSize;
	this._growSize = growSize < 0 ? 0 : growSize;
	if(autoShrink) {
		this._shrinkAtSize = growSize + (growSize / 2 | 0);
	}
	var this1 = new Array(this._minSize);
	this._elements = this1;
	if(peote_view_Version.isINSTANCED) {
		if(peote_ui_interactive_Pickable.instanceBytes == null) {
			peote_ui_interactive_Pickable.instanceBytes = new peote_view_utils_BufferBytes(new ArrayBuffer(12));
			peote_ui_interactive_Pickable.instanceBytes.b[0] = 1;
			peote_ui_interactive_Pickable.instanceBytes.b[1] = 1;
			peote_ui_interactive_Pickable.instanceBytes.b[2] = 1;
			peote_ui_interactive_Pickable.instanceBytes.b[3] = 1;
			peote_ui_interactive_Pickable.instanceBytes.b[4] = 0;
			peote_ui_interactive_Pickable.instanceBytes.b[5] = 1;
			peote_ui_interactive_Pickable.instanceBytes.b[6] = 1;
			peote_ui_interactive_Pickable.instanceBytes.b[7] = 0;
			peote_ui_interactive_Pickable.instanceBytes.b[8] = 0;
			peote_ui_interactive_Pickable.instanceBytes.b[9] = 0;
			peote_ui_interactive_Pickable.instanceBytes.b[10] = 0;
			peote_ui_interactive_Pickable.instanceBytes.b[11] = 0;
		}
		this._elemBuffSize = 12;
	} else {
		this._elemBuffSize = 120;
	}
	this._bytes = new peote_view_utils_BufferBytes(new ArrayBuffer(this._elemBuffSize * this._minSize));
	this._bytes.fill(0,this._elemBuffSize * this._minSize,0);
};
$hxClasses["peote.view.Buffer_Pickable"] = peote_view_Buffer_$Pickable;
peote_view_Buffer_$Pickable.__name__ = "peote.view.Buffer_Pickable";
peote_view_Buffer_$Pickable.__interfaces__ = [peote_view_BufferInterface];
peote_view_Buffer_$Pickable.prototype = {
	setNewGLContext: function(newGl) {
		if(newGl != null && newGl != this._gl) {
			if(this._gl != null) {
				this._gl.deleteBuffer(this._glBuffer);
				if(peote_view_Version.isINSTANCED) {
					this._gl.deleteBuffer(this._glInstanceBuffer);
				}
				if(peote_view_Version.isVAO) {
					this._gl.deleteVertexArray(this._glVAO);
				}
			}
			this._gl = newGl;
			this._glBuffer = this._gl.createBuffer();
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,this._glBuffer);
			var size = this._bytes.length;
			var bytes = this._bytes;
			var this1 = new Uint8Array(bytes.b.bufferValue,0);
			this._gl.bufferData(this._gl.ARRAY_BUFFER,this1,this._gl.STREAM_DRAW);
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
			if(peote_view_Version.isINSTANCED) {
				this._glInstanceBuffer = this._gl.createBuffer();
				var gl = this._gl;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
				var size = peote_ui_interactive_Pickable.instanceBytes.length;
				var bytes = peote_ui_interactive_Pickable.instanceBytes;
				var this1 = new Uint8Array(bytes.b.bufferValue,0);
				gl.bufferData(gl.ARRAY_BUFFER,this1,gl.STATIC_DRAW);
				gl.bindBuffer(gl.ARRAY_BUFFER,null);
			}
			if(peote_view_Version.isVAO) {
				this._glVAO = this._gl.createVertexArray();
				this._gl.bindVertexArray(this._glVAO);
				if(peote_view_Version.isINSTANCED) {
					var gl = this._gl;
					var glBuffer = this._glBuffer;
					gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
					gl.enableVertexAttribArray(0);
					gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,2,0);
					gl.bindBuffer(gl.ARRAY_BUFFER,glBuffer);
					gl.enableVertexAttribArray(3);
					gl.vertexAttribPointer(3,1,gl.FLOAT,false,12,0);
					gl.vertexAttribDivisor(3,1);
					gl.enableVertexAttribArray(1);
					gl.vertexAttribPointer(1,2,gl.SHORT,false,12,4);
					gl.vertexAttribDivisor(1,1);
					gl.enableVertexAttribArray(2);
					gl.vertexAttribPointer(2,2,gl.SHORT,false,12,8);
					gl.vertexAttribDivisor(2,1);
				} else {
					var gl = this._gl;
					gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
					gl.enableVertexAttribArray(4);
					gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,20,0);
					gl.enableVertexAttribArray(3);
					gl.vertexAttribPointer(3,1,gl.FLOAT,false,20,4);
					gl.enableVertexAttribArray(1);
					gl.vertexAttribPointer(1,2,gl.SHORT,false,20,8);
					gl.enableVertexAttribArray(2);
					gl.vertexAttribPointer(2,2,gl.SHORT,false,20,12);
					gl.enableVertexAttribArray(0);
					gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,20,16);
				}
				this._gl.bindVertexArray(null);
			}
		}
	}
	,updateElement: function(element) {
		if(peote_view_Version.isINSTANCED) {
			var bytes = this._bytes;
			bytes.b_UFloat32[element.bytePos >> 2] = Math.min(1.0,Math.max(-1.0,element.z / 2097151));
			bytes.b_Uint16[element.bytePos + 4 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 6 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 8 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 10 >> 1] = element.h & 65535;
		} else {
			var bytes = this._bytes;
			bytes.b_Int32[element.bytePos >> 2] = 1 + element.bytePos / 120 | 0;
			bytes.b_UFloat32[element.bytePos + 4 >> 2] = Math.min(1.0,Math.max(-1.0,element.z / 2097151));
			bytes.b_Uint16[element.bytePos + 8 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 10 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 12 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 14 >> 1] = element.h & 65535;
			bytes.b[element.bytePos + 16] = 1;
			bytes.b[element.bytePos + 17] = 1;
			bytes.b_Int32[element.bytePos + 20 >> 2] = 1 + element.bytePos / 120 | 0;
			bytes.b_UFloat32[element.bytePos + 24 >> 2] = Math.min(1.0,Math.max(-1.0,element.z / 2097151));
			bytes.b_Uint16[element.bytePos + 28 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 30 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 32 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 34 >> 1] = element.h & 65535;
			bytes.b[element.bytePos + 36] = 1;
			bytes.b[element.bytePos + 37] = 1;
			bytes.b_Int32[element.bytePos + 40 >> 2] = 1 + element.bytePos / 120 | 0;
			bytes.b_UFloat32[element.bytePos + 44 >> 2] = Math.min(1.0,Math.max(-1.0,element.z / 2097151));
			bytes.b_Uint16[element.bytePos + 48 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 50 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 52 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 54 >> 1] = element.h & 65535;
			bytes.b[element.bytePos + 56] = 0;
			bytes.b[element.bytePos + 57] = 1;
			bytes.b_Int32[element.bytePos + 60 >> 2] = 1 + element.bytePos / 120 | 0;
			bytes.b_UFloat32[element.bytePos + 64 >> 2] = Math.min(1.0,Math.max(-1.0,element.z / 2097151));
			bytes.b_Uint16[element.bytePos + 68 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 70 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 72 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 74 >> 1] = element.h & 65535;
			bytes.b[element.bytePos + 76] = 1;
			bytes.b[element.bytePos + 77] = 0;
			bytes.b_Int32[element.bytePos + 80 >> 2] = 1 + element.bytePos / 120 | 0;
			bytes.b_UFloat32[element.bytePos + 84 >> 2] = Math.min(1.0,Math.max(-1.0,element.z / 2097151));
			bytes.b_Uint16[element.bytePos + 88 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 90 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 92 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 94 >> 1] = element.h & 65535;
			bytes.b[element.bytePos + 96] = 0;
			bytes.b[element.bytePos + 97] = 0;
			bytes.b_Int32[element.bytePos + 100 >> 2] = 1 + element.bytePos / 120 | 0;
			bytes.b_UFloat32[element.bytePos + 104 >> 2] = Math.min(1.0,Math.max(-1.0,element.z / 2097151));
			bytes.b_Uint16[element.bytePos + 108 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 110 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 112 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 114 >> 1] = element.h & 65535;
			bytes.b[element.bytePos + 116] = 0;
			bytes.b[element.bytePos + 117] = 0;
		}
		if(element.bytePos == -1) {
			throw haxe_Exception.thrown("Error, Element is not added to Buffer");
		}
		if(this._gl != null) {
			var gl = this._gl;
			var elemBuffSize = this._elemBuffSize;
			gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
			gl.bufferSubData(gl.ARRAY_BUFFER,element.bytePos,element.bufferPointer);
			gl.bindBuffer(gl.ARRAY_BUFFER,null);
		}
	}
	,addElement: function(element) {
		if(element.bytePos == -1) {
			if(this._maxElements == this._elements.length) {
				if(this._growSize == 0) {
					throw haxe_Exception.thrown("Error: Can't add new Element. Buffer is full and automatic growing Buffersize is disabled.");
				}
				var newSize = this._maxElements + this._growSize;
				var _newBytes = new peote_view_utils_BufferBytes(new ArrayBuffer(this._elemBuffSize * newSize));
				_newBytes.blit(0,this._bytes,0,this._elemBuffSize * this._maxElements);
				this._bytes = _newBytes;
				var this1 = new Array(newSize);
				var _newElements = this1;
				var _g = 0;
				var _g1 = this._maxElements;
				while(_g < _g1) {
					var i = _g++;
					var element1 = this._elements[i];
					var bytes = this._bytes;
					var offset = element1.bytePos;
					var size = this._elemBuffSize;
					if(size == null) {
						size = 0;
					}
					if(offset == null) {
						offset = 0;
					}
					var this1;
					if(size > 0) {
						this1 = new Uint8Array(bytes.b.bufferValue,offset,size);
					} else {
						this1 = new Uint8Array(bytes.b.bufferValue,offset);
					}
					element1.bufferPointer = this1;
					_newElements[i] = element1;
				}
				this._elements = _newElements;
				if(this._gl != null) {
					this._gl.deleteBuffer(this._glBuffer);
					this._glBuffer = this._gl.createBuffer();
					this._gl.bindBuffer(this._gl.ARRAY_BUFFER,this._glBuffer);
					var size = this._bytes.length;
					var bytes = this._bytes;
					var this1 = new Uint8Array(bytes.b.bufferValue,0);
					this._gl.bufferData(this._gl.ARRAY_BUFFER,this1,this._gl.STREAM_DRAW);
					this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
					if(peote_view_Version.isVAO) {
						this._gl.bindVertexArray(this._glVAO);
						if(peote_view_Version.isINSTANCED) {
							var gl = this._gl;
							var glBuffer = this._glBuffer;
							gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
							gl.enableVertexAttribArray(0);
							gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,2,0);
							gl.bindBuffer(gl.ARRAY_BUFFER,glBuffer);
							gl.enableVertexAttribArray(3);
							gl.vertexAttribPointer(3,1,gl.FLOAT,false,12,0);
							gl.vertexAttribDivisor(3,1);
							gl.enableVertexAttribArray(1);
							gl.vertexAttribPointer(1,2,gl.SHORT,false,12,4);
							gl.vertexAttribDivisor(1,1);
							gl.enableVertexAttribArray(2);
							gl.vertexAttribPointer(2,2,gl.SHORT,false,12,8);
							gl.vertexAttribDivisor(2,1);
						} else {
							var gl = this._gl;
							gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
							gl.enableVertexAttribArray(4);
							gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,20,0);
							gl.enableVertexAttribArray(3);
							gl.vertexAttribPointer(3,1,gl.FLOAT,false,20,4);
							gl.enableVertexAttribArray(1);
							gl.vertexAttribPointer(1,2,gl.SHORT,false,20,8);
							gl.enableVertexAttribArray(2);
							gl.vertexAttribPointer(2,2,gl.SHORT,false,20,12);
							gl.enableVertexAttribArray(0);
							gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,20,16);
						}
						this._gl.bindVertexArray(null);
					}
				}
			}
			element.bytePos = this._maxElements * this._elemBuffSize;
			var bytes = this._bytes;
			var offset = element.bytePos;
			var size = this._elemBuffSize;
			if(size == null) {
				size = 0;
			}
			if(offset == null) {
				offset = 0;
			}
			var this1;
			if(size > 0) {
				this1 = new Uint8Array(bytes.b.bufferValue,offset,size);
			} else {
				this1 = new Uint8Array(bytes.b.bufferValue,offset);
			}
			element.bufferPointer = this1;
			this._elements[this._maxElements++] = element;
			this.updateElement(element);
		} else {
			throw haxe_Exception.thrown("Error: Element is already inside a Buffer");
		}
	}
	,removeElement: function(element) {
		if(element.bytePos != -1) {
			if(this._maxElements > 1 && element.bytePos < (this._maxElements - 1) * this._elemBuffSize) {
				var lastElement = this._elements[--this._maxElements];
				lastElement.bytePos = element.bytePos;
				var bytes = this._bytes;
				var offset = element.bytePos;
				var size = this._elemBuffSize;
				if(size == null) {
					size = 0;
				}
				if(offset == null) {
					offset = 0;
				}
				var this1;
				if(size > 0) {
					this1 = new Uint8Array(bytes.b.bufferValue,offset,size);
				} else {
					this1 = new Uint8Array(bytes.b.bufferValue,offset);
				}
				lastElement.bufferPointer = this1;
				this.updateElement(lastElement);
				this._elements[element.bytePos / this._elemBuffSize | 0] = lastElement;
			} else {
				this._maxElements--;
			}
			element.bytePos = -1;
			if(this._shrinkAtSize > 0 && this._elements.length - this._growSize >= this._minSize && this._maxElements <= this._elements.length - this._shrinkAtSize) {
				var newSize = this._elements.length - this._growSize;
				var _newBytes = new peote_view_utils_BufferBytes(new ArrayBuffer(this._elemBuffSize * newSize));
				_newBytes.blit(0,this._bytes,0,this._elemBuffSize * this._maxElements);
				this._bytes = _newBytes;
				var this1 = new Array(newSize);
				var _newElements = this1;
				var _g = 0;
				var _g1 = this._maxElements;
				while(_g < _g1) {
					var i = _g++;
					var element = this._elements[i];
					var bytes = this._bytes;
					var offset = element.bytePos;
					var size = this._elemBuffSize;
					if(size == null) {
						size = 0;
					}
					if(offset == null) {
						offset = 0;
					}
					var this1;
					if(size > 0) {
						this1 = new Uint8Array(bytes.b.bufferValue,offset,size);
					} else {
						this1 = new Uint8Array(bytes.b.bufferValue,offset);
					}
					element.bufferPointer = this1;
					_newElements[i] = element;
				}
				this._elements = _newElements;
				if(this._gl != null) {
					this._gl.deleteBuffer(this._glBuffer);
					this._glBuffer = this._gl.createBuffer();
					this._gl.bindBuffer(this._gl.ARRAY_BUFFER,this._glBuffer);
					var size = this._bytes.length;
					var bytes = this._bytes;
					var this1 = new Uint8Array(bytes.b.bufferValue,0);
					this._gl.bufferData(this._gl.ARRAY_BUFFER,this1,this._gl.STREAM_DRAW);
					this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
					if(peote_view_Version.isVAO) {
						this._gl.bindVertexArray(this._glVAO);
						if(peote_view_Version.isINSTANCED) {
							var gl = this._gl;
							var glBuffer = this._glBuffer;
							gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
							gl.enableVertexAttribArray(0);
							gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,2,0);
							gl.bindBuffer(gl.ARRAY_BUFFER,glBuffer);
							gl.enableVertexAttribArray(3);
							gl.vertexAttribPointer(3,1,gl.FLOAT,false,12,0);
							gl.vertexAttribDivisor(3,1);
							gl.enableVertexAttribArray(1);
							gl.vertexAttribPointer(1,2,gl.SHORT,false,12,4);
							gl.vertexAttribDivisor(1,1);
							gl.enableVertexAttribArray(2);
							gl.vertexAttribPointer(2,2,gl.SHORT,false,12,8);
							gl.vertexAttribDivisor(2,1);
						} else {
							var gl = this._gl;
							gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
							gl.enableVertexAttribArray(4);
							gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,20,0);
							gl.enableVertexAttribArray(3);
							gl.vertexAttribPointer(3,1,gl.FLOAT,false,20,4);
							gl.enableVertexAttribArray(1);
							gl.vertexAttribPointer(1,2,gl.SHORT,false,20,8);
							gl.enableVertexAttribArray(2);
							gl.vertexAttribPointer(2,2,gl.SHORT,false,20,12);
							gl.enableVertexAttribArray(0);
							gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,20,16);
						}
						this._gl.bindVertexArray(null);
					}
				}
			}
		} else {
			throw haxe_Exception.thrown("Error: Element is not inside a Buffer");
		}
	}
	,getElement: function(elementIndex) {
		return this._elements[elementIndex];
	}
	,getElementIndex: function(element) {
		if(element.bytePos != -1) {
			return element.bytePos / this._elemBuffSize | 0;
		} else {
			throw haxe_Exception.thrown("Error: Element is not inside a Buffer");
		}
	}
	,getVertexShader: function() {
		return "\n\t::if isES3::#version 300 es::end::\n\t::if VERTEX_INT_PRECISION::precision ::VERTEX_INT_PRECISION:: int; ::end::\n\t::if VERTEX_FLOAT_PRECISION::precision ::VERTEX_FLOAT_PRECISION:: float; ::end::\n\t::if VERTEX_SAMPLER_PRECISION::precision ::VERTEX_SAMPLER_PRECISION:: sampler2D; ::end::\n\t\n\t// Uniforms -------------------------\n\t::if (!isPICKING && isUBO)::\n\t//layout(std140) uniform uboView\n\tuniform uboView\n\t{\n\t\tvec2 uResolution;\n\t\tvec2 uViewOffset;\n\t\tvec2 uViewZoom;\n\t};\n\t//layout(std140) uniform uboDisplay\n\tuniform uboDisplay\n\t{\n\t\tvec2 uOffset;\n\t\tvec2 uZoom;\n\t};\n\t::else::\n\tuniform vec2 uResolution;\n\tuniform vec2 uOffset;\n\tuniform vec2 uZoom;\n\t::end::\n\t\n\t\n\t\n\t// Attributes -------------------------\n\t::IN:: vec2 aPosition;\n\t\n\t::if isPICKING::\n\t\t::if !isINSTANCED::\n\t\t\t::IN:: vec4 aElement;\n\t\t::end::\n\t::end::\n\t\n\t::IN:: vec2 aPos;\n\t::IN:: vec2 aSize;\n\t\n\t::IN:: float aRotZ;\n\t\n\t\n\t\n\t\n\t\n\t\n\t// Varyings ---------------------------\n\t::if isPICKING::\n\t\t::if isINSTANCED::\n\t\t\tflat ::VAROUT:: int vElement;\n\t\t::else::\n\t\t\t::VAROUT:: vec4 vElement;\n\t\t::end::\n\t::end::\n\t\n\t\n\t\n\t\n\t::if (hasTEXTURES || hasFRAGMENT_INJECTION)::\n\t\t::VAROUT:: vec2 vTexCoord;\n\t\t\n\t::end::\t\n\n\t// custom functions -------------------\n\t::VERTEX_INJECTION::\n\n\t// --------- vertex main --------------\n\tvoid main(void)\n\t{\n\t\t\n\t\tvec2 size = ::if SIZE_FORMULA::::SIZE_FORMULA::::else::aSize::end::;\n\t\t\t\t\n\t\tvec2 rotZ = ::if ROTZ_FORMULA::::ROTZ_FORMULA::::else::vec2( 0.0, aRotZ )::end::;\n\t\tvec2 pos = ::if POS_FORMULA::::POS_FORMULA::::else::aPos::end::;\npos = pos + aPosition * size;\n\t\t\n\n\t\t\n\n\t\t::if (hasTEXTURES || hasFRAGMENT_INJECTION)::\n\t\t\tvTexCoord = aPosition;\t\t\t\n\t\t\t\n\t\t::end::\n\t\t\n\t\t::if isPICKING::\n\t\t\t::if isINSTANCED::\n\t\t\t\tvElement = gl_InstanceID + 1;\n\t\t\t::else::\n\t\t\t\tvElement = aElement;\n\t\t\t::end::\n\t\t::end::\n\t\t\n\t\tfloat width = uResolution.x;\n\t\tfloat height = uResolution.y;\n\t\t::if (!isPICKING && isUBO)::\n\t\tfloat deltaX = (uOffset.x  + uViewOffset.x) / uZoom.x;\n\t\tfloat deltaY = (uOffset.y  + uViewOffset.y) / uZoom.y;\n\t\tvec2 zoom = uZoom * uViewZoom;\n\t\t::else::\n\t\tfloat deltaX = uOffset.x;\n\t\tfloat deltaY = uOffset.y;\n\t\tvec2 zoom = uZoom;\n\t\t::end::\n\t\t\n\t\t::if isPIXELSNAPPING::\n\t\tpos = floor( pos * ::PIXELDIVISOR:: * zoom ) / ::PIXELDIVISOR:: / zoom;\n\t\t::end::\n\t\t\n\t\tgl_Position = vec4 (\n\t\t\t 2.0 * zoom.x/width  * (pos.x + deltaX) - 1.0,\n\t\t\t-2.0 * zoom.y/height * (pos.y + deltaY) + 1.0,\n\t\t\t- rotZ.y,\n\t\t\t1.0\n\t\t);\t\t\n\t\t\n\t}\n\t";
	}
	,getFragmentShader: function() {
		return "\n\t::if isES3::#version 300 es::end::\n\t::foreach FRAGMENT_EXTENSIONS::#extension ::EXTENSION:: : enable\n\t::end::\n\t\n\t::if FRAGMENT_INT_PRECISION::precision ::FRAGMENT_INT_PRECISION:: int; ::end::\n\t::if FRAGMENT_FLOAT_PRECISION::precision ::FRAGMENT_FLOAT_PRECISION:: float; ::end::\n\t::if FRAGMENT_SAMPLER_PRECISION::precision ::FRAGMENT_SAMPLER_PRECISION:: sampler2D; ::end::\n\t\n\t// Uniforms -------------------------\t\n\t::FRAGMENT_PROGRAM_UNIFORMS::\n\t\n\t// Varyings ---------------------------\n\t::if isPICKING::\n\t\t::if isINSTANCED::\n\t\t\tflat ::VARIN:: int vElement;\n\t\t::else::\n\t\t\t::VARIN:: vec4 vElement;\n\t\t::end::\n\t::end::\n\n\t\n\t\n\t\t\t\n\t::if (hasTEXTURES || hasFRAGMENT_INJECTION)::\n\t\t::VARIN:: vec2 vTexCoord;\n\t\t\n\t::end::\t\n\t\n\t\n\t::if isES3::\n\t\t::if (isPICKING && isINSTANCED)::\n\t\t\tout int Color;\n\t\t::else::\n\t\t\tout vec4 Color;\n\t\t::end::\n\t::end::\n\n\t::if hasTEXTURE_FUNCTIONS::\n\t\t// function to get texture color\n\t\tvec4 getTextureColor(int TXTNUM, vec2 vTexCoord) {\n\t\t::foreach TEXTURES::\n\t\t\t\n\t\t\t::if (LAYER >= 0)::\n\t\t\t::if USED_ID::\n\t\t\t\tif (TXTNUM == ::LAYER::) {\n\t\t\t\t\t::foreach UNITS::\n\t\t\t\t\t::if !FIRST ::else ::end::::if !LAST ::if (0.0 < ::UNIT_VALUE::)::end::\n\t\t\t\t\t\treturn(texture::if !isES3::2D::end::(::TEXTURE::, vec2(vTexCoord.x * ::SLOTS_WIDTH::, vTexCoord.y * ::SLOTS_HEIGHT::)));\n\t\t\t\t\t::end::\n\t\t\t\t}\n\t\t\t::end::\n\t\t\t::end::\n\t\t\t\n\t\t::end::\n\t\t// default values:\n\t\t::foreach TEXTURE_DEFAULTS::\n\t\t\tif (TXTNUM == ::LAYER::) {return(::DEFAULT_VALUE::);}\t\t\n\t\t::end::\n\t\t}\n\t::else:: \n\t\t::if hasFRAGMENT_INJECTION::#define getTextureColor(a,b) vec4(0.0,0.0,0.0,0.0)::end::\n\t::end::\n\n\t::if hasTEXTURE_FUNCTIONS::\n\t\t// function to get full texture size\n\t\tvec2 getTextureResolution(int TXTNUM) {\n\t\t::foreach TEXTURES::\n\t\t\t\n\t\t\t::if (LAYER >= 0)::\n\t\t\t::if USED_ID::\n\t\t\t\tif (TXTNUM == ::LAYER::) {\n\t\t\t\t\t::foreach UNITS::\n\t\t\t\t\t::if !FIRST ::else ::end::::if !LAST ::if (0.0 < ::UNIT_VALUE::)::end::\n\t\t\t\t\t\treturn( vec2(::TEXTURE_WIDTH::, ::TEXTURE_HEIGHT::) );\n\t\t\t\t\t::end::\n\t\t\t\t}\n\t\t\t::end::\n\t\t\t::end::\n\t\t\t\n\t\t::end::\n\t\t// default values:\n\t\t::foreach TEXTURE_DEFAULTS::\n\t\t\tif (TXTNUM == ::LAYER::) {return(vec2(0.0,0.0));}\t\t\n\t\t::end::\n\t\t}\n\t::else:: \n\t\t::if hasFRAGMENT_INJECTION::#define getTextureResolution(a) vec2(0.0,0.0)::end::\n\t::end::\n\n\t// custom functions -------------------\n\t::FRAGMENT_INJECTION::\n\t\n\t// --------- fragment main ------------\n\tvoid main(void)\n\t{\t\n\t\t\n\t\t\n\t\t::if hasTEXTURES::\n\t\t\t::foreach TEXTURES::\n\t\t\t\t// ------------- LAYER ::LAYER:: --------------\n\t\t\t\t\n\t\t\t\t::if (LAYER >= 0)::\n\t\t\t\t::if USED::\n\t\t\t\t\tvec4 t::LAYER::;\n\t\t\t\t\t::foreach UNITS::\n\t\t\t\t\t::if !FIRST ::else ::end::::if !LAST ::if (0.0 < ::UNIT_VALUE::)::end::\n\t\t\t\t\t\tt::LAYER:: = texture::if !isES3::2D::end::(::TEXTURE::, vec2(vTexCoord.x * ::SLOTS_WIDTH::, vTexCoord.y * ::SLOTS_HEIGHT::));\n\t\t\t\t\t::end::\n\t\t\t\t::end::\n\t\t\t\t::end::\n\t\t\t\t\n\t\t\t::end::\n\t\t::end::\n\t\t\n\t\t// calc final color from all layers\n\t\tvec4 col = ::FRAGMENT_CALC_LAYER::;\n\t\t\n\t\t::if isDISCARD:: \n\t\t\tif (col.a <= ::DISCARD::) discard;\n\t\t::end::\n\t\t\n\t\t::if isPICKING::\n\t\t\t::if !isES3::gl_Frag::end::Color = vElement;\n\t\t::else::\n\t\t\t::if !isES3::gl_Frag::end::Color = col;\n\t\t\t// this fixing problem on old FF if alpha goes zero\n\t\t\t::if !isES3::gl_Frag::end::Color.w = clamp(::if !isES3::gl_Frag::end::Color.w, 0.003, 1.0);\n\t\t::end::\n\t}\n\t";
	}
	,getTextureIdentifiers: function() {
		return [];
	}
	,getColorIdentifiers: function() {
		return [];
	}
	,getCustomIdentifiers: function() {
		return [];
	}
	,getCustomVaryings: function() {
		return [];
	}
	,getDefaultColorFormula: function() {
		return "";
	}
	,getDefaultFormulaVars: function() {
		return peote_ui_interactive_Pickable.DEFAULT_FORMULA_VARS;
	}
	,getFormulas: function() {
		return peote_ui_interactive_Pickable.FORMULAS;
	}
	,getAttributes: function() {
		return peote_ui_interactive_Pickable.ATTRIBUTES;
	}
	,getFormulaNames: function() {
		return peote_ui_interactive_Pickable.FORMULA_NAMES;
	}
	,getFormulaVaryings: function() {
		if(peote_ui_interactive_Pickable.FORMULA_VARYINGS == "") {
			return [];
		} else {
			return peote_ui_interactive_Pickable.FORMULA_VARYINGS.split(",");
		}
	}
	,getFormulaConstants: function() {
		if(peote_ui_interactive_Pickable.FORMULA_CONSTANTS == "") {
			return [];
		} else {
			return peote_ui_interactive_Pickable.FORMULA_CONSTANTS.split(",");
		}
	}
	,getFormulaCustoms: function() {
		if(peote_ui_interactive_Pickable.FORMULA_CUSTOMS == "") {
			return [];
		} else {
			return peote_ui_interactive_Pickable.FORMULA_CUSTOMS.split(",");
		}
	}
	,getMaxZindex: function() {
		return 2097151;
	}
	,hasAlpha: function() {
		return false;
	}
	,hasZindex: function() {
		return true;
	}
	,hasPicking: function() {
		return true;
	}
	,needFragmentPrecision: function() {
		return false;
	}
	,bindAttribLocations: function(gl,glProgram) {
		if(peote_view_Version.isINSTANCED) {
			gl.bindAttribLocation(glProgram,3,"aRotZ");
			gl.bindAttribLocation(glProgram,1,"aPos");
			gl.bindAttribLocation(glProgram,2,"aSize");
			gl.bindAttribLocation(glProgram,0,"aPosition");
		} else {
			gl.bindAttribLocation(glProgram,4,"aElement");
			gl.bindAttribLocation(glProgram,3,"aRotZ");
			gl.bindAttribLocation(glProgram,1,"aPos");
			gl.bindAttribLocation(glProgram,2,"aSize");
			gl.bindAttribLocation(glProgram,0,"aPosition");
		}
	}
	,render: function(peoteView,display,program) {
		var toElement = this._maxElements;
		if(peote_view_Version.isINSTANCED) {
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(this._glVAO);
			} else {
				var gl = this._gl;
				var glBuffer = this._glBuffer;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
				gl.enableVertexAttribArray(0);
				gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,2,0);
				gl.bindBuffer(gl.ARRAY_BUFFER,glBuffer);
				gl.enableVertexAttribArray(3);
				gl.vertexAttribPointer(3,1,gl.FLOAT,false,12,0);
				gl.vertexAttribDivisor(3,1);
				gl.enableVertexAttribArray(1);
				gl.vertexAttribPointer(1,2,gl.SHORT,false,12,4);
				gl.vertexAttribDivisor(1,1);
				gl.enableVertexAttribArray(2);
				gl.vertexAttribPointer(2,2,gl.SHORT,false,12,8);
				gl.vertexAttribDivisor(2,1);
			}
			this._gl.drawArraysInstanced(this._gl.TRIANGLE_STRIP,0,6,toElement);
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(null);
			} else {
				var gl = this._gl;
				gl.disableVertexAttribArray(0);
				gl.disableVertexAttribArray(3);
				gl.disableVertexAttribArray(1);
				gl.disableVertexAttribArray(2);
			}
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
		} else {
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(this._glVAO);
			} else {
				var gl = this._gl;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
				gl.enableVertexAttribArray(4);
				gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,20,0);
				gl.enableVertexAttribArray(3);
				gl.vertexAttribPointer(3,1,gl.FLOAT,false,20,4);
				gl.enableVertexAttribArray(1);
				gl.vertexAttribPointer(1,2,gl.SHORT,false,20,8);
				gl.enableVertexAttribArray(2);
				gl.vertexAttribPointer(2,2,gl.SHORT,false,20,12);
				gl.enableVertexAttribArray(0);
				gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,20,16);
			}
			this._gl.drawArrays(this._gl.TRIANGLE_STRIP,0,toElement * 6);
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(null);
			} else {
				var gl = this._gl;
				gl.disableVertexAttribArray(0);
				gl.disableVertexAttribArray(4);
				gl.disableVertexAttribArray(3);
				gl.disableVertexAttribArray(1);
				gl.disableVertexAttribArray(2);
			}
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
		}
	}
	,pick: function(peoteView,display,program,toElement) {
		var toElement1 = toElement < 0 ? this._maxElements : toElement;
		if(peote_view_Version.isINSTANCED) {
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(this._glVAO);
			} else {
				var gl = this._gl;
				var glBuffer = this._glBuffer;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
				gl.enableVertexAttribArray(0);
				gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,2,0);
				gl.bindBuffer(gl.ARRAY_BUFFER,glBuffer);
				gl.enableVertexAttribArray(3);
				gl.vertexAttribPointer(3,1,gl.FLOAT,false,12,0);
				gl.vertexAttribDivisor(3,1);
				gl.enableVertexAttribArray(1);
				gl.vertexAttribPointer(1,2,gl.SHORT,false,12,4);
				gl.vertexAttribDivisor(1,1);
				gl.enableVertexAttribArray(2);
				gl.vertexAttribPointer(2,2,gl.SHORT,false,12,8);
				gl.vertexAttribDivisor(2,1);
			}
			this._gl.drawArraysInstanced(this._gl.TRIANGLE_STRIP,0,6,toElement1);
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(null);
			} else {
				var gl = this._gl;
				gl.disableVertexAttribArray(0);
				gl.disableVertexAttribArray(3);
				gl.disableVertexAttribArray(1);
				gl.disableVertexAttribArray(2);
			}
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
		} else {
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(this._glVAO);
			} else {
				var gl = this._gl;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
				gl.enableVertexAttribArray(4);
				gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,20,0);
				gl.enableVertexAttribArray(3);
				gl.vertexAttribPointer(3,1,gl.FLOAT,false,20,4);
				gl.enableVertexAttribArray(1);
				gl.vertexAttribPointer(1,2,gl.SHORT,false,20,8);
				gl.enableVertexAttribArray(2);
				gl.vertexAttribPointer(2,2,gl.SHORT,false,20,12);
				gl.enableVertexAttribArray(0);
				gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,20,16);
			}
			this._gl.drawArrays(this._gl.TRIANGLE_STRIP,0,toElement1 * 6);
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(null);
			} else {
				var gl = this._gl;
				gl.disableVertexAttribArray(0);
				gl.disableVertexAttribArray(4);
				gl.disableVertexAttribArray(3);
				gl.disableVertexAttribArray(1);
				gl.disableVertexAttribArray(2);
			}
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
		}
	}
	,__class__: peote_view_Buffer_$Pickable
};
var peote_view_Buffer_$RoundBorderStyleElement = function(minSize,growSize,autoShrink) {
	if(autoShrink == null) {
		autoShrink = false;
	}
	if(growSize == null) {
		growSize = 0;
	}
	this._shrinkAtSize = 0;
	this._growSize = 0;
	this._maxElements = 0;
	this._glVAO = null;
	this._glInstanceBuffer = null;
	this._gl = null;
	if(minSize <= 0) {
		throw haxe_Exception.thrown("Error: Buffer need a minimum size of 1 to store an Element.");
	}
	this._minSize = minSize;
	this._growSize = growSize < 0 ? 0 : growSize;
	if(autoShrink) {
		this._shrinkAtSize = growSize + (growSize / 2 | 0);
	}
	var this1 = new Array(this._minSize);
	this._elements = this1;
	if(peote_view_Version.isINSTANCED) {
		if(peote_ui_style_RoundBorderStyleElement.instanceBytes == null) {
			peote_ui_style_RoundBorderStyleElement.instanceBytes = new peote_view_utils_BufferBytes(new ArrayBuffer(12));
			peote_ui_style_RoundBorderStyleElement.instanceBytes.b[0] = 1;
			peote_ui_style_RoundBorderStyleElement.instanceBytes.b[1] = 1;
			peote_ui_style_RoundBorderStyleElement.instanceBytes.b[2] = 1;
			peote_ui_style_RoundBorderStyleElement.instanceBytes.b[3] = 1;
			peote_ui_style_RoundBorderStyleElement.instanceBytes.b[4] = 0;
			peote_ui_style_RoundBorderStyleElement.instanceBytes.b[5] = 1;
			peote_ui_style_RoundBorderStyleElement.instanceBytes.b[6] = 1;
			peote_ui_style_RoundBorderStyleElement.instanceBytes.b[7] = 0;
			peote_ui_style_RoundBorderStyleElement.instanceBytes.b[8] = 0;
			peote_ui_style_RoundBorderStyleElement.instanceBytes.b[9] = 0;
			peote_ui_style_RoundBorderStyleElement.instanceBytes.b[10] = 0;
			peote_ui_style_RoundBorderStyleElement.instanceBytes.b[11] = 0;
		}
		this._elemBuffSize = 36;
	} else {
		this._elemBuffSize = 240;
	}
	this._bytes = new peote_view_utils_BufferBytes(new ArrayBuffer(this._elemBuffSize * this._minSize));
	this._bytes.fill(0,this._elemBuffSize * this._minSize,0);
};
$hxClasses["peote.view.Buffer_RoundBorderStyleElement"] = peote_view_Buffer_$RoundBorderStyleElement;
peote_view_Buffer_$RoundBorderStyleElement.__name__ = "peote.view.Buffer_RoundBorderStyleElement";
peote_view_Buffer_$RoundBorderStyleElement.__interfaces__ = [peote_view_BufferInterface];
peote_view_Buffer_$RoundBorderStyleElement.prototype = {
	setNewGLContext: function(newGl) {
		if(newGl != null && newGl != this._gl) {
			if(this._gl != null) {
				this._gl.deleteBuffer(this._glBuffer);
				if(peote_view_Version.isINSTANCED) {
					this._gl.deleteBuffer(this._glInstanceBuffer);
				}
				if(peote_view_Version.isVAO) {
					this._gl.deleteVertexArray(this._glVAO);
				}
			}
			this._gl = newGl;
			this._glBuffer = this._gl.createBuffer();
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,this._glBuffer);
			var size = this._bytes.length;
			var bytes = this._bytes;
			var this1 = new Uint8Array(bytes.b.bufferValue,0);
			this._gl.bufferData(this._gl.ARRAY_BUFFER,this1,this._gl.STREAM_DRAW);
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
			if(peote_view_Version.isINSTANCED) {
				this._glInstanceBuffer = this._gl.createBuffer();
				var gl = this._gl;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
				var size = peote_ui_style_RoundBorderStyleElement.instanceBytes.length;
				var bytes = peote_ui_style_RoundBorderStyleElement.instanceBytes;
				var this1 = new Uint8Array(bytes.b.bufferValue,0);
				gl.bufferData(gl.ARRAY_BUFFER,this1,gl.STATIC_DRAW);
				gl.bindBuffer(gl.ARRAY_BUFFER,null);
			}
			if(peote_view_Version.isVAO) {
				this._glVAO = this._gl.createVertexArray();
				this._gl.bindVertexArray(this._glVAO);
				if(peote_view_Version.isINSTANCED) {
					var gl = this._gl;
					var glBuffer = this._glBuffer;
					gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
					gl.enableVertexAttribArray(0);
					gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,2,0);
					gl.bindBuffer(gl.ARRAY_BUFFER,glBuffer);
					gl.enableVertexAttribArray(4);
					gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,36,0);
					gl.vertexAttribDivisor(4,1);
					gl.enableVertexAttribArray(5);
					gl.vertexAttribPointer(5,4,gl.UNSIGNED_BYTE,true,36,4);
					gl.vertexAttribDivisor(5,1);
					gl.enableVertexAttribArray(3);
					gl.vertexAttribPointer(3,1,gl.FLOAT,false,36,8);
					gl.vertexAttribDivisor(3,1);
					gl.enableVertexAttribArray(6);
					gl.vertexAttribPointer(6,2,gl.FLOAT,false,36,12);
					gl.vertexAttribDivisor(6,1);
					gl.enableVertexAttribArray(1);
					gl.vertexAttribPointer(1,2,gl.SHORT,false,36,20);
					gl.vertexAttribDivisor(1,1);
					gl.enableVertexAttribArray(2);
					gl.vertexAttribPointer(2,2,gl.SHORT,false,36,24);
					gl.vertexAttribDivisor(2,1);
					gl.enableVertexAttribArray(7);
					gl.vertexAttribPointer(7,4,gl.SHORT,false,36,28);
					gl.vertexAttribDivisor(7,1);
				} else {
					var gl = this._gl;
					gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
					gl.enableVertexAttribArray(4);
					gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,40,0);
					gl.enableVertexAttribArray(5);
					gl.vertexAttribPointer(5,4,gl.UNSIGNED_BYTE,true,40,4);
					gl.enableVertexAttribArray(3);
					gl.vertexAttribPointer(3,1,gl.FLOAT,false,40,8);
					gl.enableVertexAttribArray(6);
					gl.vertexAttribPointer(6,2,gl.FLOAT,false,40,12);
					gl.enableVertexAttribArray(1);
					gl.vertexAttribPointer(1,2,gl.SHORT,false,40,20);
					gl.enableVertexAttribArray(2);
					gl.vertexAttribPointer(2,2,gl.SHORT,false,40,24);
					gl.enableVertexAttribArray(7);
					gl.vertexAttribPointer(7,4,gl.SHORT,false,40,28);
					gl.enableVertexAttribArray(0);
					gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,40,36);
				}
				this._gl.bindVertexArray(null);
			}
		}
	}
	,updateElement: function(element) {
		if(peote_view_Version.isINSTANCED) {
			var bytes = this._bytes;
			bytes.b_Int32[element.bytePos >> 2] = element.color;
			bytes.b_Int32[element.bytePos + 4 >> 2] = element.borderColor;
			bytes.b_UFloat32[element.bytePos + 8 >> 2] = Math.min(1.0,Math.max(-1.0,element.z / 2097151));
			bytes.b_UFloat32[element.bytePos + 12 >> 2] = element.borderSize;
			bytes.b_UFloat32[element.bytePos + 16 >> 2] = element.borderRadius;
			bytes.b_Uint16[element.bytePos + 20 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 22 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 24 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 26 >> 1] = element.h & 65535;
			bytes.b_Uint16[element.bytePos + 28 >> 1] = element.mx & 65535;
			bytes.b_Uint16[element.bytePos + 30 >> 1] = element.my & 65535;
			bytes.b_Uint16[element.bytePos + 32 >> 1] = element.mw & 65535;
			bytes.b_Uint16[element.bytePos + 34 >> 1] = element.mh & 65535;
		} else {
			var bytes = this._bytes;
			bytes.b_Int32[element.bytePos >> 2] = element.color;
			bytes.b_Int32[element.bytePos + 4 >> 2] = element.borderColor;
			bytes.b_UFloat32[element.bytePos + 8 >> 2] = Math.min(1.0,Math.max(-1.0,element.z / 2097151));
			bytes.b_UFloat32[element.bytePos + 12 >> 2] = element.borderSize;
			bytes.b_UFloat32[element.bytePos + 16 >> 2] = element.borderRadius;
			bytes.b_Uint16[element.bytePos + 20 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 22 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 24 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 26 >> 1] = element.h & 65535;
			bytes.b_Uint16[element.bytePos + 28 >> 1] = element.mx & 65535;
			bytes.b_Uint16[element.bytePos + 30 >> 1] = element.my & 65535;
			bytes.b_Uint16[element.bytePos + 32 >> 1] = element.mw & 65535;
			bytes.b_Uint16[element.bytePos + 34 >> 1] = element.mh & 65535;
			bytes.b[element.bytePos + 36] = 1;
			bytes.b[element.bytePos + 37] = 1;
			bytes.b_Int32[element.bytePos + 40 >> 2] = element.color;
			bytes.b_Int32[element.bytePos + 44 >> 2] = element.borderColor;
			bytes.b_UFloat32[element.bytePos + 48 >> 2] = Math.min(1.0,Math.max(-1.0,element.z / 2097151));
			bytes.b_UFloat32[element.bytePos + 52 >> 2] = element.borderSize;
			bytes.b_UFloat32[element.bytePos + 56 >> 2] = element.borderRadius;
			bytes.b_Uint16[element.bytePos + 60 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 62 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 64 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 66 >> 1] = element.h & 65535;
			bytes.b_Uint16[element.bytePos + 68 >> 1] = element.mx & 65535;
			bytes.b_Uint16[element.bytePos + 70 >> 1] = element.my & 65535;
			bytes.b_Uint16[element.bytePos + 72 >> 1] = element.mw & 65535;
			bytes.b_Uint16[element.bytePos + 74 >> 1] = element.mh & 65535;
			bytes.b[element.bytePos + 76] = 1;
			bytes.b[element.bytePos + 77] = 1;
			bytes.b_Int32[element.bytePos + 80 >> 2] = element.color;
			bytes.b_Int32[element.bytePos + 84 >> 2] = element.borderColor;
			bytes.b_UFloat32[element.bytePos + 88 >> 2] = Math.min(1.0,Math.max(-1.0,element.z / 2097151));
			bytes.b_UFloat32[element.bytePos + 92 >> 2] = element.borderSize;
			bytes.b_UFloat32[element.bytePos + 96 >> 2] = element.borderRadius;
			bytes.b_Uint16[element.bytePos + 100 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 102 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 104 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 106 >> 1] = element.h & 65535;
			bytes.b_Uint16[element.bytePos + 108 >> 1] = element.mx & 65535;
			bytes.b_Uint16[element.bytePos + 110 >> 1] = element.my & 65535;
			bytes.b_Uint16[element.bytePos + 112 >> 1] = element.mw & 65535;
			bytes.b_Uint16[element.bytePos + 114 >> 1] = element.mh & 65535;
			bytes.b[element.bytePos + 116] = 0;
			bytes.b[element.bytePos + 117] = 1;
			bytes.b_Int32[element.bytePos + 120 >> 2] = element.color;
			bytes.b_Int32[element.bytePos + 124 >> 2] = element.borderColor;
			bytes.b_UFloat32[element.bytePos + 128 >> 2] = Math.min(1.0,Math.max(-1.0,element.z / 2097151));
			bytes.b_UFloat32[element.bytePos + 132 >> 2] = element.borderSize;
			bytes.b_UFloat32[element.bytePos + 136 >> 2] = element.borderRadius;
			bytes.b_Uint16[element.bytePos + 140 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 142 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 144 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 146 >> 1] = element.h & 65535;
			bytes.b_Uint16[element.bytePos + 148 >> 1] = element.mx & 65535;
			bytes.b_Uint16[element.bytePos + 150 >> 1] = element.my & 65535;
			bytes.b_Uint16[element.bytePos + 152 >> 1] = element.mw & 65535;
			bytes.b_Uint16[element.bytePos + 154 >> 1] = element.mh & 65535;
			bytes.b[element.bytePos + 156] = 1;
			bytes.b[element.bytePos + 157] = 0;
			bytes.b_Int32[element.bytePos + 160 >> 2] = element.color;
			bytes.b_Int32[element.bytePos + 164 >> 2] = element.borderColor;
			bytes.b_UFloat32[element.bytePos + 168 >> 2] = Math.min(1.0,Math.max(-1.0,element.z / 2097151));
			bytes.b_UFloat32[element.bytePos + 172 >> 2] = element.borderSize;
			bytes.b_UFloat32[element.bytePos + 176 >> 2] = element.borderRadius;
			bytes.b_Uint16[element.bytePos + 180 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 182 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 184 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 186 >> 1] = element.h & 65535;
			bytes.b_Uint16[element.bytePos + 188 >> 1] = element.mx & 65535;
			bytes.b_Uint16[element.bytePos + 190 >> 1] = element.my & 65535;
			bytes.b_Uint16[element.bytePos + 192 >> 1] = element.mw & 65535;
			bytes.b_Uint16[element.bytePos + 194 >> 1] = element.mh & 65535;
			bytes.b[element.bytePos + 196] = 0;
			bytes.b[element.bytePos + 197] = 0;
			bytes.b_Int32[element.bytePos + 200 >> 2] = element.color;
			bytes.b_Int32[element.bytePos + 204 >> 2] = element.borderColor;
			bytes.b_UFloat32[element.bytePos + 208 >> 2] = Math.min(1.0,Math.max(-1.0,element.z / 2097151));
			bytes.b_UFloat32[element.bytePos + 212 >> 2] = element.borderSize;
			bytes.b_UFloat32[element.bytePos + 216 >> 2] = element.borderRadius;
			bytes.b_Uint16[element.bytePos + 220 >> 1] = element.x & 65535;
			bytes.b_Uint16[element.bytePos + 222 >> 1] = element.y & 65535;
			bytes.b_Uint16[element.bytePos + 224 >> 1] = element.w & 65535;
			bytes.b_Uint16[element.bytePos + 226 >> 1] = element.h & 65535;
			bytes.b_Uint16[element.bytePos + 228 >> 1] = element.mx & 65535;
			bytes.b_Uint16[element.bytePos + 230 >> 1] = element.my & 65535;
			bytes.b_Uint16[element.bytePos + 232 >> 1] = element.mw & 65535;
			bytes.b_Uint16[element.bytePos + 234 >> 1] = element.mh & 65535;
			bytes.b[element.bytePos + 236] = 0;
			bytes.b[element.bytePos + 237] = 0;
		}
		if(element.bytePos == -1) {
			throw haxe_Exception.thrown("Error, Element is not added to Buffer");
		}
		if(this._gl != null) {
			var gl = this._gl;
			var elemBuffSize = this._elemBuffSize;
			gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
			gl.bufferSubData(gl.ARRAY_BUFFER,element.bytePos,element.bufferPointer);
			gl.bindBuffer(gl.ARRAY_BUFFER,null);
		}
	}
	,addElement: function(element) {
		if(element.bytePos == -1) {
			if(this._maxElements == this._elements.length) {
				if(this._growSize == 0) {
					throw haxe_Exception.thrown("Error: Can't add new Element. Buffer is full and automatic growing Buffersize is disabled.");
				}
				var newSize = this._maxElements + this._growSize;
				var _newBytes = new peote_view_utils_BufferBytes(new ArrayBuffer(this._elemBuffSize * newSize));
				_newBytes.blit(0,this._bytes,0,this._elemBuffSize * this._maxElements);
				this._bytes = _newBytes;
				var this1 = new Array(newSize);
				var _newElements = this1;
				var _g = 0;
				var _g1 = this._maxElements;
				while(_g < _g1) {
					var i = _g++;
					var element1 = this._elements[i];
					var bytes = this._bytes;
					var offset = element1.bytePos;
					var size = this._elemBuffSize;
					if(size == null) {
						size = 0;
					}
					if(offset == null) {
						offset = 0;
					}
					var this1;
					if(size > 0) {
						this1 = new Uint8Array(bytes.b.bufferValue,offset,size);
					} else {
						this1 = new Uint8Array(bytes.b.bufferValue,offset);
					}
					element1.bufferPointer = this1;
					_newElements[i] = element1;
				}
				this._elements = _newElements;
				if(this._gl != null) {
					this._gl.deleteBuffer(this._glBuffer);
					this._glBuffer = this._gl.createBuffer();
					this._gl.bindBuffer(this._gl.ARRAY_BUFFER,this._glBuffer);
					var size = this._bytes.length;
					var bytes = this._bytes;
					var this1 = new Uint8Array(bytes.b.bufferValue,0);
					this._gl.bufferData(this._gl.ARRAY_BUFFER,this1,this._gl.STREAM_DRAW);
					this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
					if(peote_view_Version.isVAO) {
						this._gl.bindVertexArray(this._glVAO);
						if(peote_view_Version.isINSTANCED) {
							var gl = this._gl;
							var glBuffer = this._glBuffer;
							gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
							gl.enableVertexAttribArray(0);
							gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,2,0);
							gl.bindBuffer(gl.ARRAY_BUFFER,glBuffer);
							gl.enableVertexAttribArray(4);
							gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,36,0);
							gl.vertexAttribDivisor(4,1);
							gl.enableVertexAttribArray(5);
							gl.vertexAttribPointer(5,4,gl.UNSIGNED_BYTE,true,36,4);
							gl.vertexAttribDivisor(5,1);
							gl.enableVertexAttribArray(3);
							gl.vertexAttribPointer(3,1,gl.FLOAT,false,36,8);
							gl.vertexAttribDivisor(3,1);
							gl.enableVertexAttribArray(6);
							gl.vertexAttribPointer(6,2,gl.FLOAT,false,36,12);
							gl.vertexAttribDivisor(6,1);
							gl.enableVertexAttribArray(1);
							gl.vertexAttribPointer(1,2,gl.SHORT,false,36,20);
							gl.vertexAttribDivisor(1,1);
							gl.enableVertexAttribArray(2);
							gl.vertexAttribPointer(2,2,gl.SHORT,false,36,24);
							gl.vertexAttribDivisor(2,1);
							gl.enableVertexAttribArray(7);
							gl.vertexAttribPointer(7,4,gl.SHORT,false,36,28);
							gl.vertexAttribDivisor(7,1);
						} else {
							var gl = this._gl;
							gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
							gl.enableVertexAttribArray(4);
							gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,40,0);
							gl.enableVertexAttribArray(5);
							gl.vertexAttribPointer(5,4,gl.UNSIGNED_BYTE,true,40,4);
							gl.enableVertexAttribArray(3);
							gl.vertexAttribPointer(3,1,gl.FLOAT,false,40,8);
							gl.enableVertexAttribArray(6);
							gl.vertexAttribPointer(6,2,gl.FLOAT,false,40,12);
							gl.enableVertexAttribArray(1);
							gl.vertexAttribPointer(1,2,gl.SHORT,false,40,20);
							gl.enableVertexAttribArray(2);
							gl.vertexAttribPointer(2,2,gl.SHORT,false,40,24);
							gl.enableVertexAttribArray(7);
							gl.vertexAttribPointer(7,4,gl.SHORT,false,40,28);
							gl.enableVertexAttribArray(0);
							gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,40,36);
						}
						this._gl.bindVertexArray(null);
					}
				}
			}
			element.bytePos = this._maxElements * this._elemBuffSize;
			var bytes = this._bytes;
			var offset = element.bytePos;
			var size = this._elemBuffSize;
			if(size == null) {
				size = 0;
			}
			if(offset == null) {
				offset = 0;
			}
			var this1;
			if(size > 0) {
				this1 = new Uint8Array(bytes.b.bufferValue,offset,size);
			} else {
				this1 = new Uint8Array(bytes.b.bufferValue,offset);
			}
			element.bufferPointer = this1;
			this._elements[this._maxElements++] = element;
			this.updateElement(element);
		} else {
			throw haxe_Exception.thrown("Error: Element is already inside a Buffer");
		}
	}
	,removeElement: function(element) {
		if(element.bytePos != -1) {
			if(this._maxElements > 1 && element.bytePos < (this._maxElements - 1) * this._elemBuffSize) {
				var lastElement = this._elements[--this._maxElements];
				lastElement.bytePos = element.bytePos;
				var bytes = this._bytes;
				var offset = element.bytePos;
				var size = this._elemBuffSize;
				if(size == null) {
					size = 0;
				}
				if(offset == null) {
					offset = 0;
				}
				var this1;
				if(size > 0) {
					this1 = new Uint8Array(bytes.b.bufferValue,offset,size);
				} else {
					this1 = new Uint8Array(bytes.b.bufferValue,offset);
				}
				lastElement.bufferPointer = this1;
				this.updateElement(lastElement);
				this._elements[element.bytePos / this._elemBuffSize | 0] = lastElement;
			} else {
				this._maxElements--;
			}
			element.bytePos = -1;
			if(this._shrinkAtSize > 0 && this._elements.length - this._growSize >= this._minSize && this._maxElements <= this._elements.length - this._shrinkAtSize) {
				var newSize = this._elements.length - this._growSize;
				var _newBytes = new peote_view_utils_BufferBytes(new ArrayBuffer(this._elemBuffSize * newSize));
				_newBytes.blit(0,this._bytes,0,this._elemBuffSize * this._maxElements);
				this._bytes = _newBytes;
				var this1 = new Array(newSize);
				var _newElements = this1;
				var _g = 0;
				var _g1 = this._maxElements;
				while(_g < _g1) {
					var i = _g++;
					var element = this._elements[i];
					var bytes = this._bytes;
					var offset = element.bytePos;
					var size = this._elemBuffSize;
					if(size == null) {
						size = 0;
					}
					if(offset == null) {
						offset = 0;
					}
					var this1;
					if(size > 0) {
						this1 = new Uint8Array(bytes.b.bufferValue,offset,size);
					} else {
						this1 = new Uint8Array(bytes.b.bufferValue,offset);
					}
					element.bufferPointer = this1;
					_newElements[i] = element;
				}
				this._elements = _newElements;
				if(this._gl != null) {
					this._gl.deleteBuffer(this._glBuffer);
					this._glBuffer = this._gl.createBuffer();
					this._gl.bindBuffer(this._gl.ARRAY_BUFFER,this._glBuffer);
					var size = this._bytes.length;
					var bytes = this._bytes;
					var this1 = new Uint8Array(bytes.b.bufferValue,0);
					this._gl.bufferData(this._gl.ARRAY_BUFFER,this1,this._gl.STREAM_DRAW);
					this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
					if(peote_view_Version.isVAO) {
						this._gl.bindVertexArray(this._glVAO);
						if(peote_view_Version.isINSTANCED) {
							var gl = this._gl;
							var glBuffer = this._glBuffer;
							gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
							gl.enableVertexAttribArray(0);
							gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,2,0);
							gl.bindBuffer(gl.ARRAY_BUFFER,glBuffer);
							gl.enableVertexAttribArray(4);
							gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,36,0);
							gl.vertexAttribDivisor(4,1);
							gl.enableVertexAttribArray(5);
							gl.vertexAttribPointer(5,4,gl.UNSIGNED_BYTE,true,36,4);
							gl.vertexAttribDivisor(5,1);
							gl.enableVertexAttribArray(3);
							gl.vertexAttribPointer(3,1,gl.FLOAT,false,36,8);
							gl.vertexAttribDivisor(3,1);
							gl.enableVertexAttribArray(6);
							gl.vertexAttribPointer(6,2,gl.FLOAT,false,36,12);
							gl.vertexAttribDivisor(6,1);
							gl.enableVertexAttribArray(1);
							gl.vertexAttribPointer(1,2,gl.SHORT,false,36,20);
							gl.vertexAttribDivisor(1,1);
							gl.enableVertexAttribArray(2);
							gl.vertexAttribPointer(2,2,gl.SHORT,false,36,24);
							gl.vertexAttribDivisor(2,1);
							gl.enableVertexAttribArray(7);
							gl.vertexAttribPointer(7,4,gl.SHORT,false,36,28);
							gl.vertexAttribDivisor(7,1);
						} else {
							var gl = this._gl;
							gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
							gl.enableVertexAttribArray(4);
							gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,40,0);
							gl.enableVertexAttribArray(5);
							gl.vertexAttribPointer(5,4,gl.UNSIGNED_BYTE,true,40,4);
							gl.enableVertexAttribArray(3);
							gl.vertexAttribPointer(3,1,gl.FLOAT,false,40,8);
							gl.enableVertexAttribArray(6);
							gl.vertexAttribPointer(6,2,gl.FLOAT,false,40,12);
							gl.enableVertexAttribArray(1);
							gl.vertexAttribPointer(1,2,gl.SHORT,false,40,20);
							gl.enableVertexAttribArray(2);
							gl.vertexAttribPointer(2,2,gl.SHORT,false,40,24);
							gl.enableVertexAttribArray(7);
							gl.vertexAttribPointer(7,4,gl.SHORT,false,40,28);
							gl.enableVertexAttribArray(0);
							gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,40,36);
						}
						this._gl.bindVertexArray(null);
					}
				}
			}
		} else {
			throw haxe_Exception.thrown("Error: Element is not inside a Buffer");
		}
	}
	,getVertexShader: function() {
		return "\n\t::if isES3::#version 300 es::end::\n\t::if VERTEX_INT_PRECISION::precision ::VERTEX_INT_PRECISION:: int; ::end::\n\t::if VERTEX_FLOAT_PRECISION::precision ::VERTEX_FLOAT_PRECISION:: float; ::end::\n\t::if VERTEX_SAMPLER_PRECISION::precision ::VERTEX_SAMPLER_PRECISION:: sampler2D; ::end::\n\t\n\t// Uniforms -------------------------\n\t::if (!isPICKING && isUBO)::\n\t//layout(std140) uniform uboView\n\tuniform uboView\n\t{\n\t\tvec2 uResolution;\n\t\tvec2 uViewOffset;\n\t\tvec2 uViewZoom;\n\t};\n\t//layout(std140) uniform uboDisplay\n\tuniform uboDisplay\n\t{\n\t\tvec2 uOffset;\n\t\tvec2 uZoom;\n\t};\n\t::else::\n\tuniform vec2 uResolution;\n\tuniform vec2 uOffset;\n\tuniform vec2 uZoom;\n\t::end::\n\t\n\t\n\t\n\t// Attributes -------------------------\n\t::IN:: vec2 aPosition;\n\t\n\t::if isPICKING::\n\t\t::if !isINSTANCED::\n\t\t\t::IN:: vec4 aElement;\n\t\t::end::\n\t::end::\n\t\n\t::IN:: vec2 aPos;\n\t::IN:: vec2 aSize;\n\t\n\t::IN:: float aRotZ;\n\t\n\t\n\t::IN:: vec4 aColorStart0;::IN:: vec4 aColorStart1;\n\t\n\t::IN:: vec2 aFloat0;::IN:: vec4 aShort0;\n\t\n\t// Varyings ---------------------------\n\t::if isPICKING::\n\t\t::if isINSTANCED::\n\t\t\tflat ::VAROUT:: int vElement;\n\t\t::else::\n\t\t\t::VAROUT:: vec4 vElement;\n\t\t::end::\n\t::end::\n\t\n\t::if isES3::flat ::end::::VAROUT:: vec4 vColor0;::if isES3::flat ::end::::VAROUT:: vec4 vColor1;\n\t::if isES3::flat ::end::::VAROUT:: vec2 vSize; ::if isES3::flat ::end:: ::VAROUT:: vec4 vPack0;::if isES3::flat ::end:: ::VAROUT:: vec2 vPack1;\n\t\n\t::if (hasTEXTURES || hasFRAGMENT_INJECTION)::\n\t\t::VAROUT:: vec2 vTexCoord;\n\t\t\n\t::end::\t\n\n\t// custom functions -------------------\n\t::VERTEX_INJECTION::\n\n\t// --------- vertex main --------------\n\tvoid main(void)\n\t{\n\t\t\n\t\tvec2 size = ::if SIZE_FORMULA::::SIZE_FORMULA::::else::aSize::end::;vSize = size;\n\t\t\t\t\n\t\tvec2 rotZ = ::if ROTZ_FORMULA::::ROTZ_FORMULA::::else::vec2( 0.0, aRotZ )::end::;\n\t\tvec2 pos = ::if POS_FORMULA::::POS_FORMULA::::else::aPos::end::;\npos = pos + aPosition * size;\n\t\tvColor0 = aColorStart0.wzyx; vColor1 = aColorStart1.wzyx; \n\n\t\tvPack0.x = ::if FORMULA_VARYINGS.borderSize::::FORMULA_VARYINGS.borderSize::::else::aFloat0.x::end::;vPack0.y = ::if FORMULA_VARYINGS.borderRadius::::FORMULA_VARYINGS.borderRadius::::else::aFloat0.y::end::;vPack0.z = ::if FORMULA_VARYINGS.mx::::FORMULA_VARYINGS.mx::::else::aShort0.x::end::;vPack0.w = ::if FORMULA_VARYINGS.my::::FORMULA_VARYINGS.my::::else::aShort0.y::end::;vPack1.x = ::if FORMULA_VARYINGS.mw::::FORMULA_VARYINGS.mw::::else::aShort0.z::end::;vPack1.y = ::if FORMULA_VARYINGS.mh::::FORMULA_VARYINGS.mh::::else::aShort0.w::end::;\n\n\t\t::if (hasTEXTURES || hasFRAGMENT_INJECTION)::\n\t\t\tvTexCoord = aPosition;\t\t\t\n\t\t\t\n\t\t::end::\n\t\t\n\t\t::if isPICKING::\n\t\t\t::if isINSTANCED::\n\t\t\t\tvElement = gl_InstanceID + 1;\n\t\t\t::else::\n\t\t\t\tvElement = aElement;\n\t\t\t::end::\n\t\t::end::\n\t\t\n\t\tfloat width = uResolution.x;\n\t\tfloat height = uResolution.y;\n\t\t::if (!isPICKING && isUBO)::\n\t\tfloat deltaX = (uOffset.x  + uViewOffset.x) / uZoom.x;\n\t\tfloat deltaY = (uOffset.y  + uViewOffset.y) / uZoom.y;\n\t\tvec2 zoom = uZoom * uViewZoom;\n\t\t::else::\n\t\tfloat deltaX = uOffset.x;\n\t\tfloat deltaY = uOffset.y;\n\t\tvec2 zoom = uZoom;\n\t\t::end::\n\t\t\n\t\t::if isPIXELSNAPPING::\n\t\tpos = floor( pos * ::PIXELDIVISOR:: * zoom ) / ::PIXELDIVISOR:: / zoom;\n\t\t::end::\n\t\t\n\t\tgl_Position = vec4 (\n\t\t\t 2.0 * zoom.x/width  * (pos.x + deltaX) - 1.0,\n\t\t\t-2.0 * zoom.y/height * (pos.y + deltaY) + 1.0,\n\t\t\t- rotZ.y,\n\t\t\t1.0\n\t\t);\t\t\n\t\t\n\t}\n\t";
	}
	,getFragmentShader: function() {
		return "\n\t::if isES3::#version 300 es::end::\n\t::foreach FRAGMENT_EXTENSIONS::#extension ::EXTENSION:: : enable\n\t::end::\n\t\n\t::if FRAGMENT_INT_PRECISION::precision ::FRAGMENT_INT_PRECISION:: int; ::end::\n\t::if FRAGMENT_FLOAT_PRECISION::precision ::FRAGMENT_FLOAT_PRECISION:: float; ::end::\n\t::if FRAGMENT_SAMPLER_PRECISION::precision ::FRAGMENT_SAMPLER_PRECISION:: sampler2D; ::end::\n\t\n\t// Uniforms -------------------------\t\n\t::FRAGMENT_PROGRAM_UNIFORMS::\n\t\n\t// Varyings ---------------------------\n\t::if isPICKING::\n\t\t::if isINSTANCED::\n\t\t\tflat ::VARIN:: int vElement;\n\t\t::else::\n\t\t\t::VARIN:: vec4 vElement;\n\t\t::end::\n\t::end::\n\n\t::if isES3::flat ::end::::VARIN:: vec4 vColor0; ::if isES3::flat ::end::::VARIN:: vec4 vColor1; \n\t::if isES3::flat ::end::::VARIN:: vec2 vSize; ::if isES3::flat ::end:: ::VARIN:: vec4 vPack0;::if isES3::flat ::end:: ::VARIN:: vec2 vPack1;\n\t\t\t\n\t::if (hasTEXTURES || hasFRAGMENT_INJECTION)::\n\t\t::VARIN:: vec2 vTexCoord;\n\t\t\n\t::end::\t\n\t\n\t\n\t::if isES3::\n\t\t::if (isPICKING && isINSTANCED)::\n\t\t\tout int Color;\n\t\t::else::\n\t\t\tout vec4 Color;\n\t\t::end::\n\t::end::\n\n\t::if hasTEXTURE_FUNCTIONS::\n\t\t// function to get texture color\n\t\tvec4 getTextureColor(int TXTNUM, vec2 vTexCoord) {\n\t\t::foreach TEXTURES::\n\t\t\t\n\t\t\t::if (LAYER >= 0)::\n\t\t\t::if USED_ID::\n\t\t\t\tif (TXTNUM == ::LAYER::) {\n\t\t\t\t\t::foreach UNITS::\n\t\t\t\t\t::if !FIRST ::else ::end::::if !LAST ::if (0.0 < ::UNIT_VALUE::)::end::\n\t\t\t\t\t\treturn(texture::if !isES3::2D::end::(::TEXTURE::, vec2(vTexCoord.x * ::SLOTS_WIDTH::, vTexCoord.y * ::SLOTS_HEIGHT::)));\n\t\t\t\t\t::end::\n\t\t\t\t}\n\t\t\t::end::\n\t\t\t::end::\n\t\t\t\n\t\t::end::\n\t\t// default values:\n\t\t::foreach TEXTURE_DEFAULTS::\n\t\t\tif (TXTNUM == ::LAYER::) {return(::DEFAULT_VALUE::);}\t\t\n\t\t::end::\n\t\t}\n\t::else:: \n\t\t::if hasFRAGMENT_INJECTION::#define getTextureColor(a,b) vec4(0.0,0.0,0.0,0.0)::end::\n\t::end::\n\n\t::if hasTEXTURE_FUNCTIONS::\n\t\t// function to get full texture size\n\t\tvec2 getTextureResolution(int TXTNUM) {\n\t\t::foreach TEXTURES::\n\t\t\t\n\t\t\t::if (LAYER >= 0)::\n\t\t\t::if USED_ID::\n\t\t\t\tif (TXTNUM == ::LAYER::) {\n\t\t\t\t\t::foreach UNITS::\n\t\t\t\t\t::if !FIRST ::else ::end::::if !LAST ::if (0.0 < ::UNIT_VALUE::)::end::\n\t\t\t\t\t\treturn( vec2(::TEXTURE_WIDTH::, ::TEXTURE_HEIGHT::) );\n\t\t\t\t\t::end::\n\t\t\t\t}\n\t\t\t::end::\n\t\t\t::end::\n\t\t\t\n\t\t::end::\n\t\t// default values:\n\t\t::foreach TEXTURE_DEFAULTS::\n\t\t\tif (TXTNUM == ::LAYER::) {return(vec2(0.0,0.0));}\t\t\n\t\t::end::\n\t\t}\n\t::else:: \n\t\t::if hasFRAGMENT_INJECTION::#define getTextureResolution(a) vec2(0.0,0.0)::end::\n\t::end::\n\n\t// custom functions -------------------\n\t::FRAGMENT_INJECTION::\n\t\n\t// --------- fragment main ------------\n\tvoid main(void)\n\t{\t\n\t\tvec4 c0 = vColor0; vec4 c1 = vColor1; \n\t\t\n\t\t::if hasTEXTURES::\n\t\t\t::foreach TEXTURES::\n\t\t\t\t// ------------- LAYER ::LAYER:: --------------\n\t\t\t\t\n\t\t\t\t::if (LAYER >= 0)::\n\t\t\t\t::if USED::\n\t\t\t\t\tvec4 t::LAYER::;\n\t\t\t\t\t::foreach UNITS::\n\t\t\t\t\t::if !FIRST ::else ::end::::if !LAST ::if (0.0 < ::UNIT_VALUE::)::end::\n\t\t\t\t\t\tt::LAYER:: = texture::if !isES3::2D::end::(::TEXTURE::, vec2(vTexCoord.x * ::SLOTS_WIDTH::, vTexCoord.y * ::SLOTS_HEIGHT::));\n\t\t\t\t\t::end::\n\t\t\t\t::end::\n\t\t\t\t::end::\n\t\t\t\t\n\t\t\t::end::\n\t\t::end::\n\t\t\n\t\t// calc final color from all layers\n\t\tvec4 col = ::FRAGMENT_CALC_LAYER::;\n\t\t\n\t\t::if isDISCARD:: \n\t\t\tif (col.a <= ::DISCARD::) discard;\n\t\t::end::\n\t\t\n\t\t::if isPICKING::\n\t\t\t::if !isES3::gl_Frag::end::Color = vElement;\n\t\t::else::\n\t\t\t::if !isES3::gl_Frag::end::Color = col;\n\t\t\t// this fixing problem on old FF if alpha goes zero\n\t\t\t::if !isES3::gl_Frag::end::Color.w = clamp(::if !isES3::gl_Frag::end::Color.w, 0.003, 1.0);\n\t\t::end::\n\t}\n\t";
	}
	,getTextureIdentifiers: function() {
		return [];
	}
	,getColorIdentifiers: function() {
		return "color,borderColor".split(",");
	}
	,getCustomIdentifiers: function() {
		return "borderSize,borderRadius,mx,my,mw,mh".split(",");
	}
	,getCustomVaryings: function() {
		return "vPack0.x,vPack0.y,vPack0.z,vPack0.w,vPack1.x,vPack1.y".split(",");
	}
	,getDefaultColorFormula: function() {
		return "";
	}
	,getDefaultFormulaVars: function() {
		return peote_ui_style_RoundBorderStyleElement.DEFAULT_FORMULA_VARS;
	}
	,getFormulas: function() {
		return peote_ui_style_RoundBorderStyleElement.FORMULAS;
	}
	,getAttributes: function() {
		return peote_ui_style_RoundBorderStyleElement.ATTRIBUTES;
	}
	,getFormulaNames: function() {
		return peote_ui_style_RoundBorderStyleElement.FORMULA_NAMES;
	}
	,getFormulaVaryings: function() {
		if(peote_ui_style_RoundBorderStyleElement.FORMULA_VARYINGS == "") {
			return [];
		} else {
			return peote_ui_style_RoundBorderStyleElement.FORMULA_VARYINGS.split(",");
		}
	}
	,getFormulaConstants: function() {
		if(peote_ui_style_RoundBorderStyleElement.FORMULA_CONSTANTS == "") {
			return [];
		} else {
			return peote_ui_style_RoundBorderStyleElement.FORMULA_CONSTANTS.split(",");
		}
	}
	,getFormulaCustoms: function() {
		if(peote_ui_style_RoundBorderStyleElement.FORMULA_CUSTOMS == "") {
			return [];
		} else {
			return peote_ui_style_RoundBorderStyleElement.FORMULA_CUSTOMS.split(",");
		}
	}
	,getMaxZindex: function() {
		return 2097151;
	}
	,hasAlpha: function() {
		return false;
	}
	,hasZindex: function() {
		return true;
	}
	,hasPicking: function() {
		return false;
	}
	,needFragmentPrecision: function() {
		return false;
	}
	,bindAttribLocations: function(gl,glProgram) {
		if(peote_view_Version.isINSTANCED) {
			gl.bindAttribLocation(glProgram,4,"aColorStart0");
			gl.bindAttribLocation(glProgram,5,"aColorStart1");
			gl.bindAttribLocation(glProgram,3,"aRotZ");
			gl.bindAttribLocation(glProgram,1,"aPos");
			gl.bindAttribLocation(glProgram,2,"aSize");
			gl.bindAttribLocation(glProgram,6,"aFloat0");
			gl.bindAttribLocation(glProgram,7,"aShort0");
			gl.bindAttribLocation(glProgram,0,"aPosition");
		} else {
			gl.bindAttribLocation(glProgram,4,"aColorStart0");
			gl.bindAttribLocation(glProgram,5,"aColorStart1");
			gl.bindAttribLocation(glProgram,3,"aRotZ");
			gl.bindAttribLocation(glProgram,1,"aPos");
			gl.bindAttribLocation(glProgram,2,"aSize");
			gl.bindAttribLocation(glProgram,6,"aFloat0");
			gl.bindAttribLocation(glProgram,7,"aShort0");
			gl.bindAttribLocation(glProgram,0,"aPosition");
		}
	}
	,render: function(peoteView,display,program) {
		var toElement = this._maxElements;
		if(peote_view_Version.isINSTANCED) {
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(this._glVAO);
			} else {
				var gl = this._gl;
				var glBuffer = this._glBuffer;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
				gl.enableVertexAttribArray(0);
				gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,2,0);
				gl.bindBuffer(gl.ARRAY_BUFFER,glBuffer);
				gl.enableVertexAttribArray(4);
				gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,36,0);
				gl.vertexAttribDivisor(4,1);
				gl.enableVertexAttribArray(5);
				gl.vertexAttribPointer(5,4,gl.UNSIGNED_BYTE,true,36,4);
				gl.vertexAttribDivisor(5,1);
				gl.enableVertexAttribArray(3);
				gl.vertexAttribPointer(3,1,gl.FLOAT,false,36,8);
				gl.vertexAttribDivisor(3,1);
				gl.enableVertexAttribArray(6);
				gl.vertexAttribPointer(6,2,gl.FLOAT,false,36,12);
				gl.vertexAttribDivisor(6,1);
				gl.enableVertexAttribArray(1);
				gl.vertexAttribPointer(1,2,gl.SHORT,false,36,20);
				gl.vertexAttribDivisor(1,1);
				gl.enableVertexAttribArray(2);
				gl.vertexAttribPointer(2,2,gl.SHORT,false,36,24);
				gl.vertexAttribDivisor(2,1);
				gl.enableVertexAttribArray(7);
				gl.vertexAttribPointer(7,4,gl.SHORT,false,36,28);
				gl.vertexAttribDivisor(7,1);
			}
			this._gl.drawArraysInstanced(this._gl.TRIANGLE_STRIP,0,6,toElement);
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(null);
			} else {
				var gl = this._gl;
				gl.disableVertexAttribArray(0);
				gl.disableVertexAttribArray(4);
				gl.disableVertexAttribArray(5);
				gl.disableVertexAttribArray(3);
				gl.disableVertexAttribArray(1);
				gl.disableVertexAttribArray(2);
				gl.disableVertexAttribArray(6);
				gl.disableVertexAttribArray(7);
			}
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
		} else {
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(this._glVAO);
			} else {
				var gl = this._gl;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
				gl.enableVertexAttribArray(4);
				gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,40,0);
				gl.enableVertexAttribArray(5);
				gl.vertexAttribPointer(5,4,gl.UNSIGNED_BYTE,true,40,4);
				gl.enableVertexAttribArray(3);
				gl.vertexAttribPointer(3,1,gl.FLOAT,false,40,8);
				gl.enableVertexAttribArray(6);
				gl.vertexAttribPointer(6,2,gl.FLOAT,false,40,12);
				gl.enableVertexAttribArray(1);
				gl.vertexAttribPointer(1,2,gl.SHORT,false,40,20);
				gl.enableVertexAttribArray(2);
				gl.vertexAttribPointer(2,2,gl.SHORT,false,40,24);
				gl.enableVertexAttribArray(7);
				gl.vertexAttribPointer(7,4,gl.SHORT,false,40,28);
				gl.enableVertexAttribArray(0);
				gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,40,36);
			}
			this._gl.drawArrays(this._gl.TRIANGLE_STRIP,0,toElement * 6);
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(null);
			} else {
				var gl = this._gl;
				gl.disableVertexAttribArray(0);
				gl.disableVertexAttribArray(4);
				gl.disableVertexAttribArray(5);
				gl.disableVertexAttribArray(3);
				gl.disableVertexAttribArray(1);
				gl.disableVertexAttribArray(2);
				gl.disableVertexAttribArray(6);
				gl.disableVertexAttribArray(7);
			}
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
		}
	}
	,pick: function(peoteView,display,program,toElement) {
		var toElement1 = toElement < 0 ? this._maxElements : toElement;
		if(peote_view_Version.isINSTANCED) {
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(this._glVAO);
			} else {
				var gl = this._gl;
				var glBuffer = this._glBuffer;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glInstanceBuffer);
				gl.enableVertexAttribArray(0);
				gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,2,0);
				gl.bindBuffer(gl.ARRAY_BUFFER,glBuffer);
				gl.enableVertexAttribArray(4);
				gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,36,0);
				gl.vertexAttribDivisor(4,1);
				gl.enableVertexAttribArray(5);
				gl.vertexAttribPointer(5,4,gl.UNSIGNED_BYTE,true,36,4);
				gl.vertexAttribDivisor(5,1);
				gl.enableVertexAttribArray(3);
				gl.vertexAttribPointer(3,1,gl.FLOAT,false,36,8);
				gl.vertexAttribDivisor(3,1);
				gl.enableVertexAttribArray(6);
				gl.vertexAttribPointer(6,2,gl.FLOAT,false,36,12);
				gl.vertexAttribDivisor(6,1);
				gl.enableVertexAttribArray(1);
				gl.vertexAttribPointer(1,2,gl.SHORT,false,36,20);
				gl.vertexAttribDivisor(1,1);
				gl.enableVertexAttribArray(2);
				gl.vertexAttribPointer(2,2,gl.SHORT,false,36,24);
				gl.vertexAttribDivisor(2,1);
				gl.enableVertexAttribArray(7);
				gl.vertexAttribPointer(7,4,gl.SHORT,false,36,28);
				gl.vertexAttribDivisor(7,1);
			}
			this._gl.drawArraysInstanced(this._gl.TRIANGLE_STRIP,0,6,toElement1);
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(null);
			} else {
				var gl = this._gl;
				gl.disableVertexAttribArray(0);
				gl.disableVertexAttribArray(4);
				gl.disableVertexAttribArray(5);
				gl.disableVertexAttribArray(3);
				gl.disableVertexAttribArray(1);
				gl.disableVertexAttribArray(2);
				gl.disableVertexAttribArray(6);
				gl.disableVertexAttribArray(7);
			}
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
		} else {
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(this._glVAO);
			} else {
				var gl = this._gl;
				gl.bindBuffer(gl.ARRAY_BUFFER,this._glBuffer);
				gl.enableVertexAttribArray(4);
				gl.vertexAttribPointer(4,4,gl.UNSIGNED_BYTE,true,40,0);
				gl.enableVertexAttribArray(5);
				gl.vertexAttribPointer(5,4,gl.UNSIGNED_BYTE,true,40,4);
				gl.enableVertexAttribArray(3);
				gl.vertexAttribPointer(3,1,gl.FLOAT,false,40,8);
				gl.enableVertexAttribArray(6);
				gl.vertexAttribPointer(6,2,gl.FLOAT,false,40,12);
				gl.enableVertexAttribArray(1);
				gl.vertexAttribPointer(1,2,gl.SHORT,false,40,20);
				gl.enableVertexAttribArray(2);
				gl.vertexAttribPointer(2,2,gl.SHORT,false,40,24);
				gl.enableVertexAttribArray(7);
				gl.vertexAttribPointer(7,4,gl.SHORT,false,40,28);
				gl.enableVertexAttribArray(0);
				gl.vertexAttribPointer(0,2,gl.UNSIGNED_BYTE,false,40,36);
			}
			this._gl.drawArrays(this._gl.TRIANGLE_STRIP,0,toElement1 * 6);
			if(peote_view_Version.isVAO) {
				this._gl.bindVertexArray(null);
			} else {
				var gl = this._gl;
				gl.disableVertexAttribArray(0);
				gl.disableVertexAttribArray(4);
				gl.disableVertexAttribArray(5);
				gl.disableVertexAttribArray(3);
				gl.disableVertexAttribArray(1);
				gl.disableVertexAttribArray(2);
				gl.disableVertexAttribArray(6);
				gl.disableVertexAttribArray(7);
			}
			this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null);
		}
	}
	,__class__: peote_view_Buffer_$RoundBorderStyleElement
};
var peote_view_PeoteGL = {};
peote_view_PeoteGL.fromRenderContext = function(context) {
	if(context.webgl2 != null) {
		haxe_Log.trace("WEBGL2 detected.",{ fileName : "peote/view/PeoteGL.hx", lineNumber : 121, className : "peote.view._PeoteGL.PeoteGL_Impl_", methodName : "fromRenderContext"});
		peote_view_Version.isUBO = true;
		peote_view_Version.isINSTANCED = true;
		peote_view_Version.isVAO = true;
		peote_view_Version.isES3 = true;
		return context.webgl2;
	} else if(context.webgl != null) {
		haxe_Log.trace("WEBGL1 detected.",{ fileName : "peote/view/PeoteGL.hx", lineNumber : 126, className : "peote.view._PeoteGL.PeoteGL_Impl_", methodName : "fromRenderContext"});
		return context.webgl;
	} else {
		window.alert("Error: missing webgl context");
		return null;
	}
};
var peote_view_Version = function() { };
$hxClasses["peote.view.Version"] = peote_view_Version;
peote_view_Version.__name__ = "peote.view.Version";
var peote_view_Precision = function() { };
$hxClasses["peote.view.Precision"] = peote_view_Precision;
peote_view_Precision.__name__ = "peote.view.Precision";
var peote_view_PeoteView = function($window,color,registerEvents) {
	if(registerEvents == null) {
		registerEvents = true;
	}
	if(color == null) {
		color = 255;
	}
	this.speed = 1.0;
	this.stopTime = 0;
	this.startTime = 0;
	this.isRun = false;
	this.yOffset = 0;
	this.xOffset = 0;
	this.yz = 1.0;
	this.xz = 1.0;
	this.maskState = 0;
	this.glStateDepth = false;
	this.glStateAlpha = false;
	this.colorState = true;
	this.alpha = 1.0;
	this.blue = 0.0;
	this.green = 0.0;
	this.red = 0.0;
	this.gl = peote_view_PeoteGL.fromRenderContext($window.context);
	this.width = $window.__width;
	this.height = $window.__height;
	this.red = (color >> 24 & 255) / 255.0;
	this.green = (color >> 16 & 255) / 255.0;
	this.blue = (color >> 8 & 255) / 255.0;
	this.alpha = (color & 255) / 255.0;
	if(peote_view_Version.isUBO) {
		this.uniformBuffer = new peote_view_UniformBufferView();
		this.uniformBuffer.createGLBuffer(this.gl,this.width,this.height,this.xOffset,this.yOffset,this.xz,this.yz);
	}
	this.maxTextureImageUnits = this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS);
	var this1 = new Array(this.maxTextureImageUnits);
	this.glStateTexture = this1;
	var gl = this.gl;
	var shaderType = gl.VERTEX_SHADER;
	var t = peote_view_Precision.VertexFloat;
	var p = gl.getShaderPrecisionFormat(shaderType,gl.HIGH_FLOAT);
	if(p != null) {
		t.high = p.precision;
	}
	p = gl.getShaderPrecisionFormat(shaderType,gl.MEDIUM_FLOAT);
	if(p != null) {
		t.medium = p.precision;
	}
	p = gl.getShaderPrecisionFormat(shaderType,gl.LOW_FLOAT);
	if(p != null) {
		t.low = p.precision;
	}
	var shaderType = gl.VERTEX_SHADER;
	var t = peote_view_Precision.VertexInt;
	var p = gl.getShaderPrecisionFormat(shaderType,gl.HIGH_FLOAT);
	if(p != null) {
		t.high = p.precision;
	}
	p = gl.getShaderPrecisionFormat(shaderType,gl.MEDIUM_FLOAT);
	if(p != null) {
		t.medium = p.precision;
	}
	p = gl.getShaderPrecisionFormat(shaderType,gl.LOW_FLOAT);
	if(p != null) {
		t.low = p.precision;
	}
	var shaderType = gl.VERTEX_SHADER;
	var t = peote_view_Precision.VertexSampler;
	var p = gl.getShaderPrecisionFormat(shaderType,gl.HIGH_FLOAT);
	if(p != null) {
		t.high = p.precision;
	}
	p = gl.getShaderPrecisionFormat(shaderType,gl.MEDIUM_FLOAT);
	if(p != null) {
		t.medium = p.precision;
	}
	p = gl.getShaderPrecisionFormat(shaderType,gl.LOW_FLOAT);
	if(p != null) {
		t.low = p.precision;
	}
	var shaderType = gl.FRAGMENT_SHADER;
	var t = peote_view_Precision.FragmentFloat;
	var p = gl.getShaderPrecisionFormat(shaderType,gl.HIGH_FLOAT);
	if(p != null) {
		t.high = p.precision;
	}
	p = gl.getShaderPrecisionFormat(shaderType,gl.MEDIUM_FLOAT);
	if(p != null) {
		t.medium = p.precision;
	}
	p = gl.getShaderPrecisionFormat(shaderType,gl.LOW_FLOAT);
	if(p != null) {
		t.low = p.precision;
	}
	var shaderType = gl.FRAGMENT_SHADER;
	var t = peote_view_Precision.FragmentInt;
	var p = gl.getShaderPrecisionFormat(shaderType,gl.HIGH_FLOAT);
	if(p != null) {
		t.high = p.precision;
	}
	p = gl.getShaderPrecisionFormat(shaderType,gl.MEDIUM_FLOAT);
	if(p != null) {
		t.medium = p.precision;
	}
	p = gl.getShaderPrecisionFormat(shaderType,gl.LOW_FLOAT);
	if(p != null) {
		t.low = p.precision;
	}
	var shaderType = gl.FRAGMENT_SHADER;
	var t = peote_view_Precision.FragmentSampler;
	var p = gl.getShaderPrecisionFormat(shaderType,gl.HIGH_FLOAT);
	if(p != null) {
		t.high = p.precision;
	}
	p = gl.getShaderPrecisionFormat(shaderType,gl.MEDIUM_FLOAT);
	if(p != null) {
		t.medium = p.precision;
	}
	p = gl.getShaderPrecisionFormat(shaderType,gl.LOW_FLOAT);
	if(p != null) {
		t.low = p.precision;
	}
	if(peote_view_Version.isINSTANCED) {
		var this1 = new Int32Array(4);
		this.pickInt32 = this1;
		this.pickTexture = peote_view_utils_TexUtils.createPickingTexture(this.gl,true);
	} else {
		var this1 = new Uint8Array(4);
		this.pickUInt8 = this1;
		this.pickTexture = peote_view_utils_TexUtils.createPickingTexture(this.gl);
	}
	this.pickDepthBuffer = this.gl.createRenderbuffer();
	var gl = this.gl;
	var texture = this.pickTexture;
	var depthBuffer = this.pickDepthBuffer;
	var framebuffer = gl.createFramebuffer();
	gl.bindRenderbuffer(gl.RENDERBUFFER,depthBuffer);
	peote_view_utils_GLTool.clearGlErrorQueue(gl);
	gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT24,1,1);
	if(peote_view_utils_GLTool.getLastGlError(gl) == gl.INVALID_ENUM) {
		haxe_Log.trace("switching to DEPTH_COMPONENT16 for framebuffer",{ fileName : "peote/view/utils/GLTool.hx", lineNumber : 41, className : "peote.view.utils.GLTool", methodName : "createFramebuffer"});
		gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT16,1,1);
	}
	gl.bindFramebuffer(gl.FRAMEBUFFER,framebuffer);
	gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,depthBuffer);
	gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,texture,0);
	if(gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
		throw haxe_Exception.thrown("Error: Framebuffer not complete!");
	}
	gl.bindFramebuffer(gl.FRAMEBUFFER,null);
	gl.bindRenderbuffer(gl.RENDERBUFFER,null);
	this.pickFB = framebuffer;
	this.background = new peote_view_utils_Background(this.gl);
	this.displayList = new peote_view_utils_RenderList_$peote_$view_$Display(new haxe_ds_ObjectMap());
	this.framebufferDisplayList = new peote_view_utils_RenderList_$peote_$view_$Display(new haxe_ds_ObjectMap());
	if(registerEvents) {
		$window.onRender.add($bind(this,this.render));
		$window.onResize.add($bind(this,this.resize));
	}
};
$hxClasses["peote.view.PeoteView"] = peote_view_PeoteView;
peote_view_PeoteView.__name__ = "peote.view.PeoteView";
peote_view_PeoteView.prototype = {
	isTextureStateChange: function(activeTextureUnit,texture) {
		if(texture.updated) {
			texture.updated = false;
			var this1 = new Array(this.maxTextureImageUnits);
			this.glStateTexture = this1;
			this.glStateTexture[activeTextureUnit] = texture.glTexture;
			return true;
		}
		if(this.glStateTexture[activeTextureUnit] != texture.glTexture) {
			this.glStateTexture[activeTextureUnit] = texture.glTexture;
			return true;
		} else {
			return false;
		}
	}
	,addDisplay: function(display,atDisplay,addBefore) {
		if(addBefore == null) {
			addBefore = false;
		}
		display.addToPeoteView(this,atDisplay,addBefore);
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
		if(peote_view_Version.isUBO) {
			var _this = this.uniformBuffer;
			var gl = this.gl;
			_this.uniformBytes.b_UFloat32[0] = width;
			_this.uniformBytes.b_UFloat32[1] = height;
			gl.bindBuffer(gl.UNIFORM_BUFFER,_this.uniformBuffer);
			gl.bufferSubData(gl.UNIFORM_BUFFER,0,_this.resolutionBufferPointer);
			gl.bindBuffer(gl.UNIFORM_BUFFER,null);
		}
		if(this.onResize != null) {
			this.onResize(width,height);
		}
	}
	,getElementAt: function(posX,posY,display,program) {
		this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this.pickFB);
		var element = this.pick(posX,posY,display,program,-1);
		this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,null);
		return element;
	}
	,pick: function(posX,posY,display,program,toElement) {
		if(!program.buffer.hasPicking()) {
			throw haxe_Exception.thrown("Error: opengl-Picking - type of buffer/element is not pickable !");
		}
		this.gl.viewport(0,0,1,1);
		this.gl.scissor(0,0,1,1);
		this.gl.enable(this.gl.SCISSOR_TEST);
		if(peote_view_Version.isINSTANCED) {
			this.gl.clearBufferiv(this.gl.COLOR,0,[0,0,0,0]);
			this.gl.clear(this.gl.DEPTH_BUFFER_BIT);
			this.gl.depthFunc(this.gl.LEQUAL);
		} else {
			this.gl.clearColor(0.0,0.0,0.0,0.0);
			this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
			this.gl.depthFunc(this.gl.LEQUAL);
		}
		var xOff = this.xOffset - (this.xOffset + posX - this.xOffset) / this.xz;
		var yOff = this.yOffset - (this.yOffset + posY - this.yOffset) / this.xz;
		var toElement1 = toElement;
		if(toElement1 == null) {
			toElement1 = -1;
		}
		var xz = this.xz;
		var yz = this.yz;
		var sx = Math.floor((display.x + xOff) * xz);
		var sy = Math.floor((display.y + yOff) * yz);
		var sw = Math.floor(display.width * xz);
		var sh = Math.floor(display.height * yz);
		if(sx < 0) {
			sw += sx;
		}
		sx = Math.max(0,Math.min(1,sx)) | 0;
		sw = Math.max(0,Math.min(1 - sx,sw)) | 0;
		if(sy < 0) {
			sh += sy;
		}
		sy = Math.max(0,Math.min(1,sy)) | 0;
		sh = Math.max(0,Math.min(1 - sy,sh)) | 0;
		this.gl.scissor(sx,1 - sh - sy,sw,sh);
		program.gl.useProgram(program.glProgramPicking);
		program.textureListItem = program.textureListPicking.first;
		while(program.textureListItem != null) {
			if(this.isTextureStateChange(program.textureListItem.value.unit,program.textureListItem.value.texture)) {
				program.gl.activeTexture(program.gl.TEXTURE0 + program.textureListItem.value.unit);
				program.gl.bindTexture(program.gl.TEXTURE_2D,program.textureListItem.value.texture.glTexture);
			}
			program.gl.uniform1i(program.textureListItem.value.uniformLoc,program.textureListItem.value.unit);
			program.textureListItem = program.textureListItem.next;
		}
		program.gl.uniform2f(program.uRESOLUTION_PICK,1,1);
		program.gl.uniform2f(program.uZOOM_PICK,this.xz * display.xz,this.yz * display.yz);
		program.gl.uniform2f(program.uOFFSET_PICK,(display.x + display.xOffset + xOff) / display.xz,(display.y + display.yOffset + yOff) / display.yz);
		program.gl.uniform1f(program.uTIME_PICK,(this.isRun ? new Date().getTime() / 1000 - this.startTime : this.stopTime) * this.speed);
		var _g = 0;
		var _g1 = program.uniformFloats.length;
		while(_g < _g1) {
			var i = _g++;
			program.gl.uniform1f(program.uniformFloatPickLocations[i],program.uniformFloats[i].value);
		}
		var enabled = toElement1 == -1 && program.zIndexEnabled;
		if(enabled && !this.glStateDepth) {
			this.glStateDepth = true;
			this.gl.enable(this.gl.DEPTH_TEST);
		} else if(!enabled && this.glStateDepth) {
			this.glStateDepth = false;
			this.gl.disable(this.gl.DEPTH_TEST);
		}
		if(this.glStateAlpha) {
			this.glStateAlpha = false;
			this.gl.disable(this.gl.BLEND);
		}
		program.buffer.pick(this,display,program,toElement1);
		program.gl.useProgram(null);
		if(this.gl.checkFramebufferStatus(this.gl.FRAMEBUFFER) == this.gl.FRAMEBUFFER_COMPLETE) {
			if(peote_view_Version.isINSTANCED) {
				this.gl.readPixels(0,0,1,1,this.gl.RGBA_INTEGER,this.gl.INT,this.pickInt32);
				return this.pickInt32[0] - 1;
			} else {
				this.gl.readPixels(0,0,1,1,this.gl.RGBA,this.gl.UNSIGNED_BYTE,this.pickUInt8);
				return this.pickUInt8[3] << 24 | this.pickUInt8[2] << 16 | this.pickUInt8[1] << 8 | this.pickUInt8[0] - 1;
			}
		} else {
			throw haxe_Exception.thrown("Error: opengl-Picking - Framebuffer not complete!");
		}
	}
	,render: function(context) {
		this.displayListItem = this.framebufferDisplayList.first;
		while(this.displayListItem != null) {
			if(this.displayListItem.value._renderFramebufferEnabled) {
				if(this.displayListItem.value.renderFramebufferFrame == this.displayListItem.value.renderFramebufferSkipFrames) {
					var display = this.displayListItem.value;
					var textureSlot = null;
					if(textureSlot == null) {
						textureSlot = display.framebufferTextureSlot;
					}
					this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,display.fbTexture.framebuffer);
					this.gl.viewport(display.fbTexture.slotWidth * (textureSlot % display.fbTexture.slotsX),display.fbTexture.slotHeight * Math.floor(textureSlot / display.fbTexture.slotsX),display.fbTexture.slotWidth,display.fbTexture.slotHeight);
					this.gl.scissor(display.fbTexture.slotWidth * (textureSlot % display.fbTexture.slotsX),display.fbTexture.slotHeight * Math.floor(textureSlot / display.fbTexture.slotsX),display.fbTexture.slotWidth,display.fbTexture.slotHeight);
					this.gl.enable(this.gl.SCISSOR_TEST);
					this.gl.clearColor(0.0,0.0,0.0,0.0);
					if(display.fbTexture.clearOnRenderInto) {
						this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT | this.gl.STENCIL_BUFFER_BIT);
					} else {
						this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.STENCIL_BUFFER_BIT);
					}
					this.gl.stencilMask(255);
					this.gl.blendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA);
					this.gl.depthFunc(this.gl.LEQUAL);
					if(display.backgroundEnabled) {
						if(true != this.colorState) {
							this.colorState = true;
							this.gl.colorMask(true,true,true,true);
						}
						var enabled = display.backgroundAlpha;
						if(enabled && !this.glStateAlpha) {
							this.glStateAlpha = true;
							this.gl.enable(this.gl.BLEND);
						} else if(!enabled && this.glStateAlpha) {
							this.glStateAlpha = false;
							this.gl.disable(this.gl.BLEND);
						}
						if(0 != this.maskState) {
							this.gl.disable(this.gl.STENCIL_TEST);
							this.maskState = 0;
							this.maskState = 0;
						}
						this.background.render(display.red,display.green,display.blue,display.alpha);
					}
					display.programListItem = display.programList.first;
					while(display.programListItem != null) {
						var _this = display.programListItem.value;
						_this.gl.useProgram(_this.glProgram);
						_this.textureListItem = _this.textureList.first;
						while(_this.textureListItem != null) {
							if(this.isTextureStateChange(_this.textureListItem.value.unit,_this.textureListItem.value.texture)) {
								_this.gl.activeTexture(_this.gl.TEXTURE0 + _this.textureListItem.value.unit);
								_this.gl.bindTexture(_this.gl.TEXTURE_2D,_this.textureListItem.value.texture.glTexture);
							}
							_this.gl.uniform1i(_this.textureListItem.value.uniformLoc,_this.textureListItem.value.unit);
							_this.textureListItem = _this.textureListItem.next;
						}
						if(peote_view_Version.isUBO) {
							_this.gl.bindBufferBase(_this.gl.UNIFORM_BUFFER,0,display.uniformBufferViewFB.uniformBuffer);
							_this.gl.bindBufferBase(_this.gl.UNIFORM_BUFFER,1,display.uniformBufferFB.uniformBuffer);
						} else {
							_this.gl.uniform2f(_this.uRESOLUTION,display.width,-display.height);
							_this.gl.uniform2f(_this.uZOOM,display.xz,display.yz);
							_this.gl.uniform2f(_this.uOFFSET,(display.xOffset + this.xOffset) / display.xz,(display.yOffset + this.yOffset - display.height) / display.yz);
						}
						_this.gl.uniform1f(_this.uTIME,(this.isRun ? new Date().getTime() / 1000 - this.startTime : this.stopTime) * this.speed);
						var _g = 0;
						var _g1 = _this.uniformFloats.length;
						while(_g < _g1) {
							var i = _g++;
							_this.gl.uniform1f(_this.uniformFloatLocations[i],_this.uniformFloats[i].value);
						}
						var enabled1 = _this.colorEnabled;
						if(enabled1 != this.colorState) {
							this.colorState = enabled1;
							this.gl.colorMask(enabled1,enabled1,enabled1,enabled1);
						}
						var enabled2 = _this.zIndexEnabled;
						if(enabled2 && !this.glStateDepth) {
							this.glStateDepth = true;
							this.gl.enable(this.gl.DEPTH_TEST);
						} else if(!enabled2 && this.glStateDepth) {
							this.glStateDepth = false;
							this.gl.disable(this.gl.DEPTH_TEST);
						}
						var enabled3 = _this.alphaEnabled;
						if(enabled3 && !this.glStateAlpha) {
							this.glStateAlpha = true;
							this.gl.enable(this.gl.BLEND);
						} else if(!enabled3 && this.glStateAlpha) {
							this.glStateAlpha = false;
							this.gl.disable(this.gl.BLEND);
						}
						var mask = _this.mask;
						var clearMask = _this.clearMask;
						if(mask != this.maskState) {
							if(mask == 0) {
								this.gl.disable(this.gl.STENCIL_TEST);
								this.maskState = mask;
							} else if(mask == 2) {
								if(clearMask) {
									this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
								}
								if(this.maskState == 0) {
									this.gl.enable(this.gl.STENCIL_TEST);
								}
								this.gl.stencilFunc(this.gl.ALWAYS,1,255);
								this.gl.stencilOp(this.gl.REPLACE,this.gl.REPLACE,this.gl.REPLACE);
								this.maskState = mask;
							} else {
								if(this.maskState == 0) {
									this.gl.enable(this.gl.STENCIL_TEST);
								}
								this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
								this.gl.stencilFunc(this.gl.EQUAL,1,255);
							}
							this.maskState = mask;
						}
						_this.buffer.render(this,display,_this);
						_this.gl.useProgram(null);
						display.programListItem = display.programListItem.next;
					}
					this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,null);
					if(display.fbTexture.createMipmaps) {
						this.gl.bindTexture(this.gl.TEXTURE_2D,display.fbTexture.glTexture);
						this.gl.generateMipmap(this.gl.TEXTURE_2D);
						this.gl.bindTexture(this.gl.TEXTURE_2D,null);
						display.fbTexture.updated = true;
					}
					this.displayListItem.value.renderFramebufferFrame = 0;
				} else {
					this.displayListItem.value.renderFramebufferFrame++;
				}
			}
			this.displayListItem = this.displayListItem.next;
		}
		var w = this.width;
		var h = this.height;
		this.gl.viewport(0,0,w,h);
		this.gl.scissor(0,0,w,h);
		this.gl.enable(this.gl.SCISSOR_TEST);
		this.gl.clearColor(this.red,this.green,this.blue,this.alpha);
		this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT | this.gl.STENCIL_BUFFER_BIT);
		this.gl.stencilMask(255);
		this.gl.blendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA);
		this.gl.depthFunc(this.gl.LEQUAL);
		this.displayListItem = this.displayList.first;
		while(this.displayListItem != null) {
			var _this = this.displayListItem.value;
			if(_this.isVisible) {
				var w = this.width;
				var h = this.height;
				var xz = this.xz;
				var yz = this.yz;
				var sx = Math.floor((_this.x + this.xOffset) * xz);
				var sy = Math.floor((_this.y + this.yOffset) * yz);
				var sw = Math.floor(_this.width * xz);
				var sh = Math.floor(_this.height * yz);
				if(sx < 0) {
					sw += sx;
				}
				sx = Math.max(0,Math.min(w,sx)) | 0;
				sw = Math.max(0,Math.min(w - sx,sw)) | 0;
				if(sy < 0) {
					sh += sy;
				}
				sy = Math.max(0,Math.min(h,sy)) | 0;
				sh = Math.max(0,Math.min(h - sy,sh)) | 0;
				this.gl.scissor(sx,h - sh - sy,sw,sh);
				if(_this.backgroundEnabled) {
					if(true != this.colorState) {
						this.colorState = true;
						this.gl.colorMask(true,true,true,true);
					}
					var enabled = _this.backgroundDepth;
					if(enabled && !this.glStateDepth) {
						this.glStateDepth = true;
						this.gl.enable(this.gl.DEPTH_TEST);
					} else if(!enabled && this.glStateDepth) {
						this.glStateDepth = false;
						this.gl.disable(this.gl.DEPTH_TEST);
					}
					var enabled1 = _this.backgroundAlpha;
					if(enabled1 && !this.glStateAlpha) {
						this.glStateAlpha = true;
						this.gl.enable(this.gl.BLEND);
					} else if(!enabled1 && this.glStateAlpha) {
						this.glStateAlpha = false;
						this.gl.disable(this.gl.BLEND);
					}
					if(0 != this.maskState) {
						this.gl.disable(this.gl.STENCIL_TEST);
						this.maskState = 0;
						this.maskState = 0;
					}
					this.background.render(_this.red,_this.green,_this.blue,_this.alpha);
				}
				_this.programListItem = _this.programList.first;
				while(_this.programListItem != null) {
					var _this1 = _this.programListItem.value;
					if(_this1.isVisible) {
						_this1.gl.useProgram(_this1.glProgram);
						_this1.textureListItem = _this1.textureList.first;
						while(_this1.textureListItem != null) {
							if(this.isTextureStateChange(_this1.textureListItem.value.unit,_this1.textureListItem.value.texture)) {
								_this1.gl.activeTexture(_this1.gl.TEXTURE0 + _this1.textureListItem.value.unit);
								_this1.gl.bindTexture(_this1.gl.TEXTURE_2D,_this1.textureListItem.value.texture.glTexture);
							}
							_this1.gl.uniform1i(_this1.textureListItem.value.uniformLoc,_this1.textureListItem.value.unit);
							_this1.textureListItem = _this1.textureListItem.next;
						}
						if(peote_view_Version.isUBO) {
							_this1.gl.bindBufferBase(_this1.gl.UNIFORM_BUFFER,0,this.uniformBuffer.uniformBuffer);
							_this1.gl.bindBufferBase(_this1.gl.UNIFORM_BUFFER,1,_this.uniformBuffer.uniformBuffer);
						} else {
							_this1.gl.uniform2f(_this1.uRESOLUTION,this.width,this.height);
							_this1.gl.uniform2f(_this1.uZOOM,this.xz * _this.xz,this.yz * _this.yz);
							_this1.gl.uniform2f(_this1.uOFFSET,(_this.x + _this.xOffset + this.xOffset) / _this.xz,(_this.y + _this.yOffset + this.yOffset) / _this.yz);
						}
						_this1.gl.uniform1f(_this1.uTIME,(this.isRun ? new Date().getTime() / 1000 - this.startTime : this.stopTime) * this.speed);
						var _g = 0;
						var _g1 = _this1.uniformFloats.length;
						while(_g < _g1) {
							var i = _g++;
							_this1.gl.uniform1f(_this1.uniformFloatLocations[i],_this1.uniformFloats[i].value);
						}
						var enabled2 = _this1.colorEnabled;
						if(enabled2 != this.colorState) {
							this.colorState = enabled2;
							this.gl.colorMask(enabled2,enabled2,enabled2,enabled2);
						}
						var enabled3 = _this1.zIndexEnabled;
						if(enabled3 && !this.glStateDepth) {
							this.glStateDepth = true;
							this.gl.enable(this.gl.DEPTH_TEST);
						} else if(!enabled3 && this.glStateDepth) {
							this.glStateDepth = false;
							this.gl.disable(this.gl.DEPTH_TEST);
						}
						var enabled4 = _this1.alphaEnabled;
						if(enabled4 && !this.glStateAlpha) {
							this.glStateAlpha = true;
							this.gl.enable(this.gl.BLEND);
						} else if(!enabled4 && this.glStateAlpha) {
							this.glStateAlpha = false;
							this.gl.disable(this.gl.BLEND);
						}
						var mask = _this1.mask;
						var clearMask = _this1.clearMask;
						if(mask != this.maskState) {
							if(mask == 0) {
								this.gl.disable(this.gl.STENCIL_TEST);
								this.maskState = mask;
							} else if(mask == 2) {
								if(clearMask) {
									this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
								}
								if(this.maskState == 0) {
									this.gl.enable(this.gl.STENCIL_TEST);
								}
								this.gl.stencilFunc(this.gl.ALWAYS,1,255);
								this.gl.stencilOp(this.gl.REPLACE,this.gl.REPLACE,this.gl.REPLACE);
								this.maskState = mask;
							} else {
								if(this.maskState == 0) {
									this.gl.enable(this.gl.STENCIL_TEST);
								}
								this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
								this.gl.stencilFunc(this.gl.EQUAL,1,255);
							}
							this.maskState = mask;
						}
						_this1.buffer.render(this,_this,_this1);
						_this1.gl.useProgram(null);
					}
					_this.programListItem = _this.programListItem.next;
				}
			}
			this.displayListItem = this.displayListItem.next;
		}
	}
	,__class__: peote_view_PeoteView
};
var peote_view_ActiveTexture = function(unit,texture,uniformLoc) {
	this.unit = unit;
	this.texture = texture;
	this.uniformLoc = uniformLoc;
};
$hxClasses["peote.view.ActiveTexture"] = peote_view_ActiveTexture;
peote_view_ActiveTexture.__name__ = "peote.view.ActiveTexture";
peote_view_ActiveTexture.prototype = {
	__class__: peote_view_ActiveTexture
};
var peote_view_Texture = function(slotWidth,slotHeight,imageSlots,colorChannels,createMipmaps,minFilter,magFilter,useFloat,maxTextureSize) {
	if(maxTextureSize == null) {
		maxTextureSize = 16384;
	}
	if(useFloat == null) {
		useFloat = false;
	}
	if(magFilter == null) {
		magFilter = 0;
	}
	if(minFilter == null) {
		minFilter = 0;
	}
	if(createMipmaps == null) {
		createMipmaps = false;
	}
	if(colorChannels == null) {
		colorChannels = 4;
	}
	if(imageSlots == null) {
		imageSlots = 1;
	}
	this.displays = [];
	this.programs = [];
	this.updated = false;
	this.useFloat = false;
	this.minFilter = 0;
	this.magFilter = 0;
	this.createMipmaps = false;
	this.images = new haxe_ds_ObjectMap();
	this.tilesY = 1;
	this.tilesX = 1;
	this.slotsY = 1;
	this.slotsX = 1;
	this.freeSlots = 1;
	this.imageSlots = 1;
	this.height = 0;
	this.width = 0;
	this.colorChannels = 4;
	this.clearOnRenderInto = true;
	this.glDepthBuffer = null;
	this.framebuffer = null;
	this.glTexture = null;
	this.gl = null;
	this.slotWidth = slotWidth;
	this.slotHeight = slotHeight;
	this.imageSlots = this.freeSlots = imageSlots;
	this.colorChannels = colorChannels;
	this.createMipmaps = createMipmaps;
	this.magFilter = magFilter;
	this.minFilter = minFilter;
	this.useFloat = useFloat;
	var p = peote_view_utils_TexUtils.optimalTextureSize(imageSlots,slotWidth,slotHeight,maxTextureSize);
	this.width = p.width;
	this.height = p.height;
	this.slotsX = p.slotsX;
	this.slotsY = p.slotsY;
};
$hxClasses["peote.view.Texture"] = peote_view_Texture;
peote_view_Texture.__name__ = "peote.view.Texture";
peote_view_Texture.prototype = {
	setImage: function(image,imageSlot,tilesX,tilesY) {
		if(imageSlot == null) {
			imageSlot = 0;
		}
		if(this.images.h.__keys__[image.__id__] != null) {
			throw haxe_Exception.thrown("Error, image is already inside texture inside slot " + this.images.h[image.__id__].imageSlot);
		}
		if(tilesX != null) {
			this.tilesX = tilesX;
		}
		if(tilesY != null) {
			this.tilesY = tilesY;
		}
		this.images.set(image,{ imageSlot : imageSlot});
		this.freeSlots--;
		if(this.gl != null) {
			if(this.glTexture == null) {
				if(this.width > this.gl.getParameter(this.gl.MAX_TEXTURE_SIZE) || this.height > this.gl.getParameter(this.gl.MAX_TEXTURE_SIZE)) {
					throw haxe_Exception.thrown("Error, texture size is greater then gl.MAX_TEXTURE_SIZE");
				}
				this.glTexture = peote_view_utils_TexUtils.createEmptyTexture(this.gl,this.width,this.height,this.colorChannels,this.createMipmaps,this.magFilter,this.minFilter,this.useFloat);
			}
			this.bufferImage(image,{ imageSlot : imageSlot});
		}
	}
	,bufferImage: function(image,imgProp) {
		var gl = this.gl;
		var x = this.slotWidth * (imgProp.imageSlot % this.slotsX);
		var y = this.slotHeight * Math.floor(imgProp.imageSlot / this.slotsX);
		var w = image.width;
		var h = image.height;
		var createMipmaps = this.createMipmaps;
		var useFloat = this.useFloat;
		if(useFloat == null) {
			useFloat = false;
		}
		if(createMipmaps == null) {
			createMipmaps = false;
		}
		gl.bindTexture(gl.TEXTURE_2D,this.glTexture);
		if(useFloat) {
			var this1 = new Float32Array(w * h * 4);
			var fa = this1;
			var _g = 0;
			var _g1 = w * h * 4;
			while(_g < _g1) {
				var i = _g++;
				fa[i] = image.dataUInt8[i] / 255;
			}
			gl.texSubImage2D(gl.TEXTURE_2D,0,x,y,w,h,gl.RGBA,gl.FLOAT,fa);
		} else {
			gl.texSubImage2D(gl.TEXTURE_2D,0,x,y,w,h,gl.RGBA,gl.UNSIGNED_BYTE,image.dataUInt8);
		}
		if(createMipmaps) {
			gl.generateMipmap(gl.TEXTURE_2D);
		}
		gl.bindTexture(gl.TEXTURE_2D,null);
		this.updated = true;
	}
	,__class__: peote_view_Texture
};
var peote_view__$TextureData_TextureDataImpl = function(width,height,type,data) {
	if(type == null) {
		type = 0;
	}
	this.dataUInt8 = null;
	this.height = 0;
	this.width = 0;
	this.width = width;
	this.height = height;
	if(data == null) {
		var this1 = new Uint8Array(width * height);
		this.dataUInt8 = this1;
	} else {
		this.dataUInt8 = data;
	}
};
$hxClasses["peote.view._TextureData.TextureDataImpl"] = peote_view__$TextureData_TextureDataImpl;
peote_view__$TextureData_TextureDataImpl.__name__ = "peote.view._TextureData.TextureDataImpl";
peote_view__$TextureData_TextureDataImpl.prototype = {
	__class__: peote_view__$TextureData_TextureDataImpl
};
var peote_view_TextureData = {};
peote_view_TextureData.fromLimeImage = function(image) {
	var width = image.width;
	var height = image.height;
	var type = 0;
	var data = haxe_io_UInt8Array.fromBytes(new haxe_io_Bytes(new Uint8Array(image.get_data().buffer)));
	if(type == null) {
		type = 0;
	}
	var this1 = new peote_view__$TextureData_TextureDataImpl(width,height,type,data);
	return this1;
};
var peote_view_UniformBufferDisplay = function() {
	this.uniformBytes = new peote_view_utils_BufferBytes(new ArrayBuffer(32));
	var bytes = this.uniformBytes;
	var offset = 0;
	if(offset == null) {
		offset = 0;
	}
	var this1 = new Uint8Array(bytes.b.bufferValue,offset);
	this.xOffestBufferPointer = this1;
	var bytes = this.uniformBytes;
	var offset = 4;
	if(offset == null) {
		offset = 0;
	}
	var this1 = new Uint8Array(bytes.b.bufferValue,offset);
	this.yOffestBufferPointer = this1;
	var bytes = this.uniformBytes;
	var offset = 8;
	if(offset == null) {
		offset = 0;
	}
	var this1 = new Uint8Array(bytes.b.bufferValue,offset);
	this.xZoomBufferPointer = this1;
	var bytes = this.uniformBytes;
	var offset = 12;
	if(offset == null) {
		offset = 0;
	}
	var this1 = new Uint8Array(bytes.b.bufferValue,offset);
	this.yZoomBufferPointer = this1;
};
$hxClasses["peote.view.UniformBufferDisplay"] = peote_view_UniformBufferDisplay;
peote_view_UniformBufferDisplay.__name__ = "peote.view.UniformBufferDisplay";
peote_view_UniformBufferDisplay.prototype = {
	createGLBuffer: function(gl,xOffest,yOffest,xz,yz) {
		this.uniformBuffer = gl.createBuffer();
		this.uniformBytes.b_UFloat32[0] = xOffest;
		this.uniformBytes.b_UFloat32[1] = yOffest;
		this.uniformBytes.b_UFloat32[2] = xz;
		this.uniformBytes.b_UFloat32[3] = yz;
		gl.bindBuffer(gl.UNIFORM_BUFFER,this.uniformBuffer);
		var size = this.uniformBytes.length;
		var bytes = this.uniformBytes;
		var this1 = new Uint8Array(bytes.b.bufferValue,0);
		gl.bufferData(gl.UNIFORM_BUFFER,this1,gl.STATIC_DRAW);
		gl.bindBuffer(gl.UNIFORM_BUFFER,null);
	}
	,deleteGLBuffer: function(gl) {
		gl.deleteBuffer(this.uniformBuffer);
	}
	,__class__: peote_view_UniformBufferDisplay
};
var peote_view_UniformBufferView = function() {
	this.uniformBytes = new peote_view_utils_BufferBytes(new ArrayBuffer(48));
	var bytes = this.uniformBytes;
	var offset = 0;
	if(offset == null) {
		offset = 0;
	}
	var this1 = new Uint8Array(bytes.b.bufferValue,offset);
	this.resolutionBufferPointer = this1;
	var bytes = this.uniformBytes;
	var offset = 8;
	if(offset == null) {
		offset = 0;
	}
	var this1 = new Uint8Array(bytes.b.bufferValue,offset);
	this.xOffestBufferPointer = this1;
	var bytes = this.uniformBytes;
	var offset = 12;
	if(offset == null) {
		offset = 0;
	}
	var this1 = new Uint8Array(bytes.b.bufferValue,offset);
	this.yOffestBufferPointer = this1;
	var bytes = this.uniformBytes;
	var offset = 16;
	if(offset == null) {
		offset = 0;
	}
	var this1 = new Uint8Array(bytes.b.bufferValue,offset);
	this.xZoomBufferPointer = this1;
	var bytes = this.uniformBytes;
	var offset = 20;
	if(offset == null) {
		offset = 0;
	}
	var this1 = new Uint8Array(bytes.b.bufferValue,offset);
	this.yZoomBufferPointer = this1;
};
$hxClasses["peote.view.UniformBufferView"] = peote_view_UniformBufferView;
peote_view_UniformBufferView.__name__ = "peote.view.UniformBufferView";
peote_view_UniformBufferView.prototype = {
	createGLBuffer: function(gl,width,height,xOffest,yOffest,xz,yz) {
		this.uniformBuffer = gl.createBuffer();
		this.uniformBytes.b_UFloat32[0] = width;
		this.uniformBytes.b_UFloat32[1] = height;
		this.uniformBytes.b_UFloat32[2] = xOffest;
		this.uniformBytes.b_UFloat32[3] = yOffest;
		this.uniformBytes.b_UFloat32[4] = xz;
		this.uniformBytes.b_UFloat32[5] = yz;
		gl.bindBuffer(gl.UNIFORM_BUFFER,this.uniformBuffer);
		var size = this.uniformBytes.length;
		var bytes = this.uniformBytes;
		var this1 = new Uint8Array(bytes.b.bufferValue,0);
		gl.bufferData(gl.UNIFORM_BUFFER,this1,gl.STATIC_DRAW);
		gl.bindBuffer(gl.UNIFORM_BUFFER,null);
	}
	,deleteGLBuffer: function(gl) {
		gl.deleteBuffer(this.uniformBuffer);
	}
	,__class__: peote_view_UniformBufferView
};
var peote_view_UniformFloat = function(name,value) {
	this.name = name;
	this.value = value;
};
$hxClasses["peote.view.UniformFloat"] = peote_view_UniformFloat;
peote_view_UniformFloat.__name__ = "peote.view.UniformFloat";
peote_view_UniformFloat.prototype = {
	__class__: peote_view_UniformFloat
};
var peote_view_utils_Background = function(gl) {
	this.gl = gl;
	this.createBuffer();
	this.createProgram();
};
$hxClasses["peote.view.utils.Background"] = peote_view_utils_Background;
peote_view_utils_Background.__name__ = "peote.view.utils.Background";
peote_view_utils_Background.prototype = {
	createBuffer: function() {
		var bytes = new peote_view_utils_BufferBytes(new ArrayBuffer(32));
		bytes.b_UFloat32[0] = 1;
		bytes.b_UFloat32[1] = 1;
		bytes.b_UFloat32[2] = 0;
		bytes.b_UFloat32[3] = 1;
		bytes.b_UFloat32[4] = 1;
		bytes.b_UFloat32[5] = 0;
		bytes.b_UFloat32[6] = 0;
		bytes.b_UFloat32[7] = 0;
		this.buffer = this.gl.createBuffer();
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.buffer);
		var this1 = new Uint8Array(bytes.b.bufferValue,0);
		this.gl.bufferData(this.gl.ARRAY_BUFFER,this1,this.gl.STATIC_DRAW);
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null);
	}
	,createProgram: function() {
		var precision = "";
		var t = peote_view_Precision.VertexFloat;
		if((t.high > 0 && false ? "highp" : t.medium > 0 && false ? "mediump" : t.low > 0 ? "lowp" : null) != null) {
			precision = "precision lowp float;";
		} else {
			var t = peote_view_Precision.VertexFloat;
			if((t.high > 0 && false ? "highp" : t.medium > 0 ? "mediump" : t.low > 0 ? "lowp" : null) != null) {
				precision = "precision mediump float;";
			}
		}
		var gl = this.gl;
		var type = this.gl.VERTEX_SHADER;
		var glShader = gl.createShader(type);
		gl.shaderSource(glShader,precision + "\t\n\t\t\tattribute vec2 aPosition;\n\t\t\tvoid main(void)\n\t\t\t{\n\t\t\t\tgl_Position = mat4 (\n\t\t\t\t\tvec4(2.0, 0.0, 0.0, 0.0),\n\t\t\t\t\tvec4(0.0, -2.0, 0.0, 0.0),\n\t\t\t\t\tvec4(0.0, 0.0, -1.0, 0.0),\n\t\t\t\t\tvec4(-1.0, 1.0, 0.0, 1.0)\n\t\t\t\t) * vec4 (aPosition, -1.0 ,1.0);\n\t\t\t}\n\t\t");
		gl.compileShader(glShader);
		var glVertexShader;
		if(gl.getShaderParameter(glShader,gl.COMPILE_STATUS) == 0) {
			throw haxe_Exception.thrown("ERROR compiling " + (type == gl.VERTEX_SHADER ? "vertex" : "fragment") + " shader\n" + Std.string(gl.getShaderInfoLog(glShader)));
		} else {
			glVertexShader = glShader;
		}
		var t = peote_view_Precision.FragmentFloat;
		if((t.high > 0 && false ? "highp" : t.medium > 0 && false ? "mediump" : t.low > 0 ? "lowp" : null) != null) {
			precision = "precision lowp float;";
		} else {
			var t = peote_view_Precision.FragmentFloat;
			if((t.high > 0 && false ? "highp" : t.medium > 0 ? "mediump" : t.low > 0 ? "lowp" : null) != null) {
				precision = "precision mediump float;";
			}
		}
		var gl = this.gl;
		var type = this.gl.FRAGMENT_SHADER;
		var glShader = gl.createShader(type);
		gl.shaderSource(glShader,precision + "\n\t\t\tuniform vec4 uRGBA;\n\t\t\tvoid main(void)\n\t\t\t{\n\t\t\t\tgl_FragColor = uRGBA;\n\t\t\t\t\n\t\t\t\t// TODO: Fix for old FF\n\t\t\t\tgl_FragColor.w = clamp(uRGBA.w, 0.003, 1.0);\n\t\t\t}\n\t\t");
		gl.compileShader(glShader);
		var glFragmentShader;
		if(gl.getShaderParameter(glShader,gl.COMPILE_STATUS) == 0) {
			throw haxe_Exception.thrown("ERROR compiling " + (type == gl.VERTEX_SHADER ? "vertex" : "fragment") + " shader\n" + Std.string(gl.getShaderInfoLog(glShader)));
		} else {
			glFragmentShader = glShader;
		}
		this.glProgram = this.gl.createProgram();
		this.gl.attachShader(this.glProgram,glVertexShader);
		this.gl.attachShader(this.glProgram,glFragmentShader);
		this.gl.deleteShader(glVertexShader);
		this.gl.deleteShader(glFragmentShader);
		this.gl.bindAttribLocation(this.glProgram,0,"aPosition");
		var gl = this.gl;
		var glProgram = this.glProgram;
		gl.linkProgram(glProgram);
		if(gl.getProgramParameter(glProgram,gl.LINK_STATUS) == 0) {
			throw haxe_Exception.thrown(Std.string(gl.getProgramInfoLog(glProgram)) + "VALIDATE_STATUS: " + Std.string(gl.getProgramParameter(glProgram,gl.VALIDATE_STATUS)) + "ERROR: " + Std.string(gl.getError()));
		}
		this.uRGBA = this.gl.getUniformLocation(this.glProgram,"uRGBA");
	}
	,render: function(r,g,b,a) {
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.buffer);
		this.gl.enableVertexAttribArray(0);
		this.gl.vertexAttribPointer(0,2,this.gl.FLOAT,false,8,0);
		this.gl.useProgram(this.glProgram);
		this.gl.uniform4f(this.uRGBA,r,g,b,a);
		this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,4);
		this.gl.disableVertexAttribArray(0);
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null);
	}
	,__class__: peote_view_utils_Background
};
var peote_view_utils_BufferBytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
	this.b_UFloat32 = new Float32Array(data);
	this.b_Int32 = new Int32Array(data);
	this.b_Uint16 = new Uint16Array(data);
};
$hxClasses["peote.view.utils.BufferBytes"] = peote_view_utils_BufferBytes;
peote_view_utils_BufferBytes.__name__ = "peote.view.utils.BufferBytes";
peote_view_utils_BufferBytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.b[pos++] = value;
		}
	}
	,__class__: peote_view_utils_BufferBytes
};
var peote_view_utils_GLTool = function() { };
$hxClasses["peote.view.utils.GLTool"] = peote_view_utils_GLTool;
peote_view_utils_GLTool.__name__ = "peote.view.utils.GLTool";
peote_view_utils_GLTool.clearGlErrorQueue = function(gl) {
	while(gl.getError() != gl.NO_ERROR) {
	}
};
peote_view_utils_GLTool.getLastGlError = function(gl) {
	var err = gl.getError();
	if(err != gl.NO_ERROR) {
		if(err == gl.INVALID_ENUM) {
			haxe_Log.trace("(GL-Error: INVALID_ENUM)",{ fileName : "peote/view/utils/GLTool.hx", lineNumber : 22, className : "peote.view.utils.GLTool", methodName : "getLastGlError"});
		} else if(err == gl.INVALID_VALUE) {
			haxe_Log.trace("(GL-Error: INVALID_VALUE)",{ fileName : "peote/view/utils/GLTool.hx", lineNumber : 23, className : "peote.view.utils.GLTool", methodName : "getLastGlError"});
		} else if(err == gl.INVALID_OPERATION) {
			haxe_Log.trace("(GL-Error: INVALID_OPERATION)",{ fileName : "peote/view/utils/GLTool.hx", lineNumber : 24, className : "peote.view.utils.GLTool", methodName : "getLastGlError"});
		} else if(err == gl.OUT_OF_MEMORY) {
			haxe_Log.trace("(GL-Error: OUT_OF_MEMORY)",{ fileName : "peote/view/utils/GLTool.hx", lineNumber : 25, className : "peote.view.utils.GLTool", methodName : "getLastGlError"});
		} else {
			haxe_Log.trace("GL-Error: " + err,{ fileName : "peote/view/utils/GLTool.hx", lineNumber : 26, className : "peote.view.utils.GLTool", methodName : "getLastGlError"});
		}
	}
	return err;
};
var peote_view_utils_RenderListItem_$peote_$view_$ActiveTexture = function(value,prev,next) {
	this.value = value;
	this.next = next;
	this.prev = prev;
	if(prev != null) {
		prev.next = this;
	}
	if(next != null) {
		next.prev = this;
	}
};
$hxClasses["peote.view.utils.RenderListItem_peote_view_ActiveTexture"] = peote_view_utils_RenderListItem_$peote_$view_$ActiveTexture;
peote_view_utils_RenderListItem_$peote_$view_$ActiveTexture.__name__ = "peote.view.utils.RenderListItem_peote_view_ActiveTexture";
peote_view_utils_RenderListItem_$peote_$view_$ActiveTexture.prototype = {
	__class__: peote_view_utils_RenderListItem_$peote_$view_$ActiveTexture
};
var peote_view_utils_RenderListItem_$peote_$view_$Display = function(value,prev,next) {
	this.value = value;
	this.next = next;
	this.prev = prev;
	if(prev != null) {
		prev.next = this;
	}
	if(next != null) {
		next.prev = this;
	}
};
$hxClasses["peote.view.utils.RenderListItem_peote_view_Display"] = peote_view_utils_RenderListItem_$peote_$view_$Display;
peote_view_utils_RenderListItem_$peote_$view_$Display.__name__ = "peote.view.utils.RenderListItem_peote_view_Display";
peote_view_utils_RenderListItem_$peote_$view_$Display.prototype = {
	__class__: peote_view_utils_RenderListItem_$peote_$view_$Display
};
var peote_view_utils_RenderListItem_$peote_$view_$Program = function(value,prev,next) {
	this.value = value;
	this.next = next;
	this.prev = prev;
	if(prev != null) {
		prev.next = this;
	}
	if(next != null) {
		next.prev = this;
	}
};
$hxClasses["peote.view.utils.RenderListItem_peote_view_Program"] = peote_view_utils_RenderListItem_$peote_$view_$Program;
peote_view_utils_RenderListItem_$peote_$view_$Program.__name__ = "peote.view.utils.RenderListItem_peote_view_Program";
peote_view_utils_RenderListItem_$peote_$view_$Program.prototype = {
	__class__: peote_view_utils_RenderListItem_$peote_$view_$Program
};
var peote_view_utils_RenderList_$peote_$view_$ActiveTexture = function(itemMap) {
	this.last = null;
	this.first = null;
	this.itemMap = itemMap;
};
$hxClasses["peote.view.utils.RenderList_peote_view_ActiveTexture"] = peote_view_utils_RenderList_$peote_$view_$ActiveTexture;
peote_view_utils_RenderList_$peote_$view_$ActiveTexture.__name__ = "peote.view.utils.RenderList_peote_view_ActiveTexture";
peote_view_utils_RenderList_$peote_$view_$ActiveTexture.prototype = {
	add: function(value,atValue,addBefore) {
		var newItem = null;
		if(addBefore) {
			if(this.first == null) {
				newItem = this.first = this.last = new peote_view_utils_RenderListItem_$peote_$view_$ActiveTexture(value,null,null);
			} else if(atValue == null) {
				newItem = this.first = new peote_view_utils_RenderListItem_$peote_$view_$ActiveTexture(value,null,this.first);
			} else {
				var atItem = this.itemMap.get(atValue);
				if(atItem != null) {
					newItem = new peote_view_utils_RenderListItem_$peote_$view_$ActiveTexture(value,atItem.prev,atItem);
					if(atItem == this.first) {
						this.first = newItem;
					}
				} else {
					throw haxe_Exception.thrown("Error on add: " + Std.string(atValue) + " is not in list.");
				}
			}
		} else if(this.last == null) {
			newItem = this.first = this.last = new peote_view_utils_RenderListItem_$peote_$view_$ActiveTexture(value,null,null);
		} else if(atValue == null) {
			newItem = this.last = new peote_view_utils_RenderListItem_$peote_$view_$ActiveTexture(value,this.last,null);
		} else {
			var atItem = this.itemMap.get(atValue);
			if(atItem != null) {
				newItem = new peote_view_utils_RenderListItem_$peote_$view_$ActiveTexture(value,atItem,atItem.next);
				if(atItem == this.last) {
					this.last = newItem;
				}
			} else {
				throw haxe_Exception.thrown("Error on add: " + Std.string(atValue) + " is not in list.");
			}
		}
		var oldItem = this.itemMap.get(value);
		if(oldItem != null) {
			var item = oldItem;
			if(item == this.first) {
				this.first = item.next;
			}
			if(item == this.last) {
				this.last = item.prev;
			}
			if(item.prev != null) {
				item.prev.next = item.next;
			}
			if(item.next != null) {
				item.next.prev = item.prev;
			}
			item = null;
		}
		this.itemMap.set(value,newItem);
	}
	,clear: function() {
		while(this.first != null) {
			if(this.last.value != null) {
				this.itemMap.remove(this.last.value);
			}
			var item = this.last;
			if(item == this.first) {
				this.first = item.next;
			}
			if(item == this.last) {
				this.last = item.prev;
			}
			if(item.prev != null) {
				item.prev.next = item.next;
			}
			if(item.next != null) {
				item.next.prev = item.prev;
			}
			item = null;
		}
	}
	,__class__: peote_view_utils_RenderList_$peote_$view_$ActiveTexture
};
var peote_view_utils_RenderList_$peote_$view_$Display = function(itemMap) {
	this.last = null;
	this.first = null;
	this.itemMap = itemMap;
};
$hxClasses["peote.view.utils.RenderList_peote_view_Display"] = peote_view_utils_RenderList_$peote_$view_$Display;
peote_view_utils_RenderList_$peote_$view_$Display.__name__ = "peote.view.utils.RenderList_peote_view_Display";
peote_view_utils_RenderList_$peote_$view_$Display.prototype = {
	add: function(value,atValue,addBefore) {
		var newItem = null;
		if(addBefore) {
			if(this.first == null) {
				newItem = this.first = this.last = new peote_view_utils_RenderListItem_$peote_$view_$Display(value,null,null);
			} else if(atValue == null) {
				newItem = this.first = new peote_view_utils_RenderListItem_$peote_$view_$Display(value,null,this.first);
			} else {
				var atItem = this.itemMap.get(atValue);
				if(atItem != null) {
					newItem = new peote_view_utils_RenderListItem_$peote_$view_$Display(value,atItem.prev,atItem);
					if(atItem == this.first) {
						this.first = newItem;
					}
				} else {
					throw haxe_Exception.thrown("Error on add: " + Std.string(atValue) + " is not in list.");
				}
			}
		} else if(this.last == null) {
			newItem = this.first = this.last = new peote_view_utils_RenderListItem_$peote_$view_$Display(value,null,null);
		} else if(atValue == null) {
			newItem = this.last = new peote_view_utils_RenderListItem_$peote_$view_$Display(value,this.last,null);
		} else {
			var atItem = this.itemMap.get(atValue);
			if(atItem != null) {
				newItem = new peote_view_utils_RenderListItem_$peote_$view_$Display(value,atItem,atItem.next);
				if(atItem == this.last) {
					this.last = newItem;
				}
			} else {
				throw haxe_Exception.thrown("Error on add: " + Std.string(atValue) + " is not in list.");
			}
		}
		var oldItem = this.itemMap.get(value);
		if(oldItem != null) {
			var item = oldItem;
			if(item == this.first) {
				this.first = item.next;
			}
			if(item == this.last) {
				this.last = item.prev;
			}
			if(item.prev != null) {
				item.prev.next = item.next;
			}
			if(item.next != null) {
				item.next.prev = item.prev;
			}
			item = null;
		}
		this.itemMap.set(value,newItem);
	}
	,__class__: peote_view_utils_RenderList_$peote_$view_$Display
};
var peote_view_utils_RenderList_$peote_$view_$Program = function(itemMap) {
	this.last = null;
	this.first = null;
	this.itemMap = itemMap;
};
$hxClasses["peote.view.utils.RenderList_peote_view_Program"] = peote_view_utils_RenderList_$peote_$view_$Program;
peote_view_utils_RenderList_$peote_$view_$Program.__name__ = "peote.view.utils.RenderList_peote_view_Program";
peote_view_utils_RenderList_$peote_$view_$Program.prototype = {
	add: function(value,atValue,addBefore) {
		var newItem = null;
		if(addBefore) {
			if(this.first == null) {
				newItem = this.first = this.last = new peote_view_utils_RenderListItem_$peote_$view_$Program(value,null,null);
			} else if(atValue == null) {
				newItem = this.first = new peote_view_utils_RenderListItem_$peote_$view_$Program(value,null,this.first);
			} else {
				var atItem = this.itemMap.get(atValue);
				if(atItem != null) {
					newItem = new peote_view_utils_RenderListItem_$peote_$view_$Program(value,atItem.prev,atItem);
					if(atItem == this.first) {
						this.first = newItem;
					}
				} else {
					throw haxe_Exception.thrown("Error on add: " + Std.string(atValue) + " is not in list.");
				}
			}
		} else if(this.last == null) {
			newItem = this.first = this.last = new peote_view_utils_RenderListItem_$peote_$view_$Program(value,null,null);
		} else if(atValue == null) {
			newItem = this.last = new peote_view_utils_RenderListItem_$peote_$view_$Program(value,this.last,null);
		} else {
			var atItem = this.itemMap.get(atValue);
			if(atItem != null) {
				newItem = new peote_view_utils_RenderListItem_$peote_$view_$Program(value,atItem,atItem.next);
				if(atItem == this.last) {
					this.last = newItem;
				}
			} else {
				throw haxe_Exception.thrown("Error on add: " + Std.string(atValue) + " is not in list.");
			}
		}
		var oldItem = this.itemMap.get(value);
		if(oldItem != null) {
			var item = oldItem;
			if(item == this.first) {
				this.first = item.next;
			}
			if(item == this.last) {
				this.last = item.prev;
			}
			if(item.prev != null) {
				item.prev.next = item.next;
			}
			if(item.next != null) {
				item.next.prev = item.prev;
			}
			item = null;
		}
		this.itemMap.set(value,newItem);
	}
	,__class__: peote_view_utils_RenderList_$peote_$view_$Program
};
var peote_view_utils_TexUtils = function() { };
$hxClasses["peote.view.utils.TexUtils"] = peote_view_utils_TexUtils;
peote_view_utils_TexUtils.__name__ = "peote.view.utils.TexUtils";
peote_view_utils_TexUtils.createEmptyTexture = function(gl,width,height,colorChannels,createMipmaps,magFilter,minFilter,useFloat) {
	if(useFloat == null) {
		useFloat = false;
	}
	if(minFilter == null) {
		minFilter = 0;
	}
	if(magFilter == null) {
		magFilter = 0;
	}
	if(createMipmaps == null) {
		createMipmaps = false;
	}
	if(colorChannels == null) {
		colorChannels = 4;
	}
	var glTexture = gl.createTexture();
	gl.bindTexture(gl.TEXTURE_2D,glTexture);
	peote_view_utils_GLTool.clearGlErrorQueue(gl);
	if(useFloat) {
		var target = gl.TEXTURE_2D;
		var internalformat = gl.RGBA32F;
		var format = gl.RGBA;
		var type = gl.FLOAT;
		var data = 0;
		if(data == 0) {
			gl.texImage2D(target,0,internalformat,width,height,0,format,type,null);
		} else {
			gl.texImage2D(target,0,internalformat,width,height,0,format,type,data);
		}
		if(peote_view_utils_GLTool.getLastGlError(gl) == gl.INVALID_VALUE) {
			haxe_Log.trace("switching to RGBA16F for float precision texture creation",{ fileName : "peote/view/utils/TexUtils.hx", lineNumber : 25, className : "peote.view.utils.TexUtils", methodName : "createEmptyTexture"});
			var target = gl.TEXTURE_2D;
			var internalformat = gl.RGBA16F;
			var format = gl.RGBA;
			var type = gl.FLOAT;
			var data = 0;
			if(data == 0) {
				gl.texImage2D(target,0,internalformat,width,height,0,format,type,null);
			} else {
				gl.texImage2D(target,0,internalformat,width,height,0,format,type,data);
			}
			if(peote_view_utils_GLTool.getLastGlError(gl) == gl.INVALID_VALUE) {
				haxe_Log.trace("switching to RGBA for float precision texture creation",{ fileName : "peote/view/utils/TexUtils.hx", lineNumber : 28, className : "peote.view.utils.TexUtils", methodName : "createEmptyTexture"});
				var target = gl.TEXTURE_2D;
				var internalformat = gl.RGBA;
				var format = gl.RGBA;
				var type = gl.FLOAT;
				var data = 0;
				if(data == 0) {
					gl.texImage2D(target,0,internalformat,width,height,0,format,type,null);
				} else {
					gl.texImage2D(target,0,internalformat,width,height,0,format,type,data);
				}
			}
		}
	} else {
		var target = gl.TEXTURE_2D;
		var internalformat = gl.RGBA;
		var format = gl.RGBA;
		var type = gl.UNSIGNED_BYTE;
		var data = 0;
		if(data == 0) {
			gl.texImage2D(target,0,internalformat,width,height,0,format,type,null);
		} else {
			gl.texImage2D(target,0,internalformat,width,height,0,format,type,data);
		}
	}
	if(peote_view_utils_GLTool.getLastGlError(gl) == gl.OUT_OF_MEMORY) {
		throw haxe_Exception.thrown("OUT OF GPU MEMORY while texture creation");
	}
	if(magFilter == 1) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
	}
	if(createMipmaps) {
		switch(minFilter) {
		case 1:
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR_MIPMAP_LINEAR);
			break;
		case 2:
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST_MIPMAP_NEAREST);
			break;
		case 3:
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST_MIPMAP_LINEAR);
			break;
		default:
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR_MIPMAP_NEAREST);
		}
	} else if(minFilter == 1) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
	}
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	if(createMipmaps) {
		gl.generateMipmap(gl.TEXTURE_2D);
	}
	gl.bindTexture(gl.TEXTURE_2D,null);
	return glTexture;
};
peote_view_utils_TexUtils.createPickingTexture = function(gl,isRGBA32I) {
	if(isRGBA32I == null) {
		isRGBA32I = false;
	}
	var glTexture = gl.createTexture();
	gl.bindTexture(gl.TEXTURE_2D,glTexture);
	if(isRGBA32I) {
		var target = gl.TEXTURE_2D;
		var internalformat = gl.RGBA32I;
		var format = gl.RGBA_INTEGER;
		var type = gl.INT;
		var data = 0;
		if(data == 0) {
			gl.texImage2D(target,0,internalformat,1,1,0,format,type,null);
		} else {
			gl.texImage2D(target,0,internalformat,1,1,0,format,type,data);
		}
	} else {
		var target = gl.TEXTURE_2D;
		var internalformat = gl.RGBA;
		var format = gl.RGBA;
		var type = gl.UNSIGNED_BYTE;
		var data = 0;
		if(data == 0) {
			gl.texImage2D(target,0,internalformat,1,1,0,format,type,null);
		} else {
			gl.texImage2D(target,0,internalformat,1,1,0,format,type,data);
		}
	}
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	gl.bindTexture(gl.TEXTURE_2D,null);
	return glTexture;
};
peote_view_utils_TexUtils.optimalTextureSize = function(imageSlots,slotWidth,slotHeight,maxTextureSize,errorIfNotFit,debug) {
	if(debug == null) {
		debug = true;
	}
	if(errorIfNotFit == null) {
		errorIfNotFit = true;
	}
	var mts = Math.ceil(Math.log(maxTextureSize) / Math.log(2));
	var a = Math.ceil(Math.log(imageSlots * slotWidth * slotHeight) / Math.log(2));
	var r;
	var w = 1;
	var h = a - 1;
	var delta = Math.floor(Math.abs(w - h));
	var rmin = (1 << mts) * (1 << mts);
	var found = false;
	var n = Math.floor(Math.min(mts,a));
	var m;
	while(1 << n >= slotWidth) {
		m = Math.floor(Math.min(mts,a - n + 1));
		while(1 << m >= slotHeight) {
			if(Math.floor((1 << n) / slotWidth) * Math.floor((1 << m) / slotHeight) < imageSlots) {
				break;
			}
			r = (1 << n) * (1 << m) - imageSlots * slotWidth * slotHeight;
			if(r < 0) {
				break;
			}
			if(r <= rmin) {
				if(r == rmin) {
					if(Math.abs(n - m) < delta) {
						delta = Math.floor(Math.abs(n - m));
						w = n;
						h = m;
						found = true;
					}
				} else {
					w = n;
					h = m;
					rmin = r;
					found = true;
				}
			}
			--m;
		}
		--n;
	}
	if(found) {
		w = 1 << w;
		h = 1 << h;
	} else {
		if(errorIfNotFit) {
			throw haxe_Exception.thrown("Error: max texture-size (" + maxTextureSize + ") is to small for " + imageSlots + " images (" + slotWidth + " x " + slotHeight + ")");
		}
		if(slotWidth > maxTextureSize || slotHeight > maxTextureSize) {
			throw haxe_Exception.thrown("Error: max texture-size (" + maxTextureSize + ") is to small for image (" + slotWidth + " x " + slotHeight + ")");
		}
		h = maxTextureSize;
		w = h;
	}
	return { width : w, height : h, slotsX : w / slotWidth | 0, slotsY : h / slotHeight | 0, imageSlots : (w / slotWidth | 0) * (h / slotHeight | 0)};
};
var peote_view_utils_Util = function() { };
$hxClasses["peote.view.utils.Util"] = peote_view_utils_Util;
peote_view_utils_Util.__name__ = "peote.view.utils.Util";
peote_view_utils_Util.resolveFormulaCyclic = function(formulas) {
	var resolved = [];
	var h = formulas.h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var k = _g_keys[_g_current++];
		var err = peote_view_utils_Util.resolveFormulaKey(k,formulas,resolved);
		if(err.errKey != null) {
			throw haxe_Exception.thrown(err);
		}
	}
	var h = formulas.h;
	var _g1_h = h;
	var _g1_keys = Object.keys(h);
	var _g1_length = _g1_keys.length;
	var _g1_current = 0;
	while(_g1_current < _g1_length) {
		var k = _g1_keys[_g1_current++];
		var _this_r = new RegExp("___:::___","g".split("u").join(""));
		var value = formulas.h[k].replace(_this_r,"");
		formulas.h[k] = value;
	}
};
peote_view_utils_Util.resolveFormulaKey = function(key,formulas,resolved,fromKeys) {
	if(fromKeys == null) {
		fromKeys = [key];
	}
	if(resolved == null) {
		resolved = [];
	}
	var formula = formulas.h[key];
	if(resolved.indexOf(key) >= 0) {
		return { formula : formula, errKey : null, errVar : null};
	}
	var h = formulas.h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var k = _g_keys[_g_current++];
		if(k != key) {
			var regexp = new EReg("(^|.*?[^\\w.])" + k + "\\b.*?","g");
			if(regexp.match(formula)) {
				if(fromKeys.indexOf(k) >= 0) {
					return { formula : formula, errKey : key, errVar : k};
				}
				var f = peote_view_utils_Util.resolveFormulaKey(k,formulas,resolved,fromKeys.concat([k]));
				if(f.errKey != null) {
					return f;
				}
				formula = formula.replace(regexp.r,"$1(___:::___" + f.formula + "___:::___)");
			}
		}
	}
	formulas.h[key] = formula;
	resolved.push(key);
	return { formula : formula, errKey : null, errVar : null};
};
peote_view_utils_Util.resolveFormulaVars = function(formulas,attribs) {
	var h = formulas.h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_keys[_g_current++];
		var formula = formulas.h[key];
		var h = attribs.h;
		var _g_h = h;
		var _g_keys1 = Object.keys(h);
		var _g_length1 = _g_keys1.length;
		var _g_current1 = 0;
		while(_g_current1 < _g_length1) {
			var k = _g_keys1[_g_current1++];
			var regexp = new EReg("(^|.*?[^\\w.])" + k + "\\b.*?","g");
			if(regexp.match(formula)) {
				formula = formula.replace(regexp.r,"$1(" + attribs.h[k] + ")");
			}
		}
		formulas.h[key] = formula;
	}
};
var utils_Loader = function() { };
$hxClasses["utils.Loader"] = utils_Loader;
utils_Loader.__name__ = "utils.Loader";
utils_Loader.onProgressDebug = function(a,b,name) {
	haxe_Log.trace("...loading " + a + "/" + b + " of \"" + name + "\"",{ fileName : "utils/Loader.hx", lineNumber : 11, className : "utils.Loader", methodName : "onProgressDebug"});
};
utils_Loader.onErrorDebug = function(msg) {
	haxe_Log.trace("Error - " + msg,{ fileName : "utils/Loader.hx", lineNumber : 15, className : "utils.Loader", methodName : "onErrorDebug"});
};
utils_Loader.onCompleteDebug = function(name) {
	haxe_Log.trace("Loading complete \"" + name + "\"",{ fileName : "utils/Loader.hx", lineNumber : 19, className : "utils.Loader", methodName : "onCompleteDebug"});
};
var utils__$MultipassTemplate_TemplateExpr = $hxEnums["utils._MultipassTemplate.TemplateExpr"] = { __ename__:true,__constructs__:null
	,OpVar: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"utils._MultipassTemplate.TemplateExpr",toString:$estr}; },$_._hx_name="OpVar",$_.__params__ = ["v"],$_)
	,OpExpr: ($_=function(expr) { return {_hx_index:1,expr:expr,__enum__:"utils._MultipassTemplate.TemplateExpr",toString:$estr}; },$_._hx_name="OpExpr",$_.__params__ = ["expr"],$_)
	,OpIf: ($_=function(expr,eif,eelse) { return {_hx_index:2,expr:expr,eif:eif,eelse:eelse,__enum__:"utils._MultipassTemplate.TemplateExpr",toString:$estr}; },$_._hx_name="OpIf",$_.__params__ = ["expr","eif","eelse"],$_)
	,OpStr: ($_=function(str) { return {_hx_index:3,str:str,__enum__:"utils._MultipassTemplate.TemplateExpr",toString:$estr}; },$_._hx_name="OpStr",$_.__params__ = ["str"],$_)
	,OpBlock: ($_=function(l) { return {_hx_index:4,l:l,__enum__:"utils._MultipassTemplate.TemplateExpr",toString:$estr}; },$_._hx_name="OpBlock",$_.__params__ = ["l"],$_)
	,OpForeach: ($_=function(expr,loop) { return {_hx_index:5,expr:expr,loop:loop,__enum__:"utils._MultipassTemplate.TemplateExpr",toString:$estr}; },$_._hx_name="OpForeach",$_.__params__ = ["expr","loop"],$_)
	,OpMacro: ($_=function(name,params) { return {_hx_index:6,name:name,params:params,__enum__:"utils._MultipassTemplate.TemplateExpr",toString:$estr}; },$_._hx_name="OpMacro",$_.__params__ = ["name","params"],$_)
};
utils__$MultipassTemplate_TemplateExpr.__constructs__ = [utils__$MultipassTemplate_TemplateExpr.OpVar,utils__$MultipassTemplate_TemplateExpr.OpExpr,utils__$MultipassTemplate_TemplateExpr.OpIf,utils__$MultipassTemplate_TemplateExpr.OpStr,utils__$MultipassTemplate_TemplateExpr.OpBlock,utils__$MultipassTemplate_TemplateExpr.OpForeach,utils__$MultipassTemplate_TemplateExpr.OpMacro];
var utils_MultipassTemplate = function(str) {
	var tokens = this.parseTokens(str);
	this.expr = this.parseBlock(tokens);
	if(!tokens.isEmpty()) {
		throw haxe_Exception.thrown("Unexpected '" + Std.string(tokens.first().s) + "'");
	}
};
$hxClasses["utils.MultipassTemplate"] = utils_MultipassTemplate;
utils_MultipassTemplate.__name__ = "utils.MultipassTemplate";
utils_MultipassTemplate.prototype = {
	execute: function(context,macros) {
		this.macros = macros == null ? { } : macros;
		this.context = context;
		this.stack = new haxe_ds_List();
		this.buf = new StringBuf();
		this.run(this.expr);
		return this.buf.b;
	}
	,resolve: function(v) {
		if(v == "__current__") {
			return this.context;
		}
		var value = Reflect.getProperty(this.context,v);
		if(value != null || Object.prototype.hasOwnProperty.call(this.context,v)) {
			return value;
		}
		var _g_head = this.stack.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var ctx = val;
			value = Reflect.getProperty(ctx,v);
			if(value != null || Object.prototype.hasOwnProperty.call(ctx,v)) {
				return value;
			}
		}
		if(!Object.prototype.hasOwnProperty.call(utils_MultipassTemplate.globals,v)) {
			throw haxe_Exception.thrown(v);
		}
		return Reflect.field(utils_MultipassTemplate.globals,v);
	}
	,parseTokens: function(data) {
		var tokens = new haxe_ds_List();
		while(utils_MultipassTemplate.splitter.match(data)) {
			var p = utils_MultipassTemplate.splitter.matchedPos();
			if(p.pos > 0) {
				tokens.add({ p : HxOverrides.substr(data,0,p.pos), s : true, l : null});
			}
			if(HxOverrides.cca(data,p.pos) == 58) {
				tokens.add({ p : HxOverrides.substr(data,p.pos + 2,p.len - 4), s : false, l : null});
				data = utils_MultipassTemplate.splitter.matchedRight();
				continue;
			}
			var parp = p.pos + p.len;
			var npar = 1;
			var params = [];
			var part = "";
			while(true) {
				var c = HxOverrides.cca(data,parp);
				++parp;
				if(c == 40) {
					++npar;
				} else if(c == 41) {
					--npar;
					if(npar <= 0) {
						break;
					}
				} else if(c == null) {
					throw haxe_Exception.thrown("Unclosed macro parenthesis");
				}
				if(c == 44 && npar == 1) {
					params.push(part);
					part = "";
				} else {
					part += String.fromCodePoint(c);
				}
			}
			params.push(part);
			tokens.add({ p : utils_MultipassTemplate.splitter.matched(2), s : false, l : params});
			data = HxOverrides.substr(data,parp,data.length - parp);
		}
		if(data.length > 0) {
			tokens.add({ p : data, s : true, l : null});
		}
		return tokens;
	}
	,parseBlock: function(tokens) {
		var l = new haxe_ds_List();
		while(true) {
			var t = tokens.first();
			if(t == null) {
				break;
			}
			if(!t.s && (t.p == "end" || t.p == "else" || HxOverrides.substr(t.p,0,7) == "elseif ")) {
				break;
			}
			l.add(this.parse(tokens));
		}
		if(l.length == 1) {
			return l.first();
		}
		return utils__$MultipassTemplate_TemplateExpr.OpBlock(l);
	}
	,parse: function(tokens) {
		var t = tokens.pop();
		var p = t.p;
		if(t.s) {
			return utils__$MultipassTemplate_TemplateExpr.OpStr(p);
		}
		if(t.l != null) {
			var pe = new haxe_ds_List();
			var _g = 0;
			var _g1 = t.l;
			while(_g < _g1.length) {
				var p1 = _g1[_g];
				++_g;
				pe.add(this.parseBlock(this.parseTokens(p1)));
			}
			return utils__$MultipassTemplate_TemplateExpr.OpMacro(p,pe);
		}
		if(HxOverrides.substr(p,0,3) == "if ") {
			p = HxOverrides.substr(p,3,p.length - 3);
			var e = null;
			try {
				e = this.parseExpr(p);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var _g1 = haxe_Exception.caught(_g).unwrap();
				if(typeof(_g1) == "string") {
					var s = _g1;
					haxe_Log.trace(s,{ fileName : "utils/MultipassTemplate.hx", lineNumber : 211, className : "utils.MultipassTemplate", methodName : "parse"});
					throw haxe_Exception.thrown(s);
				} else {
					throw _g;
				}
			}
			var eif = this.parseBlock(tokens);
			var t = tokens.first();
			var eelse;
			if(t == null) {
				throw haxe_Exception.thrown("Unclosed 'if'");
			}
			if(t.p == "end") {
				tokens.pop();
				eelse = null;
			} else if(t.p == "else") {
				tokens.pop();
				eelse = this.parseBlock(tokens);
				t = tokens.pop();
				if(t == null || t.p != "end") {
					throw haxe_Exception.thrown("Unclosed 'else'");
				}
			} else {
				t.p = HxOverrides.substr(t.p,4,t.p.length - 4);
				eelse = this.parse(tokens);
			}
			return utils__$MultipassTemplate_TemplateExpr.OpIf(e,eif,eelse);
		}
		if(HxOverrides.substr(p,0,8) == "foreach ") {
			p = HxOverrides.substr(p,8,p.length - 8);
			var e = this.parseExpr(p);
			var efor = this.parseBlock(tokens);
			var t = tokens.pop();
			if(t == null || t.p != "end") {
				throw haxe_Exception.thrown("Unclosed 'foreach'");
			}
			return utils__$MultipassTemplate_TemplateExpr.OpForeach(e,efor);
		}
		if(utils_MultipassTemplate.expr_splitter.match(p)) {
			return utils__$MultipassTemplate_TemplateExpr.OpExpr(this.parseExpr(p));
		}
		return utils__$MultipassTemplate_TemplateExpr.OpVar(p);
	}
	,parseExpr: function(data) {
		var l = new haxe_ds_List();
		var expr = data;
		while(utils_MultipassTemplate.expr_splitter.match(data)) {
			var p = utils_MultipassTemplate.expr_splitter.matchedPos();
			var k = p.pos + p.len;
			if(p.pos != 0) {
				l.add({ p : HxOverrides.substr(data,0,p.pos), s : true});
			}
			var p1 = utils_MultipassTemplate.expr_splitter.matched(0);
			l.add({ p : p1, s : p1.indexOf("\"") >= 0});
			data = utils_MultipassTemplate.expr_splitter.matchedRight();
		}
		if(data.length != 0) {
			l.add({ p : data, s : true});
		}
		var e;
		try {
			e = this.makeExpr(l);
			if(!l.isEmpty()) {
				throw haxe_Exception.thrown(l.first().p);
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(typeof(_g1) == "string") {
				var s = _g1;
				throw haxe_Exception.thrown("Unexpected '" + s + "' in " + expr);
			} else {
				throw _g;
			}
		}
		return function() {
			try {
				return e();
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var v = haxe_Exception.caught(_g).unwrap();
				throw haxe_Exception.thrown({ v : v, expr : expr});
			}
		};
	}
	,makeConst: function(v) {
		utils_MultipassTemplate.expr_trim.match(v);
		v = utils_MultipassTemplate.expr_trim.matched(1);
		if(HxOverrides.cca(v,0) == 34) {
			var str = HxOverrides.substr(v,1,v.length - 2);
			return function() {
				return str;
			};
		}
		if(utils_MultipassTemplate.expr_int.match(v)) {
			var i = Std.parseInt(v);
			return function() {
				return i;
			};
		}
		if(utils_MultipassTemplate.expr_float.match(v)) {
			var f = parseFloat(v);
			return function() {
				return f;
			};
		}
		var me = this;
		return function() {
			return me.resolve(v);
		};
	}
	,makePath: function(e,l) {
		var p = l.first();
		if(p == null || p.p != ".") {
			return e;
		}
		l.pop();
		var field = l.pop();
		if(field == null || !field.s) {
			throw haxe_Exception.thrown(field.p);
		}
		var f = field.p;
		utils_MultipassTemplate.expr_trim.match(f);
		f = utils_MultipassTemplate.expr_trim.matched(1);
		return this.makePath(function() {
			return Reflect.field(e(),f);
		},l);
	}
	,makeExpr: function(l) {
		return this.makePath(this.makeExpr2(l),l);
	}
	,makeExpr2: function(l) {
		var p = l.pop();
		if(p == null) {
			throw haxe_Exception.thrown("<eof>");
		}
		if(p.s) {
			return this.makeConst(p.p);
		}
		switch(p.p) {
		case "!":
			var e = this.makeExpr(l);
			return function() {
				var v = e();
				if(v != null) {
					return v == false;
				} else {
					return true;
				}
			};
		case "(":
			var e1 = this.makeExpr(l);
			var p1 = l.pop();
			if(p1 == null || p1.s) {
				throw haxe_Exception.thrown(p1);
			}
			if(p1.p == ")") {
				return e1;
			}
			var e2 = this.makeExpr(l);
			var p2 = l.pop();
			if(p2 == null || p2.p != ")") {
				throw haxe_Exception.thrown(p2);
			}
			switch(p1.p) {
			case "!=":
				return function() {
					return e1() != e2();
				};
			case "&&":
				return function() {
					return e1() && e2();
				};
			case "*":
				return function() {
					return e1() * e2();
				};
			case "+":
				return function() {
					return e1() + e2();
				};
			case "-":
				return function() {
					return e1() - e2();
				};
			case "/":
				return function() {
					return e1() / e2();
				};
			case "<":
				return function() {
					return e1() < e2();
				};
			case "<=":
				return function() {
					return e1() <= e2();
				};
			case "==":
				return function() {
					return e1() == e2();
				};
			case ">":
				return function() {
					return e1() > e2();
				};
			case ">=":
				return function() {
					return e1() >= e2();
				};
			case "||":
				return function() {
					return e1() || e2();
				};
			default:
				throw haxe_Exception.thrown("Unknown operation " + p1.p);
			}
			break;
		case "-":
			var e3 = this.makeExpr(l);
			return function() {
				return -e3();
			};
		}
		throw haxe_Exception.thrown(p.p);
	}
	,run: function(e) {
		switch(e._hx_index) {
		case 0:
			var v = e.v;
			try {
				var _this = this.buf;
				var x = Std.string(this.resolve(v));
				_this.b += Std.string(x);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				this.buf.b += Std.string("::" + v + "::");
			}
			break;
		case 1:
			var e1 = e.expr;
			try {
				var _this = this.buf;
				var x = Std.string(e1());
				_this.b += Std.string(x);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var notYet = haxe_Exception.caught(_g).unwrap();
				this.buf.b += Std.string("::(" + Std.string(notYet.expr) + ")::");
			}
			break;
		case 2:
			var e1 = e.expr;
			var eif = e.eif;
			var eelse = e.eelse;
			try {
				var v = e1();
				if(v == null || v == false) {
					if(eelse != null) {
						this.run(eelse);
					}
				} else {
					this.run(eif);
				}
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var notYet = haxe_Exception.caught(_g).unwrap();
				this.buf.b += Std.string("::if " + Std.string(notYet.expr) + "::");
				this.run(eif);
				if(eelse != null) {
					this.buf.b += "::else::";
					this.run(eelse);
				}
				this.buf.b += "::end::";
			}
			break;
		case 3:
			var str = e.str;
			this.buf.b += str == null ? "null" : "" + str;
			break;
		case 4:
			var l = e.l;
			var _g_head = l.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var e1 = val;
				this.run(e1);
			}
			break;
		case 5:
			var e1 = e.expr;
			var loop = e.loop;
			try {
				var v = e1();
				try {
					var x = $getIterator(v);
					if(x.hasNext == null) {
						throw haxe_Exception.thrown(null);
					}
					v = x;
				} catch( _g ) {
					haxe_NativeStackTrace.lastError = _g;
					try {
						if(v.hasNext == null) {
							throw haxe_Exception.thrown(null);
						}
					} catch( _g1 ) {
						throw haxe_Exception.thrown("Cannot iter on " + Std.string(v));
					}
				}
				this.stack.push(this.context);
				var v1 = v;
				var ctx = v1;
				while(ctx.hasNext()) {
					var ctx1 = ctx.next();
					this.context = ctx1;
					this.run(loop);
				}
				this.context = this.stack.pop();
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var notYet = haxe_Exception.caught(_g).unwrap();
				this.buf.b += Std.string("::foreach " + Std.string(notYet.v) + "::");
				this.run(loop);
				this.buf.b += "::end::";
			}
			break;
		case 6:
			var m = e.name;
			var params = e.params;
			var v = Reflect.field(this.macros,m);
			var pl = [];
			var old = this.buf;
			pl.push($bind(this,this.resolve));
			var _g_head = params.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var p = val;
				if(p._hx_index == 0) {
					var v1 = p.v;
					pl.push(this.resolve(v1));
				} else {
					this.buf = new StringBuf();
					this.run(p);
					pl.push(this.buf.b);
				}
			}
			this.buf = old;
			try {
				var _this = this.buf;
				var x = Std.string(v.apply(this.macros,pl));
				_this.b += Std.string(x);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				var plstr;
				try {
					plstr = pl.join(",");
				} catch( _g1 ) {
					plstr = "???";
				}
				var msg = "Macro call " + m + "(" + plstr + ") failed (" + Std.string(e) + ")";
				throw haxe_Exception.thrown(msg);
			}
			break;
		}
	}
	,__class__: utils_MultipassTemplate
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
var _init = lime__$internal_backend_html5_HTML5Application;
var init = lime_app_Application;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
var array = null;
var view = null;
var buffer = null;
var len = null;
var this1 = new Uint32Array(256);
lime_math_RGBA.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime_math_RGBA.__alpha16[i] = Math.ceil(i * 257.003921568627447);
}
var array = null;
var view = null;
var buffer = null;
var len = null;
var this1 = new Uint8Array(511);
lime_math_RGBA.__clamp = this1;
var _g = 0;
while(_g < 255) {
	var i = _g++;
	lime_math_RGBA.__clamp[i] = i;
}
var _g = 255;
var _g1 = 511;
while(_g < _g1) {
	var i = _g++;
	lime_math_RGBA.__clamp[i] = 255;
}
lime_utils_Log.level = 4;
if(typeof console == "undefined") {
	console = {}
}
if(console.log == null) {
	console.log = function() {
	};
}
MyFontStyle.__meta__ = { obj : { packed : null, globalLineSpace : null}, fields : { weight : { global : null}}};
MyFontStyle.ID = 2097152;
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
input2action_Input2Action.keyCodeName = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[0] = "UNKNOWN";
	_g.h[8] = "BACKSPACE";
	_g.h[9] = "TAB";
	_g.h[13] = "RETURN";
	_g.h[27] = "ESCAPE";
	_g.h[32] = "SPACE";
	_g.h[33] = "EXCLAMATION";
	_g.h[34] = "QUOTE";
	_g.h[35] = "HASH";
	_g.h[36] = "DOLLAR";
	_g.h[37] = "PERCENT";
	_g.h[38] = "AMPERSAND";
	_g.h[39] = "SINGLE_QUOTE";
	_g.h[40] = "LEFT_PARENTHESIS";
	_g.h[41] = "RIGHT_PARENTHESIS";
	_g.h[42] = "ASTERISK";
	_g.h[43] = "PLUS";
	_g.h[44] = "COMMA";
	_g.h[45] = "MINUS";
	_g.h[46] = "PERIOD";
	_g.h[47] = "SLASH";
	_g.h[48] = "NUMBER_0";
	_g.h[49] = "NUMBER_1";
	_g.h[50] = "NUMBER_2";
	_g.h[51] = "NUMBER_3";
	_g.h[52] = "NUMBER_4";
	_g.h[53] = "NUMBER_5";
	_g.h[54] = "NUMBER_6";
	_g.h[55] = "NUMBER_7";
	_g.h[56] = "NUMBER_8";
	_g.h[57] = "NUMBER_9";
	_g.h[58] = "COLON";
	_g.h[59] = "SEMICOLON";
	_g.h[60] = "LESS_THAN";
	_g.h[61] = "EQUALS";
	_g.h[62] = "GREATER_THAN";
	_g.h[63] = "QUESTION";
	_g.h[64] = "AT";
	_g.h[91] = "LEFT_BRACKET";
	_g.h[92] = "BACKSLASH";
	_g.h[93] = "RIGHT_BRACKET";
	_g.h[94] = "CARET";
	_g.h[95] = "UNDERSCORE";
	_g.h[96] = "GRAVE";
	_g.h[97] = "A";
	_g.h[98] = "B";
	_g.h[99] = "C";
	_g.h[100] = "D";
	_g.h[101] = "E";
	_g.h[102] = "F";
	_g.h[103] = "G";
	_g.h[104] = "H";
	_g.h[105] = "I";
	_g.h[106] = "J";
	_g.h[107] = "K";
	_g.h[108] = "L";
	_g.h[109] = "M";
	_g.h[110] = "N";
	_g.h[111] = "O";
	_g.h[112] = "P";
	_g.h[113] = "Q";
	_g.h[114] = "R";
	_g.h[115] = "S";
	_g.h[116] = "T";
	_g.h[117] = "U";
	_g.h[118] = "V";
	_g.h[119] = "W";
	_g.h[120] = "X";
	_g.h[121] = "Y";
	_g.h[122] = "Z";
	_g.h[127] = "DELETE";
	_g.h[1073741881] = "CAPS_LOCK";
	_g.h[1073741882] = "F1";
	_g.h[1073741883] = "F2";
	_g.h[1073741884] = "F3";
	_g.h[1073741885] = "F4";
	_g.h[1073741886] = "F5";
	_g.h[1073741887] = "F6";
	_g.h[1073741888] = "F7";
	_g.h[1073741889] = "F8";
	_g.h[1073741890] = "F9";
	_g.h[1073741891] = "F10";
	_g.h[1073741892] = "F11";
	_g.h[1073741893] = "F12";
	_g.h[1073741894] = "PRINT_SCREEN";
	_g.h[1073741895] = "SCROLL_LOCK";
	_g.h[1073741896] = "PAUSE";
	_g.h[1073741897] = "INSERT";
	_g.h[1073741898] = "HOME";
	_g.h[1073741899] = "PAGE_UP";
	_g.h[1073741901] = "END";
	_g.h[1073741902] = "PAGE_DOWN";
	_g.h[1073741903] = "RIGHT";
	_g.h[1073741904] = "LEFT";
	_g.h[1073741905] = "DOWN";
	_g.h[1073741906] = "UP";
	_g.h[1073741907] = "NUM_LOCK";
	_g.h[1073741908] = "NUMPAD_DIVIDE";
	_g.h[1073741909] = "NUMPAD_MULTIPLY";
	_g.h[1073741910] = "NUMPAD_MINUS";
	_g.h[1073741911] = "NUMPAD_PLUS";
	_g.h[1073741912] = "NUMPAD_ENTER";
	_g.h[1073741913] = "NUMPAD_1";
	_g.h[1073741914] = "NUMPAD_2";
	_g.h[1073741915] = "NUMPAD_3";
	_g.h[1073741916] = "NUMPAD_4";
	_g.h[1073741917] = "NUMPAD_5";
	_g.h[1073741918] = "NUMPAD_6";
	_g.h[1073741919] = "NUMPAD_7";
	_g.h[1073741920] = "NUMPAD_8";
	_g.h[1073741921] = "NUMPAD_9";
	_g.h[1073741922] = "NUMPAD_0";
	_g.h[1073741923] = "NUMPAD_PERIOD";
	_g.h[1073741925] = "APPLICATION";
	_g.h[1073741926] = "POWER";
	_g.h[1073741927] = "NUMPAD_EQUALS";
	_g.h[1073741928] = "F13";
	_g.h[1073741929] = "F14";
	_g.h[1073741930] = "F15";
	_g.h[1073741931] = "F16";
	_g.h[1073741932] = "F17";
	_g.h[1073741933] = "F18";
	_g.h[1073741934] = "F19";
	_g.h[1073741935] = "F20";
	_g.h[1073741936] = "F21";
	_g.h[1073741937] = "F22";
	_g.h[1073741938] = "F23";
	_g.h[1073741939] = "F24";
	_g.h[1073741940] = "EXECUTE";
	_g.h[1073741941] = "HELP";
	_g.h[1073741942] = "MENU";
	_g.h[1073741943] = "SELECT";
	_g.h[1073741944] = "STOP";
	_g.h[1073741945] = "AGAIN";
	_g.h[1073741946] = "UNDO";
	_g.h[1073741947] = "CUT";
	_g.h[1073741948] = "COPY";
	_g.h[1073741949] = "PASTE";
	_g.h[1073741950] = "FIND";
	_g.h[1073741951] = "MUTE";
	_g.h[1073741952] = "VOLUME_UP";
	_g.h[1073741953] = "VOLUME_DOWN";
	_g.h[1073741957] = "NUMPAD_COMMA";
	_g.h[1073741977] = "ALT_ERASE";
	_g.h[1073741978] = "SYSTEM_REQUEST";
	_g.h[1073741979] = "CANCEL";
	_g.h[1073741980] = "CLEAR";
	_g.h[1073741981] = "PRIOR";
	_g.h[1073741982] = "RETURN2";
	_g.h[1073741983] = "SEPARATOR";
	_g.h[1073741984] = "OUT";
	_g.h[1073741985] = "OPER";
	_g.h[1073741986] = "CLEAR_AGAIN";
	_g.h[1073741987] = "CRSEL";
	_g.h[1073741988] = "EXSEL";
	_g.h[1073742000] = "NUMPAD_00";
	_g.h[1073742001] = "NUMPAD_000";
	_g.h[1073742002] = "THOUSAND_SEPARATOR";
	_g.h[1073742003] = "DECIMAL_SEPARATOR";
	_g.h[1073742004] = "CURRENCY_UNIT";
	_g.h[1073742005] = "CURRENCY_SUBUNIT";
	_g.h[1073742006] = "NUMPAD_LEFT_PARENTHESIS";
	_g.h[1073742007] = "NUMPAD_RIGHT_PARENTHESIS";
	_g.h[1073742008] = "NUMPAD_LEFT_BRACE";
	_g.h[1073742009] = "NUMPAD_RIGHT_BRACE";
	_g.h[1073742010] = "NUMPAD_TAB";
	_g.h[1073742011] = "NUMPAD_BACKSPACE";
	_g.h[1073742012] = "NUMPAD_A";
	_g.h[1073742013] = "NUMPAD_B";
	_g.h[1073742014] = "NUMPAD_C";
	_g.h[1073742015] = "NUMPAD_D";
	_g.h[1073742016] = "NUMPAD_E";
	_g.h[1073742017] = "NUMPAD_F";
	_g.h[1073742018] = "NUMPAD_XOR";
	_g.h[1073742019] = "NUMPAD_POWER";
	_g.h[1073742020] = "NUMPAD_PERCENT";
	_g.h[1073742021] = "NUMPAD_LESS_THAN";
	_g.h[1073742022] = "NUMPAD_GREATER_THAN";
	_g.h[1073742023] = "NUMPAD_AMPERSAND";
	_g.h[1073742024] = "NUMPAD_DOUBLE_AMPERSAND";
	_g.h[1073742025] = "NUMPAD_VERTICAL_BAR";
	_g.h[1073742026] = "NUMPAD_DOUBLE_VERTICAL_BAR";
	_g.h[1073742027] = "NUMPAD_COLON";
	_g.h[1073742028] = "NUMPAD_HASH";
	_g.h[1073742029] = "NUMPAD_SPACE";
	_g.h[1073742030] = "NUMPAD_AT";
	_g.h[1073742031] = "NUMPAD_EXCLAMATION";
	_g.h[1073742032] = "NUMPAD_MEM_STORE";
	_g.h[1073742033] = "NUMPAD_MEM_RECALL";
	_g.h[1073742034] = "NUMPAD_MEM_CLEAR";
	_g.h[1073742035] = "NUMPAD_MEM_ADD";
	_g.h[1073742036] = "NUMPAD_MEM_SUBTRACT";
	_g.h[1073742037] = "NUMPAD_MEM_MULTIPLY";
	_g.h[1073742038] = "NUMPAD_MEM_DIVIDE";
	_g.h[1073742039] = "NUMPAD_PLUS_MINUS";
	_g.h[1073742040] = "NUMPAD_CLEAR";
	_g.h[1073742041] = "NUMPAD_CLEAR_ENTRY";
	_g.h[1073742042] = "NUMPAD_BINARY";
	_g.h[1073742043] = "NUMPAD_OCTAL";
	_g.h[1073742044] = "NUMPAD_DECIMAL";
	_g.h[1073742045] = "NUMPAD_HEXADECIMAL";
	_g.h[1073742048] = "LEFT_CTRL";
	_g.h[1073742049] = "LEFT_SHIFT";
	_g.h[1073742050] = "LEFT_ALT";
	_g.h[1073742051] = "LEFT_META";
	_g.h[1073742052] = "RIGHT_CTRL";
	_g.h[1073742053] = "RIGHT_SHIFT";
	_g.h[1073742054] = "RIGHT_ALT";
	_g.h[1073742055] = "RIGHT_META";
	_g.h[1073742081] = "MODE";
	_g.h[1073742082] = "AUDIO_NEXT";
	_g.h[1073742083] = "AUDIO_PREVIOUS";
	_g.h[1073742084] = "AUDIO_STOP";
	_g.h[1073742085] = "AUDIO_PLAY";
	_g.h[1073742086] = "AUDIO_MUTE";
	_g.h[1073742087] = "MEDIA_SELECT";
	_g.h[1073742088] = "WWW";
	_g.h[1073742089] = "MAIL";
	_g.h[1073742090] = "CALCULATOR";
	_g.h[1073742091] = "COMPUTER";
	_g.h[1073742092] = "APP_CONTROL_SEARCH";
	_g.h[1073742093] = "APP_CONTROL_HOME";
	_g.h[1073742094] = "APP_CONTROL_BACK";
	_g.h[1073742095] = "APP_CONTROL_FORWARD";
	_g.h[1073742096] = "APP_CONTROL_STOP";
	_g.h[1073742097] = "APP_CONTROL_REFRESH";
	_g.h[1073742098] = "APP_CONTROL_BOOKMARKS";
	_g.h[1073742099] = "BRIGHTNESS_DOWN";
	_g.h[1073742100] = "BRIGHTNESS_UP";
	_g.h[1073742101] = "DISPLAY_SWITCH";
	_g.h[1073742102] = "BACKLIGHT_TOGGLE";
	_g.h[1073742103] = "BACKLIGHT_DOWN";
	_g.h[1073742104] = "BACKLIGHT_UP";
	_g.h[1073742105] = "EJECT";
	_g.h[1073742106] = "SLEEP";
	$r = _g;
	return $r;
}(this));
input2action_Input2Action.gamepadButtonName = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[0] = "A";
	_g.h[1] = "B";
	_g.h[2] = "X";
	_g.h[3] = "Y";
	_g.h[4] = "BACK";
	_g.h[5] = "GUIDE";
	_g.h[6] = "START";
	_g.h[7] = "LEFT_STICK";
	_g.h[8] = "RIGHT_STICK";
	_g.h[9] = "LEFT_SHOULDER";
	_g.h[10] = "RIGHT_SHOULDER";
	_g.h[11] = "DPAD_UP";
	_g.h[12] = "DPAD_DOWN";
	_g.h[13] = "DPAD_LEFT";
	_g.h[14] = "DPAD_RIGHT";
	$r = _g;
	return $r;
}(this));
lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests = 0;
lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit = 17;
lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue = new haxe_ds_List();
lime__$internal_backend_html5_HTML5Window.dummyCharacter = "";
lime__$internal_backend_html5_HTML5Window.windowID = 0;
lime__$internal_format_Base64.DICTIONARY = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
lime__$internal_format_Base64.EXTENDED_DICTIONARY = (function($this) {
	var $r;
	var result = [];
	{
		var _g = 0;
		var _g1 = lime__$internal_format_Base64.DICTIONARY;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = lime__$internal_format_Base64.DICTIONARY;
			while(_g2 < _g3.length) {
				var b = _g3[_g2];
				++_g2;
				result.push(a + b);
			}
		}
	}
	$r = result;
	return $r;
}(this));
lime_system_Clipboard.onUpdate = new lime_app__$Event_$Void_$Void();
lime_system_Sensor.sensorByID = new haxe_ds_IntMap();
lime_system_Sensor.sensors = [];
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app__$Event_$lime_$ui_$Gamepad_$Void();
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app__$Event_$lime_$ui_$Joystick_$Void();
lime_ui_Touch.onCancel = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onEnd = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_utils_Assets.cache = new lime_utils_AssetCache();
lime_utils_Assets.onChange = new lime_app__$Event_$Void_$Void();
lime_utils_Assets.bundlePaths = new haxe_ds_StringMap();
lime_utils_Assets.libraries = new haxe_ds_StringMap();
lime_utils_Assets.libraryPaths = new haxe_ds_StringMap();
lime_utils_Log.throwErrors = true;
peote_text_FontProgram_$_$Main_$MyFontStyle.regLinesplit = new EReg("^(.*?)(\n|\r\n|\r)","");
peote_text_Glyph_$_$Main_$MyFontStyle.__meta__ = { fields : { x : { posX : null}, y : { posY : null}, color : { color : null}, w : { sizeX : null}, h : { sizeY : null}, tx : { texX : null}, ty : { texY : null}, tw : { texW : null}, th : { texH : null}}};
peote_text_Glyph_$_$Main_$MyFontStyle.FORMULAS = new haxe_ds_StringMap();
peote_text_Glyph_$_$Main_$MyFontStyle.ATTRIBUTES = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["yStart"] = "aPos.y";
	_g.h["yEnd"] = "aPos.y";
	_g.h["y"] = "aPos.y";
	_g.h["xStart"] = "aPos.x";
	_g.h["xEnd"] = "aPos.x";
	_g.h["x"] = "aPos.x";
	_g.h["wStart"] = "aSize.x";
	_g.h["wEnd"] = "aSize.x";
	_g.h["w"] = "aSize.x";
	_g.h["tyStart"] = "aFloat0.y";
	_g.h["tyEnd"] = "aFloat0.y";
	_g.h["ty"] = "aFloat0.y";
	_g.h["txStart"] = "aFloat0.x";
	_g.h["txEnd"] = "aFloat0.x";
	_g.h["tx"] = "aFloat0.x";
	_g.h["twStart"] = "aFloat0.z";
	_g.h["twEnd"] = "aFloat0.z";
	_g.h["tw"] = "aFloat0.z";
	_g.h["thStart"] = "aFloat0.w";
	_g.h["thEnd"] = "aFloat0.w";
	_g.h["th"] = "aFloat0.w";
	_g.h["hStart"] = "aSize.y";
	_g.h["hEnd"] = "aSize.y";
	_g.h["h"] = "aSize.y";
	$r = _g;
	return $r;
}(this));
peote_text_Glyph_$_$Main_$MyFontStyle.FORMULA_NAMES = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["sizeX"] = "w";
	_g.h["sizeY"] = "h";
	_g.h["posX"] = "x";
	_g.h["posY"] = "y";
	$r = _g;
	return $r;
}(this));
peote_text_Glyph_$_$Main_$MyFontStyle.FORMULA_VARYINGS = "tx,ty,tw,th";
peote_text_Glyph_$_$Main_$MyFontStyle.FORMULA_CONSTANTS = "";
peote_text_Glyph_$_$Main_$MyFontStyle.FORMULA_CUSTOMS = "";
peote_text_Glyph_$_$Main_$MyFontStyle.DEFAULT_FORMULA_VARS = new haxe_ds_StringMap();
peote_text_MaskElement.__meta__ = { fields : { x : { posX : null}, y : { posY : null}, w : { sizeX : null}, h : { sizeY : null}}};
peote_text_MaskElement.FORMULAS = new haxe_ds_StringMap();
peote_text_MaskElement.ATTRIBUTES = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["yStart"] = "aPos.y";
	_g.h["yEnd"] = "aPos.y";
	_g.h["y"] = "aPos.y";
	_g.h["xStart"] = "aPos.x";
	_g.h["xEnd"] = "aPos.x";
	_g.h["x"] = "aPos.x";
	_g.h["wStart"] = "aSize.x";
	_g.h["wEnd"] = "aSize.x";
	_g.h["w"] = "aSize.x";
	_g.h["hStart"] = "aSize.y";
	_g.h["hEnd"] = "aSize.y";
	_g.h["h"] = "aSize.y";
	$r = _g;
	return $r;
}(this));
peote_text_MaskElement.FORMULA_NAMES = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["sizeX"] = "w";
	_g.h["sizeY"] = "h";
	_g.h["posX"] = "x";
	_g.h["posY"] = "y";
	$r = _g;
	return $r;
}(this));
peote_text_MaskElement.FORMULA_VARYINGS = "";
peote_text_MaskElement.FORMULA_CONSTANTS = "";
peote_text_MaskElement.FORMULA_CUSTOMS = "";
peote_text_MaskElement.DEFAULT_FORMULA_VARS = new haxe_ds_StringMap();
peote_ui_PeoteUIDisplay.MAX_DISPLAYS = Std.parseInt("10");
peote_ui_PeoteUIDisplay.AVAILABLE_NUMBER = 0;
peote_ui_PeoteUIDisplay.maxActiveIndex = 0;
peote_ui_PeoteUIDisplay.activeUIDisplay = (function($this) {
	var $r;
	var this1 = new Array(peote_ui_PeoteUIDisplay.MAX_DISPLAYS);
	$r = this1;
	return $r;
}(this));
peote_ui_PeoteUIDisplay.draggingMouseDisplays = [];
peote_ui_PeoteUIDisplay.draggingTouchDisplays = [];
peote_ui_interactive_Pickable.__meta__ = { fields : { x : { posX : null}, y : { posY : null}, w : { sizeX : null}, h : { sizeY : null}, z : { zIndex : null}}};
peote_ui_interactive_Pickable.FORMULAS = new haxe_ds_StringMap();
peote_ui_interactive_Pickable.ATTRIBUTES = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["zStart"] = "aRotZ";
	_g.h["zEnd"] = "aRotZ";
	_g.h["z"] = "aRotZ";
	_g.h["yStart"] = "aPos.y";
	_g.h["yEnd"] = "aPos.y";
	_g.h["y"] = "aPos.y";
	_g.h["xStart"] = "aPos.x";
	_g.h["xEnd"] = "aPos.x";
	_g.h["x"] = "aPos.x";
	_g.h["wStart"] = "aSize.x";
	_g.h["wEnd"] = "aSize.x";
	_g.h["w"] = "aSize.x";
	_g.h["hStart"] = "aSize.y";
	_g.h["hEnd"] = "aSize.y";
	_g.h["h"] = "aSize.y";
	$r = _g;
	return $r;
}(this));
peote_ui_interactive_Pickable.FORMULA_NAMES = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["sizeX"] = "w";
	_g.h["sizeY"] = "h";
	_g.h["posX"] = "x";
	_g.h["posY"] = "y";
	_g.h["zIndex"] = "z";
	$r = _g;
	return $r;
}(this));
peote_ui_interactive_Pickable.FORMULA_VARYINGS = "";
peote_ui_interactive_Pickable.FORMULA_CONSTANTS = "";
peote_ui_interactive_Pickable.FORMULA_CUSTOMS = "";
peote_ui_interactive_Pickable.DEFAULT_FORMULA_VARS = new haxe_ds_StringMap();
peote_ui_interactive_input2action_InputTextLine.actionConfig = [new input2action_ActionConfigItem("deleteChar",null,input2action_util_NestedArray.fromNestedArrayItem(127),null,null),new input2action_ActionConfigItem("backspace",null,input2action_util_NestedArray.fromNestedArrayItem(8),null,null),new input2action_ActionConfigItem("tabulator",null,input2action_util_NestedArray.fromNestedArrayItem(9),null,null),new input2action_ActionConfigItem("copyToClipboard",null,[input2action_util_NestedArrayItem.fromOther(1073741948),[1073742048,99],[1073742052,99]],null,null),new input2action_ActionConfigItem("cutToClipboard",null,[input2action_util_NestedArrayItem.fromOther(1073741947),[1073742048,120],[1073742052,120]],null,null),new input2action_ActionConfigItem("pasteFromClipboard",null,[input2action_util_NestedArrayItem.fromOther(1073741949),[1073742048,118],[1073742052,118]],null,null),new input2action_ActionConfigItem("cursorLeft",true,input2action_util_NestedArray.fromNestedArrayItem(1073741904),null,null),new input2action_ActionConfigItem("cursorRight",true,input2action_util_NestedArray.fromNestedArrayItem(1073741903),null,null),new input2action_ActionConfigItem("cursorLeftWord",null,[[1073742048,1073741904],[1073742052,1073741904]],null,null),new input2action_ActionConfigItem("cursorRightWord",null,[[1073742048,1073741903],[1073742052,1073741903]],null,null)];
peote_ui_interactive_input2action_InputTextLine.actionMap = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["deleteChar"] = { action : peote_ui_interactive_input2action_InputTextLine.deleteChar, repeatKeyboardDefault : true};
	_g.h["backspace"] = { action : peote_ui_interactive_input2action_InputTextLine.backspace, repeatKeyboardDefault : true};
	_g.h["tabulator"] = { action : peote_ui_interactive_input2action_InputTextLine.tabulator, repeatKeyboardDefault : true};
	_g.h["copyToClipboard"] = { action : peote_ui_interactive_input2action_InputTextLine.copyToClipboard};
	_g.h["cutToClipboard"] = { action : peote_ui_interactive_input2action_InputTextLine.cutToClipboard};
	_g.h["pasteFromClipboard"] = { action : peote_ui_interactive_input2action_InputTextLine.pasteFromClipboard, repeatKeyboardDefault : true};
	_g.h["cursorLeft"] = { action : peote_ui_interactive_input2action_InputTextLine.cursorLeft, repeatKeyboardDefault : true};
	_g.h["cursorRight"] = { action : peote_ui_interactive_input2action_InputTextLine.cursorRight, repeatKeyboardDefault : true};
	_g.h["cursorLeftWord"] = { action : peote_ui_interactive_input2action_InputTextLine.cursorLeftWord, repeatKeyboardDefault : true};
	_g.h["cursorRightWord"] = { action : peote_ui_interactive_input2action_InputTextLine.cursorRightWord, repeatKeyboardDefault : true};
	$r = _g;
	return $r;
}(this));
peote_ui_interactive_input2action_InputTextPage.actionConfig = [new input2action_ActionConfigItem("deleteChar",null,input2action_util_NestedArray.fromNestedArrayItem(127),null,null),new input2action_ActionConfigItem("backspace",null,input2action_util_NestedArray.fromNestedArrayItem(8),null,null),new input2action_ActionConfigItem("tabulator",null,input2action_util_NestedArray.fromNestedArrayItem(9),null,null),new input2action_ActionConfigItem("copyToClipboard",null,[input2action_util_NestedArrayItem.fromOther(1073741948),[1073742048,99],[1073742052,99]],null,null),new input2action_ActionConfigItem("cutToClipboard",null,[input2action_util_NestedArrayItem.fromOther(1073741947),[1073742048,120],[1073742052,120]],null,null),new input2action_ActionConfigItem("pasteFromClipboard",null,[input2action_util_NestedArrayItem.fromOther(1073741949),[1073742048,118],[1073742052,118]],null,null),new input2action_ActionConfigItem("selectModifier",null,[input2action_util_NestedArrayItem.fromOther(1073742049),input2action_util_NestedArrayItem.fromOther(1073742053)],null,null),new input2action_ActionConfigItem("selectAll",null,[[1073742048,97],[1073742052,97]],null,null),new input2action_ActionConfigItem("cursorStart",true,input2action_util_NestedArray.fromNestedArrayItem(1073741898),null,null),new input2action_ActionConfigItem("cursorEnd",true,input2action_util_NestedArray.fromNestedArrayItem(1073741901),null,null),new input2action_ActionConfigItem("cursorLeft",true,input2action_util_NestedArray.fromNestedArrayItem(1073741904),null,null),new input2action_ActionConfigItem("cursorRight",true,input2action_util_NestedArray.fromNestedArrayItem(1073741903),null,null),new input2action_ActionConfigItem("cursorLeftWord",null,[[1073742048,1073741904],[1073742052,1073741904]],null,null),new input2action_ActionConfigItem("cursorRightWord",null,[[1073742048,1073741903],[1073742052,1073741903]],null,null),new input2action_ActionConfigItem("cursorUp",null,input2action_util_NestedArray.fromNestedArrayItem(1073741906),null,null),new input2action_ActionConfigItem("cursorDown",null,input2action_util_NestedArray.fromNestedArrayItem(1073741905),null,null),new input2action_ActionConfigItem("cursorPageStart",null,[[1073742048,1073741898],[1073742052,1073741898]],null,null),new input2action_ActionConfigItem("cursorPageEnd",null,[[1073742048,1073741901],[1073742052,1073741901]],null,null),new input2action_ActionConfigItem("enter",null,[input2action_util_NestedArrayItem.fromOther(13),input2action_util_NestedArrayItem.fromOther(1073741982),input2action_util_NestedArrayItem.fromOther(1073741912)],null,null)];
peote_ui_interactive_input2action_InputTextPage.actionMap = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["deleteChar"] = { action : peote_ui_interactive_input2action_InputTextPage.deleteChar, repeatKeyboardDefault : true};
	_g.h["backspace"] = { action : peote_ui_interactive_input2action_InputTextPage.backspace, repeatKeyboardDefault : true};
	_g.h["tabulator"] = { action : peote_ui_interactive_input2action_InputTextPage.tabulator, repeatKeyboardDefault : true};
	_g.h["copyToClipboard"] = { action : peote_ui_interactive_input2action_InputTextPage.copyToClipboard, repeatKeyboardDefault : true};
	_g.h["cutToClipboard"] = { action : peote_ui_interactive_input2action_InputTextPage.cutToClipboard};
	_g.h["pasteFromClipboard"] = { action : peote_ui_interactive_input2action_InputTextPage.pasteFromClipboard, repeatKeyboardDefault : true};
	_g.h["selectModifier"] = { action : peote_ui_interactive_input2action_InputTextPage.selectModifier, up : true};
	_g.h["selectAll"] = { action : peote_ui_interactive_input2action_InputTextPage.selectAll};
	_g.h["cursorStart"] = { action : peote_ui_interactive_input2action_InputTextPage.cursorStart};
	_g.h["cursorEnd"] = { action : peote_ui_interactive_input2action_InputTextPage.cursorEnd};
	_g.h["cursorLeft"] = { action : peote_ui_interactive_input2action_InputTextPage.cursorLeft, repeatKeyboardDefault : true};
	_g.h["cursorRight"] = { action : peote_ui_interactive_input2action_InputTextPage.cursorRight, repeatKeyboardDefault : true};
	_g.h["cursorLeftWord"] = { action : peote_ui_interactive_input2action_InputTextPage.cursorLeftWord, repeatKeyboardDefault : true};
	_g.h["cursorRightWord"] = { action : peote_ui_interactive_input2action_InputTextPage.cursorRightWord, repeatKeyboardDefault : true};
	_g.h["cursorUp"] = { action : peote_ui_interactive_input2action_InputTextPage.cursorUp, repeatKeyboardDefault : true};
	_g.h["cursorDown"] = { action : peote_ui_interactive_input2action_InputTextPage.cursorDown, repeatKeyboardDefault : true};
	_g.h["cursorPageStart"] = { action : peote_ui_interactive_input2action_InputTextPage.cursorPageStart};
	_g.h["cursorPageEnd"] = { action : peote_ui_interactive_input2action_InputTextPage.cursorPageEnd};
	_g.h["enter"] = { action : peote_ui_interactive_input2action_InputTextPage.enter, repeatKeyboardDefault : true};
	$r = _g;
	return $r;
}(this));
peote_ui_interactive_input2action_InputTextPage.addSelection = false;
peote_ui_style_BoxStyle.ID = 4096;
peote_ui_style_BoxStyleElement.__meta__ = { fields : { color : { color : null}, x : { posX : null}, y : { posY : null}, w : { sizeX : null, varying : null}, h : { sizeY : null, varying : null}, z : { zIndex : null}}};
peote_ui_style_BoxStyleElement.FORMULAS = new haxe_ds_StringMap();
peote_ui_style_BoxStyleElement.ATTRIBUTES = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["zStart"] = "aRotZ";
	_g.h["zEnd"] = "aRotZ";
	_g.h["z"] = "aRotZ";
	_g.h["yStart"] = "aPos.y";
	_g.h["yEnd"] = "aPos.y";
	_g.h["y"] = "aPos.y";
	_g.h["xStart"] = "aPos.x";
	_g.h["xEnd"] = "aPos.x";
	_g.h["x"] = "aPos.x";
	_g.h["wStart"] = "aSize.x";
	_g.h["wEnd"] = "aSize.x";
	_g.h["w"] = "aSize.x";
	_g.h["hStart"] = "aSize.y";
	_g.h["hEnd"] = "aSize.y";
	_g.h["h"] = "aSize.y";
	$r = _g;
	return $r;
}(this));
peote_ui_style_BoxStyleElement.FORMULA_NAMES = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["sizeX"] = "w";
	_g.h["sizeY"] = "h";
	_g.h["posX"] = "x";
	_g.h["posY"] = "y";
	_g.h["zIndex"] = "z";
	$r = _g;
	return $r;
}(this));
peote_ui_style_BoxStyleElement.FORMULA_VARYINGS = "";
peote_ui_style_BoxStyleElement.FORMULA_CONSTANTS = "";
peote_ui_style_BoxStyleElement.FORMULA_CUSTOMS = "";
peote_ui_style_BoxStyleElement.DEFAULT_FORMULA_VARS = new haxe_ds_StringMap();
peote_ui_style_RoundBorderStyle.ID = 2048;
peote_ui_style_RoundBorderStyleElement.__meta__ = { fields : { color : { color : null}, borderColor : { color : null}, borderSize : { custom : null, varying : null}, borderRadius : { custom : null, varying : null}, x : { posX : null}, y : { posY : null}, w : { sizeX : null, varying : null}, h : { sizeY : null, varying : null}, z : { zIndex : null}, mx : { custom : ["mx"], varying : null}, my : { custom : ["my"], varying : null}, mw : { custom : ["mw"], varying : null}, mh : { custom : ["mh"], varying : null}}};
peote_ui_style_RoundBorderStyleElement.FORMULAS = new haxe_ds_StringMap();
peote_ui_style_RoundBorderStyleElement.ATTRIBUTES = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["zStart"] = "aRotZ";
	_g.h["zEnd"] = "aRotZ";
	_g.h["z"] = "aRotZ";
	_g.h["yStart"] = "aPos.y";
	_g.h["yEnd"] = "aPos.y";
	_g.h["y"] = "aPos.y";
	_g.h["xStart"] = "aPos.x";
	_g.h["xEnd"] = "aPos.x";
	_g.h["x"] = "aPos.x";
	_g.h["wStart"] = "aSize.x";
	_g.h["wEnd"] = "aSize.x";
	_g.h["w"] = "aSize.x";
	_g.h["myStart"] = "aShort0.y";
	_g.h["myEnd"] = "aShort0.y";
	_g.h["my"] = "aShort0.y";
	_g.h["mxStart"] = "aShort0.x";
	_g.h["mxEnd"] = "aShort0.x";
	_g.h["mx"] = "aShort0.x";
	_g.h["mwStart"] = "aShort0.z";
	_g.h["mwEnd"] = "aShort0.z";
	_g.h["mw"] = "aShort0.z";
	_g.h["mhStart"] = "aShort0.w";
	_g.h["mhEnd"] = "aShort0.w";
	_g.h["mh"] = "aShort0.w";
	_g.h["hStart"] = "aSize.y";
	_g.h["hEnd"] = "aSize.y";
	_g.h["h"] = "aSize.y";
	_g.h["borderSizeStart"] = "aFloat0.x";
	_g.h["borderSizeEnd"] = "aFloat0.x";
	_g.h["borderSize"] = "aFloat0.x";
	_g.h["borderRadiusStart"] = "aFloat0.y";
	_g.h["borderRadiusEnd"] = "aFloat0.y";
	_g.h["borderRadius"] = "aFloat0.y";
	$r = _g;
	return $r;
}(this));
peote_ui_style_RoundBorderStyleElement.FORMULA_NAMES = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["sizeX"] = "w";
	_g.h["sizeY"] = "h";
	_g.h["posX"] = "x";
	_g.h["posY"] = "y";
	_g.h["zIndex"] = "z";
	$r = _g;
	return $r;
}(this));
peote_ui_style_RoundBorderStyleElement.FORMULA_VARYINGS = "borderSize,borderRadius,mx,my,mw,mh";
peote_ui_style_RoundBorderStyleElement.FORMULA_CONSTANTS = "";
peote_ui_style_RoundBorderStyleElement.FORMULA_CUSTOMS = "";
peote_ui_style_RoundBorderStyleElement.DEFAULT_FORMULA_VARS = new haxe_ds_StringMap();
peote_view_Version.isES3 = false;
peote_view_Version.isUBO = false;
peote_view_Version.isINSTANCED = false;
peote_view_Version.isVAO = false;
peote_view_Precision.VertexFloat = { high : 0, medium : 0, low : 0};
peote_view_Precision.VertexInt = { high : 0, medium : 0, low : 0};
peote_view_Precision.VertexSampler = { high : 0, medium : 0, low : 0};
peote_view_Precision.FragmentFloat = { high : 0, medium : 0, low : 0};
peote_view_Precision.FragmentInt = { high : 0, medium : 0, low : 0};
peote_view_Precision.FragmentSampler = { high : 0, medium : 0, low : 0};
peote_view_utils_GLTool.rEmptylines = new EReg("([ \t]*\r?\n)+","g");
peote_view_utils_GLTool.rStartspaces = new EReg("^([ \t]*\r?\n)+","g");
utils_Loader.corsServer = "";
utils_MultipassTemplate.splitter = new EReg("(::[A-Za-z0-9_ ()&|!+=/><*.\"-]+::|\\$\\$([A-Za-z0-9_-]+)\\()","");
utils_MultipassTemplate.expr_splitter = new EReg("(\\(|\\)|[ \r\n\t]*\"[^\"]*\"[ \r\n\t]*|[!+=/><*.&|-]+)","");
utils_MultipassTemplate.expr_trim = new EReg("^[ ]*([^ ]+)[ ]*$","");
utils_MultipassTemplate.expr_int = new EReg("^[0-9]+$","");
utils_MultipassTemplate.expr_float = new EReg("^([+-]?)(?=\\d|,\\d)\\d*(,\\d*)?([Ee]([+-]?\\d+))?$","");
utils_MultipassTemplate.globals = { };
ApplicationMain.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=Main.js.map
});
$hx_exports.lime = $hx_exports.lime || {};
$hx_exports.lime.$scripts = $hx_exports.lime.$scripts || {};
$hx_exports.lime.$scripts["Main"] = $hx_script;
$hx_exports.lime.embed = function(projectName) { var exports = {};
	var script = $hx_exports.lime.$scripts[projectName];
	if (!script) throw Error("Cannot find project name \"" + projectName + "\"");
	script(exports, $global);
	for (var key in exports) $hx_exports[key] = $hx_exports[key] || exports[key];
	var lime = exports.lime || window.lime;
	if (lime && lime.embed && this != lime.embed) lime.embed.apply(lime, arguments);
	return exports;
};
if(typeof define == "function" && define.amd) {
	define([], function() { return $hx_exports.lime; });
	define.__amd = define.amd;
	define.amd = null;
}
})(typeof exports != "undefined" ? exports : typeof define == "function" && define.amd ? {} : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

/*! howler.js v2.1.1 | (c) 2013-2018, James Simpson of GoldFire Studios | MIT License | howlerjs.com */
!function(){"use strict";var e=function(){this.init()};e.prototype={init:function(){var e=this||n;return e._counter=1e3,e._html5AudioPool=[],e.html5PoolSize=10,e._codecs={},e._howls=[],e._muted=!1,e._volume=1,e._canPlayEvent="canplaythrough",e._navigator="undefined"!=typeof window&&window.navigator?window.navigator:null,e.masterGain=null,e.noAudio=!1,e.usingWebAudio=!0,e.autoSuspend=!0,e.ctx=null,e.autoUnlock=!0,e._setup(),e},volume:function(e){var o=this||n;if(e=parseFloat(e),o.ctx||_(),void 0!==e&&e>=0&&e<=1){if(o._volume=e,o._muted)return o;o.usingWebAudio&&o.masterGain.gain.setValueAtTime(e,n.ctx.currentTime);for(var t=0;t<o._howls.length;t++)if(!o._howls[t]._webAudio)for(var r=o._howls[t]._getSoundIds(),a=0;a<r.length;a++){var u=o._howls[t]._soundById(r[a]);u&&u._node&&(u._node.volume=u._volume*e)}return o}return o._volume},mute:function(e){var o=this||n;o.ctx||_(),o._muted=e,o.usingWebAudio&&o.masterGain.gain.setValueAtTime(e?0:o._volume,n.ctx.currentTime);for(var t=0;t<o._howls.length;t++)if(!o._howls[t]._webAudio)for(var r=o._howls[t]._getSoundIds(),a=0;a<r.length;a++){var u=o._howls[t]._soundById(r[a]);u&&u._node&&(u._node.muted=!!e||u._muted)}return o},unload:function(){for(var e=this||n,o=e._howls.length-1;o>=0;o--)e._howls[o].unload();return e.usingWebAudio&&e.ctx&&void 0!==e.ctx.close&&(e.ctx.close(),e.ctx=null,_()),e},codecs:function(e){return(this||n)._codecs[e.replace(/^x-/,"")]},_setup:function(){var e=this||n;if(e.state=e.ctx?e.ctx.state||"suspended":"suspended",e._autoSuspend(),!e.usingWebAudio)if("undefined"!=typeof Audio)try{var o=new Audio;void 0===o.oncanplaythrough&&(e._canPlayEvent="canplay")}catch(n){e.noAudio=!0}else e.noAudio=!0;try{var o=new Audio;o.muted&&(e.noAudio=!0)}catch(e){}return e.noAudio||e._setupCodecs(),e},_setupCodecs:function(){var e=this||n,o=null;try{o="undefined"!=typeof Audio?new Audio:null}catch(n){return e}if(!o||"function"!=typeof o.canPlayType)return e;var t=o.canPlayType("audio/mpeg;").replace(/^no$/,""),r=e._navigator&&e._navigator.userAgent.match(/OPR\/([0-6].)/g),a=r&&parseInt(r[0].split("/")[1],10)<33;return e._codecs={mp3:!(a||!t&&!o.canPlayType("audio/mp3;").replace(/^no$/,"")),mpeg:!!t,opus:!!o.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/,""),ogg:!!o.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),oga:!!o.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),wav:!!o.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),aac:!!o.canPlayType("audio/aac;").replace(/^no$/,""),caf:!!o.canPlayType("audio/x-caf;").replace(/^no$/,""),m4a:!!(o.canPlayType("audio/x-m4a;")||o.canPlayType("audio/m4a;")||o.canPlayType("audio/aac;")).replace(/^no$/,""),mp4:!!(o.canPlayType("audio/x-mp4;")||o.canPlayType("audio/mp4;")||o.canPlayType("audio/aac;")).replace(/^no$/,""),weba:!!o.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,""),webm:!!o.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,""),dolby:!!o.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/,""),flac:!!(o.canPlayType("audio/x-flac;")||o.canPlayType("audio/flac;")).replace(/^no$/,"")},e},_unlockAudio:function(){var e=this||n,o=/iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi|Chrome|Safari/i.test(e._navigator&&e._navigator.userAgent);if(!e._audioUnlocked&&e.ctx&&o){e._audioUnlocked=!1,e.autoUnlock=!1,e._mobileUnloaded||44100===e.ctx.sampleRate||(e._mobileUnloaded=!0,e.unload()),e._scratchBuffer=e.ctx.createBuffer(1,1,22050);var t=function(n){for(var o=0;o<e.html5PoolSize;o++){var r=new Audio;r._unlocked=!0,e._releaseHtml5Audio(r)}for(var o=0;o<e._howls.length;o++)if(!e._howls[o]._webAudio)for(var a=e._howls[o]._getSoundIds(),u=0;u<a.length;u++){var i=e._howls[o]._soundById(a[u]);i&&i._node&&!i._node._unlocked&&(i._node._unlocked=!0,i._node.load())}e._autoResume();var d=e.ctx.createBufferSource();d.buffer=e._scratchBuffer,d.connect(e.ctx.destination),void 0===d.start?d.noteOn(0):d.start(0),"function"==typeof e.ctx.resume&&e.ctx.resume(),d.onended=function(){d.disconnect(0),e._audioUnlocked=!0,document.removeEventListener("touchstart",t,!0),document.removeEventListener("touchend",t,!0),document.removeEventListener("click",t,!0);for(var n=0;n<e._howls.length;n++)e._howls[n]._emit("unlock")}};return document.addEventListener("touchstart",t,!0),document.addEventListener("touchend",t,!0),document.addEventListener("click",t,!0),e}},_obtainHtml5Audio:function(){var e=this||n;if(e._html5AudioPool.length)return e._html5AudioPool.pop();var o=(new Audio).play();return o&&"undefined"!=typeof Promise&&(o instanceof Promise||"function"==typeof o.then)&&o.catch(function(){console.warn("HTML5 Audio pool exhausted, returning potentially locked audio object.")}),new Audio},_releaseHtml5Audio:function(e){var o=this||n;return e._unlocked&&o._html5AudioPool.push(e),o},_autoSuspend:function(){var e=this;if(e.autoSuspend&&e.ctx&&void 0!==e.ctx.suspend&&n.usingWebAudio){for(var o=0;o<e._howls.length;o++)if(e._howls[o]._webAudio)for(var t=0;t<e._howls[o]._sounds.length;t++)if(!e._howls[o]._sounds[t]._paused)return e;return e._suspendTimer&&clearTimeout(e._suspendTimer),e._suspendTimer=setTimeout(function(){e.autoSuspend&&(e._suspendTimer=null,e.state="suspending",e.ctx.suspend().then(function(){e.state="suspended",e._resumeAfterSuspend&&(delete e._resumeAfterSuspend,e._autoResume())}))},3e4),e}},_autoResume:function(){var e=this;if(e.ctx&&void 0!==e.ctx.resume&&n.usingWebAudio)return"running"===e.state&&e._suspendTimer?(clearTimeout(e._suspendTimer),e._suspendTimer=null):"suspended"===e.state?(e.ctx.resume().then(function(){e.state="running";for(var n=0;n<e._howls.length;n++)e._howls[n]._emit("resume")}),e._suspendTimer&&(clearTimeout(e._suspendTimer),e._suspendTimer=null)):"suspending"===e.state&&(e._resumeAfterSuspend=!0),e}};var n=new e,o=function(e){var n=this;if(!e.src||0===e.src.length)return void console.error("An array of source files must be passed with any new Howl.");n.init(e)};o.prototype={init:function(e){var o=this;return n.ctx||_(),o._autoplay=e.autoplay||!1,o._format="string"!=typeof e.format?e.format:[e.format],o._html5=e.html5||!1,o._muted=e.mute||!1,o._loop=e.loop||!1,o._pool=e.pool||5,o._preload="boolean"!=typeof e.preload||e.preload,o._rate=e.rate||1,o._sprite=e.sprite||{},o._src="string"!=typeof e.src?e.src:[e.src],o._volume=void 0!==e.volume?e.volume:1,o._xhrWithCredentials=e.xhrWithCredentials||!1,o._duration=0,o._state="unloaded",o._sounds=[],o._endTimers={},o._queue=[],o._playLock=!1,o._onend=e.onend?[{fn:e.onend}]:[],o._onfade=e.onfade?[{fn:e.onfade}]:[],o._onload=e.onload?[{fn:e.onload}]:[],o._onloaderror=e.onloaderror?[{fn:e.onloaderror}]:[],o._onplayerror=e.onplayerror?[{fn:e.onplayerror}]:[],o._onpause=e.onpause?[{fn:e.onpause}]:[],o._onplay=e.onplay?[{fn:e.onplay}]:[],o._onstop=e.onstop?[{fn:e.onstop}]:[],o._onmute=e.onmute?[{fn:e.onmute}]:[],o._onvolume=e.onvolume?[{fn:e.onvolume}]:[],o._onrate=e.onrate?[{fn:e.onrate}]:[],o._onseek=e.onseek?[{fn:e.onseek}]:[],o._onunlock=e.onunlock?[{fn:e.onunlock}]:[],o._onresume=[],o._webAudio=n.usingWebAudio&&!o._html5,void 0!==n.ctx&&n.ctx&&n.autoUnlock&&n._unlockAudio(),n._howls.push(o),o._autoplay&&o._queue.push({event:"play",action:function(){o.play()}}),o._preload&&o.load(),o},load:function(){var e=this,o=null;if(n.noAudio)return void e._emit("loaderror",null,"No audio support.");"string"==typeof e._src&&(e._src=[e._src]);for(var r=0;r<e._src.length;r++){var u,i;if(e._format&&e._format[r])u=e._format[r];else{if("string"!=typeof(i=e._src[r])){e._emit("loaderror",null,"Non-string found in selected audio sources - ignoring.");continue}u=/^data:audio\/([^;,]+);/i.exec(i),u||(u=/\.([^.]+)$/.exec(i.split("?",1)[0])),u&&(u=u[1].toLowerCase())}if(u||console.warn('No file extension was found. Consider using the "format" property or specify an extension.'),u&&n.codecs(u)){o=e._src[r];break}}return o?(e._src=o,e._state="loading","https:"===window.location.protocol&&"http:"===o.slice(0,5)&&(e._html5=!0,e._webAudio=!1),new t(e),e._webAudio&&a(e),e):void e._emit("loaderror",null,"No codec support for selected audio sources.")},play:function(e,o){var t=this,r=null;if("number"==typeof e)r=e,e=null;else{if("string"==typeof e&&"loaded"===t._state&&!t._sprite[e])return null;if(void 0===e&&(e="__default",!t._playLock)){for(var a=0,u=0;u<t._sounds.length;u++)t._sounds[u]._paused&&!t._sounds[u]._ended&&(a++,r=t._sounds[u]._id);1===a?e=null:r=null}}var i=r?t._soundById(r):t._inactiveSound();if(!i)return null;if(r&&!e&&(e=i._sprite||"__default"),"loaded"!==t._state){i._sprite=e,i._ended=!1;var d=i._id;return t._queue.push({event:"play",action:function(){t.play(d)}}),d}if(r&&!i._paused)return o||t._loadQueue("play"),i._id;t._webAudio&&n._autoResume();var _=Math.max(0,i._seek>0?i._seek:t._sprite[e][0]/1e3),s=Math.max(0,(t._sprite[e][0]+t._sprite[e][1])/1e3-_),l=1e3*s/Math.abs(i._rate),c=t._sprite[e][0]/1e3,f=(t._sprite[e][0]+t._sprite[e][1])/1e3,p=!(!i._loop&&!t._sprite[e][2]);i._sprite=e,i._ended=!1;var m=function(){i._paused=!1,i._seek=_,i._start=c,i._stop=f,i._loop=p};if(_>=f)return void t._ended(i);var v=i._node;if(t._webAudio){var h=function(){t._playLock=!1,m(),t._refreshBuffer(i);var e=i._muted||t._muted?0:i._volume;v.gain.setValueAtTime(e,n.ctx.currentTime),i._playStart=n.ctx.currentTime,void 0===v.bufferSource.start?i._loop?v.bufferSource.noteGrainOn(0,_,86400):v.bufferSource.noteGrainOn(0,_,s):i._loop?v.bufferSource.start(0,_,86400):v.bufferSource.start(0,_,s),l!==1/0&&(t._endTimers[i._id]=setTimeout(t._ended.bind(t,i),l)),o||setTimeout(function(){t._emit("play",i._id),t._loadQueue()},0)};"running"===n.state?h():(t._playLock=!0,t.once("resume",h),t._clearTimer(i._id))}else{var y=function(){v.currentTime=_,v.muted=i._muted||t._muted||n._muted||v.muted,v.volume=i._volume*n.volume(),v.playbackRate=i._rate;try{var r=v.play();if(r&&"undefined"!=typeof Promise&&(r instanceof Promise||"function"==typeof r.then)?(t._playLock=!0,m(),r.then(function(){t._playLock=!1,v._unlocked=!0,o||(t._emit("play",i._id),t._loadQueue())}).catch(function(){t._playLock=!1,t._emit("playerror",i._id,"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction."),i._ended=!0,i._paused=!0})):o||(t._playLock=!1,m(),t._emit("play",i._id),t._loadQueue()),v.playbackRate=i._rate,v.paused)return void t._emit("playerror",i._id,"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.");"__default"!==e||i._loop?t._endTimers[i._id]=setTimeout(t._ended.bind(t,i),l):(t._endTimers[i._id]=function(){t._ended(i),v.removeEventListener("ended",t._endTimers[i._id],!1)},v.addEventListener("ended",t._endTimers[i._id],!1))}catch(e){t._emit("playerror",i._id,e)}},g=window&&window.ejecta||!v.readyState&&n._navigator.isCocoonJS;if(v.readyState>=3||g)y();else{t._playLock=!0;var b=function(){y(),v.removeEventListener(n._canPlayEvent,b,!1)};v.addEventListener(n._canPlayEvent,b,!1),t._clearTimer(i._id)}}return i._id},pause:function(e){var n=this;if("loaded"!==n._state||n._playLock)return n._queue.push({event:"pause",action:function(){n.pause(e)}}),n;for(var o=n._getSoundIds(e),t=0;t<o.length;t++){n._clearTimer(o[t]);var r=n._soundById(o[t]);if(r&&!r._paused&&(r._seek=n.seek(o[t]),r._rateSeek=0,r._paused=!0,n._stopFade(o[t]),r._node))if(n._webAudio){if(!r._node.bufferSource)continue;void 0===r._node.bufferSource.stop?r._node.bufferSource.noteOff(0):r._node.bufferSource.stop(0),n._cleanBuffer(r._node)}else isNaN(r._node.duration)&&r._node.duration!==1/0||r._node.pause();arguments[1]||n._emit("pause",r?r._id:null)}return n},stop:function(e,n){var o=this;if("loaded"!==o._state||o._playLock)return o._queue.push({event:"stop",action:function(){o.stop(e)}}),o;for(var t=o._getSoundIds(e),r=0;r<t.length;r++){o._clearTimer(t[r]);var a=o._soundById(t[r]);a&&(a._seek=a._start||0,a._rateSeek=0,a._paused=!0,a._ended=!0,o._stopFade(t[r]),a._node&&(o._webAudio?a._node.bufferSource&&(void 0===a._node.bufferSource.stop?a._node.bufferSource.noteOff(0):a._node.bufferSource.stop(0),o._cleanBuffer(a._node)):isNaN(a._node.duration)&&a._node.duration!==1/0||(a._node.currentTime=a._start||0,a._node.pause())),n||o._emit("stop",a._id))}return o},mute:function(e,o){var t=this;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"mute",action:function(){t.mute(e,o)}}),t;if(void 0===o){if("boolean"!=typeof e)return t._muted;t._muted=e}for(var r=t._getSoundIds(o),a=0;a<r.length;a++){var u=t._soundById(r[a]);u&&(u._muted=e,u._interval&&t._stopFade(u._id),t._webAudio&&u._node?u._node.gain.setValueAtTime(e?0:u._volume,n.ctx.currentTime):u._node&&(u._node.muted=!!n._muted||e),t._emit("mute",u._id))}return t},volume:function(){var e,o,t=this,r=arguments;if(0===r.length)return t._volume;if(1===r.length||2===r.length&&void 0===r[1]){t._getSoundIds().indexOf(r[0])>=0?o=parseInt(r[0],10):e=parseFloat(r[0])}else r.length>=2&&(e=parseFloat(r[0]),o=parseInt(r[1],10));var a;if(!(void 0!==e&&e>=0&&e<=1))return a=o?t._soundById(o):t._sounds[0],a?a._volume:0;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"volume",action:function(){t.volume.apply(t,r)}}),t;void 0===o&&(t._volume=e),o=t._getSoundIds(o);for(var u=0;u<o.length;u++)(a=t._soundById(o[u]))&&(a._volume=e,r[2]||t._stopFade(o[u]),t._webAudio&&a._node&&!a._muted?a._node.gain.setValueAtTime(e,n.ctx.currentTime):a._node&&!a._muted&&(a._node.volume=e*n.volume()),t._emit("volume",a._id));return t},fade:function(e,o,t,r){var a=this;if("loaded"!==a._state||a._playLock)return a._queue.push({event:"fade",action:function(){a.fade(e,o,t,r)}}),a;e=parseFloat(e),o=parseFloat(o),t=parseFloat(t),a.volume(e,r);for(var u=a._getSoundIds(r),i=0;i<u.length;i++){var d=a._soundById(u[i]);if(d){if(r||a._stopFade(u[i]),a._webAudio&&!d._muted){var _=n.ctx.currentTime,s=_+t/1e3;d._volume=e,d._node.gain.setValueAtTime(e,_),d._node.gain.linearRampToValueAtTime(o,s)}a._startFadeInterval(d,e,o,t,u[i],void 0===r)}}return a},_startFadeInterval:function(e,n,o,t,r,a){var u=this,i=n,d=o-n,_=Math.abs(d/.01),s=Math.max(4,_>0?t/_:t),l=Date.now();e._fadeTo=o,e._interval=setInterval(function(){var r=(Date.now()-l)/t;l=Date.now(),i+=d*r,i=Math.max(0,i),i=Math.min(1,i),i=Math.round(100*i)/100,u._webAudio?e._volume=i:u.volume(i,e._id,!0),a&&(u._volume=i),(o<n&&i<=o||o>n&&i>=o)&&(clearInterval(e._interval),e._interval=null,e._fadeTo=null,u.volume(o,e._id),u._emit("fade",e._id))},s)},_stopFade:function(e){var o=this,t=o._soundById(e);return t&&t._interval&&(o._webAudio&&t._node.gain.cancelScheduledValues(n.ctx.currentTime),clearInterval(t._interval),t._interval=null,o.volume(t._fadeTo,e),t._fadeTo=null,o._emit("fade",e)),o},loop:function(){var e,n,o,t=this,r=arguments;if(0===r.length)return t._loop;if(1===r.length){if("boolean"!=typeof r[0])return!!(o=t._soundById(parseInt(r[0],10)))&&o._loop;e=r[0],t._loop=e}else 2===r.length&&(e=r[0],n=parseInt(r[1],10));for(var a=t._getSoundIds(n),u=0;u<a.length;u++)(o=t._soundById(a[u]))&&(o._loop=e,t._webAudio&&o._node&&o._node.bufferSource&&(o._node.bufferSource.loop=e,e&&(o._node.bufferSource.loopStart=o._start||0,o._node.bufferSource.loopEnd=o._stop)));return t},rate:function(){var e,o,t=this,r=arguments;if(0===r.length)o=t._sounds[0]._id;else if(1===r.length){var a=t._getSoundIds(),u=a.indexOf(r[0]);u>=0?o=parseInt(r[0],10):e=parseFloat(r[0])}else 2===r.length&&(e=parseFloat(r[0]),o=parseInt(r[1],10));var i;if("number"!=typeof e)return i=t._soundById(o),i?i._rate:t._rate;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"rate",action:function(){t.rate.apply(t,r)}}),t;void 0===o&&(t._rate=e),o=t._getSoundIds(o);for(var d=0;d<o.length;d++)if(i=t._soundById(o[d])){t.playing(o[d])&&(i._rateSeek=t.seek(o[d]),i._playStart=t._webAudio?n.ctx.currentTime:i._playStart),i._rate=e,t._webAudio&&i._node&&i._node.bufferSource?i._node.bufferSource.playbackRate.setValueAtTime(e,n.ctx.currentTime):i._node&&(i._node.playbackRate=e);var _=t.seek(o[d]),s=(t._sprite[i._sprite][0]+t._sprite[i._sprite][1])/1e3-_,l=1e3*s/Math.abs(i._rate);!t._endTimers[o[d]]&&i._paused||(t._clearTimer(o[d]),t._endTimers[o[d]]=setTimeout(t._ended.bind(t,i),l)),t._emit("rate",i._id)}return t},seek:function(){var e,o,t=this,r=arguments;if(0===r.length)o=t._sounds[0]._id;else if(1===r.length){var a=t._getSoundIds(),u=a.indexOf(r[0]);u>=0?o=parseInt(r[0],10):t._sounds.length&&(o=t._sounds[0]._id,e=parseFloat(r[0]))}else 2===r.length&&(e=parseFloat(r[0]),o=parseInt(r[1],10));if(void 0===o)return t;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"seek",action:function(){t.seek.apply(t,r)}}),t;var i=t._soundById(o);if(i){if(!("number"==typeof e&&e>=0)){if(t._webAudio){var d=t.playing(o)?n.ctx.currentTime-i._playStart:0,_=i._rateSeek?i._rateSeek-i._seek:0;return i._seek+(_+d*Math.abs(i._rate))}return i._node.currentTime}var s=t.playing(o);s&&t.pause(o,!0),i._seek=e,i._ended=!1,t._clearTimer(o),t._webAudio||!i._node||isNaN(i._node.duration)||(i._node.currentTime=e);var l=function(){t._emit("seek",o),s&&t.play(o,!0)};if(s&&!t._webAudio){var c=function(){t._playLock?setTimeout(c,0):l()};setTimeout(c,0)}else l()}return t},playing:function(e){var n=this;if("number"==typeof e){var o=n._soundById(e);return!!o&&!o._paused}for(var t=0;t<n._sounds.length;t++)if(!n._sounds[t]._paused)return!0;return!1},duration:function(e){var n=this,o=n._duration,t=n._soundById(e);return t&&(o=n._sprite[t._sprite][1]/1e3),o},state:function(){return this._state},unload:function(){for(var e=this,o=e._sounds,t=0;t<o.length;t++){if(o[t]._paused||e.stop(o[t]._id),!e._webAudio){/MSIE |Trident\//.test(n._navigator&&n._navigator.userAgent)||(o[t]._node.src="data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA"),o[t]._node.removeEventListener("error",o[t]._errorFn,!1),o[t]._node.removeEventListener(n._canPlayEvent,o[t]._loadFn,!1),n._releaseHtml5Audio(o[t]._node)}delete o[t]._node,e._clearTimer(o[t]._id)}var a=n._howls.indexOf(e);a>=0&&n._howls.splice(a,1);var u=!0;for(t=0;t<n._howls.length;t++)if(n._howls[t]._src===e._src||e._src.indexOf(n._howls[t]._src)>=0){u=!1;break}return r&&u&&delete r[e._src],n.noAudio=!1,e._state="unloaded",e._sounds=[],e=null,null},on:function(e,n,o,t){var r=this,a=r["_on"+e];return"function"==typeof n&&a.push(t?{id:o,fn:n,once:t}:{id:o,fn:n}),r},off:function(e,n,o){var t=this,r=t["_on"+e],a=0;if("number"==typeof n&&(o=n,n=null),n||o)for(a=0;a<r.length;a++){var u=o===r[a].id;if(n===r[a].fn&&u||!n&&u){r.splice(a,1);break}}else if(e)t["_on"+e]=[];else{var i=Object.keys(t);for(a=0;a<i.length;a++)0===i[a].indexOf("_on")&&Array.isArray(t[i[a]])&&(t[i[a]]=[])}return t},once:function(e,n,o){var t=this;return t.on(e,n,o,1),t},_emit:function(e,n,o){for(var t=this,r=t["_on"+e],a=r.length-1;a>=0;a--)r[a].id&&r[a].id!==n&&"load"!==e||(setTimeout(function(e){e.call(this,n,o)}.bind(t,r[a].fn),0),r[a].once&&t.off(e,r[a].fn,r[a].id));return t._loadQueue(e),t},_loadQueue:function(e){var n=this;if(n._queue.length>0){var o=n._queue[0];o.event===e&&(n._queue.shift(),n._loadQueue()),e||o.action()}return n},_ended:function(e){var o=this,t=e._sprite;if(!o._webAudio&&e._node&&!e._node.paused&&!e._node.ended&&e._node.currentTime<e._stop)return setTimeout(o._ended.bind(o,e),100),o;var r=!(!e._loop&&!o._sprite[t][2]);if(o._emit("end",e._id),!o._webAudio&&r&&o.stop(e._id,!0).play(e._id),o._webAudio&&r){o._emit("play",e._id),e._seek=e._start||0,e._rateSeek=0,e._playStart=n.ctx.currentTime;var a=1e3*(e._stop-e._start)/Math.abs(e._rate);o._endTimers[e._id]=setTimeout(o._ended.bind(o,e),a)}return o._webAudio&&!r&&(e._paused=!0,e._ended=!0,e._seek=e._start||0,e._rateSeek=0,o._clearTimer(e._id),o._cleanBuffer(e._node),n._autoSuspend()),o._webAudio||r||o.stop(e._id,!0),o},_clearTimer:function(e){var n=this;if(n._endTimers[e]){if("function"!=typeof n._endTimers[e])clearTimeout(n._endTimers[e]);else{var o=n._soundById(e);o&&o._node&&o._node.removeEventListener("ended",n._endTimers[e],!1)}delete n._endTimers[e]}return n},_soundById:function(e){for(var n=this,o=0;o<n._sounds.length;o++)if(e===n._sounds[o]._id)return n._sounds[o];return null},_inactiveSound:function(){var e=this;e._drain();for(var n=0;n<e._sounds.length;n++)if(e._sounds[n]._ended)return e._sounds[n].reset();return new t(e)},_drain:function(){var e=this,n=e._pool,o=0,t=0;if(!(e._sounds.length<n)){for(t=0;t<e._sounds.length;t++)e._sounds[t]._ended&&o++;for(t=e._sounds.length-1;t>=0;t--){if(o<=n)return;e._sounds[t]._ended&&(e._webAudio&&e._sounds[t]._node&&e._sounds[t]._node.disconnect(0),e._sounds.splice(t,1),o--)}}},_getSoundIds:function(e){var n=this;if(void 0===e){for(var o=[],t=0;t<n._sounds.length;t++)o.push(n._sounds[t]._id);return o}return[e]},_refreshBuffer:function(e){var o=this;return e._node.bufferSource=n.ctx.createBufferSource(),e._node.bufferSource.buffer=r[o._src],e._panner?e._node.bufferSource.connect(e._panner):e._node.bufferSource.connect(e._node),e._node.bufferSource.loop=e._loop,e._loop&&(e._node.bufferSource.loopStart=e._start||0,e._node.bufferSource.loopEnd=e._stop||0),e._node.bufferSource.playbackRate.setValueAtTime(e._rate,n.ctx.currentTime),o},_cleanBuffer:function(e){var o=this,t=n._navigator&&n._navigator.vendor.indexOf("Apple")>=0;if(n._scratchBuffer&&e.bufferSource&&(e.bufferSource.onended=null,e.bufferSource.disconnect(0),t))try{e.bufferSource.buffer=n._scratchBuffer}catch(e){}return e.bufferSource=null,o}};var t=function(e){this._parent=e,this.init()};t.prototype={init:function(){var e=this,o=e._parent;return e._muted=o._muted,e._loop=o._loop,e._volume=o._volume,e._rate=o._rate,e._seek=0,e._paused=!0,e._ended=!0,e._sprite="__default",e._id=++n._counter,o._sounds.push(e),e.create(),e},create:function(){var e=this,o=e._parent,t=n._muted||e._muted||e._parent._muted?0:e._volume;return o._webAudio?(e._node=void 0===n.ctx.createGain?n.ctx.createGainNode():n.ctx.createGain(),e._node.gain.setValueAtTime(t,n.ctx.currentTime),e._node.paused=!0,e._node.connect(n.masterGain)):(e._node=n._obtainHtml5Audio(),e._errorFn=e._errorListener.bind(e),e._node.addEventListener("error",e._errorFn,!1),e._loadFn=e._loadListener.bind(e),e._node.addEventListener(n._canPlayEvent,e._loadFn,!1),e._node.src=o._src,e._node.preload="auto",e._node.volume=t*n.volume(),e._node.load()),e},reset:function(){var e=this,o=e._parent;return e._muted=o._muted,e._loop=o._loop,e._volume=o._volume,e._rate=o._rate,e._seek=0,e._rateSeek=0,e._paused=!0,e._ended=!0,e._sprite="__default",e._id=++n._counter,e},_errorListener:function(){var e=this;e._parent._emit("loaderror",e._id,e._node.error?e._node.error.code:0),e._node.removeEventListener("error",e._errorFn,!1)},_loadListener:function(){var e=this,o=e._parent;o._duration=Math.ceil(10*e._node.duration)/10,0===Object.keys(o._sprite).length&&(o._sprite={__default:[0,1e3*o._duration]}),"loaded"!==o._state&&(o._state="loaded",o._emit("load"),o._loadQueue()),e._node.removeEventListener(n._canPlayEvent,e._loadFn,!1)}};var r={},a=function(e){var n=e._src;if(r[n])return e._duration=r[n].duration,void d(e);if(/^data:[^;]+;base64,/.test(n)){for(var o=atob(n.split(",")[1]),t=new Uint8Array(o.length),a=0;a<o.length;++a)t[a]=o.charCodeAt(a);i(t.buffer,e)}else{var _=new XMLHttpRequest;_.open("GET",n,!0),_.withCredentials=e._xhrWithCredentials,_.responseType="arraybuffer",_.onload=function(){var n=(_.status+"")[0];if("0"!==n&&"2"!==n&&"3"!==n)return void e._emit("loaderror",null,"Failed loading audio file with status: "+_.status+".");i(_.response,e)},_.onerror=function(){e._webAudio&&(e._html5=!0,e._webAudio=!1,e._sounds=[],delete r[n],e.load())},u(_)}},u=function(e){try{e.send()}catch(n){e.onerror()}},i=function(e,o){var t=function(){o._emit("loaderror",null,"Decoding audio data failed.")},a=function(e){e&&o._sounds.length>0?(r[o._src]=e,d(o,e)):t()};"undefined"!=typeof Promise&&1===n.ctx.decodeAudioData.length?n.ctx.decodeAudioData(e).then(a).catch(t):n.ctx.decodeAudioData(e,a,t)},d=function(e,n){n&&!e._duration&&(e._duration=n.duration),0===Object.keys(e._sprite).length&&(e._sprite={__default:[0,1e3*e._duration]}),"loaded"!==e._state&&(e._state="loaded",e._emit("load"),e._loadQueue())},_=function(){if(n.usingWebAudio){try{"undefined"!=typeof AudioContext?n.ctx=new AudioContext:"undefined"!=typeof webkitAudioContext?n.ctx=new webkitAudioContext:n.usingWebAudio=!1}catch(e){n.usingWebAudio=!1}n.ctx||(n.usingWebAudio=!1);var e=/iP(hone|od|ad)/.test(n._navigator&&n._navigator.platform),o=n._navigator&&n._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/),t=o?parseInt(o[1],10):null;if(e&&t&&t<9){var r=/safari/.test(n._navigator&&n._navigator.userAgent.toLowerCase());(n._navigator&&n._navigator.standalone&&!r||n._navigator&&!n._navigator.standalone&&!r)&&(n.usingWebAudio=!1)}n.usingWebAudio&&(n.masterGain=void 0===n.ctx.createGain?n.ctx.createGainNode():n.ctx.createGain(),n.masterGain.gain.setValueAtTime(n._muted?0:1,n.ctx.currentTime),n.masterGain.connect(n.ctx.destination)),n._setup()}};"function"==typeof define&&define.amd&&define([],function(){return{Howler:n,Howl:o}}),"undefined"!=typeof exports&&(exports.Howler=n,exports.Howl=o),"undefined"!=typeof window?(window.HowlerGlobal=e,window.Howler=n,window.Howl=o,window.Sound=t):"undefined"!=typeof global&&(global.HowlerGlobal=e,global.Howler=n,global.Howl=o,global.Sound=t)}();
/*! Spatial Plugin */
!function(){"use strict";HowlerGlobal.prototype._pos=[0,0,0],HowlerGlobal.prototype._orientation=[0,0,-1,0,1,0],HowlerGlobal.prototype.stereo=function(e){var n=this;if(!n.ctx||!n.ctx.listener)return n;for(var t=n._howls.length-1;t>=0;t--)n._howls[t].stereo(e);return n},HowlerGlobal.prototype.pos=function(e,n,t){var r=this;return r.ctx&&r.ctx.listener?(n="number"!=typeof n?r._pos[1]:n,t="number"!=typeof t?r._pos[2]:t,"number"!=typeof e?r._pos:(r._pos=[e,n,t],void 0!==r.ctx.listener.positionX?(r.ctx.listener.positionX.setTargetAtTime(r._pos[0],Howler.ctx.currentTime,.1),r.ctx.listener.positionY.setTargetAtTime(r._pos[1],Howler.ctx.currentTime,.1),r.ctx.listener.positionZ.setTargetAtTime(r._pos[2],Howler.ctx.currentTime,.1)):r.ctx.listener.setPosition(r._pos[0],r._pos[1],r._pos[2]),r)):r},HowlerGlobal.prototype.orientation=function(e,n,t,r,o,i){var a=this;if(!a.ctx||!a.ctx.listener)return a;var s=a._orientation;return n="number"!=typeof n?s[1]:n,t="number"!=typeof t?s[2]:t,r="number"!=typeof r?s[3]:r,o="number"!=typeof o?s[4]:o,i="number"!=typeof i?s[5]:i,"number"!=typeof e?s:(a._orientation=[e,n,t,r,o,i],void 0!==a.ctx.listener.forwardX?(a.ctx.listener.forwardX.setTargetAtTime(e,Howler.ctx.currentTime,.1),a.ctx.listener.forwardY.setTargetAtTime(n,Howler.ctx.currentTime,.1),a.ctx.listener.forwardZ.setTargetAtTime(t,Howler.ctx.currentTime,.1),a.ctx.listener.upX.setTargetAtTime(e,Howler.ctx.currentTime,.1),a.ctx.listener.upY.setTargetAtTime(n,Howler.ctx.currentTime,.1),a.ctx.listener.upZ.setTargetAtTime(t,Howler.ctx.currentTime,.1)):a.ctx.listener.setOrientation(e,n,t,r,o,i),a)},Howl.prototype.init=function(e){return function(n){var t=this;return t._orientation=n.orientation||[1,0,0],t._stereo=n.stereo||null,t._pos=n.pos||null,t._pannerAttr={coneInnerAngle:void 0!==n.coneInnerAngle?n.coneInnerAngle:360,coneOuterAngle:void 0!==n.coneOuterAngle?n.coneOuterAngle:360,coneOuterGain:void 0!==n.coneOuterGain?n.coneOuterGain:0,distanceModel:void 0!==n.distanceModel?n.distanceModel:"inverse",maxDistance:void 0!==n.maxDistance?n.maxDistance:1e4,panningModel:void 0!==n.panningModel?n.panningModel:"HRTF",refDistance:void 0!==n.refDistance?n.refDistance:1,rolloffFactor:void 0!==n.rolloffFactor?n.rolloffFactor:1},t._onstereo=n.onstereo?[{fn:n.onstereo}]:[],t._onpos=n.onpos?[{fn:n.onpos}]:[],t._onorientation=n.onorientation?[{fn:n.onorientation}]:[],e.call(this,n)}}(Howl.prototype.init),Howl.prototype.stereo=function(n,t){var r=this;if(!r._webAudio)return r;if("loaded"!==r._state)return r._queue.push({event:"stereo",action:function(){r.stereo(n,t)}}),r;var o=void 0===Howler.ctx.createStereoPanner?"spatial":"stereo";if(void 0===t){if("number"!=typeof n)return r._stereo;r._stereo=n,r._pos=[n,0,0]}for(var i=r._getSoundIds(t),a=0;a<i.length;a++){var s=r._soundById(i[a]);if(s){if("number"!=typeof n)return s._stereo;s._stereo=n,s._pos=[n,0,0],s._node&&(s._pannerAttr.panningModel="equalpower",s._panner&&s._panner.pan||e(s,o),"spatial"===o?void 0!==s._panner.positionX?(s._panner.positionX.setValueAtTime(n,Howler.ctx.currentTime),s._panner.positionY.setValueAtTime(0,Howler.ctx.currentTime),s._panner.positionZ.setValueAtTime(0,Howler.ctx.currentTime)):s._panner.setPosition(n,0,0):s._panner.pan.setValueAtTime(n,Howler.ctx.currentTime)),r._emit("stereo",s._id)}}return r},Howl.prototype.pos=function(n,t,r,o){var i=this;if(!i._webAudio)return i;if("loaded"!==i._state)return i._queue.push({event:"pos",action:function(){i.pos(n,t,r,o)}}),i;if(t="number"!=typeof t?0:t,r="number"!=typeof r?-.5:r,void 0===o){if("number"!=typeof n)return i._pos;i._pos=[n,t,r]}for(var a=i._getSoundIds(o),s=0;s<a.length;s++){var p=i._soundById(a[s]);if(p){if("number"!=typeof n)return p._pos;p._pos=[n,t,r],p._node&&(p._panner&&!p._panner.pan||e(p,"spatial"),void 0!==p._panner.positionX?(p._panner.positionX.setValueAtTime(n,Howler.ctx.currentTime),p._panner.positionY.setValueAtTime(t,Howler.ctx.currentTime),p._panner.positionZ.setValueAtTime(r,Howler.ctx.currentTime)):p._panner.setPosition(n,t,r)),i._emit("pos",p._id)}}return i},Howl.prototype.orientation=function(n,t,r,o){var i=this;if(!i._webAudio)return i;if("loaded"!==i._state)return i._queue.push({event:"orientation",action:function(){i.orientation(n,t,r,o)}}),i;if(t="number"!=typeof t?i._orientation[1]:t,r="number"!=typeof r?i._orientation[2]:r,void 0===o){if("number"!=typeof n)return i._orientation;i._orientation=[n,t,r]}for(var a=i._getSoundIds(o),s=0;s<a.length;s++){var p=i._soundById(a[s]);if(p){if("number"!=typeof n)return p._orientation;p._orientation=[n,t,r],p._node&&(p._panner||(p._pos||(p._pos=i._pos||[0,0,-.5]),e(p,"spatial")),void 0!==p._panner.orientationX?(p._panner.orientationX.setValueAtTime(n,Howler.ctx.currentTime),p._panner.orientationY.setValueAtTime(t,Howler.ctx.currentTime),p._panner.orientationZ.setValueAtTime(r,Howler.ctx.currentTime)):p._panner.setOrientation(n,t,r)),i._emit("orientation",p._id)}}return i},Howl.prototype.pannerAttr=function(){var n,t,r,o=this,i=arguments;if(!o._webAudio)return o;if(0===i.length)return o._pannerAttr;if(1===i.length){if("object"!=typeof i[0])return r=o._soundById(parseInt(i[0],10)),r?r._pannerAttr:o._pannerAttr;n=i[0],void 0===t&&(n.pannerAttr||(n.pannerAttr={coneInnerAngle:n.coneInnerAngle,coneOuterAngle:n.coneOuterAngle,coneOuterGain:n.coneOuterGain,distanceModel:n.distanceModel,maxDistance:n.maxDistance,refDistance:n.refDistance,rolloffFactor:n.rolloffFactor,panningModel:n.panningModel}),o._pannerAttr={coneInnerAngle:void 0!==n.pannerAttr.coneInnerAngle?n.pannerAttr.coneInnerAngle:o._coneInnerAngle,coneOuterAngle:void 0!==n.pannerAttr.coneOuterAngle?n.pannerAttr.coneOuterAngle:o._coneOuterAngle,coneOuterGain:void 0!==n.pannerAttr.coneOuterGain?n.pannerAttr.coneOuterGain:o._coneOuterGain,distanceModel:void 0!==n.pannerAttr.distanceModel?n.pannerAttr.distanceModel:o._distanceModel,maxDistance:void 0!==n.pannerAttr.maxDistance?n.pannerAttr.maxDistance:o._maxDistance,refDistance:void 0!==n.pannerAttr.refDistance?n.pannerAttr.refDistance:o._refDistance,rolloffFactor:void 0!==n.pannerAttr.rolloffFactor?n.pannerAttr.rolloffFactor:o._rolloffFactor,panningModel:void 0!==n.pannerAttr.panningModel?n.pannerAttr.panningModel:o._panningModel})}else 2===i.length&&(n=i[0],t=parseInt(i[1],10));for(var a=o._getSoundIds(t),s=0;s<a.length;s++)if(r=o._soundById(a[s])){var p=r._pannerAttr;p={coneInnerAngle:void 0!==n.coneInnerAngle?n.coneInnerAngle:p.coneInnerAngle,coneOuterAngle:void 0!==n.coneOuterAngle?n.coneOuterAngle:p.coneOuterAngle,coneOuterGain:void 0!==n.coneOuterGain?n.coneOuterGain:p.coneOuterGain,distanceModel:void 0!==n.distanceModel?n.distanceModel:p.distanceModel,maxDistance:void 0!==n.maxDistance?n.maxDistance:p.maxDistance,refDistance:void 0!==n.refDistance?n.refDistance:p.refDistance,rolloffFactor:void 0!==n.rolloffFactor?n.rolloffFactor:p.rolloffFactor,panningModel:void 0!==n.panningModel?n.panningModel:p.panningModel};var c=r._panner;c?(c.coneInnerAngle=p.coneInnerAngle,c.coneOuterAngle=p.coneOuterAngle,c.coneOuterGain=p.coneOuterGain,c.distanceModel=p.distanceModel,c.maxDistance=p.maxDistance,c.refDistance=p.refDistance,c.rolloffFactor=p.rolloffFactor,c.panningModel=p.panningModel):(r._pos||(r._pos=o._pos||[0,0,-.5]),e(r,"spatial"))}return o},Sound.prototype.init=function(e){return function(){var n=this,t=n._parent;n._orientation=t._orientation,n._stereo=t._stereo,n._pos=t._pos,n._pannerAttr=t._pannerAttr,e.call(this),n._stereo?t.stereo(n._stereo):n._pos&&t.pos(n._pos[0],n._pos[1],n._pos[2],n._id)}}(Sound.prototype.init),Sound.prototype.reset=function(e){return function(){var n=this,t=n._parent;return n._orientation=t._orientation,n._stereo=t._stereo,n._pos=t._pos,n._pannerAttr=t._pannerAttr,n._stereo?t.stereo(n._stereo):n._pos?t.pos(n._pos[0],n._pos[1],n._pos[2],n._id):n._panner&&(n._panner.disconnect(0),n._panner=void 0,t._refreshBuffer(n)),e.call(this)}}(Sound.prototype.reset);var e=function(e,n){n=n||"spatial","spatial"===n?(e._panner=Howler.ctx.createPanner(),e._panner.coneInnerAngle=e._pannerAttr.coneInnerAngle,e._panner.coneOuterAngle=e._pannerAttr.coneOuterAngle,e._panner.coneOuterGain=e._pannerAttr.coneOuterGain,e._panner.distanceModel=e._pannerAttr.distanceModel,e._panner.maxDistance=e._pannerAttr.maxDistance,e._panner.refDistance=e._pannerAttr.refDistance,e._panner.rolloffFactor=e._pannerAttr.rolloffFactor,e._panner.panningModel=e._pannerAttr.panningModel,void 0!==e._panner.positionX?(e._panner.positionX.setValueAtTime(e._pos[0],Howler.ctx.currentTime),e._panner.positionY.setValueAtTime(e._pos[1],Howler.ctx.currentTime),e._panner.positionZ.setValueAtTime(e._pos[2],Howler.ctx.currentTime)):e._panner.setPosition(e._pos[0],e._pos[1],e._pos[2]),void 0!==e._panner.orientationX?(e._panner.orientationX.setValueAtTime(e._orientation[0],Howler.ctx.currentTime),e._panner.orientationY.setValueAtTime(e._orientation[1],Howler.ctx.currentTime),e._panner.orientationZ.setValueAtTime(e._orientation[2],Howler.ctx.currentTime)):e._panner.setOrientation(e._orientation[0],e._orientation[1],e._orientation[2])):(e._panner=Howler.ctx.createStereoPanner(),e._panner.pan.setValueAtTime(e._stereo,Howler.ctx.currentTime)),e._panner.connect(e._node),e._paused||e._parent.pause(e._id,!0).play(e._id,!0)}}();
/* pako 1.0.2 nodeca/pako */
!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e;e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,e.pako=t()}}(function(){return function t(e,a,i){function n(s,o){if(!a[s]){if(!e[s]){var l="function"==typeof require&&require;if(!o&&l)return l(s,!0);if(r)return r(s,!0);var h=new Error("Cannot find module '"+s+"'");throw h.code="MODULE_NOT_FOUND",h}var d=a[s]={exports:{}};e[s][0].call(d.exports,function(t){var a=e[s][1][t];return n(a?a:t)},d,d.exports,t,e,a,i)}return a[s].exports}for(var r="function"==typeof require&&require,s=0;s<i.length;s++)n(i[s]);return n}({1:[function(t,e,a){"use strict";function i(t){if(!(this instanceof i))return new i(t);this.options=l.assign({level:w,method:v,chunkSize:16384,windowBits:15,memLevel:8,strategy:p,to:""},t||{});var e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new f,this.strm.avail_out=0;var a=o.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(a!==b)throw new Error(d[a]);if(e.header&&o.deflateSetHeader(this.strm,e.header),e.dictionary){var n;if(n="string"==typeof e.dictionary?h.string2buf(e.dictionary):"[object ArrayBuffer]"===_.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,a=o.deflateSetDictionary(this.strm,n),a!==b)throw new Error(d[a]);this._dict_set=!0}}function n(t,e){var a=new i(e);if(a.push(t,!0),a.err)throw a.msg;return a.result}function r(t,e){return e=e||{},e.raw=!0,n(t,e)}function s(t,e){return e=e||{},e.gzip=!0,n(t,e)}var o=t("./zlib/deflate"),l=t("./utils/common"),h=t("./utils/strings"),d=t("./zlib/messages"),f=t("./zlib/zstream"),_=Object.prototype.toString,u=0,c=4,b=0,g=1,m=2,w=-1,p=0,v=8;i.prototype.push=function(t,e){var a,i,n=this.strm,r=this.options.chunkSize;if(this.ended)return!1;i=e===~~e?e:e===!0?c:u,"string"==typeof t?n.input=h.string2buf(t):"[object ArrayBuffer]"===_.call(t)?n.input=new Uint8Array(t):n.input=t,n.next_in=0,n.avail_in=n.input.length;do{if(0===n.avail_out&&(n.output=new l.Buf8(r),n.next_out=0,n.avail_out=r),a=o.deflate(n,i),a!==g&&a!==b)return this.onEnd(a),this.ended=!0,!1;0!==n.avail_out&&(0!==n.avail_in||i!==c&&i!==m)||("string"===this.options.to?this.onData(h.buf2binstring(l.shrinkBuf(n.output,n.next_out))):this.onData(l.shrinkBuf(n.output,n.next_out)))}while((n.avail_in>0||0===n.avail_out)&&a!==g);return i===c?(a=o.deflateEnd(this.strm),this.onEnd(a),this.ended=!0,a===b):i!==m||(this.onEnd(b),n.avail_out=0,!0)},i.prototype.onData=function(t){this.chunks.push(t)},i.prototype.onEnd=function(t){t===b&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=l.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},a.Deflate=i,a.deflate=n,a.deflateRaw=r,a.gzip=s},{"./utils/common":3,"./utils/strings":4,"./zlib/deflate":8,"./zlib/messages":13,"./zlib/zstream":15}],2:[function(t,e,a){"use strict";function i(t){if(!(this instanceof i))return new i(t);this.options=o.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0===(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new f,this.strm.avail_out=0;var a=s.inflateInit2(this.strm,e.windowBits);if(a!==h.Z_OK)throw new Error(d[a]);this.header=new _,s.inflateGetHeader(this.strm,this.header)}function n(t,e){var a=new i(e);if(a.push(t,!0),a.err)throw a.msg;return a.result}function r(t,e){return e=e||{},e.raw=!0,n(t,e)}var s=t("./zlib/inflate"),o=t("./utils/common"),l=t("./utils/strings"),h=t("./zlib/constants"),d=t("./zlib/messages"),f=t("./zlib/zstream"),_=t("./zlib/gzheader"),u=Object.prototype.toString;i.prototype.push=function(t,e){var a,i,n,r,d,f,_=this.strm,c=this.options.chunkSize,b=this.options.dictionary,g=!1;if(this.ended)return!1;i=e===~~e?e:e===!0?h.Z_FINISH:h.Z_NO_FLUSH,"string"==typeof t?_.input=l.binstring2buf(t):"[object ArrayBuffer]"===u.call(t)?_.input=new Uint8Array(t):_.input=t,_.next_in=0,_.avail_in=_.input.length;do{if(0===_.avail_out&&(_.output=new o.Buf8(c),_.next_out=0,_.avail_out=c),a=s.inflate(_,h.Z_NO_FLUSH),a===h.Z_NEED_DICT&&b&&(f="string"==typeof b?l.string2buf(b):"[object ArrayBuffer]"===u.call(b)?new Uint8Array(b):b,a=s.inflateSetDictionary(this.strm,f)),a===h.Z_BUF_ERROR&&g===!0&&(a=h.Z_OK,g=!1),a!==h.Z_STREAM_END&&a!==h.Z_OK)return this.onEnd(a),this.ended=!0,!1;_.next_out&&(0!==_.avail_out&&a!==h.Z_STREAM_END&&(0!==_.avail_in||i!==h.Z_FINISH&&i!==h.Z_SYNC_FLUSH)||("string"===this.options.to?(n=l.utf8border(_.output,_.next_out),r=_.next_out-n,d=l.buf2string(_.output,n),_.next_out=r,_.avail_out=c-r,r&&o.arraySet(_.output,_.output,n,r,0),this.onData(d)):this.onData(o.shrinkBuf(_.output,_.next_out)))),0===_.avail_in&&0===_.avail_out&&(g=!0)}while((_.avail_in>0||0===_.avail_out)&&a!==h.Z_STREAM_END);return a===h.Z_STREAM_END&&(i=h.Z_FINISH),i===h.Z_FINISH?(a=s.inflateEnd(this.strm),this.onEnd(a),this.ended=!0,a===h.Z_OK):i!==h.Z_SYNC_FLUSH||(this.onEnd(h.Z_OK),_.avail_out=0,!0)},i.prototype.onData=function(t){this.chunks.push(t)},i.prototype.onEnd=function(t){t===h.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},a.Inflate=i,a.inflate=n,a.inflateRaw=r,a.ungzip=n},{"./utils/common":3,"./utils/strings":4,"./zlib/constants":6,"./zlib/gzheader":9,"./zlib/inflate":11,"./zlib/messages":13,"./zlib/zstream":15}],3:[function(t,e,a){"use strict";var i="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;a.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var a=e.shift();if(a){if("object"!=typeof a)throw new TypeError(a+"must be non-object");for(var i in a)a.hasOwnProperty(i)&&(t[i]=a[i])}}return t},a.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var n={arraySet:function(t,e,a,i,n){if(e.subarray&&t.subarray)return void t.set(e.subarray(a,a+i),n);for(var r=0;r<i;r++)t[n+r]=e[a+r]},flattenChunks:function(t){var e,a,i,n,r,s;for(i=0,e=0,a=t.length;e<a;e++)i+=t[e].length;for(s=new Uint8Array(i),n=0,e=0,a=t.length;e<a;e++)r=t[e],s.set(r,n),n+=r.length;return s}},r={arraySet:function(t,e,a,i,n){for(var r=0;r<i;r++)t[n+r]=e[a+r]},flattenChunks:function(t){return[].concat.apply([],t)}};a.setTyped=function(t){t?(a.Buf8=Uint8Array,a.Buf16=Uint16Array,a.Buf32=Int32Array,a.assign(a,n)):(a.Buf8=Array,a.Buf16=Array,a.Buf32=Array,a.assign(a,r))},a.setTyped(i)},{}],4:[function(t,e,a){"use strict";function i(t,e){if(e<65537&&(t.subarray&&s||!t.subarray&&r))return String.fromCharCode.apply(null,n.shrinkBuf(t,e));for(var a="",i=0;i<e;i++)a+=String.fromCharCode(t[i]);return a}var n=t("./common"),r=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(t){r=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){s=!1}for(var o=new n.Buf8(256),l=0;l<256;l++)o[l]=l>=252?6:l>=248?5:l>=240?4:l>=224?3:l>=192?2:1;o[254]=o[254]=1,a.string2buf=function(t){var e,a,i,r,s,o=t.length,l=0;for(r=0;r<o;r++)a=t.charCodeAt(r),55296===(64512&a)&&r+1<o&&(i=t.charCodeAt(r+1),56320===(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),r++)),l+=a<128?1:a<2048?2:a<65536?3:4;for(e=new n.Buf8(l),s=0,r=0;s<l;r++)a=t.charCodeAt(r),55296===(64512&a)&&r+1<o&&(i=t.charCodeAt(r+1),56320===(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),r++)),a<128?e[s++]=a:a<2048?(e[s++]=192|a>>>6,e[s++]=128|63&a):a<65536?(e[s++]=224|a>>>12,e[s++]=128|a>>>6&63,e[s++]=128|63&a):(e[s++]=240|a>>>18,e[s++]=128|a>>>12&63,e[s++]=128|a>>>6&63,e[s++]=128|63&a);return e},a.buf2binstring=function(t){return i(t,t.length)},a.binstring2buf=function(t){for(var e=new n.Buf8(t.length),a=0,i=e.length;a<i;a++)e[a]=t.charCodeAt(a);return e},a.buf2string=function(t,e){var a,n,r,s,l=e||t.length,h=new Array(2*l);for(n=0,a=0;a<l;)if(r=t[a++],r<128)h[n++]=r;else if(s=o[r],s>4)h[n++]=65533,a+=s-1;else{for(r&=2===s?31:3===s?15:7;s>1&&a<l;)r=r<<6|63&t[a++],s--;s>1?h[n++]=65533:r<65536?h[n++]=r:(r-=65536,h[n++]=55296|r>>10&1023,h[n++]=56320|1023&r)}return i(h,n)},a.utf8border=function(t,e){var a;for(e=e||t.length,e>t.length&&(e=t.length),a=e-1;a>=0&&128===(192&t[a]);)a--;return a<0?e:0===a?e:a+o[t[a]]>e?a:e}},{"./common":3}],5:[function(t,e,a){"use strict";function i(t,e,a,i){for(var n=65535&t|0,r=t>>>16&65535|0,s=0;0!==a;){s=a>2e3?2e3:a,a-=s;do n=n+e[i++]|0,r=r+n|0;while(--s);n%=65521,r%=65521}return n|r<<16|0}e.exports=i},{}],6:[function(t,e,a){"use strict";e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],7:[function(t,e,a){"use strict";function i(){for(var t,e=[],a=0;a<256;a++){t=a;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[a]=t}return e}function n(t,e,a,i){var n=r,s=i+a;t^=-1;for(var o=i;o<s;o++)t=t>>>8^n[255&(t^e[o])];return t^-1}var r=i();e.exports=n},{}],8:[function(t,e,a){"use strict";function i(t,e){return t.msg=D[e],e}function n(t){return(t<<1)-(t>4?9:0)}function r(t){for(var e=t.length;--e>=0;)t[e]=0}function s(t){var e=t.state,a=e.pending;a>t.avail_out&&(a=t.avail_out),0!==a&&(R.arraySet(t.output,e.pending_buf,e.pending_out,a,t.next_out),t.next_out+=a,e.pending_out+=a,t.total_out+=a,t.avail_out-=a,e.pending-=a,0===e.pending&&(e.pending_out=0))}function o(t,e){C._tr_flush_block(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,s(t.strm)}function l(t,e){t.pending_buf[t.pending++]=e}function h(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function d(t,e,a,i){var n=t.avail_in;return n>i&&(n=i),0===n?0:(t.avail_in-=n,R.arraySet(e,t.input,t.next_in,n,a),1===t.state.wrap?t.adler=N(t.adler,e,n,a):2===t.state.wrap&&(t.adler=O(t.adler,e,n,a)),t.next_in+=n,t.total_in+=n,n)}function f(t,e){var a,i,n=t.max_chain_length,r=t.strstart,s=t.prev_length,o=t.nice_match,l=t.strstart>t.w_size-ft?t.strstart-(t.w_size-ft):0,h=t.window,d=t.w_mask,f=t.prev,_=t.strstart+dt,u=h[r+s-1],c=h[r+s];t.prev_length>=t.good_match&&(n>>=2),o>t.lookahead&&(o=t.lookahead);do if(a=e,h[a+s]===c&&h[a+s-1]===u&&h[a]===h[r]&&h[++a]===h[r+1]){r+=2,a++;do;while(h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&r<_);if(i=dt-(_-r),r=_-dt,i>s){if(t.match_start=e,s=i,i>=o)break;u=h[r+s-1],c=h[r+s]}}while((e=f[e&d])>l&&0!==--n);return s<=t.lookahead?s:t.lookahead}function _(t){var e,a,i,n,r,s=t.w_size;do{if(n=t.window_size-t.lookahead-t.strstart,t.strstart>=s+(s-ft)){R.arraySet(t.window,t.window,s,s,0),t.match_start-=s,t.strstart-=s,t.block_start-=s,a=t.hash_size,e=a;do i=t.head[--e],t.head[e]=i>=s?i-s:0;while(--a);a=s,e=a;do i=t.prev[--e],t.prev[e]=i>=s?i-s:0;while(--a);n+=s}if(0===t.strm.avail_in)break;if(a=d(t.strm,t.window,t.strstart+t.lookahead,n),t.lookahead+=a,t.lookahead+t.insert>=ht)for(r=t.strstart-t.insert,t.ins_h=t.window[r],t.ins_h=(t.ins_h<<t.hash_shift^t.window[r+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[r+ht-1])&t.hash_mask,t.prev[r&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=r,r++,t.insert--,!(t.lookahead+t.insert<ht)););}while(t.lookahead<ft&&0!==t.strm.avail_in)}function u(t,e){var a=65535;for(a>t.pending_buf_size-5&&(a=t.pending_buf_size-5);;){if(t.lookahead<=1){if(_(t),0===t.lookahead&&e===I)return vt;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var i=t.block_start+a;if((0===t.strstart||t.strstart>=i)&&(t.lookahead=t.strstart-i,t.strstart=i,o(t,!1),0===t.strm.avail_out))return vt;if(t.strstart-t.block_start>=t.w_size-ft&&(o(t,!1),0===t.strm.avail_out))return vt}return t.insert=0,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.strstart>t.block_start&&(o(t,!1),0===t.strm.avail_out)?vt:vt}function c(t,e){for(var a,i;;){if(t.lookahead<ft){if(_(t),t.lookahead<ft&&e===I)return vt;if(0===t.lookahead)break}if(a=0,t.lookahead>=ht&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ht-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==a&&t.strstart-a<=t.w_size-ft&&(t.match_length=f(t,a)),t.match_length>=ht)if(i=C._tr_tally(t,t.strstart-t.match_start,t.match_length-ht),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=ht){t.match_length--;do t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ht-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart;while(0!==--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else i=C._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(o(t,!1),0===t.strm.avail_out))return vt}return t.insert=t.strstart<ht-1?t.strstart:ht-1,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?vt:kt}function b(t,e){for(var a,i,n;;){if(t.lookahead<ft){if(_(t),t.lookahead<ft&&e===I)return vt;if(0===t.lookahead)break}if(a=0,t.lookahead>=ht&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ht-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=ht-1,0!==a&&t.prev_length<t.max_lazy_match&&t.strstart-a<=t.w_size-ft&&(t.match_length=f(t,a),t.match_length<=5&&(t.strategy===q||t.match_length===ht&&t.strstart-t.match_start>4096)&&(t.match_length=ht-1)),t.prev_length>=ht&&t.match_length<=t.prev_length){n=t.strstart+t.lookahead-ht,i=C._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-ht),t.lookahead-=t.prev_length-1,t.prev_length-=2;do++t.strstart<=n&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ht-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart);while(0!==--t.prev_length);if(t.match_available=0,t.match_length=ht-1,t.strstart++,i&&(o(t,!1),0===t.strm.avail_out))return vt}else if(t.match_available){if(i=C._tr_tally(t,0,t.window[t.strstart-1]),i&&o(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return vt}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=C._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<ht-1?t.strstart:ht-1,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?vt:kt}function g(t,e){for(var a,i,n,r,s=t.window;;){if(t.lookahead<=dt){if(_(t),t.lookahead<=dt&&e===I)return vt;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=ht&&t.strstart>0&&(n=t.strstart-1,i=s[n],i===s[++n]&&i===s[++n]&&i===s[++n])){r=t.strstart+dt;do;while(i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&n<r);t.match_length=dt-(r-n),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=ht?(a=C._tr_tally(t,1,t.match_length-ht),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(a=C._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),a&&(o(t,!1),0===t.strm.avail_out))return vt}return t.insert=0,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?vt:kt}function m(t,e){for(var a;;){if(0===t.lookahead&&(_(t),0===t.lookahead)){if(e===I)return vt;break}if(t.match_length=0,a=C._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,a&&(o(t,!1),0===t.strm.avail_out))return vt}return t.insert=0,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?vt:kt}function w(t,e,a,i,n){this.good_length=t,this.max_lazy=e,this.nice_length=a,this.max_chain=i,this.func=n}function p(t){t.window_size=2*t.w_size,r(t.head),t.max_lazy_match=Z[t.level].max_lazy,t.good_match=Z[t.level].good_length,t.nice_match=Z[t.level].nice_length,t.max_chain_length=Z[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=ht-1,t.match_available=0,t.ins_h=0}function v(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=V,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new R.Buf16(2*ot),this.dyn_dtree=new R.Buf16(2*(2*rt+1)),this.bl_tree=new R.Buf16(2*(2*st+1)),r(this.dyn_ltree),r(this.dyn_dtree),r(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new R.Buf16(lt+1),this.heap=new R.Buf16(2*nt+1),r(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new R.Buf16(2*nt+1),r(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function k(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=Q,e=t.state,e.pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?ut:wt,t.adler=2===e.wrap?0:1,e.last_flush=I,C._tr_init(e),H):i(t,K)}function y(t){var e=k(t);return e===H&&p(t.state),e}function x(t,e){return t&&t.state?2!==t.state.wrap?K:(t.state.gzhead=e,H):K}function z(t,e,a,n,r,s){if(!t)return K;var o=1;if(e===Y&&(e=6),n<0?(o=0,n=-n):n>15&&(o=2,n-=16),r<1||r>$||a!==V||n<8||n>15||e<0||e>9||s<0||s>W)return i(t,K);8===n&&(n=9);var l=new v;return t.state=l,l.strm=t,l.wrap=o,l.gzhead=null,l.w_bits=n,l.w_size=1<<l.w_bits,l.w_mask=l.w_size-1,l.hash_bits=r+7,l.hash_size=1<<l.hash_bits,l.hash_mask=l.hash_size-1,l.hash_shift=~~((l.hash_bits+ht-1)/ht),l.window=new R.Buf8(2*l.w_size),l.head=new R.Buf16(l.hash_size),l.prev=new R.Buf16(l.w_size),l.lit_bufsize=1<<r+6,l.pending_buf_size=4*l.lit_bufsize,l.pending_buf=new R.Buf8(l.pending_buf_size),l.d_buf=1*l.lit_bufsize,l.l_buf=3*l.lit_bufsize,l.level=e,l.strategy=s,l.method=a,y(t)}function B(t,e){return z(t,e,V,tt,et,J)}function S(t,e){var a,o,d,f;if(!t||!t.state||e>L||e<0)return t?i(t,K):K;if(o=t.state,!t.output||!t.input&&0!==t.avail_in||o.status===pt&&e!==F)return i(t,0===t.avail_out?P:K);if(o.strm=t,a=o.last_flush,o.last_flush=e,o.status===ut)if(2===o.wrap)t.adler=0,l(o,31),l(o,139),l(o,8),o.gzhead?(l(o,(o.gzhead.text?1:0)+(o.gzhead.hcrc?2:0)+(o.gzhead.extra?4:0)+(o.gzhead.name?8:0)+(o.gzhead.comment?16:0)),l(o,255&o.gzhead.time),l(o,o.gzhead.time>>8&255),l(o,o.gzhead.time>>16&255),l(o,o.gzhead.time>>24&255),l(o,9===o.level?2:o.strategy>=G||o.level<2?4:0),l(o,255&o.gzhead.os),o.gzhead.extra&&o.gzhead.extra.length&&(l(o,255&o.gzhead.extra.length),l(o,o.gzhead.extra.length>>8&255)),o.gzhead.hcrc&&(t.adler=O(t.adler,o.pending_buf,o.pending,0)),o.gzindex=0,o.status=ct):(l(o,0),l(o,0),l(o,0),l(o,0),l(o,0),l(o,9===o.level?2:o.strategy>=G||o.level<2?4:0),l(o,zt),o.status=wt);else{var _=V+(o.w_bits-8<<4)<<8,u=-1;u=o.strategy>=G||o.level<2?0:o.level<6?1:6===o.level?2:3,_|=u<<6,0!==o.strstart&&(_|=_t),_+=31-_%31,o.status=wt,h(o,_),0!==o.strstart&&(h(o,t.adler>>>16),h(o,65535&t.adler)),t.adler=1}if(o.status===ct)if(o.gzhead.extra){for(d=o.pending;o.gzindex<(65535&o.gzhead.extra.length)&&(o.pending!==o.pending_buf_size||(o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),s(t),d=o.pending,o.pending!==o.pending_buf_size));)l(o,255&o.gzhead.extra[o.gzindex]),o.gzindex++;o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),o.gzindex===o.gzhead.extra.length&&(o.gzindex=0,o.status=bt)}else o.status=bt;if(o.status===bt)if(o.gzhead.name){d=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),s(t),d=o.pending,o.pending===o.pending_buf_size)){f=1;break}f=o.gzindex<o.gzhead.name.length?255&o.gzhead.name.charCodeAt(o.gzindex++):0,l(o,f)}while(0!==f);o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),0===f&&(o.gzindex=0,o.status=gt)}else o.status=gt;if(o.status===gt)if(o.gzhead.comment){d=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),s(t),d=o.pending,o.pending===o.pending_buf_size)){f=1;break}f=o.gzindex<o.gzhead.comment.length?255&o.gzhead.comment.charCodeAt(o.gzindex++):0,l(o,f)}while(0!==f);o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),0===f&&(o.status=mt)}else o.status=mt;if(o.status===mt&&(o.gzhead.hcrc?(o.pending+2>o.pending_buf_size&&s(t),o.pending+2<=o.pending_buf_size&&(l(o,255&t.adler),l(o,t.adler>>8&255),t.adler=0,o.status=wt)):o.status=wt),0!==o.pending){if(s(t),0===t.avail_out)return o.last_flush=-1,H}else if(0===t.avail_in&&n(e)<=n(a)&&e!==F)return i(t,P);if(o.status===pt&&0!==t.avail_in)return i(t,P);if(0!==t.avail_in||0!==o.lookahead||e!==I&&o.status!==pt){var c=o.strategy===G?m(o,e):o.strategy===X?g(o,e):Z[o.level].func(o,e);if(c!==yt&&c!==xt||(o.status=pt),c===vt||c===yt)return 0===t.avail_out&&(o.last_flush=-1),H;if(c===kt&&(e===U?C._tr_align(o):e!==L&&(C._tr_stored_block(o,0,0,!1),e===T&&(r(o.head),0===o.lookahead&&(o.strstart=0,o.block_start=0,o.insert=0))),s(t),0===t.avail_out))return o.last_flush=-1,H}return e!==F?H:o.wrap<=0?j:(2===o.wrap?(l(o,255&t.adler),l(o,t.adler>>8&255),l(o,t.adler>>16&255),l(o,t.adler>>24&255),l(o,255&t.total_in),l(o,t.total_in>>8&255),l(o,t.total_in>>16&255),l(o,t.total_in>>24&255)):(h(o,t.adler>>>16),h(o,65535&t.adler)),s(t),o.wrap>0&&(o.wrap=-o.wrap),0!==o.pending?H:j)}function E(t){var e;return t&&t.state?(e=t.state.status,e!==ut&&e!==ct&&e!==bt&&e!==gt&&e!==mt&&e!==wt&&e!==pt?i(t,K):(t.state=null,e===wt?i(t,M):H)):K}function A(t,e){var a,i,n,s,o,l,h,d,f=e.length;if(!t||!t.state)return K;if(a=t.state,s=a.wrap,2===s||1===s&&a.status!==ut||a.lookahead)return K;for(1===s&&(t.adler=N(t.adler,e,f,0)),a.wrap=0,f>=a.w_size&&(0===s&&(r(a.head),a.strstart=0,a.block_start=0,a.insert=0),d=new R.Buf8(a.w_size),R.arraySet(d,e,f-a.w_size,a.w_size,0),e=d,f=a.w_size),o=t.avail_in,l=t.next_in,h=t.input,t.avail_in=f,t.next_in=0,t.input=e,_(a);a.lookahead>=ht;){i=a.strstart,n=a.lookahead-(ht-1);do a.ins_h=(a.ins_h<<a.hash_shift^a.window[i+ht-1])&a.hash_mask,a.prev[i&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=i,i++;while(--n);a.strstart=i,a.lookahead=ht-1,_(a)}return a.strstart+=a.lookahead,a.block_start=a.strstart,a.insert=a.lookahead,a.lookahead=0,a.match_length=a.prev_length=ht-1,a.match_available=0,t.next_in=l,t.input=h,t.avail_in=o,a.wrap=s,H}var Z,R=t("../utils/common"),C=t("./trees"),N=t("./adler32"),O=t("./crc32"),D=t("./messages"),I=0,U=1,T=3,F=4,L=5,H=0,j=1,K=-2,M=-3,P=-5,Y=-1,q=1,G=2,X=3,W=4,J=0,Q=2,V=8,$=9,tt=15,et=8,at=29,it=256,nt=it+1+at,rt=30,st=19,ot=2*nt+1,lt=15,ht=3,dt=258,ft=dt+ht+1,_t=32,ut=42,ct=69,bt=73,gt=91,mt=103,wt=113,pt=666,vt=1,kt=2,yt=3,xt=4,zt=3;Z=[new w(0,0,0,0,u),new w(4,4,8,4,c),new w(4,5,16,8,c),new w(4,6,32,32,c),new w(4,4,16,16,b),new w(8,16,32,32,b),new w(8,16,128,128,b),new w(8,32,128,256,b),new w(32,128,258,1024,b),new w(32,258,258,4096,b)],a.deflateInit=B,a.deflateInit2=z,a.deflateReset=y,a.deflateResetKeep=k,a.deflateSetHeader=x,a.deflate=S,a.deflateEnd=E,a.deflateSetDictionary=A,a.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":3,"./adler32":5,"./crc32":7,"./messages":13,"./trees":14}],9:[function(t,e,a){"use strict";function i(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}e.exports=i},{}],10:[function(t,e,a){"use strict";var i=30,n=12;e.exports=function(t,e){var a,r,s,o,l,h,d,f,_,u,c,b,g,m,w,p,v,k,y,x,z,B,S,E,A;a=t.state,r=t.next_in,E=t.input,s=r+(t.avail_in-5),o=t.next_out,A=t.output,l=o-(e-t.avail_out),h=o+(t.avail_out-257),d=a.dmax,f=a.wsize,_=a.whave,u=a.wnext,c=a.window,b=a.hold,g=a.bits,m=a.lencode,w=a.distcode,p=(1<<a.lenbits)-1,v=(1<<a.distbits)-1;t:do{g<15&&(b+=E[r++]<<g,g+=8,b+=E[r++]<<g,g+=8),k=m[b&p];e:for(;;){if(y=k>>>24,b>>>=y,g-=y,y=k>>>16&255,0===y)A[o++]=65535&k;else{if(!(16&y)){if(0===(64&y)){k=m[(65535&k)+(b&(1<<y)-1)];continue e}if(32&y){a.mode=n;break t}t.msg="invalid literal/length code",a.mode=i;break t}x=65535&k,y&=15,y&&(g<y&&(b+=E[r++]<<g,g+=8),x+=b&(1<<y)-1,b>>>=y,g-=y),g<15&&(b+=E[r++]<<g,g+=8,b+=E[r++]<<g,g+=8),k=w[b&v];a:for(;;){if(y=k>>>24,b>>>=y,g-=y,y=k>>>16&255,!(16&y)){if(0===(64&y)){k=w[(65535&k)+(b&(1<<y)-1)];continue a}t.msg="invalid distance code",a.mode=i;break t}if(z=65535&k,y&=15,g<y&&(b+=E[r++]<<g,g+=8,g<y&&(b+=E[r++]<<g,g+=8)),z+=b&(1<<y)-1,z>d){t.msg="invalid distance too far back",a.mode=i;break t}if(b>>>=y,g-=y,y=o-l,z>y){if(y=z-y,y>_&&a.sane){t.msg="invalid distance too far back",a.mode=i;break t}if(B=0,S=c,0===u){if(B+=f-y,y<x){x-=y;do A[o++]=c[B++];while(--y);B=o-z,S=A}}else if(u<y){if(B+=f+u-y,y-=u,y<x){x-=y;do A[o++]=c[B++];while(--y);if(B=0,u<x){y=u,x-=y;do A[o++]=c[B++];while(--y);B=o-z,S=A}}}else if(B+=u-y,y<x){x-=y;do A[o++]=c[B++];while(--y);B=o-z,S=A}for(;x>2;)A[o++]=S[B++],A[o++]=S[B++],A[o++]=S[B++],x-=3;x&&(A[o++]=S[B++],x>1&&(A[o++]=S[B++]))}else{B=o-z;do A[o++]=A[B++],A[o++]=A[B++],A[o++]=A[B++],x-=3;while(x>2);x&&(A[o++]=A[B++],x>1&&(A[o++]=A[B++]))}break}}break}}while(r<s&&o<h);x=g>>3,r-=x,g-=x<<3,b&=(1<<g)-1,t.next_in=r,t.next_out=o,t.avail_in=r<s?5+(s-r):5-(r-s),t.avail_out=o<h?257+(h-o):257-(o-h),a.hold=b,a.bits=g}},{}],11:[function(t,e,a){"use strict";function i(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function n(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new w.Buf16(320),this.work=new w.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function r(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=T,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new w.Buf32(bt),e.distcode=e.distdyn=new w.Buf32(gt),e.sane=1,e.back=-1,Z):N}function s(t){var e;return t&&t.state?(e=t.state,e.wsize=0,e.whave=0,e.wnext=0,r(t)):N}function o(t,e){var a,i;return t&&t.state?(i=t.state,e<0?(a=0,e=-e):(a=(e>>4)+1,e<48&&(e&=15)),e&&(e<8||e>15)?N:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=a,i.wbits=e,s(t))):N}function l(t,e){var a,i;return t?(i=new n,t.state=i,i.window=null,a=o(t,e),a!==Z&&(t.state=null),a):N}function h(t){return l(t,wt)}function d(t){if(pt){var e;for(g=new w.Buf32(512),m=new w.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(y(z,t.lens,0,288,g,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;y(B,t.lens,0,32,m,0,t.work,{bits:5}),pt=!1}t.lencode=g,t.lenbits=9,t.distcode=m,t.distbits=5}function f(t,e,a,i){var n,r=t.state;return null===r.window&&(r.wsize=1<<r.wbits,r.wnext=0,r.whave=0,r.window=new w.Buf8(r.wsize)),i>=r.wsize?(w.arraySet(r.window,e,a-r.wsize,r.wsize,0),r.wnext=0,r.whave=r.wsize):(n=r.wsize-r.wnext,n>i&&(n=i),w.arraySet(r.window,e,a-i,n,r.wnext),i-=n,i?(w.arraySet(r.window,e,a-i,i,0),r.wnext=i,r.whave=r.wsize):(r.wnext+=n,r.wnext===r.wsize&&(r.wnext=0),r.whave<r.wsize&&(r.whave+=n))),0}function _(t,e){var a,n,r,s,o,l,h,_,u,c,b,g,m,bt,gt,mt,wt,pt,vt,kt,yt,xt,zt,Bt,St=0,Et=new w.Buf8(4),At=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return N;a=t.state,a.mode===X&&(a.mode=W),o=t.next_out,r=t.output,h=t.avail_out,s=t.next_in,n=t.input,l=t.avail_in,_=a.hold,u=a.bits,c=l,b=h,xt=Z;t:for(;;)switch(a.mode){case T:if(0===a.wrap){a.mode=W;break}for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(2&a.wrap&&35615===_){a.check=0,Et[0]=255&_,Et[1]=_>>>8&255,a.check=v(a.check,Et,2,0),_=0,u=0,a.mode=F;break}if(a.flags=0,a.head&&(a.head.done=!1),!(1&a.wrap)||(((255&_)<<8)+(_>>8))%31){t.msg="incorrect header check",a.mode=_t;break}if((15&_)!==U){t.msg="unknown compression method",a.mode=_t;break}if(_>>>=4,u-=4,yt=(15&_)+8,0===a.wbits)a.wbits=yt;else if(yt>a.wbits){t.msg="invalid window size",a.mode=_t;break}a.dmax=1<<yt,t.adler=a.check=1,a.mode=512&_?q:X,_=0,u=0;break;case F:for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(a.flags=_,(255&a.flags)!==U){t.msg="unknown compression method",a.mode=_t;break}if(57344&a.flags){t.msg="unknown header flags set",a.mode=_t;break}a.head&&(a.head.text=_>>8&1),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,a.check=v(a.check,Et,2,0)),_=0,u=0,a.mode=L;case L:for(;u<32;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.head&&(a.head.time=_),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,Et[2]=_>>>16&255,Et[3]=_>>>24&255,a.check=v(a.check,Et,4,0)),_=0,u=0,a.mode=H;case H:for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.head&&(a.head.xflags=255&_,a.head.os=_>>8),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,a.check=v(a.check,Et,2,0)),_=0,u=0,a.mode=j;case j:if(1024&a.flags){for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.length=_,a.head&&(a.head.extra_len=_),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,a.check=v(a.check,Et,2,0)),_=0,u=0}else a.head&&(a.head.extra=null);a.mode=K;case K:if(1024&a.flags&&(g=a.length,g>l&&(g=l),g&&(a.head&&(yt=a.head.extra_len-a.length,a.head.extra||(a.head.extra=new Array(a.head.extra_len)),w.arraySet(a.head.extra,n,s,g,yt)),512&a.flags&&(a.check=v(a.check,n,g,s)),l-=g,s+=g,a.length-=g),a.length))break t;a.length=0,a.mode=M;case M:if(2048&a.flags){if(0===l)break t;g=0;do yt=n[s+g++],a.head&&yt&&a.length<65536&&(a.head.name+=String.fromCharCode(yt));while(yt&&g<l);if(512&a.flags&&(a.check=v(a.check,n,g,s)),l-=g,s+=g,yt)break t}else a.head&&(a.head.name=null);a.length=0,a.mode=P;case P:if(4096&a.flags){if(0===l)break t;g=0;do yt=n[s+g++],a.head&&yt&&a.length<65536&&(a.head.comment+=String.fromCharCode(yt));while(yt&&g<l);if(512&a.flags&&(a.check=v(a.check,n,g,s)),l-=g,s+=g,yt)break t}else a.head&&(a.head.comment=null);a.mode=Y;case Y:if(512&a.flags){for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(_!==(65535&a.check)){t.msg="header crc mismatch",a.mode=_t;break}_=0,u=0}a.head&&(a.head.hcrc=a.flags>>9&1,a.head.done=!0),t.adler=a.check=0,a.mode=X;break;case q:for(;u<32;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}t.adler=a.check=i(_),_=0,u=0,a.mode=G;case G:if(0===a.havedict)return t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=l,a.hold=_,a.bits=u,C;t.adler=a.check=1,a.mode=X;case X:if(e===E||e===A)break t;case W:if(a.last){_>>>=7&u,u-=7&u,a.mode=ht;break}for(;u<3;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}switch(a.last=1&_,_>>>=1,u-=1,3&_){case 0:a.mode=J;break;case 1:if(d(a),a.mode=at,e===A){_>>>=2,u-=2;break t}break;case 2:a.mode=$;break;case 3:t.msg="invalid block type",a.mode=_t}_>>>=2,u-=2;break;case J:for(_>>>=7&u,u-=7&u;u<32;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if((65535&_)!==(_>>>16^65535)){t.msg="invalid stored block lengths",a.mode=_t;break}if(a.length=65535&_,_=0,u=0,a.mode=Q,e===A)break t;case Q:a.mode=V;case V:if(g=a.length){if(g>l&&(g=l),g>h&&(g=h),0===g)break t;w.arraySet(r,n,s,g,o),l-=g,s+=g,h-=g,o+=g,a.length-=g;break}a.mode=X;break;case $:for(;u<14;){if(0===l)break t;
l--,_+=n[s++]<<u,u+=8}if(a.nlen=(31&_)+257,_>>>=5,u-=5,a.ndist=(31&_)+1,_>>>=5,u-=5,a.ncode=(15&_)+4,_>>>=4,u-=4,a.nlen>286||a.ndist>30){t.msg="too many length or distance symbols",a.mode=_t;break}a.have=0,a.mode=tt;case tt:for(;a.have<a.ncode;){for(;u<3;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.lens[At[a.have++]]=7&_,_>>>=3,u-=3}for(;a.have<19;)a.lens[At[a.have++]]=0;if(a.lencode=a.lendyn,a.lenbits=7,zt={bits:a.lenbits},xt=y(x,a.lens,0,19,a.lencode,0,a.work,zt),a.lenbits=zt.bits,xt){t.msg="invalid code lengths set",a.mode=_t;break}a.have=0,a.mode=et;case et:for(;a.have<a.nlen+a.ndist;){for(;St=a.lencode[_&(1<<a.lenbits)-1],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(wt<16)_>>>=gt,u-=gt,a.lens[a.have++]=wt;else{if(16===wt){for(Bt=gt+2;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(_>>>=gt,u-=gt,0===a.have){t.msg="invalid bit length repeat",a.mode=_t;break}yt=a.lens[a.have-1],g=3+(3&_),_>>>=2,u-=2}else if(17===wt){for(Bt=gt+3;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}_>>>=gt,u-=gt,yt=0,g=3+(7&_),_>>>=3,u-=3}else{for(Bt=gt+7;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}_>>>=gt,u-=gt,yt=0,g=11+(127&_),_>>>=7,u-=7}if(a.have+g>a.nlen+a.ndist){t.msg="invalid bit length repeat",a.mode=_t;break}for(;g--;)a.lens[a.have++]=yt}}if(a.mode===_t)break;if(0===a.lens[256]){t.msg="invalid code -- missing end-of-block",a.mode=_t;break}if(a.lenbits=9,zt={bits:a.lenbits},xt=y(z,a.lens,0,a.nlen,a.lencode,0,a.work,zt),a.lenbits=zt.bits,xt){t.msg="invalid literal/lengths set",a.mode=_t;break}if(a.distbits=6,a.distcode=a.distdyn,zt={bits:a.distbits},xt=y(B,a.lens,a.nlen,a.ndist,a.distcode,0,a.work,zt),a.distbits=zt.bits,xt){t.msg="invalid distances set",a.mode=_t;break}if(a.mode=at,e===A)break t;case at:a.mode=it;case it:if(l>=6&&h>=258){t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=l,a.hold=_,a.bits=u,k(t,b),o=t.next_out,r=t.output,h=t.avail_out,s=t.next_in,n=t.input,l=t.avail_in,_=a.hold,u=a.bits,a.mode===X&&(a.back=-1);break}for(a.back=0;St=a.lencode[_&(1<<a.lenbits)-1],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(mt&&0===(240&mt)){for(pt=gt,vt=mt,kt=wt;St=a.lencode[kt+((_&(1<<pt+vt)-1)>>pt)],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(pt+gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}_>>>=pt,u-=pt,a.back+=pt}if(_>>>=gt,u-=gt,a.back+=gt,a.length=wt,0===mt){a.mode=lt;break}if(32&mt){a.back=-1,a.mode=X;break}if(64&mt){t.msg="invalid literal/length code",a.mode=_t;break}a.extra=15&mt,a.mode=nt;case nt:if(a.extra){for(Bt=a.extra;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.length+=_&(1<<a.extra)-1,_>>>=a.extra,u-=a.extra,a.back+=a.extra}a.was=a.length,a.mode=rt;case rt:for(;St=a.distcode[_&(1<<a.distbits)-1],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(0===(240&mt)){for(pt=gt,vt=mt,kt=wt;St=a.distcode[kt+((_&(1<<pt+vt)-1)>>pt)],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(pt+gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}_>>>=pt,u-=pt,a.back+=pt}if(_>>>=gt,u-=gt,a.back+=gt,64&mt){t.msg="invalid distance code",a.mode=_t;break}a.offset=wt,a.extra=15&mt,a.mode=st;case st:if(a.extra){for(Bt=a.extra;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.offset+=_&(1<<a.extra)-1,_>>>=a.extra,u-=a.extra,a.back+=a.extra}if(a.offset>a.dmax){t.msg="invalid distance too far back",a.mode=_t;break}a.mode=ot;case ot:if(0===h)break t;if(g=b-h,a.offset>g){if(g=a.offset-g,g>a.whave&&a.sane){t.msg="invalid distance too far back",a.mode=_t;break}g>a.wnext?(g-=a.wnext,m=a.wsize-g):m=a.wnext-g,g>a.length&&(g=a.length),bt=a.window}else bt=r,m=o-a.offset,g=a.length;g>h&&(g=h),h-=g,a.length-=g;do r[o++]=bt[m++];while(--g);0===a.length&&(a.mode=it);break;case lt:if(0===h)break t;r[o++]=a.length,h--,a.mode=it;break;case ht:if(a.wrap){for(;u<32;){if(0===l)break t;l--,_|=n[s++]<<u,u+=8}if(b-=h,t.total_out+=b,a.total+=b,b&&(t.adler=a.check=a.flags?v(a.check,r,b,o-b):p(a.check,r,b,o-b)),b=h,(a.flags?_:i(_))!==a.check){t.msg="incorrect data check",a.mode=_t;break}_=0,u=0}a.mode=dt;case dt:if(a.wrap&&a.flags){for(;u<32;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(_!==(4294967295&a.total)){t.msg="incorrect length check",a.mode=_t;break}_=0,u=0}a.mode=ft;case ft:xt=R;break t;case _t:xt=O;break t;case ut:return D;case ct:default:return N}return t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=l,a.hold=_,a.bits=u,(a.wsize||b!==t.avail_out&&a.mode<_t&&(a.mode<ht||e!==S))&&f(t,t.output,t.next_out,b-t.avail_out)?(a.mode=ut,D):(c-=t.avail_in,b-=t.avail_out,t.total_in+=c,t.total_out+=b,a.total+=b,a.wrap&&b&&(t.adler=a.check=a.flags?v(a.check,r,b,t.next_out-b):p(a.check,r,b,t.next_out-b)),t.data_type=a.bits+(a.last?64:0)+(a.mode===X?128:0)+(a.mode===at||a.mode===Q?256:0),(0===c&&0===b||e===S)&&xt===Z&&(xt=I),xt)}function u(t){if(!t||!t.state)return N;var e=t.state;return e.window&&(e.window=null),t.state=null,Z}function c(t,e){var a;return t&&t.state?(a=t.state,0===(2&a.wrap)?N:(a.head=e,e.done=!1,Z)):N}function b(t,e){var a,i,n,r=e.length;return t&&t.state?(a=t.state,0!==a.wrap&&a.mode!==G?N:a.mode===G&&(i=1,i=p(i,e,r,0),i!==a.check)?O:(n=f(t,e,r,r))?(a.mode=ut,D):(a.havedict=1,Z)):N}var g,m,w=t("../utils/common"),p=t("./adler32"),v=t("./crc32"),k=t("./inffast"),y=t("./inftrees"),x=0,z=1,B=2,S=4,E=5,A=6,Z=0,R=1,C=2,N=-2,O=-3,D=-4,I=-5,U=8,T=1,F=2,L=3,H=4,j=5,K=6,M=7,P=8,Y=9,q=10,G=11,X=12,W=13,J=14,Q=15,V=16,$=17,tt=18,et=19,at=20,it=21,nt=22,rt=23,st=24,ot=25,lt=26,ht=27,dt=28,ft=29,_t=30,ut=31,ct=32,bt=852,gt=592,mt=15,wt=mt,pt=!0;a.inflateReset=s,a.inflateReset2=o,a.inflateResetKeep=r,a.inflateInit=h,a.inflateInit2=l,a.inflate=_,a.inflateEnd=u,a.inflateGetHeader=c,a.inflateSetDictionary=b,a.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":3,"./adler32":5,"./crc32":7,"./inffast":10,"./inftrees":12}],12:[function(t,e,a){"use strict";var i=t("../utils/common"),n=15,r=852,s=592,o=0,l=1,h=2,d=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],f=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],_=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],u=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(t,e,a,c,b,g,m,w){var p,v,k,y,x,z,B,S,E,A=w.bits,Z=0,R=0,C=0,N=0,O=0,D=0,I=0,U=0,T=0,F=0,L=null,H=0,j=new i.Buf16(n+1),K=new i.Buf16(n+1),M=null,P=0;for(Z=0;Z<=n;Z++)j[Z]=0;for(R=0;R<c;R++)j[e[a+R]]++;for(O=A,N=n;N>=1&&0===j[N];N--);if(O>N&&(O=N),0===N)return b[g++]=20971520,b[g++]=20971520,w.bits=1,0;for(C=1;C<N&&0===j[C];C++);for(O<C&&(O=C),U=1,Z=1;Z<=n;Z++)if(U<<=1,U-=j[Z],U<0)return-1;if(U>0&&(t===o||1!==N))return-1;for(K[1]=0,Z=1;Z<n;Z++)K[Z+1]=K[Z]+j[Z];for(R=0;R<c;R++)0!==e[a+R]&&(m[K[e[a+R]]++]=R);if(t===o?(L=M=m,z=19):t===l?(L=d,H-=257,M=f,P-=257,z=256):(L=_,M=u,z=-1),F=0,R=0,Z=C,x=g,D=O,I=0,k=-1,T=1<<O,y=T-1,t===l&&T>r||t===h&&T>s)return 1;for(var Y=0;;){Y++,B=Z-I,m[R]<z?(S=0,E=m[R]):m[R]>z?(S=M[P+m[R]],E=L[H+m[R]]):(S=96,E=0),p=1<<Z-I,v=1<<D,C=v;do v-=p,b[x+(F>>I)+v]=B<<24|S<<16|E|0;while(0!==v);for(p=1<<Z-1;F&p;)p>>=1;if(0!==p?(F&=p-1,F+=p):F=0,R++,0===--j[Z]){if(Z===N)break;Z=e[a+m[R]]}if(Z>O&&(F&y)!==k){for(0===I&&(I=O),x+=C,D=Z-I,U=1<<D;D+I<N&&(U-=j[D+I],!(U<=0));)D++,U<<=1;if(T+=1<<D,t===l&&T>r||t===h&&T>s)return 1;k=F&y,b[k]=O<<24|D<<16|x-g|0}}return 0!==F&&(b[x+F]=Z-I<<24|64<<16|0),w.bits=O,0}},{"../utils/common":3}],13:[function(t,e,a){"use strict";e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],14:[function(t,e,a){"use strict";function i(t){for(var e=t.length;--e>=0;)t[e]=0}function n(t,e,a,i,n){this.static_tree=t,this.extra_bits=e,this.extra_base=a,this.elems=i,this.max_length=n,this.has_stree=t&&t.length}function r(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function s(t){return t<256?lt[t]:lt[256+(t>>>7)]}function o(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function l(t,e,a){t.bi_valid>W-a?(t.bi_buf|=e<<t.bi_valid&65535,o(t,t.bi_buf),t.bi_buf=e>>W-t.bi_valid,t.bi_valid+=a-W):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=a)}function h(t,e,a){l(t,a[2*e],a[2*e+1])}function d(t,e){var a=0;do a|=1&t,t>>>=1,a<<=1;while(--e>0);return a>>>1}function f(t){16===t.bi_valid?(o(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}function _(t,e){var a,i,n,r,s,o,l=e.dyn_tree,h=e.max_code,d=e.stat_desc.static_tree,f=e.stat_desc.has_stree,_=e.stat_desc.extra_bits,u=e.stat_desc.extra_base,c=e.stat_desc.max_length,b=0;for(r=0;r<=X;r++)t.bl_count[r]=0;for(l[2*t.heap[t.heap_max]+1]=0,a=t.heap_max+1;a<G;a++)i=t.heap[a],r=l[2*l[2*i+1]+1]+1,r>c&&(r=c,b++),l[2*i+1]=r,i>h||(t.bl_count[r]++,s=0,i>=u&&(s=_[i-u]),o=l[2*i],t.opt_len+=o*(r+s),f&&(t.static_len+=o*(d[2*i+1]+s)));if(0!==b){do{for(r=c-1;0===t.bl_count[r];)r--;t.bl_count[r]--,t.bl_count[r+1]+=2,t.bl_count[c]--,b-=2}while(b>0);for(r=c;0!==r;r--)for(i=t.bl_count[r];0!==i;)n=t.heap[--a],n>h||(l[2*n+1]!==r&&(t.opt_len+=(r-l[2*n+1])*l[2*n],l[2*n+1]=r),i--)}}function u(t,e,a){var i,n,r=new Array(X+1),s=0;for(i=1;i<=X;i++)r[i]=s=s+a[i-1]<<1;for(n=0;n<=e;n++){var o=t[2*n+1];0!==o&&(t[2*n]=d(r[o]++,o))}}function c(){var t,e,a,i,r,s=new Array(X+1);for(a=0,i=0;i<K-1;i++)for(dt[i]=a,t=0;t<1<<et[i];t++)ht[a++]=i;for(ht[a-1]=i,r=0,i=0;i<16;i++)for(ft[i]=r,t=0;t<1<<at[i];t++)lt[r++]=i;for(r>>=7;i<Y;i++)for(ft[i]=r<<7,t=0;t<1<<at[i]-7;t++)lt[256+r++]=i;for(e=0;e<=X;e++)s[e]=0;for(t=0;t<=143;)st[2*t+1]=8,t++,s[8]++;for(;t<=255;)st[2*t+1]=9,t++,s[9]++;for(;t<=279;)st[2*t+1]=7,t++,s[7]++;for(;t<=287;)st[2*t+1]=8,t++,s[8]++;for(u(st,P+1,s),t=0;t<Y;t++)ot[2*t+1]=5,ot[2*t]=d(t,5);_t=new n(st,et,M+1,P,X),ut=new n(ot,at,0,Y,X),ct=new n(new Array(0),it,0,q,J)}function b(t){var e;for(e=0;e<P;e++)t.dyn_ltree[2*e]=0;for(e=0;e<Y;e++)t.dyn_dtree[2*e]=0;for(e=0;e<q;e++)t.bl_tree[2*e]=0;t.dyn_ltree[2*Q]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function g(t){t.bi_valid>8?o(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function m(t,e,a,i){g(t),i&&(o(t,a),o(t,~a)),N.arraySet(t.pending_buf,t.window,e,a,t.pending),t.pending+=a}function w(t,e,a,i){var n=2*e,r=2*a;return t[n]<t[r]||t[n]===t[r]&&i[e]<=i[a]}function p(t,e,a){for(var i=t.heap[a],n=a<<1;n<=t.heap_len&&(n<t.heap_len&&w(e,t.heap[n+1],t.heap[n],t.depth)&&n++,!w(e,i,t.heap[n],t.depth));)t.heap[a]=t.heap[n],a=n,n<<=1;t.heap[a]=i}function v(t,e,a){var i,n,r,o,d=0;if(0!==t.last_lit)do i=t.pending_buf[t.d_buf+2*d]<<8|t.pending_buf[t.d_buf+2*d+1],n=t.pending_buf[t.l_buf+d],d++,0===i?h(t,n,e):(r=ht[n],h(t,r+M+1,e),o=et[r],0!==o&&(n-=dt[r],l(t,n,o)),i--,r=s(i),h(t,r,a),o=at[r],0!==o&&(i-=ft[r],l(t,i,o)));while(d<t.last_lit);h(t,Q,e)}function k(t,e){var a,i,n,r=e.dyn_tree,s=e.stat_desc.static_tree,o=e.stat_desc.has_stree,l=e.stat_desc.elems,h=-1;for(t.heap_len=0,t.heap_max=G,a=0;a<l;a++)0!==r[2*a]?(t.heap[++t.heap_len]=h=a,t.depth[a]=0):r[2*a+1]=0;for(;t.heap_len<2;)n=t.heap[++t.heap_len]=h<2?++h:0,r[2*n]=1,t.depth[n]=0,t.opt_len--,o&&(t.static_len-=s[2*n+1]);for(e.max_code=h,a=t.heap_len>>1;a>=1;a--)p(t,r,a);n=l;do a=t.heap[1],t.heap[1]=t.heap[t.heap_len--],p(t,r,1),i=t.heap[1],t.heap[--t.heap_max]=a,t.heap[--t.heap_max]=i,r[2*n]=r[2*a]+r[2*i],t.depth[n]=(t.depth[a]>=t.depth[i]?t.depth[a]:t.depth[i])+1,r[2*a+1]=r[2*i+1]=n,t.heap[1]=n++,p(t,r,1);while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],_(t,e),u(r,h,t.bl_count)}function y(t,e,a){var i,n,r=-1,s=e[1],o=0,l=7,h=4;for(0===s&&(l=138,h=3),e[2*(a+1)+1]=65535,i=0;i<=a;i++)n=s,s=e[2*(i+1)+1],++o<l&&n===s||(o<h?t.bl_tree[2*n]+=o:0!==n?(n!==r&&t.bl_tree[2*n]++,t.bl_tree[2*V]++):o<=10?t.bl_tree[2*$]++:t.bl_tree[2*tt]++,o=0,r=n,0===s?(l=138,h=3):n===s?(l=6,h=3):(l=7,h=4))}function x(t,e,a){var i,n,r=-1,s=e[1],o=0,d=7,f=4;for(0===s&&(d=138,f=3),i=0;i<=a;i++)if(n=s,s=e[2*(i+1)+1],!(++o<d&&n===s)){if(o<f){do h(t,n,t.bl_tree);while(0!==--o)}else 0!==n?(n!==r&&(h(t,n,t.bl_tree),o--),h(t,V,t.bl_tree),l(t,o-3,2)):o<=10?(h(t,$,t.bl_tree),l(t,o-3,3)):(h(t,tt,t.bl_tree),l(t,o-11,7));o=0,r=n,0===s?(d=138,f=3):n===s?(d=6,f=3):(d=7,f=4)}}function z(t){var e;for(y(t,t.dyn_ltree,t.l_desc.max_code),y(t,t.dyn_dtree,t.d_desc.max_code),k(t,t.bl_desc),e=q-1;e>=3&&0===t.bl_tree[2*nt[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}function B(t,e,a,i){var n;for(l(t,e-257,5),l(t,a-1,5),l(t,i-4,4),n=0;n<i;n++)l(t,t.bl_tree[2*nt[n]+1],3);x(t,t.dyn_ltree,e-1),x(t,t.dyn_dtree,a-1)}function S(t){var e,a=4093624447;for(e=0;e<=31;e++,a>>>=1)if(1&a&&0!==t.dyn_ltree[2*e])return D;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return I;for(e=32;e<M;e++)if(0!==t.dyn_ltree[2*e])return I;return D}function E(t){bt||(c(),bt=!0),t.l_desc=new r(t.dyn_ltree,_t),t.d_desc=new r(t.dyn_dtree,ut),t.bl_desc=new r(t.bl_tree,ct),t.bi_buf=0,t.bi_valid=0,b(t)}function A(t,e,a,i){l(t,(T<<1)+(i?1:0),3),m(t,e,a,!0)}function Z(t){l(t,F<<1,3),h(t,Q,st),f(t)}function R(t,e,a,i){var n,r,s=0;t.level>0?(t.strm.data_type===U&&(t.strm.data_type=S(t)),k(t,t.l_desc),k(t,t.d_desc),s=z(t),n=t.opt_len+3+7>>>3,r=t.static_len+3+7>>>3,r<=n&&(n=r)):n=r=a+5,a+4<=n&&e!==-1?A(t,e,a,i):t.strategy===O||r===n?(l(t,(F<<1)+(i?1:0),3),v(t,st,ot)):(l(t,(L<<1)+(i?1:0),3),B(t,t.l_desc.max_code+1,t.d_desc.max_code+1,s+1),v(t,t.dyn_ltree,t.dyn_dtree)),b(t),i&&g(t)}function C(t,e,a){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&a,t.last_lit++,0===e?t.dyn_ltree[2*a]++:(t.matches++,e--,t.dyn_ltree[2*(ht[a]+M+1)]++,t.dyn_dtree[2*s(e)]++),t.last_lit===t.lit_bufsize-1}var N=t("../utils/common"),O=4,D=0,I=1,U=2,T=0,F=1,L=2,H=3,j=258,K=29,M=256,P=M+1+K,Y=30,q=19,G=2*P+1,X=15,W=16,J=7,Q=256,V=16,$=17,tt=18,et=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],at=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],it=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],nt=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],rt=512,st=new Array(2*(P+2));i(st);var ot=new Array(2*Y);i(ot);var lt=new Array(rt);i(lt);var ht=new Array(j-H+1);i(ht);var dt=new Array(K);i(dt);var ft=new Array(Y);i(ft);var _t,ut,ct,bt=!1;a._tr_init=E,a._tr_stored_block=A,a._tr_flush_block=R,a._tr_tally=C,a._tr_align=Z},{"../utils/common":3}],15:[function(t,e,a){"use strict";function i(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}e.exports=i},{}],"/":[function(t,e,a){"use strict";var i=t("./lib/utils/common").assign,n=t("./lib/deflate"),r=t("./lib/inflate"),s=t("./lib/zlib/constants"),o={};i(o,n,r,s),e.exports=o},{"./lib/deflate":1,"./lib/inflate":2,"./lib/utils/common":3,"./lib/zlib/constants":6}]},{},[])("/")});

/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */
var saveAs=saveAs||function(e){"use strict";if(typeof e==="undefined"||typeof navigator!=="undefined"&&/MSIE [1-9]\./.test(navigator.userAgent)){return}var t=e.document,n=function(){return e.URL||e.webkitURL||e},r=t.createElementNS("http://www.w3.org/1999/xhtml","a"),o="download"in r,a=function(e){var t=new MouseEvent("click");e.dispatchEvent(t)},i=/constructor/i.test(e.HTMLElement)||e.safari,f=/CriOS\/[\d]+/.test(navigator.userAgent),u=function(t){(e.setImmediate||e.setTimeout)(function(){throw t},0)},s="application/octet-stream",d=1e3*40,c=function(e){var t=function(){if(typeof e==="string"){n().revokeObjectURL(e)}else{e.remove()}};setTimeout(t,d)},l=function(e,t,n){t=[].concat(t);var r=t.length;while(r--){var o=e["on"+t[r]];if(typeof o==="function"){try{o.call(e,n||e)}catch(a){u(a)}}}},p=function(e){if(/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)){return new Blob([String.fromCharCode(65279),e],{type:e.type})}return e},v=function(t,u,d){if(!d){t=p(t)}var v=this,w=t.type,m=w===s,y,h=function(){l(v,"writestart progress write writeend".split(" "))},S=function(){if((f||m&&i)&&e.FileReader){var r=new FileReader;r.onloadend=function(){var t=f?r.result:r.result.replace(/^data:[^;]*;/,"data:attachment/file;");var n=e.open(t,"_blank");if(!n)e.location.href=t;t=undefined;v.readyState=v.DONE;h()};r.readAsDataURL(t);v.readyState=v.INIT;return}if(!y){y=n().createObjectURL(t)}if(m){e.location.href=y}else{var o=e.open(y,"_blank");if(!o){e.location.href=y}}v.readyState=v.DONE;h();c(y)};v.readyState=v.INIT;if(o){y=n().createObjectURL(t);setTimeout(function(){r.href=y;r.download=u;a(r);h();c(y);v.readyState=v.DONE});return}S()},w=v.prototype,m=function(e,t,n){return new v(e,t||e.name||"download",n)};if(typeof navigator!=="undefined"&&navigator.msSaveOrOpenBlob){return function(e,t,n){t=t||e.name||"download";if(!n){e=p(e)}return navigator.msSaveOrOpenBlob(e,t)}}w.abort=function(){};w.readyState=w.INIT=0;w.WRITING=1;w.DONE=2;w.error=w.onwritestart=w.onprogress=w.onwrite=w.onabort=w.onerror=w.onwriteend=null;return m}(typeof self!=="undefined"&&self||typeof window!=="undefined"&&window||this.content);if(typeof module!=="undefined"&&module.exports){module.exports.saveAs=saveAs}else if(typeof define!=="undefined"&&define!==null&&define.amd!==null){define("FileSaver.js",function(){return saveAs})}

if(typeof define == "function" && define.__amd) {
	define.amd = define.__amd;
	delete define.__amd;
}